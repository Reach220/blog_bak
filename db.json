{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"themes/stun/source/css/index.styl","path":"css/index.styl","modified":0,"renderable":1},{"_id":"themes/stun/source/images/algolia.svg","path":"images/algolia.svg","modified":0,"renderable":1},{"_id":"themes/stun/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/stun/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/stun/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/stun/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/stun/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/stun/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/stun/source/images/loading.svg","path":"images/loading.svg","modified":0,"renderable":1},{"_id":"themes/stun/source/js/header.js","path":"js/header.js","modified":0,"renderable":1},{"_id":"themes/stun/source/js/scroll.js","path":"js/scroll.js","modified":0,"renderable":1},{"_id":"themes/stun/source/js/sidebar.js","path":"js/sidebar.js","modified":0,"renderable":1},{"_id":"themes/stun/source/js/stun-boot.js","path":"js/stun-boot.js","modified":0,"renderable":1},{"_id":"themes/stun/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/stun/source/images/icons/favicon-16x16.png","path":"images/icons/favicon-16x16.png","modified":0,"renderable":1},{"_id":"themes/stun/source/images/icons/favicon-32x32.png","path":"images/icons/favicon-32x32.png","modified":0,"renderable":1},{"_id":"themes/stun/source/images/icons/stun-logo.svg","path":"images/icons/stun-logo.svg","modified":0,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"edb022ec1a9d1109d64af03d0aa34e3212f5b0f6","modified":1619830780504},{"_id":"source/_posts/Acwing786.md","hash":"4dda674a590fdffc646308484f8f2782e3cb0780","modified":1632318606429},{"_id":"source/_posts/PAT乙级1008.md","hash":"4be722403e582736e450186785df5ecd9104996d","modified":1619833698934},{"_id":"source/_posts/PAT乙级1014.md","hash":"3101620414397ddc586480c1b3acb0653a1ebd22","modified":1619833734318},{"_id":"source/_posts/PAT乙级1017.md","hash":"95a4217c6d83fa8f0792337711674688969ab6fb","modified":1620198070826},{"_id":"source/_posts/PAT乙级1005.md","hash":"95dc9b4f103d757b9372dfc916bcb8a416b10938","modified":1619833712507},{"_id":"source/_posts/PAT乙级1009.md","hash":"5c0301dd06a97db781b059d3632ad1aba92da6a2","modified":1620224182149},{"_id":"source/_posts/PAT乙级1018.md","hash":"c43a6e38e088084456dbf7a09c2ca0165e0db015","modified":1621319808798},{"_id":"source/_posts/PAT乙级1022.md","hash":"214905ceaffcd35629e55dfaeaca684b0b9acb25","modified":1620126183415},{"_id":"source/_posts/PAT乙级1019.md","hash":"302a67b60c4ba9e6e211f5c09a27abc2f18106e5","modified":1620046748066},{"_id":"source/_posts/PAT乙级1025.md","hash":"d5bf8bb99f17ce506c136ad587d908833d18be39","modified":1620458021975},{"_id":"source/_posts/PAT乙级1023.md","hash":"2034cb040dde4a1c7bed889b24c5186d60407570","modified":1620197847908},{"_id":"source/_posts/PAT乙级1027.md","hash":"441f6a5c2436abc9b8fbb553c62a164d6eff2283","modified":1620559227980},{"_id":"source/_posts/PAT乙级1010.md","hash":"c20b510cd229d5c4c8891c996803d896389c7361","modified":1619833722262},{"_id":"source/_posts/PAT乙级1029.md","hash":"0bbb11658493669627c83102ae6034eec837238d","modified":1620715144313},{"_id":"source/_posts/PAT乙级1031.md","hash":"ca6eb3baa3e131bacdb6f9777c38aeb85c41ec25","modified":1620978792783},{"_id":"source/_posts/PAT乙级1030.md","hash":"5513a49ce2a24765866510b32f276f17adf5015a","modified":1620825670018},{"_id":"source/_posts/PAT乙级1020.md","hash":"1b35795f6d668ed8ca2e80285343d48c883fe62c","modified":1620094213221},{"_id":"source/_posts/PAT乙级1033.md","hash":"47651a13d00459243c81230274a9f58f58491837","modified":1621083329527},{"_id":"source/_posts/PAT乙级1037.md","hash":"9c7ae091a29aa41c1830f5232a2676fa42db3fef","modified":1621319807144},{"_id":"source/_posts/PAT乙级1038.md","hash":"61c39390ce6c75442c23d16cab2c0fd5be773011","modified":1621413346818},{"_id":"source/_posts/PAT乙级1032.md","hash":"8c263a3f2a1a4e0b53e17076239178f819bad5cf","modified":1620980972270},{"_id":"source/_posts/PAT乙级1034.md","hash":"44c1e4318392bca6bf57cdcf6f96a1deb45785f8","modified":1621154249888},{"_id":"source/_posts/PAT乙级1039.md","hash":"047d04c5854238cbc5587bc3a7cce245d448952f","modified":1621421345582},{"_id":"source/_posts/PAT乙级1041.md","hash":"f6401a56a8e7ef5a587a62ef6208b9f44566ad12","modified":1621598703812},{"_id":"source/_posts/PAT乙级1026.md","hash":"67e57cf01669e1930efbe1f74e1cd95a94a33dc7","modified":1620552450503},{"_id":"source/_posts/PAT乙级1044.md","hash":"5c4675eda12b58345b1a94de55b9cda78c8fe8be","modified":1621866711273},{"_id":"source/_posts/PAT乙级1040.md","hash":"bc66f3542e4b317b92401a2cf6524b58099f7dba","modified":1621596577641},{"_id":"source/_posts/PAT乙级1047.md","hash":"3c452e95ae587ef740e18a42eab3abfb87bd8354","modified":1622176298634},{"_id":"source/_posts/PAT乙级1042.md","hash":"0ab3b7e193c9d485b265db1d05228fb571719359","modified":1621648680009},{"_id":"source/_posts/PAT甲级1002.md","hash":"3741bffbacf89005b63cce223a31539b4486a7c9","modified":1627825791273},{"_id":"source/_posts/pat乙级1028.md","hash":"b2bcaf70afd3eea820530632f858c5ce1bdf34a3","modified":1620651870939},{"_id":"source/_posts/PAT乙级1048.md","hash":"fc2db3d16f4f985a9e8fff8e5838aa5ab256fe61","modified":1622203440023},{"_id":"source/_posts/循环链表与双向链表.md","hash":"0868d2d6b530bfecbb6bafda0a1d2ca41f686eaf","modified":1636281803851},{"_id":"source/_posts/排序.md","hash":"03039252452b4f1748fa5186506b5c7f8ad79ce1","modified":1633331516232},{"_id":"source/_posts/PAT甲级1001.md","hash":"ba23243ba5157bbb7f9bacd70c213fe24df3dc11","modified":1622621139183},{"_id":"source/_posts/队列.md","hash":"27d9f0bee9d2defd26624537fe914985f5da2b17","modified":1622621132241},{"_id":"source/_posts/顺序表.md","hash":"74d53b15da1e9fb05d311bd36f8efdb11e385703","modified":1636281800374},{"_id":"source/categories/index-1.md","hash":"495c242217ef84381c6e7e85a5729da783dbba34","modified":1619574270673},{"_id":"source/categories/index.md","hash":"00501bb8e9240dadff4c7a248265fa293c7f7d2d","modified":1619833252879},{"_id":"source/tags/index-1.md","hash":"8998cb924fd84d9d1264c8086dafae28daa389a6","modified":1619574291830},{"_id":"source/tags/index.md","hash":"d91880885c299ddf655fcc8f968e5b540950692d","modified":1619833248724},{"_id":"source/_posts/单链表.md","hash":"0410ca74258eb20e43dc0212acfe7bfd0da12fa7","modified":1636281832072},{"_id":"source/_posts/PAT乙级1045.md","hash":"c457a4d9731b5c640ca6f291644e9d513bcbb4c7","modified":1622621104485},{"_id":"source/_posts/栈.md","hash":"64547b21d67bd0d19b04bbe121ce8387d1eda434","modified":1625454426828},{"_id":"themes/stun/.editorconfig","hash":"8a427ba0adde052cb562ee790bb6b80c270fa55a","modified":1619523240435},{"_id":"themes/stun/.eslintrc","hash":"eb9ab913dd95b3712f19b9b1f884f8fbceb6f72e","modified":1619523240435},{"_id":"themes/stun/.gitignore","hash":"6f961e080d4e0d167fc0459464d280d63e888195","modified":1619523240438},{"_id":"themes/stun/.prettierrc","hash":"a9a62bfb68859d94c9e8e153a6d6ab104c98dd60","modified":1619523240438},{"_id":"themes/stun/.commitlintrc.js","hash":"4d6f90e0c056abfd011315003b47debd7b352e4f","modified":1619523240435},{"_id":"themes/stun/.stylintrc","hash":"5d6395f53b8f451986358a4c0326c48bb5cd5dd2","modified":1619523240439},{"_id":"themes/stun/CHANGELOG.md","hash":"d14d98eeaba868bd363a35e9783a6a11a90ac259","modified":1619523240439},{"_id":"themes/stun/.cz-config.js","hash":"8b2799bd6d9c9069f5e8bad48a8b349344b9992f","modified":1619523240435},{"_id":"themes/stun/LICENSE","hash":"0758a784b2748505aaa2298c9d3af67a1a6563ba","modified":1619523240439},{"_id":"themes/stun/_config.yml","hash":"ee1e4631121aee5d9c22c1571a8545b0679234ec","modified":1619836614901},{"_id":"themes/stun/FAQ.md","hash":"8b6ea6b1dcfb80a8702eb730095f24de475f33da","modified":1619523240439},{"_id":"themes/stun/package.json","hash":"f286c08b2c5a82dd83d92b77082ddcdeb57c5038","modified":1619523240459},{"_id":"themes/stun/README.md","hash":"01fcb582da538f8055d7d93c750dbe9cc6c969ee","modified":1619523240440},{"_id":"themes/stun/languages/en.yml","hash":"12631f9f2a7f4a814ed8a11104fbe091273376f0","modified":1619523240440},{"_id":"themes/stun/languages/es.yml","hash":"22f563f9ba8075352c7c8f771aaadf10f5ff88df","modified":1619523240441},{"_id":"themes/stun/languages/zh-CN.yml","hash":"6a7b3d6b82dc8aca35fd2264f6ff7d10932f9c10","modified":1619834385140},{"_id":"themes/stun/languages/zh-HK.yml","hash":"a47aefed5c15c763aa356fd477f23092df1f3d80","modified":1619523240441},{"_id":"themes/stun/layout/_layout.pug","hash":"edad2be4a401e995d31b7f8cac9964f2a4b460b6","modified":1619523240441},{"_id":"themes/stun/layout/archive.pug","hash":"9aa9b30e43fa14dd01f55dcdc3ba379af1e884eb","modified":1619523240456},{"_id":"themes/stun/layout/category.pug","hash":"c849ba60901506bcc1b2e8293455f45f78a0a0ad","modified":1619523240456},{"_id":"themes/stun/layout/index.pug","hash":"03287304c2614d0d4d60bc5d55266695c3b8f527","modified":1619523240456},{"_id":"themes/stun/layout/page.pug","hash":"55a96c04aac274088f0641e5c8a778c2756889ac","modified":1619523240457},{"_id":"themes/stun/layout/post.pug","hash":"6a27bd2c14e2ef20e4ff29d12ba9a813727c74c7","modified":1619523240457},{"_id":"themes/stun/layout/tag.pug","hash":"f26d4de2523946fff7fcfd6c701adda3c004c70e","modified":1619523240457},{"_id":"themes/stun/scripts/engine.js","hash":"41250b58e354d0500e2fffe9ad0ff9c99f534b50","modified":1619523240460},{"_id":"themes/stun/scripts/merge-config.js","hash":"65dabee746834b112b2a496c9c7d4a90e6ed4970","modified":1619523240461},{"_id":"themes/stun/README_en-US.md","hash":"3c91201d354b1ef6fbd13b64ec6f07abc83d4099","modified":1619523240440},{"_id":"themes/stun/.github/ISSUE_TEMPLATE/bug-report_en.md","hash":"c81aa8866f9d67d59af4174c79c11bc25b1dce66","modified":1619523240436},{"_id":"themes/stun/.github/ISSUE_TEMPLATE/feature-request_en.md","hash":"597b8ae27ce734681a898cdfc66182deba91fcee","modified":1619523240436},{"_id":"themes/stun/.github/ISSUE_TEMPLATE/feature-request_zh.md","hash":"662943353c4488450ed7ab164cdc9bd161ca1d80","modified":1619523240436},{"_id":"themes/stun/.github/ISSUE_TEMPLATE/other_en.md","hash":"20cd29abeefe18be3a374c78e63d69570fc1f5cd","modified":1619523240437},{"_id":"themes/stun/.github/ISSUE_TEMPLATE/other_zh.md","hash":"90555989a81d8c16760779c450656bd73e989f0a","modified":1619523240437},{"_id":"themes/stun/.github/FUNDING.yml","hash":"707c2ecd695c49e608916bf8c969241622404187","modified":1619523240436},{"_id":"themes/stun/.github/workflows/codeql-analysis.yml","hash":"6f6b55946dda82dc41f24af837dc4e1d47f436bf","modified":1619523240438},{"_id":"themes/stun/layout/_mixins/gallery.pug","hash":"fdb9f7ecdecba26ccafb295063990807a66f3813","modified":1619523240442},{"_id":"themes/stun/layout/_mixins/menu-item.pug","hash":"4a76652315e5ea734ca8eef4f87a1fce91d032ab","modified":1619523240442},{"_id":"themes/stun/layout/_mixins/meta-item.pug","hash":"333ad56f6fa8e93d27ae3b09ffc62269c82bca70","modified":1619523240442},{"_id":"themes/stun/layout/_mixins/post-header.pug","hash":"8c32cdbe8d5d8799d2e53bb8bd9a3fea6d060a6b","modified":1619523240442},{"_id":"themes/stun/layout/_mixins/timeline.pug","hash":"0108c63e79bf71b9744db1ffb749adc143a9c9bb","modified":1619523240442},{"_id":"themes/stun/layout/_partials/config.pug","hash":"b7b5cc6740c6d4c2d4e97a68dd94e5f514c6adc6","modified":1619523240443},{"_id":"themes/stun/.github/workflows/files-shaking.yml","hash":"a417f17f752c4be06b29b01cb3dc4c7cdfd2aea1","modified":1619523240438},{"_id":"themes/stun/layout/_scripts/stun.pug","hash":"b20216a1fe3c72f9b57119c25a9952ae8ab8f605","modified":1619523240449},{"_id":"themes/stun/layout/_third-party/pjax.pug","hash":"9d31399baa47d599e3bd0f451004b256b6cc4254","modified":1619523240453},{"_id":"themes/stun/layout/_scripts/vendors.pug","hash":"782bdc337a76614f3291ff159cb669e322380065","modified":1619523240449},{"_id":"themes/stun/layout/_third-party/quicklink.pug","hash":"edf08485d02f8f9efe902704bfabb34bb78ecd32","modified":1619523240454},{"_id":"themes/stun/scripts/filters/external-link.js","hash":"3863dc2fb671c8520d8632185fb255159ec8ab47","modified":1619523240460},{"_id":"themes/stun/scripts/filters/image-setting.js","hash":"4434cb64de9bcc7f51427855ca3d49334ba19ae5","modified":1619523240460},{"_id":"themes/stun/scripts/filters/lazyload.js","hash":"125b93da90c302b7cb21f5e58824ace5034ec496","modified":1619523240460},{"_id":"themes/stun/scripts/filters/post-heading.js","hash":"c4fb7d225c095c7de0ab9fa51eaf8bac5f06ed4b","modified":1619523240461},{"_id":"themes/stun/scripts/filters/shake-file.js","hash":"b4fb3713f126b4970521ebdc71828d7b4f048322","modified":1619523240461},{"_id":"themes/stun/scripts/filters/wrap-table.js","hash":"fcd26a87a024f719d0b3920a3e1734b04ef52c1b","modified":1619523240461},{"_id":"themes/stun/scripts/tags/friends.js","hash":"8a5a38437d621845f1f9749d558d457360ccfc35","modified":1619523240461},{"_id":"themes/stun/scripts/tags/note.js","hash":"fb45de53daa8bd4b2dc910ae082ee9ccf15b20d4","modified":1619523240462},{"_id":"themes/stun/scripts/tags/table.js","hash":"33120450cf9be28c9167417ea2ab8dc9bf8fc68c","modified":1619523240462},{"_id":"themes/stun/source/css/index.styl","hash":"7abf7869aabb5f726093f4981b7a58ae2536d854","modified":1619523240477},{"_id":"themes/stun/.github/ISSUE_TEMPLATE/bug-report_zh.md","hash":"4f67fa27c6f0b149680abfe57f448851b9139ea8","modified":1619523240436},{"_id":"themes/stun/source/images/algolia.svg","hash":"90322f80db6ad0daf26ea3ec71dea6f691a8b2f1","modified":1619523240477},{"_id":"themes/stun/source/images/cc-by-nc-nd.svg","hash":"017ad912874686a982ebceae359299b8f2a492e2","modified":1619523240477},{"_id":"themes/stun/source/images/cc-by-nc.svg","hash":"4608189edbe7636dd651df65473298a3c5afb20d","modified":1619523240478},{"_id":"themes/stun/source/images/cc-by-nd.svg","hash":"20c66ae3c393903e6eab3bc8cf7c3be6d753f9f8","modified":1619523240478},{"_id":"themes/stun/source/images/cc-by-nc-sa.svg","hash":"71d035c34219f924dbf1bf852166ee8fb58d2f24","modified":1619523240477},{"_id":"themes/stun/source/images/cc-by-sa.svg","hash":"0455a8857ba096925d4145a56e8d10537fccb378","modified":1619523240478},{"_id":"themes/stun/source/images/loading.svg","hash":"32a6e770d217ae6c0cf0f6beef3172f1b5b9a0a2","modified":1619523240480},{"_id":"themes/stun/source/images/cc-by.svg","hash":"77f74c241902447424207869c74cb9d9264bdced","modified":1619523240479},{"_id":"themes/stun/source/js/scroll.js","hash":"7b0342d95f7fe21e57b3ba093870f7b0bf7821a2","modified":1619523240480},{"_id":"themes/stun/source/js/header.js","hash":"efc852fd053ae6c8163f575cefc8c0a68bbf63e6","modified":1619523240480},{"_id":"themes/stun/layout/_partials/analytics/busuanzi.pug","hash":"df7a5a7b0b59da113ad8d702b42ce5da438cdae4","modified":1619523240443},{"_id":"themes/stun/layout/_partials/footer/footer.pug","hash":"f1ebea686f66165294643a03252650118a09c496","modified":1619523240443},{"_id":"themes/stun/layout/_partials/head/head.pug","hash":"98a1916db8df36f5174fc4bcdc36370a16138df9","modified":1619523240444},{"_id":"themes/stun/layout/_partials/head/kill-old-ie.pug","hash":"cd384f25aba5beb774b8a010619c342c3ebfe596","modified":1619523240444},{"_id":"themes/stun/layout/_partials/header/header.pug","hash":"381afbb33e25171521eddb162ab4cbc11d76d98f","modified":1619523240444},{"_id":"themes/stun/layout/_partials/post/post-list.pug","hash":"258a97d25c610b2b17018951dece5f23f570cfa0","modified":1619523240444},{"_id":"themes/stun/layout/_partials/search/algolia.pug","hash":"7da35d4ec40dcbfb9925ad592ec8f91239d905d1","modified":1619523240446},{"_id":"themes/stun/layout/_partials/search/assist-btns.pug","hash":"549a139a4deda9989527d20cf8da330cef8cb21a","modified":1619523240446},{"_id":"themes/stun/layout/_partials/search/index.pug","hash":"178d6eee822776ad80e384442b60fd9a68d35f28","modified":1619523240446},{"_id":"themes/stun/layout/_partials/search/localsearch.pug","hash":"85a07868967a98a4223ab41bd804ac8237ce326d","modified":1619523240446},{"_id":"themes/stun/layout/_partials/sidebar/sidebar.pug","hash":"871888f51bef0988b4e4a27d857689684e67f0ea","modified":1619523240447},{"_id":"themes/stun/layout/_partials/widgets/back2top.pug","hash":"07fc07a80bde44ebc6684e921c4c1a4f7787733e","modified":1619523240447},{"_id":"themes/stun/layout/_partials/widgets/comments.pug","hash":"5ce95f71c91f4be3400c800e5dc31a820257367b","modified":1619523240447},{"_id":"themes/stun/layout/_partials/widgets/copyright.pug","hash":"273998efc25fadd7a819b055dd0414b687885827","modified":1619523240447},{"_id":"themes/stun/layout/_partials/widgets/loading-bar.pug","hash":"1acace606b1348eaf7a4a32b97d85a717dbe93b8","modified":1619523240447},{"_id":"themes/stun/layout/_partials/widgets/night-mode.pug","hash":"3a6175601ada6ba2ca146607571456414de965c8","modified":1619523240447},{"_id":"themes/stun/layout/_partials/widgets/paginator.pug","hash":"4d6fef24e8cf30ac12928b4ce34e9e6caff16f9c","modified":1619523240448},{"_id":"themes/stun/layout/_partials/widgets/reward.pug","hash":"ffae863a4d9397f9e28790a747221b7dad6b5745","modified":1619523240449},{"_id":"themes/stun/layout/_partials/widgets/share.pug","hash":"77d2ded368e6c98f43d5a69f8fb286cdd601eb1f","modified":1619523240449},{"_id":"themes/stun/layout/_partials/widgets/sticky-top.pug","hash":"fc3d256854f27b5b6f2adc107957a23f743a4f21","modified":1619523240449},{"_id":"themes/stun/layout/_third-party/advertising/google-adsense.pug","hash":"0da6d167bf79105ae1575a2ee27f6053ce6a30da","modified":1619523240449},{"_id":"themes/stun/layout/_third-party/advertising/index.pug","hash":"889ca81727a656b0a36d9f736f2b1aabc59e3491","modified":1619523240449},{"_id":"themes/stun/layout/_third-party/analytics/baidu-analytics.pug","hash":"249c8464277d6fdb7941076cea476666c25fffa5","modified":1619523240450},{"_id":"themes/stun/layout/_third-party/analytics/busuanzi.pug","hash":"c95cdb7b9014ac25f1cdf8dffb2ec1451d431bf4","modified":1619523240450},{"_id":"themes/stun/layout/_third-party/analytics/google-analytics.pug","hash":"7820dfaf4eb1a80d12d40a9b1ee58e729d8fbbce","modified":1619523240450},{"_id":"themes/stun/layout/_third-party/analytics/index.pug","hash":"a34dbd7748a05ab1627dede1841a95c6214e835f","modified":1619523240450},{"_id":"themes/stun/layout/_third-party/analytics/tencent-analytics.pug","hash":"13cac8031f634df7eaf5835eaf5157032984efdc","modified":1619523240450},{"_id":"themes/stun/layout/_third-party/comments/disqus.pug","hash":"35196069417c027eb3c9c27dd22b1d09aa28ce4f","modified":1619523240451},{"_id":"themes/stun/layout/_third-party/comments/fbcomments.pug","hash":"d8abecfa3a205591d763f24491e9b643c156615c","modified":1619523240451},{"_id":"themes/stun/layout/_third-party/comments/gitalk.pug","hash":"3fdb845f2f62533062c04a67925ebd9926f1b177","modified":1619523240451},{"_id":"themes/stun/layout/_third-party/comments/index.pug","hash":"0ff0832063ea7e630d30bf4ec051f5736f348022","modified":1619523240451},{"_id":"themes/stun/layout/_third-party/comments/livere.pug","hash":"772519ebddb05400e6099d51727f5e3f3f07df36","modified":1619523240451},{"_id":"themes/stun/layout/_third-party/comments/minivaline.pug","hash":"44b700fda7b498da9f255cc0a6b25f98b2b263fa","modified":1619523240451},{"_id":"themes/stun/layout/_third-party/comments/utterances.pug","hash":"753808a22eff7dca5b34aaab08d4debca583fdee","modified":1619523240453},{"_id":"themes/stun/layout/_third-party/comments/valine.pug","hash":"439cbadd7b87862d552d47083a4a4c367f7e5f9f","modified":1619523240453},{"_id":"themes/stun/layout/_third-party/comments/waline.pug","hash":"88a3cf35036e94cf988ee4f0321e9d794fe2e429","modified":1619523240453},{"_id":"themes/stun/layout/_third-party/math/index.pug","hash":"217d4fe3a03bf85c432bb0ef5d66c3ec646bf85b","modified":1619523240453},{"_id":"themes/stun/layout/_third-party/math/katex.pug","hash":"9ba568a9899d21706ea8842291c7b6c9cb1ca169","modified":1619523240453},{"_id":"themes/stun/layout/_third-party/math/mathjax.pug","hash":"3447a97c4d5711251555c18068e88dd11b6d720f","modified":1619523240453},{"_id":"themes/stun/layout/_third-party/search/algolia.pug","hash":"102bdcd972f74a53976427636506a639b48138c0","modified":1619523240455},{"_id":"themes/stun/layout/_third-party/search/index.pug","hash":"178d6eee822776ad80e384442b60fd9a68d35f28","modified":1619523240455},{"_id":"themes/stun/layout/_third-party/search/localsearch.pug","hash":"c7df8230de3c127bb680239bafcc76950b6e5504","modified":1619523240455},{"_id":"themes/stun/source/css/_common/index.styl","hash":"016426a8b8363393b5b7a77ad23482b3baa46736","modified":1619523240473},{"_id":"themes/stun/source/js/sidebar.js","hash":"81d1b9313afcb75d4991d0f79a8bcbda49aa8129","modified":1619523240480},{"_id":"themes/stun/source/css/_custom/index.styl","hash":"aba3f8f2dec84b604985093cd65bf43770076cea","modified":1619523240476},{"_id":"themes/stun/source/css/_mixins/index.styl","hash":"4d0757a1565936ca5ad9eed49c35c001a96af273","modified":1619523240476},{"_id":"themes/stun/source/js/utils.js","hash":"df9066589273219d78353291f6db0d0be101b63b","modified":1619523240481},{"_id":"themes/stun/source/images/icons/favicon-16x16.png","hash":"7bfd64eac26e17ea162f0c399a4a40164c26b412","modified":1619523240479},{"_id":"themes/stun/source/images/icons/favicon-32x32.png","hash":"02fead07726920400ede57ddfdbf071dd7203fd5","modified":1619523240479},{"_id":"themes/stun/source/images/icons/stun-logo.svg","hash":"069dc7590ad152373f1c346d892e32faa2bbdd87","modified":1619523240479},{"_id":"themes/stun/source/css/_common/components/index.styl","hash":"36cbf4c963972dde6680f21064b3d69fd36828c3","modified":1619523240465},{"_id":"themes/stun/source/css/_common/outline/index.styl","hash":"34cd9f24602550fb5172cf5cf61f1466e96b3037","modified":1619523240474},{"_id":"themes/stun/source/js/stun-boot.js","hash":"fb2737d595f4be58e3a4fc136c94b306942bae87","modified":1619523240481},{"_id":"themes/stun/source/css/_common/scaffolding/base.styl","hash":"e8003f897e0ee5cd886df4402c0c28cd27d80a73","modified":1619523240475},{"_id":"themes/stun/source/css/_common/outline/macro.styl","hash":"eadd5a0c5d2ba86178384b24dfd2c72effe7886e","modified":1619523240474},{"_id":"themes/stun/source/css/_common/scaffolding/index.styl","hash":"d30385d3e3a68fbff0e4560c5b520d572121aa69","modified":1619523240475},{"_id":"themes/stun/source/css/_common/scaffolding/utils.styl","hash":"1d658ff634b2da6b8b4818ffc1084acb65a36ca8","modified":1619523240475},{"_id":"themes/stun/source/css/_common/components/analytics/busuanzi.styl","hash":"beafc7d7c1685ac73fa263cffae37bf699a8f269","modified":1619523240463},{"_id":"themes/stun/source/css/_common/components/analytics/index.styl","hash":"055fac810c3b76562482681d1aaa174a98234b5e","modified":1619523240463},{"_id":"themes/stun/source/css/_common/responsive.styl","hash":"a7672c735539c4828cd4c54a1fca28a5fc6b756e","modified":1619523240474},{"_id":"themes/stun/source/css/_variables/index.styl","hash":"36052025063fc923e6b4fd7660ad7ce6adee0818","modified":1619523240476},{"_id":"themes/stun/source/css/_common/components/header/index.styl","hash":"43676e5a64dcc6fae4031695cad116cff570513f","modified":1619523240463},{"_id":"themes/stun/source/css/_common/scaffolding/normalize.styl","hash":"0b06abb4739e5da44058cd5147be173e8f801cf6","modified":1619523240475},{"_id":"themes/stun/source/css/_common/components/highlight/index.styl","hash":"429b41bc2c38d10df7d38c494c8ffe9fe7ad22b4","modified":1619523240464},{"_id":"themes/stun/source/css/_common/components/highlight/highlight.styl","hash":"e0bdb2e6ef1feb8a4efd9bda322277f18085023e","modified":1619523240464},{"_id":"themes/stun/source/css/_common/components/pages/index.styl","hash":"84e8bef33970281e9e89500676b13b86e59ab1e8","modified":1619523240465},{"_id":"themes/stun/source/css/_common/components/footer/index.styl","hash":"2d3ff81f11520710927efd5698b5dd9b145cb3a5","modified":1619523240463},{"_id":"themes/stun/source/css/_common/components/pages/timeline.styl","hash":"55e23326e31a055babc4c2db7c03591cf1b5092a","modified":1619523240465},{"_id":"themes/stun/source/css/_common/components/highlight/diff.styl","hash":"660f90a9fa59ec83f4192dc603d4cc40e0fffca5","modified":1619523240464},{"_id":"themes/stun/source/css/_common/components/plugins/index.styl","hash":"1e5e2ea60d3b9fcefb6b43b32ab564f9ec52ba6e","modified":1619523240467},{"_id":"themes/stun/source/css/_common/components/plugins/friends.styl","hash":"8b976b58cbfb4f8b5a4c35476d745f02637b382b","modified":1619523240466},{"_id":"themes/stun/source/css/_common/components/plugins/table.styl","hash":"b3eaa86f013301451e46d7c2553b4f7259a51e5d","modified":1619523240467},{"_id":"themes/stun/source/css/_common/components/post/index.styl","hash":"3adfb147fd1d71bcdf28ba46221145fe5616bcd6","modified":1619523240467},{"_id":"themes/stun/source/css/_common/components/plugins/note.styl","hash":"04742a9f12b8b7f06b74f022cb0ea63cd6e75c45","modified":1619523240467},{"_id":"themes/stun/source/css/_common/components/post/post-list.styl","hash":"0d94d87e37b990e89cbce6a48dfe98582d410cc8","modified":1619523240467},{"_id":"themes/stun/source/css/_common/components/post/post.styl","hash":"cff8d1ced73a4e02aae6f0bcb68e3801acbe19d7","modified":1619523240467},{"_id":"themes/stun/source/css/_common/components/pages/page.styl","hash":"04540885ffd7c79141869f0adeef4474bd25514d","modified":1619523240465},{"_id":"themes/stun/source/css/_common/components/search/index.styl","hash":"1c6c29cee4534935fa899078cd73d8fee56aa144","modified":1619523240468},{"_id":"themes/stun/source/css/_common/components/search/localsearch.styl","hash":"2fa5ec7db3c6e969628253aa226de50b72b88c74","modified":1619523240469},{"_id":"themes/stun/source/css/_common/components/highlight/theme.styl","hash":"ab775fefb98c48906dfd05d368b7c2f985048f3f","modified":1619523240464},{"_id":"themes/stun/source/css/_common/components/widgets/back2top.styl","hash":"a251aaccd8e36f4335c2d9d61d21c219a9649dc4","modified":1619523240469},{"_id":"themes/stun/source/css/_common/components/sidebar/index.styl","hash":"721e62acc60b8b138279ec05059ad0fcafa2d739","modified":1619523240469},{"_id":"themes/stun/source/css/_common/components/widgets/copy-button.styl","hash":"cb969ab21d4f255d05e3203d7edb01e15bcbc64a","modified":1619523240470},{"_id":"themes/stun/source/css/_common/components/widgets/copyright.styl","hash":"5a7f6546d66474fa45aac2b4789c0ddd78ab9bbf","modified":1619523240470},{"_id":"themes/stun/source/css/_common/components/widgets/ending.styl","hash":"8ef8d3a399262fa54bc5242aa79bc7c7f4a319c7","modified":1619523240470},{"_id":"themes/stun/source/css/_common/components/widgets/fancybox.styl","hash":"d414daca2e7400dd074146437ab37a063a6f5081","modified":1619523240470},{"_id":"themes/stun/source/css/_common/components/widgets/font-icon.styl","hash":"766457aed4cdf1d2898e5b2b1302b47aa342bb78","modified":1619523240471},{"_id":"themes/stun/source/css/_common/components/widgets/gallery-image.styl","hash":"124e289f660cf68219dfb09fe3cb7857228c33aa","modified":1619523240471},{"_id":"themes/stun/source/css/_common/components/widgets/comments.styl","hash":"ab24673e566e303ffb348374229a6d80c43b941a","modified":1619523240469},{"_id":"themes/stun/source/css/_common/components/widgets/lazyload.styl","hash":"c15af8c457531c3adc11e46e6ff35c2b05bae928","modified":1619523240472},{"_id":"themes/stun/source/css/_common/components/widgets/loading-bar.styl","hash":"8b8323bf45e3b1be99f0b162b32cecc20c1964d4","modified":1619523240472},{"_id":"themes/stun/source/css/_common/components/search/common.styl","hash":"c969a0c307352b80c262c7d8ccc5a3c4b3b53b9a","modified":1619523240468},{"_id":"themes/stun/source/css/_common/components/widgets/index.styl","hash":"679a0ce0cd66ac8f562279153011d2d00dea4c08","modified":1619523240472},{"_id":"themes/stun/source/css/_common/components/widgets/night-mode.styl","hash":"1c8bd075913a85d45cdf693955ecc4d6959d9d5c","modified":1619523240472},{"_id":"themes/stun/source/css/_common/components/widgets/share.styl","hash":"3d47efc51a13a9fd8cca6da07a7bdec14b79aefe","modified":1619523240473},{"_id":"themes/stun/source/css/_common/components/widgets/sticky-top.styl","hash":"4d9df7b1f1f8e6b08129479dd00603921c377f33","modified":1619523240473},{"_id":"themes/stun/source/css/_common/components/widgets/zoom-image.styl","hash":"638c127108f95213cfa749923d880d9e52801e8d","modified":1619523240473},{"_id":"themes/stun/source/css/_common/components/search/algolia.styl","hash":"50c2cd66822a001c2ad7cf6e154ea3841fca6b86","modified":1619523240468},{"_id":"themes/stun/source/css/_common/components/widgets/reward.styl","hash":"ddde7e7966acf313c87319a4d371a2854fbea0ca","modified":1619523240473},{"_id":"themes/stun/source/css/_common/components/widgets/paginator.styl","hash":"4167ff6c8e9e74f98fb1ce8ce234547fc9b2d24f","modified":1619523240472},{"_id":"themes/stun/package-lock.json","hash":"4b0af555aeec9a212a6b7118ff9644a19b0e096a","modified":1619523240459},{"_id":"public/search.xml","hash":"846cab8decf4058adf8d903053e82e6e4c62635c","modified":1636293506225},{"_id":"public/tags/index-1.html","hash":"280dcf505b5e2f1b4e654f048f60392a6151c6b5","modified":1636293506225},{"_id":"public/categories/index-1.html","hash":"fd7b43aac01e209ad7e0c22a23fcb236a4231f94","modified":1636293506225},{"_id":"public/categories/index.html","hash":"550566800d3325cd9284482fecc0e1040b853022","modified":1636293506225},{"_id":"public/tags/index.html","hash":"922614fa04fa8abb3073ef43c1b1243d7050083d","modified":1636293506225},{"_id":"public/2021/09/22/Acwing786/index.html","hash":"3dffbacc327eb66ca8dbb99b9c7a9d9e01143e72","modified":1636293506225},{"_id":"public/2021/09/22/排序/index.html","hash":"ab08194e764fac7f1c29ff79f7a83df0b817dcbe","modified":1636293506225},{"_id":"public/2021/08/01/PAT甲级1002/index.html","hash":"8b4ebed8eaf5b01d8f9420f46731367c85300734","modified":1636293506225},{"_id":"public/2021/06/02/PAT甲级1001/index.html","hash":"4fafeb828df76dad1a1d7e7eb73b0567178bf787","modified":1636293506225},{"_id":"public/2021/05/30/队列/index.html","hash":"32a9612ea73b34f6c83f4899117ce66c3d101427","modified":1636293506225},{"_id":"public/2021/05/28/PAT乙级1048/index.html","hash":"7ff27e26f42d4b2eeb2f5d9e3ac67216c736739a","modified":1636293506225},{"_id":"public/2021/05/28/PAT乙级1047/index.html","hash":"3f414d501b43822538d541b5d430689b42b0ec74","modified":1636293506225},{"_id":"public/2021/05/26/栈/index.html","hash":"dfd015861e770a88c66428b0c822f2d73ce45607","modified":1636293506225},{"_id":"public/2021/05/26/PAT乙级1045/index.html","hash":"c85cd54c7677260ba9d43d57d8bfcb70453dd1fd","modified":1636293506225},{"_id":"public/2021/05/24/PAT乙级1044/index.html","hash":"843aa9bdf13c0839082c849c28db35a4f9760c5c","modified":1636293506225},{"_id":"public/2021/05/22/PAT乙级1042/index.html","hash":"fec9bf29fd3d2dba672352be6219c9fea0cf3036","modified":1636293506225},{"_id":"public/2021/05/21/PAT乙级1041/index.html","hash":"c2fdc70945ec7a08de8f5e40602f7e2c08fa6c40","modified":1636293506225},{"_id":"public/2021/05/21/PAT乙级1040/index.html","hash":"5bd433f7ae872638c05a24fcd9e455639a5e0d80","modified":1636293506225},{"_id":"public/2021/05/19/PAT乙级1039/index.html","hash":"8f0b14fbc76876fea059c45d0b71a0bce8691dc6","modified":1636293506225},{"_id":"public/2021/05/19/PAT乙级1038/index.html","hash":"e02a2a7858a01efdc73f87a3010da88a5d23de19","modified":1636293506225},{"_id":"public/2021/05/18/PAT乙级1037/index.html","hash":"cdbfe8bc63914dbb4e9901eaf6d953e2cf246a01","modified":1636293506225},{"_id":"public/2021/05/16/PAT乙级1034/index.html","hash":"de384ec6999d8fa1bfd9ee2c6c5391d762a2dbf5","modified":1636293506225},{"_id":"public/2021/05/15/PAT乙级1033/index.html","hash":"bf099b345f2a2febc9ede6946817af31967233ca","modified":1636293506225},{"_id":"public/2021/05/15/循环链表与双向链表/index.html","hash":"494029264479c95bb05fe7ba7dd3b2bf1a42188d","modified":1636293506225},{"_id":"public/2021/05/14/PAT乙级1032/index.html","hash":"050780b79275fc73425ae51e168a77be5fc8a022","modified":1636293506225},{"_id":"public/2021/05/14/PAT乙级1031/index.html","hash":"c91e1a9dd2fe388f9b349ea6f0885873d097ec54","modified":1636293506225},{"_id":"public/2021/05/12/PAT乙级1030/index.html","hash":"c60e6cf6def2ab0efecdc87cb4a17b8d64bb81e4","modified":1636293506225},{"_id":"public/2021/05/11/PAT乙级1029/index.html","hash":"51f6e065ab44efe22afb50c5ef6a866526272c2d","modified":1636293506225},{"_id":"public/2021/05/10/单链表/index.html","hash":"0ef81bd614bce40328e5579842bb04cee251a5b3","modified":1636293506225},{"_id":"public/2021/05/10/pat乙级1028/index.html","hash":"7e9f3e10cd7e72bd608c7e48f0490386ccce41cf","modified":1636293506225},{"_id":"public/2021/05/09/PAT乙级1027/index.html","hash":"2140952a2dba8eecbf1022355ebc25c2e1f01325","modified":1636293506225},{"_id":"public/2021/05/09/PAT乙级1026/index.html","hash":"d08910aa8796d54752d607135a0f46251813a8e8","modified":1636293506225},{"_id":"public/2021/05/08/PAT乙级1025/index.html","hash":"8a17c66e69de62cd36a0092f570949f114f35eaf","modified":1636293506225},{"_id":"public/2021/05/05/PAT乙级1009/index.html","hash":"f1a28edb1c842d833f41e33c5b1997b296999693","modified":1636293506225},{"_id":"public/2021/05/05/PAT乙级1023/index.html","hash":"83b7af2279c8a2b6067b41663342e91840ad4349","modified":1636293506225},{"_id":"public/2021/05/04/PAT乙级1022/index.html","hash":"0583ccf13647b85f924338af393c44680f183b24","modified":1636293506225},{"_id":"public/2021/05/04/PAT乙级1020/index.html","hash":"7969e7555a871fe83b632dd6d35de1692748aa9f","modified":1636293506225},{"_id":"public/2021/05/03/PAT乙级1019/index.html","hash":"5fc87c8e432f5c3fa7d8aaf93c68b267231d0546","modified":1636293506225},{"_id":"public/2021/04/28/PAT乙级1018/index.html","hash":"3d2222dd724a6ddf7f9fe1bcb7de2694a4d99289","modified":1636293506225},{"_id":"public/2021/04/28/PAT乙级1017/index.html","hash":"658aacca002ac391e2721c8958c08887b7f5453c","modified":1636293506225},{"_id":"public/2021/04/28/PAT乙级1014/index.html","hash":"a18af708fe7cc47449001742e6e8414b204b2851","modified":1636293506225},{"_id":"public/2021/04/28/PAT乙级1010/index.html","hash":"909bbd9fbff615a79380c655fa17168b13560b8d","modified":1636293506225},{"_id":"public/2021/04/28/PAT乙级1008/index.html","hash":"f6b2c7e1482a07644c179127d078224bdb1ff507","modified":1636293506225},{"_id":"public/2021/04/27/PAT乙级1005/index.html","hash":"98dc911113224d24185c9edc1937251bf920c553","modified":1636293506225},{"_id":"public/2021/04/27/顺序表/index.html","hash":"c3d012ec5f7562bf94b17686ce7daad3ef12b969","modified":1636293506225},{"_id":"public/archives/index.html","hash":"4534872a9d89917843d18675bf3f4b040b4ad6db","modified":1636293506225},{"_id":"public/archives/page/2/index.html","hash":"ca30ec9e2bd3dec6a6e7fa11f14bb0afc99fb3a1","modified":1636293506225},{"_id":"public/archives/page/3/index.html","hash":"c38748ad010445b8b4afc617eb51681b8ffc59b2","modified":1636293506225},{"_id":"public/archives/page/4/index.html","hash":"54aaf937da4b22938d87e445a46d269ddb01e8d9","modified":1636293506225},{"_id":"public/archives/2021/index.html","hash":"cd45e0f44b49950d435f3b84e4b823e9bdae32c1","modified":1636293506225},{"_id":"public/archives/2021/page/2/index.html","hash":"352a6b39d6fd1b163eb21f0f5ea777bdf3dc7163","modified":1636293506225},{"_id":"public/archives/2021/page/3/index.html","hash":"b71575299323959059d082efddd546f517e735d8","modified":1636293506225},{"_id":"public/archives/2021/page/4/index.html","hash":"93921d8a63b312f9cb38e92deb59dd0d890b68b5","modified":1636293506225},{"_id":"public/archives/2021/04/index.html","hash":"857e422a4f83bdb3a2bdfa897adea933613327c3","modified":1636293506225},{"_id":"public/archives/2021/05/index.html","hash":"b8b2033c38c28a316cf467be30504c7c0dcf45cc","modified":1636293506225},{"_id":"public/archives/2021/05/page/2/index.html","hash":"57ec08f03e3578b7fb5f811baa414e1756f09da7","modified":1636293506225},{"_id":"public/archives/2021/05/page/3/index.html","hash":"57f696038b9dd6e88111888474bd156ff3e281b3","modified":1636293506225},{"_id":"public/archives/2021/06/index.html","hash":"5e9cdcffc39f6439f0372e2374f6a650aeb32476","modified":1636293506225},{"_id":"public/archives/2021/08/index.html","hash":"fb2d2c4d35ddc36c18384c3cde8a9bd129f67aae","modified":1636293506225},{"_id":"public/archives/2021/09/index.html","hash":"2084bddc5e2da91a1f0bf9511c354379203ca7bc","modified":1636293506225},{"_id":"public/categories/算法/index.html","hash":"ffc4e90b6c84cd0b3c5c5408c044fdca9051f111","modified":1636293506225},{"_id":"public/categories/题解/index.html","hash":"b28fc71e4b8cd25bb674bebc0d1725af033a8967","modified":1636293506225},{"_id":"public/categories/题解/page/2/index.html","hash":"ee622d69ef5a7da38c97afa8a4e55bfdad3caf30","modified":1636293506225},{"_id":"public/categories/题解/page/3/index.html","hash":"bcd67963a14c1013982a03513a6cddcd57f71243","modified":1636293506225},{"_id":"public/categories/题解/page/4/index.html","hash":"e239a73e329ad4c6e5d790da57935209f66ffbf7","modified":1636293506225},{"_id":"public/categories/算法/排序/index.html","hash":"e8de68f7f0a8b2c8cf7bf2a01114e8b9954ac830","modified":1636293506225},{"_id":"public/categories/题解/PAT题解/index.html","hash":"1854827da79de19108b21f82914195437508d847","modified":1636293506225},{"_id":"public/categories/题解/PAT题解/page/2/index.html","hash":"500a14637b2ff5461f33cdf5268e002190e4d115","modified":1636293506225},{"_id":"public/categories/题解/PAT题解/page/3/index.html","hash":"9a406f5a26c7406091613b13229198cbd8afb072","modified":1636293506225},{"_id":"public/categories/题解/PAT题解/page/4/index.html","hash":"91de284d99ee92ecd62b9e4c0bc794723031db81","modified":1636293506225},{"_id":"public/categories/数据结构/index.html","hash":"3415003b4600fc722eb713c51af65185374f5d8c","modified":1636293506225},{"_id":"public/categories/数据结构/表/index.html","hash":"e17616750c3e57f64e689472f03cdf835bf4fc35","modified":1635856484808},{"_id":"public/index.html","hash":"26a4f99a70f31e0ab072d3aeb2cc962ed0c171cd","modified":1636293506225},{"_id":"public/categories/数据结构/栈/index.html","hash":"ea71b8f15090161a83456a6a2c7a057da4751f69","modified":1636293506225},{"_id":"public/categories/数据结构/队列/index.html","hash":"70866fd725f670863acb89fafbfde9f11ce7cdcd","modified":1636293506225},{"_id":"public/page/2/index.html","hash":"be90ee53efcbc8d92fac037cab44269ce06560e3","modified":1636293506225},{"_id":"public/page/3/index.html","hash":"4399187426ed4a5091428d39c8bc2f12764f5013","modified":1636293506225},{"_id":"public/page/4/index.html","hash":"474df2fb74991aae2acebc3e80cb847a53425f30","modified":1636293506225},{"_id":"public/tags/Study/index.html","hash":"ae78ae090c5b8054d135ec6653c9a21a844c05b0","modified":1636293506225},{"_id":"public/tags/Study/page/2/index.html","hash":"c3faed5d2a7a2ef04f8787a0f3a6b308d47d8e41","modified":1636293506225},{"_id":"public/tags/Study/page/3/index.html","hash":"11bf4ad877107adf0c2f1f817902a50e7b69a00c","modified":1636293506225},{"_id":"public/tags/Study/page/4/index.html","hash":"d25e4a26568b76a2c2457d0e58a11d442dfa92d6","modified":1636293506225},{"_id":"public/tags/栈/index.html","hash":"334b9f25b5cd1b2551c712a8541af19906590e70","modified":1636293506225},{"_id":"public/tags/表/index.html","hash":"8ad4f03f6a0d7868307396853fa0c68d54548bdb","modified":1635949879293},{"_id":"public/tags/排序/index.html","hash":"9b720da0e8922facabe575f67a2ac118b7454b81","modified":1636293506225},{"_id":"public/tags/队列/index.html","hash":"61571681ec563c9320612c6f2e39ed2c1eb7e571","modified":1636293506225},{"_id":"public/CNAME","hash":"edb022ec1a9d1109d64af03d0aa34e3212f5b0f6","modified":1632318350062},{"_id":"public/images/algolia.svg","hash":"90322f80db6ad0daf26ea3ec71dea6f691a8b2f1","modified":1632318350062},{"_id":"public/images/cc-by-nc-nd.svg","hash":"017ad912874686a982ebceae359299b8f2a492e2","modified":1632318350062},{"_id":"public/images/cc-by-nc-sa.svg","hash":"71d035c34219f924dbf1bf852166ee8fb58d2f24","modified":1632318350062},{"_id":"public/images/cc-by-nc.svg","hash":"4608189edbe7636dd651df65473298a3c5afb20d","modified":1632318350062},{"_id":"public/images/cc-by-nd.svg","hash":"20c66ae3c393903e6eab3bc8cf7c3be6d753f9f8","modified":1632318350062},{"_id":"public/images/cc-by-sa.svg","hash":"0455a8857ba096925d4145a56e8d10537fccb378","modified":1632318350062},{"_id":"public/images/cc-by.svg","hash":"77f74c241902447424207869c74cb9d9264bdced","modified":1632318350062},{"_id":"public/images/loading.svg","hash":"32a6e770d217ae6c0cf0f6beef3172f1b5b9a0a2","modified":1632318350062},{"_id":"public/images/icons/favicon-16x16.png","hash":"7bfd64eac26e17ea162f0c399a4a40164c26b412","modified":1632318350062},{"_id":"public/images/icons/favicon-32x32.png","hash":"02fead07726920400ede57ddfdbf071dd7203fd5","modified":1632318350062},{"_id":"public/images/icons/stun-logo.svg","hash":"069dc7590ad152373f1c346d892e32faa2bbdd87","modified":1632318350062},{"_id":"public/js/header.js","hash":"63d407ee6f80114e220171ba829b79b28d420fe0","modified":1632318350062},{"_id":"public/js/sidebar.js","hash":"20adff7f54bcd8299d32690d41ebc7a4eb7a8728","modified":1632318350062},{"_id":"public/js/scroll.js","hash":"8926ab87181a49c730ce5132518b608c54b8cdb1","modified":1632318350062},{"_id":"public/js/stun-boot.js","hash":"8358ac0d879c0ca340c52e4de606523c2a91e156","modified":1632318350062},{"_id":"public/css/index.css","hash":"23dfdc010be77903d9984df8ff8f185f7f8908d9","modified":1632318350062},{"_id":"public/js/utils.js","hash":"b570eafe77e47d7701348f172a4dbaaba6fa8123","modified":1632318350062},{"_id":"source/_posts/Acwing788.md","hash":"93b5928a76e255774ce8b2a882f1aa96d2ae3566","modified":1633005362778},{"_id":"public/2021/09/30/Acwing788/index.html","hash":"7803f0219f6c6078d8c8a2799f9a1635d273e0b8","modified":1636293506225},{"_id":"public/archives/page/5/index.html","hash":"6690eefe20c24264f2fb9c03f91e3f1f45dd03c9","modified":1636293506225},{"_id":"public/archives/2021/page/5/index.html","hash":"f8a1e78c389602713d56c43b40851f7aeee41c3a","modified":1636293506225},{"_id":"public/page/5/index.html","hash":"f60af0a4d7bd660dd9fdcbd8b184bdde0d6a87e1","modified":1636293506225},{"_id":"public/categories/题解/Acwing/index.html","hash":"ff5328b04036c39e4d90ab23caec095962fe183c","modified":1636293506225},{"_id":"public/tags/Study/page/5/index.html","hash":"6c848dd24c2354f7234fa1b269fdaf756a8de18d","modified":1636293506225},{"_id":"source/_posts/二分.md","hash":"21e18d12e34e2e982dd67894abeeb5ed2916e41d","modified":1633324337903},{"_id":"source/_posts/高精度.md","hash":"f86a37731dbff1db38d6730d68a1b34620386a6e","modified":1634478320192},{"_id":"public/2021/10/17/高精度/index.html","hash":"e97fd1ae7d515a54571641d51f9cf425b1b03113","modified":1636293506225},{"_id":"public/2021/10/04/二分/index.html","hash":"6e80ddbdbbd898a0cdc2b33a5a2fb9b24ccb0062","modified":1636293506225},{"_id":"public/archives/2021/10/index.html","hash":"0544b6fc7d4aec9ac1e6eb7a1b950f8c061f79bc","modified":1636293506225},{"_id":"public/categories/算法/二分/index.html","hash":"f2fce3689ac14a7ea9ecd19f6c0a2ba2cb014864","modified":1636293506225},{"_id":"public/categories/算法/高精度/index.html","hash":"b3176e2e43bcb72dd48c4da3d43dce39f72f255e","modified":1636293506225},{"_id":"public/tags/二分/index.html","hash":"bd2e515ae900cced61814a6ab0204e24de09d1ef","modified":1636293506225},{"_id":"public/tags/高精度/index.html","hash":"39c07101c0a697d2319cd17c5e5b79353a905c56","modified":1636293506225},{"_id":"source/_posts/前缀和和差分.md","hash":"a23128387bb66b3c87627ea34fca7263f68a8295","modified":1634876079427},{"_id":"public/2021/10/22/前缀和和差分/index.html","hash":"94899398991cc50a568279f1bd0f12183d87c171","modified":1636293506225},{"_id":"source/_posts/Acwing796.md","hash":"dd100d25fa08f66da0b50482942f105305891a75","modified":1634877881582},{"_id":"public/2021/10/22/Acwing796/index.html","hash":"b11fbc2f443028112d7bcfbd130e9930a8edea2f","modified":1636293506225},{"_id":"source/_posts/Acwing-799.md","hash":"fd51548b7a2266d45059033941e4197600fc82ff","modified":1635338290717},{"_id":"source/_posts/.history/Acwing-799_20211027203733.md","hash":"711185e971bd2076abdb66defd54d4c177dc1bed","modified":1635338264871},{"_id":"source/_posts/.history/Acwing-799_20211027203744.md","hash":"f4801e126a850b56e1f0a439d0558627ebd9dc6a","modified":1635338264919},{"_id":"source/_posts/.history/Acwing-799_20211027203810.md","hash":"fd51548b7a2266d45059033941e4197600fc82ff","modified":1635338299883},{"_id":"public/2021/10/27/Acwing-799/index.html","hash":"247879c9cdb0fda84d5bd5cf5b2f0733a4bb529e","modified":1636293506225},{"_id":"public/tags/双指针/index.html","hash":"408a5a3c1d181bad249d9aa2c51055707dbb0551","modified":1636293506225},{"_id":"source/_posts/Acwing-800.md","hash":"57192817108e920bbe26a549dbbb1e313b8d2799","modified":1635343770548},{"_id":"source/.history/_posts/Acwing-800_20211027220905.md","hash":"e2d0e081b1b830e63d6c18bdd56eb8b930db56ca","modified":1635343763206},{"_id":"source/.history/_posts/Acwing-800_20211027220923.md","hash":"018f5331a68a25a8875a10f8281198cf64670d8e","modified":1635343763290},{"_id":"source/.history/_posts/Acwing-800_20211027220930.md","hash":"57192817108e920bbe26a549dbbb1e313b8d2799","modified":1635343770667},{"_id":"public/2021/10/27/Acwing-800/index.html","hash":"a488b26ed2ee95a4347274f806c6d15d2cf20a0d","modified":1636293506225},{"_id":"source/_posts/Acwing-802.md","hash":"266c368bc6e87537ca8ef58ff9fe9d0a33ab7cf7","modified":1635649400706},{"_id":"source/_posts/.history/Acwing-802_20211031110010.md","hash":"f1ef0bff5193674ad18fab24d0043f6710003ba0","modified":1635649383041},{"_id":"source/_posts/.history/Acwing-802_20211031110303.md","hash":"5086da60214f6d43e48af03d652cc83d9c943b21","modified":1635649383174},{"_id":"source/_posts/.history/Acwing-802_20211031110320.md","hash":"266c368bc6e87537ca8ef58ff9fe9d0a33ab7cf7","modified":1635649400736},{"_id":"public/2021/10/31/Acwing-802/index.html","hash":"b9fd7777c82994581cc980ae4ae4511460336835","modified":1636293506225},{"_id":"public/tags/离散化/index.html","hash":"4efe8599134ba8adb45a880eecd59ca4da59a1b9","modified":1636293506225},{"_id":"source/_posts/数组模拟链表.md","hash":"0b09738c9a1a6c01fd4dc451ddde8414b53139b2","modified":1636281791784},{"_id":"source/_posts/.history/数组模拟链表_20211102203234.md","hash":"7baa7bd04605d2ee5a74b06849fe5ac7b5d55333","modified":1635856371343},{"_id":"source/_posts/.history/数组模拟链表_20211102203251.md","hash":"b5f552e8ebb4bb8e4542725a09496db0219d41ff","modified":1635856371379},{"_id":"source/_posts/.history/数组模拟链表_20211102203409.md","hash":"84da21ea6c2bafb9c7fee9ae56efaf8f70d0ebf6","modified":1635856449872},{"_id":"source/_posts/.history/数组模拟链表_20211102203410.md","hash":"84da21ea6c2bafb9c7fee9ae56efaf8f70d0ebf6","modified":1635856450460},{"_id":"public/2021/11/02/数组模拟链表/index.html","hash":"8a5ef5b5c0a1c2b1f65ec34e145ce78e7fee96bf","modified":1636293506225},{"_id":"public/archives/2021/11/index.html","hash":"d168d2fea8cc92498de597ad63d08976d830c15f","modified":1636293506225},{"_id":"public/categories/数据结构/链表/index.html","hash":"b96bc3c4a955f970f887e95c491ece2b40a41130","modified":1636293506225},{"_id":"source/_posts/数组模拟栈-队列.md","hash":"c3e84609e0ad89572a0f9e7599b8afdac3cb8689","modified":1636281779451},{"_id":"source/_posts/.history/单链表_20210705104935.md","hash":"5576f347b5deabc9de180466f01a1e35ff66b555","modified":1635949800506},{"_id":"source/_posts/.history/单链表_20211103223000.md","hash":"1f4e2d2226b22461fd3c76cb10a883da36d3ea59","modified":1635949800675},{"_id":"source/_posts/.history/循环链表与双向链表_20210602160553.md","hash":"f7c8d251888a7adf9dfa9ef713faa3a6df856fd5","modified":1635949810665},{"_id":"source/_posts/.history/循环链表与双向链表_20211103223010.md","hash":"6379ed2c1a4d79cb039d2c98504ccff8311128cd","modified":1635949810806},{"_id":"source/_posts/.history/数组模拟栈-队列_20211103222917.md","hash":"335e5b0718ef74b17b822bf0baca45798595e4a6","modified":1635949775292},{"_id":"source/_posts/.history/数组模拟栈-队列_20211103222935.md","hash":"84f17b71489bf004b4db45f2768c4107d8e9d247","modified":1635949775354},{"_id":"source/_posts/.history/数组模拟栈-队列_20211103223058.md","hash":"cba1d257cadaef7d58bc6985b5789799e25f3e21","modified":1635949858630},{"_id":"source/_posts/.history/顺序表_20211019120940.md","hash":"2db05ed2708749adbedb15b6d6244581685080f8","modified":1635949819114},{"_id":"source/_posts/.history/顺序表_20211103223019.md","hash":"b4ee507e50f1ade033ee3cee23cf45c8cc951649","modified":1635949819275},{"_id":"public/2021/11/03/数组模拟栈-队列/index.html","hash":"4b61d3a023314ec5884b7fd99d9f7a3c1a6aa18e","modified":1636293506225},{"_id":"public/categories/数据结构/栈/队列/index.html","hash":"e7668e7b7bf4af76929adca9817c826b4a1b5764","modified":1635949879293},{"_id":"source/_posts/串的模式匹配算法.md","hash":"49ed7024a17fe9231993628ac2237fe6b8158884","modified":1636281817829},{"_id":"source/_posts/.history/串的模式匹配算法_20211107184230.md","hash":"1f38203425a0716d63b38ddab8c05a56f93aef75","modified":1636281817828},{"_id":"source/_posts/.history/串的模式匹配算法_20211107184337.md","hash":"49ed7024a17fe9231993628ac2237fe6b8158884","modified":1636281817928},{"_id":"source/_posts/.history/单链表_20211107184352.md","hash":"0410ca74258eb20e43dc0212acfe7bfd0da12fa7","modified":1636281832101},{"_id":"source/_posts/.history/循环链表与双向链表_20211107184323.md","hash":"0868d2d6b530bfecbb6bafda0a1d2ca41f686eaf","modified":1636281803979},{"_id":"source/_posts/.history/排序_20211004151155.md","hash":"03039252452b4f1748fa5186506b5c7f8ad79ce1","modified":1636281837012},{"_id":"source/_posts/.history/排序_20211107184357.md","hash":"03039252452b4f1748fa5186506b5c7f8ad79ce1","modified":1636281837054},{"_id":"source/_posts/.history/数组模拟栈-队列_20211107184259.md","hash":"c3e84609e0ad89572a0f9e7599b8afdac3cb8689","modified":1636281779560},{"_id":"source/_posts/.history/数组模拟链表_20211107184311.md","hash":"0b09738c9a1a6c01fd4dc451ddde8414b53139b2","modified":1636281791908},{"_id":"source/_posts/.history/顺序表_20211107184320.md","hash":"74d53b15da1e9fb05d311bd36f8efdb11e385703","modified":1636281800406},{"_id":"public/2021/11/07/串的模式匹配算法/index.html","hash":"817610728f7b2c19570c6dfdec4fff87fc9f9c88","modified":1636293506225},{"_id":"public/archives/page/6/index.html","hash":"50228254e342b1d836cd77a467f421c23b87ea47","modified":1636293506225},{"_id":"public/archives/2021/page/6/index.html","hash":"5002b235c7b0e1f92120d5a0e52c261fb13ec295","modified":1636293506225},{"_id":"public/page/6/index.html","hash":"e71c5d992e30e046bcb6119d2d585cde02d6f625","modified":1636293506225},{"_id":"public/tags/链表/index.html","hash":"deeb7a338c12138e2e70364f0e44a2c5932f7700","modified":1636293506225},{"_id":"source/_posts/Acwing-3302.md","hash":"7b604f8f34e5aede378620ef9ae700e85c6eedc6","modified":1636293495820},{"_id":"source/_posts/.history/Acwing-3302_20211107215732.md","hash":"d48da3267e928711ed49b72be7eff0bd5ddcff1f","modified":1636293478399},{"_id":"source/_posts/.history/Acwing-3302_20211107215759.md","hash":"7ca857a508ea536620d67778384dbf6a9bc83f11","modified":1636293479203},{"_id":"source/_posts/.history/Acwing-3302_20211107215815.md","hash":"7b604f8f34e5aede378620ef9ae700e85c6eedc6","modified":1636293495913},{"_id":"public/2021/11/07/Acwing-3302/index.html","hash":"f66d2aa429bd9627d529c71f8061b0c7c8e84b4d","modified":1636293506225},{"_id":"public/tags/Study/page/6/index.html","hash":"831ba4fa6e56fd4cd0185701babc0e2e01c124d7","modified":1636293506225}],"Category":[{"name":"算法","_id":"cktvk78ei00041cws1fskefhx"},{"name":"题解","_id":"cktvk78ev000b1cwsd6p516bz"},{"name":"排序","parent":"cktvk78ei00041cws1fskefhx","_id":"cktvk78f2000s1cwsejeb5bkf"},{"name":"PAT题解","parent":"cktvk78ev000b1cwsd6p516bz","_id":"cktvk78f600121cws4qc05nm9"},{"name":"数据结构","_id":"cktvk78g1003u1cws35r7fqaq"},{"name":"表","parent":"cktvk78g1003u1cws35r7fqaq","_id":"cktvk78g3004h1cwsf0ho2o6o"},{"name":"栈","parent":"cktvk78g1003u1cws35r7fqaq","_id":"cktvk78g4004o1cwsdrtz2lvd"},{"name":"队列","parent":"cktvk78g1003u1cws35r7fqaq","_id":"cktvk78g4004r1cwshj883c5c"},{"name":"Acwing","parent":"cktvk78ev000b1cwsd6p516bz","_id":"cku6xacpb0002kcws5dq5cjfi"},{"name":"二分","parent":"cktvk78ei00041cws1fskefhx","_id":"ckuva9uuf0003tows9l0sgoza"},{"name":"高精度","parent":"cktvk78ei00041cws1fskefhx","_id":"ckuva9uuh0005tows9bflati4"},{"name":"链表","parent":"cktvk78g1003u1cws35r7fqaq","_id":"ckvi2pqsv0002x0ws7s429le9"},{"name":"队列","parent":"cktvk78g4004o1cwsdrtz2lvd","_id":"ckvjmbi7v0003f8ws46o27erh"}],"Data":[],"Page":[{"title":"categories","date":"2021-04-28T01:44:30.000Z","_content":"","source":"categories/index-1.md","raw":"---\ntitle: categories\ndate: 2021-04-28 09:44:30\n---\n","updated":"2021-04-28T01:44:30.673Z","path":"categories/index-1.html","comments":1,"layout":"page","_id":"cktvk78ec00001cws2l2h3b2n","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2021-04-28T01:44:51.000Z","_content":"","source":"tags/index-1.md","raw":"---\ntitle: tags\ndate: 2021-04-28 09:44:51\n---\n","updated":"2021-04-28T01:44:51.830Z","path":"tags/index-1.html","comments":1,"layout":"page","_id":"cktvk78eg00021cwsg9gma50p","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"categories","date":"2021-04-27T11:39:09.000Z","type":"categories","_content":"\n","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2021-04-27 19:39:09\ntype: \"categories\"\n---\n\n","updated":"2021-05-01T01:40:52.879Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cktvk78em00061cwsh51z21mq","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2021-04-27T11:39:18.000Z","type":"tags","_content":"\n","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2021-04-27 19:39:18\ntype: \"tags\"\n---\n\n","updated":"2021-05-01T01:40:48.724Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cktvk78et00081cws14mg353a","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Acwing786","date":"2021-09-22T13:41:26.000Z","_content":"给定一个长度为 nn 的整数数列，以及一个整数 kk，请用快速选择算法求出数列从小到大排序后的第 kk 个数。\n\n#### 输入格式\n\n第一行包含两个整数 nn 和 kk。\n\n第二行包含 nn 个整数（所有整数均在 1∼1091∼109 范围内），表示整数数列。\n\n#### 输出格式\n\n输出一个整数，表示数列的第 kk 小数。\n\n#### 数据范围\n\n1≤n≤1000001≤n≤100000,\\\n1≤k≤n1≤k≤n\n\n#### 输入样例：\n\n```\n5 3\n2 4 1 5 3\n```\n\n#### 输出样例：\n\n```\n3\n```\n#### 代码\n\n```js\n//foreverking\n#include <vector>\n#include <cstdio>\n#include <queue>\n#include <algorithm>\n#include <cstring>\n#include <iostream>\n#include <cmath>\nusing namespace std;\n\n\nconst int N  = 1e6 + 10;\nint n,k;\nint a[N];\n\nvoid quick_sort(int a[],int l,int r){\n    if(l >= r) return;\n\n    int x = a[l],i = l - 1,j = r + 1;\n    while(i < j){\n        do i++; while(a[i] < x);\n        do j--; while(a[j] > x);\n        if(i < j){\n            int num = a[i];\n            a[i] = a[j];\n            a[j] = num;\n        }\n    }\n\n    quick_sort(a,l,j);\n    quick_sort(a,j + 1,r);\n}\n\nint main(){\n    scanf(\"%d %d\",&n,&k);\n    for(int i = 0; i < n; i++){\n        scanf(\"%d\",&a[i]);\n    }\n    quick_sort(a,0,n - 1);\n     printf(\"%d\",a[k - 1]);\n    //  for(int i = 0; i < n; i++){\n    //     //代码\n    //     printf(\"%d \",a[i]);\n    //     }\n    return 0;\n}\n```\n[快排]([排序 - 掘金 (juejin.cn)](https://juejin.cn/post/7010747248179068965))模板题","source":"_posts/Acwing786.md","raw":"---\ntitle: Acwing786\ndate: 2021-09-22 21:41:26\ntags: \n    - Study\n    - 排序\ncategories: \n    - 题解\n    - Acwing\n---\n给定一个长度为 nn 的整数数列，以及一个整数 kk，请用快速选择算法求出数列从小到大排序后的第 kk 个数。\n\n#### 输入格式\n\n第一行包含两个整数 nn 和 kk。\n\n第二行包含 nn 个整数（所有整数均在 1∼1091∼109 范围内），表示整数数列。\n\n#### 输出格式\n\n输出一个整数，表示数列的第 kk 小数。\n\n#### 数据范围\n\n1≤n≤1000001≤n≤100000,\\\n1≤k≤n1≤k≤n\n\n#### 输入样例：\n\n```\n5 3\n2 4 1 5 3\n```\n\n#### 输出样例：\n\n```\n3\n```\n#### 代码\n\n```js\n//foreverking\n#include <vector>\n#include <cstdio>\n#include <queue>\n#include <algorithm>\n#include <cstring>\n#include <iostream>\n#include <cmath>\nusing namespace std;\n\n\nconst int N  = 1e6 + 10;\nint n,k;\nint a[N];\n\nvoid quick_sort(int a[],int l,int r){\n    if(l >= r) return;\n\n    int x = a[l],i = l - 1,j = r + 1;\n    while(i < j){\n        do i++; while(a[i] < x);\n        do j--; while(a[j] > x);\n        if(i < j){\n            int num = a[i];\n            a[i] = a[j];\n            a[j] = num;\n        }\n    }\n\n    quick_sort(a,l,j);\n    quick_sort(a,j + 1,r);\n}\n\nint main(){\n    scanf(\"%d %d\",&n,&k);\n    for(int i = 0; i < n; i++){\n        scanf(\"%d\",&a[i]);\n    }\n    quick_sort(a,0,n - 1);\n     printf(\"%d\",a[k - 1]);\n    //  for(int i = 0; i < n; i++){\n    //     //代码\n    //     printf(\"%d \",a[i]);\n    //     }\n    return 0;\n}\n```\n[快排]([排序 - 掘金 (juejin.cn)](https://juejin.cn/post/7010747248179068965))模板题","slug":"Acwing786","published":1,"updated":"2021-09-22T13:50:06.429Z","_id":"cktvk78ee00011cwsfrei37op","comments":1,"layout":"post","photos":[],"link":"","content":"<p>给定一个长度为 nn 的整数数列，以及一个整数 kk，请用快速选择算法求出数列从小到大排序后的第 kk 个数。</p>\n\n        <h4 id=\"输入格式\"   >\n          <a href=\"#输入格式\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#输入格式\" class=\"headerlink\" title=\"输入格式\"></a>输入格式</h4>\n      <p>第一行包含两个整数 nn 和 kk。</p>\n<p>第二行包含 nn 个整数（所有整数均在 1∼1091∼109 范围内），表示整数数列。</p>\n\n        <h4 id=\"输出格式\"   >\n          <a href=\"#输出格式\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#输出格式\" class=\"headerlink\" title=\"输出格式\"></a>输出格式</h4>\n      <p>输出一个整数，表示数列的第 kk 小数。</p>\n\n        <h4 id=\"数据范围\"   >\n          <a href=\"#数据范围\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#数据范围\" class=\"headerlink\" title=\"数据范围\"></a>数据范围</h4>\n      <p>1≤n≤1000001≤n≤100000,<br>1≤k≤n1≤k≤n</p>\n\n        <h4 id=\"输入样例：\"   >\n          <a href=\"#输入样例：\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#输入样例：\" class=\"headerlink\" title=\"输入样例：\"></a>输入样例：</h4>\n      <figure class=\"highlight plain\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">5 3</span><br><span class=\"line\">2 4 1 5 3</span><br></pre></td></tr></table></div></figure>\n\n\n        <h4 id=\"输出样例：\"   >\n          <a href=\"#输出样例：\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#输出样例：\" class=\"headerlink\" title=\"输出样例：\"></a>输出样例：</h4>\n      <figure class=\"highlight plain\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">3</span><br></pre></td></tr></table></div></figure>\n\n        <h4 id=\"代码\"   >\n          <a href=\"#代码\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h4>\n      <figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//foreverking</span></span><br><span class=\"line\">#include &lt;vector&gt;</span><br><span class=\"line\">#include &lt;cstdio&gt;</span><br><span class=\"line\">#include &lt;queue&gt;</span><br><span class=\"line\">#include &lt;algorithm&gt;</span><br><span class=\"line\">#include &lt;cstring&gt;</span><br><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">#include &lt;cmath&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> int N  = <span class=\"number\">1e6</span> + <span class=\"number\">10</span>;</span><br><span class=\"line\">int n,k;</span><br><span class=\"line\">int a[N];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"function\"><span class=\"title\">quick_sort</span>(<span class=\"params\">int a[],int l,int r</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(l &gt;= r) <span class=\"keyword\">return</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    int x = a[l],i = l - <span class=\"number\">1</span>,j = r + <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(i &lt; j)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">do</span> i++; <span class=\"keyword\">while</span>(a[i] &lt; x);</span><br><span class=\"line\">        <span class=\"keyword\">do</span> j--; <span class=\"keyword\">while</span>(a[j] &gt; x);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i &lt; j)&#123;</span><br><span class=\"line\">            int num = a[i];</span><br><span class=\"line\">            a[i] = a[j];</span><br><span class=\"line\">            a[j] = num;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    quick_sort(a,l,j);</span><br><span class=\"line\">    quick_sort(a,j + <span class=\"number\">1</span>,r);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">int <span class=\"function\"><span class=\"title\">main</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    scanf(<span class=\"string\">&quot;%d %d&quot;</span>,&amp;n,&amp;k);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(int i = <span class=\"number\">0</span>; i &lt; n; i++)&#123;</span><br><span class=\"line\">        scanf(<span class=\"string\">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    quick_sort(a,<span class=\"number\">0</span>,n - <span class=\"number\">1</span>);</span><br><span class=\"line\">     printf(<span class=\"string\">&quot;%d&quot;</span>,a[k - <span class=\"number\">1</span>]);</span><br><span class=\"line\">    <span class=\"comment\">//  for(int i = 0; i &lt; n; i++)&#123;</span></span><br><span class=\"line\">    <span class=\"comment\">//     //代码</span></span><br><span class=\"line\">    <span class=\"comment\">//     printf(&quot;%d &quot;,a[i]);</span></span><br><span class=\"line\">    <span class=\"comment\">//     &#125;</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>[快排](<span class=\"exturl\"><a class=\"exturl__link\"   href=\"https://juejin.cn/post/7010747248179068965\" >排序 - 掘金 (juejin.cn)</a><span class=\"exturl__icon\"><i class=\"fas fa-external-link-alt\"></i></span></span>)模板题</p>\n","site":{"data":{}},"excerpt":"","more":"<p>给定一个长度为 nn 的整数数列，以及一个整数 kk，请用快速选择算法求出数列从小到大排序后的第 kk 个数。</p>\n\n        <h4 id=\"输入格式\"   >\n          <a href=\"#输入格式\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#输入格式\" class=\"headerlink\" title=\"输入格式\"></a>输入格式</h4>\n      <p>第一行包含两个整数 nn 和 kk。</p>\n<p>第二行包含 nn 个整数（所有整数均在 1∼1091∼109 范围内），表示整数数列。</p>\n\n        <h4 id=\"输出格式\"   >\n          <a href=\"#输出格式\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#输出格式\" class=\"headerlink\" title=\"输出格式\"></a>输出格式</h4>\n      <p>输出一个整数，表示数列的第 kk 小数。</p>\n\n        <h4 id=\"数据范围\"   >\n          <a href=\"#数据范围\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#数据范围\" class=\"headerlink\" title=\"数据范围\"></a>数据范围</h4>\n      <p>1≤n≤1000001≤n≤100000,<br>1≤k≤n1≤k≤n</p>\n\n        <h4 id=\"输入样例：\"   >\n          <a href=\"#输入样例：\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#输入样例：\" class=\"headerlink\" title=\"输入样例：\"></a>输入样例：</h4>\n      <figure class=\"highlight plain\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">5 3</span><br><span class=\"line\">2 4 1 5 3</span><br></pre></td></tr></table></div></figure>\n\n\n        <h4 id=\"输出样例：\"   >\n          <a href=\"#输出样例：\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#输出样例：\" class=\"headerlink\" title=\"输出样例：\"></a>输出样例：</h4>\n      <figure class=\"highlight plain\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">3</span><br></pre></td></tr></table></div></figure>\n\n        <h4 id=\"代码\"   >\n          <a href=\"#代码\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h4>\n      <figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//foreverking</span></span><br><span class=\"line\">#include &lt;vector&gt;</span><br><span class=\"line\">#include &lt;cstdio&gt;</span><br><span class=\"line\">#include &lt;queue&gt;</span><br><span class=\"line\">#include &lt;algorithm&gt;</span><br><span class=\"line\">#include &lt;cstring&gt;</span><br><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">#include &lt;cmath&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> int N  = <span class=\"number\">1e6</span> + <span class=\"number\">10</span>;</span><br><span class=\"line\">int n,k;</span><br><span class=\"line\">int a[N];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"function\"><span class=\"title\">quick_sort</span>(<span class=\"params\">int a[],int l,int r</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(l &gt;= r) <span class=\"keyword\">return</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    int x = a[l],i = l - <span class=\"number\">1</span>,j = r + <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(i &lt; j)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">do</span> i++; <span class=\"keyword\">while</span>(a[i] &lt; x);</span><br><span class=\"line\">        <span class=\"keyword\">do</span> j--; <span class=\"keyword\">while</span>(a[j] &gt; x);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i &lt; j)&#123;</span><br><span class=\"line\">            int num = a[i];</span><br><span class=\"line\">            a[i] = a[j];</span><br><span class=\"line\">            a[j] = num;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    quick_sort(a,l,j);</span><br><span class=\"line\">    quick_sort(a,j + <span class=\"number\">1</span>,r);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">int <span class=\"function\"><span class=\"title\">main</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    scanf(<span class=\"string\">&quot;%d %d&quot;</span>,&amp;n,&amp;k);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(int i = <span class=\"number\">0</span>; i &lt; n; i++)&#123;</span><br><span class=\"line\">        scanf(<span class=\"string\">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    quick_sort(a,<span class=\"number\">0</span>,n - <span class=\"number\">1</span>);</span><br><span class=\"line\">     printf(<span class=\"string\">&quot;%d&quot;</span>,a[k - <span class=\"number\">1</span>]);</span><br><span class=\"line\">    <span class=\"comment\">//  for(int i = 0; i &lt; n; i++)&#123;</span></span><br><span class=\"line\">    <span class=\"comment\">//     //代码</span></span><br><span class=\"line\">    <span class=\"comment\">//     printf(&quot;%d &quot;,a[i]);</span></span><br><span class=\"line\">    <span class=\"comment\">//     &#125;</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>[快排](<span class=\"exturl\"><a class=\"exturl__link\"   href=\"https://juejin.cn/post/7010747248179068965\" >排序 - 掘金 (juejin.cn)</a><span class=\"exturl__icon\"><i class=\"fas fa-external-link-alt\"></i></span></span>)模板题</p>\n"},{"title":"PAT乙级1005","date":"2021-04-27T14:49:05.000Z","_content":"题目如下：\n![image.png](https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/68f1d7f4e0c646b780e64013bb684601~tplv-k3u1fbpfcp-watermark.image)\n这是1001 3n+1的进阶版。这里是3n+1猜想：\n\n![image.png](https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/53c82dfa2ab84dad9c544caa8fe3b70b~tplv-k3u1fbpfcp-watermark.image)\n我们来比较一下二者的不同，1001就是简单的验证3n+1,求其中到达一的步数。而1005提出了一个新的概念：关键数字。好，那么重点来了，关键数字是什么？这里根据题目条件，比如当你验证5的猜想时\n`5 8 4 2 1`,那么接下来当你需要验证8 4 2时，可以直接得出满足条件，因为你在之前验证5时的过程中出现了这几个数。但是如果没有出现，那么你不得不判断一下这个数是否满足猜想，比如7。\n\n了解之后我们来看这个题，要求输入一段数字。寻找其中的关键数字，我第一次的代码如下，思路都在注释，比较清晰了：\n\n```js\n//为了避免重复计算，可以记录下递推过程中遇到的每一个数\n//每个测试输入包含 1 个测试用例，第 1 行给出一个正整数 K (<100)，第 2 行给出 K 个互不相同的待验证的正整数 n (1<n≤100)的值，数字间用空格隔开\n//你的任务就是找出这些关键数字，并按从大到小的顺序输出它们。\n#include <cstdio>\n#include <cstring>\n#include <iostream>\n#include <algorithm>\n\nusing namespace std;\n\n//数组开大\nint s[100005];//s记录数组.被记录记为1，未被记录为0\nint a[100005];//记录关键数字的数组，要进行排序（从大到小\nint cnt;\n\n//比较函数用\nbool cmp(int a, int b) {\n    return a > b;//从大到小\n}\n\n/*/判断是否是最后一个\nint check_flag(int n){\n    if(n != 1) return 1;\n    else return 0;\n}*/\n\n//判断输出空格 \nvoid check_space(int flag,int cnt){\n    cout << a[flag];//输出\n\n    if(flag != cnt - 2) cout << \" \";//不是最后一位，那么输出空格\n}\n\n//验证3n+1    \nvoid check(int num){\n    //3n+1猜想\n    int step = num;//一个替身\n    s[num] = 1;//num开始验证，标记先标记\n    while(step != 1){\n\n        if(step % 2 == 0) step /= 2;//偶数\n        else step = (3 * step + 1) / 2;//奇数\n\n        s[step] = 1;//被记录，标记一次\n        } \n}\n\nint main(){\n    int n,num;//\n    cin >> n;\n    while(n --){\n        \n        cin >> num;\n\n        if(s[num] == 0){\n            a[cnt ++] = num;//未在s数组中标记即这个num是关键数字，存在a数组中\n            check(num);//关键数字进行验证，但是第一个输入的数字不是\n        }\n    }\n\n    //因为第一个输入验证猜想的数不是关键数字,此时他在as数组的第一位，我们将他移除\n    //此时关键数字数量为cnt-1\n    for(int i = 0;i < cnt; i++){\n        a[i] = a[i + 1];\n    }\n   \n    sort(a, a + cnt - 1, cmp);//从大到小排序\n\n    //for(int i = 0; i < cnt - 1; i ++) cout << a[i] << endl;\n    //cout << cnt - 1 << endl;\n\n    for(int i = 0; i < cnt - 1; i ++){\n        check_space(i,cnt);\n    }\n\n    cout << endl;\n    return 0;\n}\n//一行中最后一个数字后没有空格\n\n/*\n6\n3 5 6 7 8 11\n*/\n```\n虽然可以过部分测试点，但毫无疑问是错的，我想了很久不，在朋友的提醒下找到了错误。那就是\n`  //因为第一个输入验证猜想的数不是关键数字,此时他在as数组的第一位，我们将他移除\n    //此时关键数字数量为cnt-1\n    for(int i = 0;i < cnt; i++){\n        a[i] = a[i + 1];\n    }`这一段代码，其中有一点是样例中第一个输入的3不是关键数字，所以我直接在记录数组排序前将第一个数也就是输入的3给剔除了。但是出现了很严重的错误，那就是谁说得第一个就不能说关键数字呢?代码逻辑出现了错误，之所以出现这个错误，我发现是我的理解吧出现错误，他的关键数字是针对整个数字，后面有一个数字的验证覆盖了前面的数字，那么前面的数字就不是关键数字了。他并不是按照输入顺序来的。那么一切重来，但基本的思想不变，那就是用一个数组去记录这个数字被覆盖了没有，用不用自己去验证。先不对数组做任何处理，所有的都循环完之后，再去寻找没有被标记的数组位置，那就是关键数字了，代码如下：\n    \n```js\n//为了避免重复计算，可以记录下递推过程中遇到的每一个数\n//每个测试输入包含 1 个测试用例，第 1 行给出一个正整数 K (<100)，第 2 行给出 K 个互不相同的待验证的正整数 n (1<n≤100)的值，数字间用空格隔开\n//你的任务就是找出这些关键数字，并按从大到小的顺序输出它们。\n#include <cstdio>\n#include <cstring>\n#include <iostream>\n#include <algorithm>\n\nusing namespace std;\n\n//数组开大\nint b[100005];//存输入的数组\nint s[100005];//s记录数组.被记录记为1，未被记录为0\nint a[100005];//记录关键数字的数组，要进行排序（从大到小\nint cnt;\n\n//比较函数用\nbool cmp(int a, int b) {\n    return a > b;//从大到小\n}\n\n/*/判断是否是最后一个\nint check_flag(int n){\n    if(n != 1) return 1;\n    else return 0;\n}*/\n\n//判断输出空格 \n\n//验证3n+1    \nvoid check(int num){\n    //3n+1猜想\n    int step = num;//一个替身\n    while(step != 1){\n\n        if(step % 2 == 0) step /= 2;//偶数\n        else step = (3 * step + 1) / 2;//奇数\n\n        s[step] = 1;//被记录，标记一次\n        } \n}\n\nint main(){\n    int n;//\n    cin >> n;\n    \n    for(int i = 0; i < n; i ++)\n        cin >> b[i];//输入数组\n\n    for(int i = 0; i < n; i ++){\n        int temp = b[i];\n        check(temp);//检查验证\n    }\n\n    //sort(b,b + n,cmp);\n\n    for(int i = 0; i < n; i++){\n        if(!s[b[i]])\n            a[cnt ++] = b[i];//关键数字存进去\n    }\n\n    sort(a,a + cnt,cmp);\n    \n    cout << a[0];\n    for(int i = 1; i < cnt; i ++)\n    cout << \" \" << a[i];\n\n    return 0;\n}\n\n\n//一行中最后一个数字后没有空格\n\n/*\n6\n3 5 6 7 8 11\n*/\n```\n成功AC,困扰我一天的题目被解决了，真是可以被让人放心睡觉，眠了。\n[题目链接](https://pintia.cn/problem-sets/994805260223102976/problems/994805320306507776)","source":"_posts/PAT乙级1005.md","raw":"---\ntitle: PAT乙级1005\ndate: 2021-04-27 22:49:05\ntags: \n    - Study\ncategories: \n    - 题解\n    - PAT题解\n---\n题目如下：\n![image.png](https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/68f1d7f4e0c646b780e64013bb684601~tplv-k3u1fbpfcp-watermark.image)\n这是1001 3n+1的进阶版。这里是3n+1猜想：\n\n![image.png](https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/53c82dfa2ab84dad9c544caa8fe3b70b~tplv-k3u1fbpfcp-watermark.image)\n我们来比较一下二者的不同，1001就是简单的验证3n+1,求其中到达一的步数。而1005提出了一个新的概念：关键数字。好，那么重点来了，关键数字是什么？这里根据题目条件，比如当你验证5的猜想时\n`5 8 4 2 1`,那么接下来当你需要验证8 4 2时，可以直接得出满足条件，因为你在之前验证5时的过程中出现了这几个数。但是如果没有出现，那么你不得不判断一下这个数是否满足猜想，比如7。\n\n了解之后我们来看这个题，要求输入一段数字。寻找其中的关键数字，我第一次的代码如下，思路都在注释，比较清晰了：\n\n```js\n//为了避免重复计算，可以记录下递推过程中遇到的每一个数\n//每个测试输入包含 1 个测试用例，第 1 行给出一个正整数 K (<100)，第 2 行给出 K 个互不相同的待验证的正整数 n (1<n≤100)的值，数字间用空格隔开\n//你的任务就是找出这些关键数字，并按从大到小的顺序输出它们。\n#include <cstdio>\n#include <cstring>\n#include <iostream>\n#include <algorithm>\n\nusing namespace std;\n\n//数组开大\nint s[100005];//s记录数组.被记录记为1，未被记录为0\nint a[100005];//记录关键数字的数组，要进行排序（从大到小\nint cnt;\n\n//比较函数用\nbool cmp(int a, int b) {\n    return a > b;//从大到小\n}\n\n/*/判断是否是最后一个\nint check_flag(int n){\n    if(n != 1) return 1;\n    else return 0;\n}*/\n\n//判断输出空格 \nvoid check_space(int flag,int cnt){\n    cout << a[flag];//输出\n\n    if(flag != cnt - 2) cout << \" \";//不是最后一位，那么输出空格\n}\n\n//验证3n+1    \nvoid check(int num){\n    //3n+1猜想\n    int step = num;//一个替身\n    s[num] = 1;//num开始验证，标记先标记\n    while(step != 1){\n\n        if(step % 2 == 0) step /= 2;//偶数\n        else step = (3 * step + 1) / 2;//奇数\n\n        s[step] = 1;//被记录，标记一次\n        } \n}\n\nint main(){\n    int n,num;//\n    cin >> n;\n    while(n --){\n        \n        cin >> num;\n\n        if(s[num] == 0){\n            a[cnt ++] = num;//未在s数组中标记即这个num是关键数字，存在a数组中\n            check(num);//关键数字进行验证，但是第一个输入的数字不是\n        }\n    }\n\n    //因为第一个输入验证猜想的数不是关键数字,此时他在as数组的第一位，我们将他移除\n    //此时关键数字数量为cnt-1\n    for(int i = 0;i < cnt; i++){\n        a[i] = a[i + 1];\n    }\n   \n    sort(a, a + cnt - 1, cmp);//从大到小排序\n\n    //for(int i = 0; i < cnt - 1; i ++) cout << a[i] << endl;\n    //cout << cnt - 1 << endl;\n\n    for(int i = 0; i < cnt - 1; i ++){\n        check_space(i,cnt);\n    }\n\n    cout << endl;\n    return 0;\n}\n//一行中最后一个数字后没有空格\n\n/*\n6\n3 5 6 7 8 11\n*/\n```\n虽然可以过部分测试点，但毫无疑问是错的，我想了很久不，在朋友的提醒下找到了错误。那就是\n`  //因为第一个输入验证猜想的数不是关键数字,此时他在as数组的第一位，我们将他移除\n    //此时关键数字数量为cnt-1\n    for(int i = 0;i < cnt; i++){\n        a[i] = a[i + 1];\n    }`这一段代码，其中有一点是样例中第一个输入的3不是关键数字，所以我直接在记录数组排序前将第一个数也就是输入的3给剔除了。但是出现了很严重的错误，那就是谁说得第一个就不能说关键数字呢?代码逻辑出现了错误，之所以出现这个错误，我发现是我的理解吧出现错误，他的关键数字是针对整个数字，后面有一个数字的验证覆盖了前面的数字，那么前面的数字就不是关键数字了。他并不是按照输入顺序来的。那么一切重来，但基本的思想不变，那就是用一个数组去记录这个数字被覆盖了没有，用不用自己去验证。先不对数组做任何处理，所有的都循环完之后，再去寻找没有被标记的数组位置，那就是关键数字了，代码如下：\n    \n```js\n//为了避免重复计算，可以记录下递推过程中遇到的每一个数\n//每个测试输入包含 1 个测试用例，第 1 行给出一个正整数 K (<100)，第 2 行给出 K 个互不相同的待验证的正整数 n (1<n≤100)的值，数字间用空格隔开\n//你的任务就是找出这些关键数字，并按从大到小的顺序输出它们。\n#include <cstdio>\n#include <cstring>\n#include <iostream>\n#include <algorithm>\n\nusing namespace std;\n\n//数组开大\nint b[100005];//存输入的数组\nint s[100005];//s记录数组.被记录记为1，未被记录为0\nint a[100005];//记录关键数字的数组，要进行排序（从大到小\nint cnt;\n\n//比较函数用\nbool cmp(int a, int b) {\n    return a > b;//从大到小\n}\n\n/*/判断是否是最后一个\nint check_flag(int n){\n    if(n != 1) return 1;\n    else return 0;\n}*/\n\n//判断输出空格 \n\n//验证3n+1    \nvoid check(int num){\n    //3n+1猜想\n    int step = num;//一个替身\n    while(step != 1){\n\n        if(step % 2 == 0) step /= 2;//偶数\n        else step = (3 * step + 1) / 2;//奇数\n\n        s[step] = 1;//被记录，标记一次\n        } \n}\n\nint main(){\n    int n;//\n    cin >> n;\n    \n    for(int i = 0; i < n; i ++)\n        cin >> b[i];//输入数组\n\n    for(int i = 0; i < n; i ++){\n        int temp = b[i];\n        check(temp);//检查验证\n    }\n\n    //sort(b,b + n,cmp);\n\n    for(int i = 0; i < n; i++){\n        if(!s[b[i]])\n            a[cnt ++] = b[i];//关键数字存进去\n    }\n\n    sort(a,a + cnt,cmp);\n    \n    cout << a[0];\n    for(int i = 1; i < cnt; i ++)\n    cout << \" \" << a[i];\n\n    return 0;\n}\n\n\n//一行中最后一个数字后没有空格\n\n/*\n6\n3 5 6 7 8 11\n*/\n```\n成功AC,困扰我一天的题目被解决了，真是可以被让人放心睡觉，眠了。\n[题目链接](https://pintia.cn/problem-sets/994805260223102976/problems/994805320306507776)","slug":"PAT乙级1005","published":1,"updated":"2021-05-01T01:48:32.507Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktvk78eh00031cws4dg8b65i","content":"<p>题目如下：<br><img src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/68f1d7f4e0c646b780e64013bb684601~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\"><br>这是1001 3n+1的进阶版。这里是3n+1猜想：</p>\n<p><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/53c82dfa2ab84dad9c544caa8fe3b70b~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\"><br>我们来比较一下二者的不同，1001就是简单的验证3n+1,求其中到达一的步数。而1005提出了一个新的概念：关键数字。好，那么重点来了，关键数字是什么？这里根据题目条件，比如当你验证5的猜想时<br><code>5 8 4 2 1</code>,那么接下来当你需要验证8 4 2时，可以直接得出满足条件，因为你在之前验证5时的过程中出现了这几个数。但是如果没有出现，那么你不得不判断一下这个数是否满足猜想，比如7。</p>\n<p>了解之后我们来看这个题，要求输入一段数字。寻找其中的关键数字，我第一次的代码如下，思路都在注释，比较清晰了：</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//为了避免重复计算，可以记录下递推过程中遇到的每一个数</span></span><br><span class=\"line\"><span class=\"comment\">//每个测试输入包含 1 个测试用例，第 1 行给出一个正整数 K (&lt;100)，第 2 行给出 K 个互不相同的待验证的正整数 n (1&lt;n≤100)的值，数字间用空格隔开</span></span><br><span class=\"line\"><span class=\"comment\">//你的任务就是找出这些关键数字，并按从大到小的顺序输出它们。</span></span><br><span class=\"line\">#include &lt;cstdio&gt;</span><br><span class=\"line\">#include &lt;cstring&gt;</span><br><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">#include &lt;algorithm&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//数组开大</span></span><br><span class=\"line\">int s[<span class=\"number\">100005</span>];<span class=\"comment\">//s记录数组.被记录记为1，未被记录为0</span></span><br><span class=\"line\">int a[<span class=\"number\">100005</span>];<span class=\"comment\">//记录关键数字的数组，要进行排序（从大到小</span></span><br><span class=\"line\">int cnt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//比较函数用</span></span><br><span class=\"line\">bool <span class=\"function\"><span class=\"title\">cmp</span>(<span class=\"params\">int a, int b</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a &gt; b;<span class=\"comment\">//从大到小</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*/判断是否是最后一个</span></span><br><span class=\"line\"><span class=\"comment\">int check_flag(int n)&#123;</span></span><br><span class=\"line\"><span class=\"comment\">    if(n != 1) return 1;</span></span><br><span class=\"line\"><span class=\"comment\">    else return 0;</span></span><br><span class=\"line\"><span class=\"comment\">&#125;*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//判断输出空格 </span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"function\"><span class=\"title\">check_space</span>(<span class=\"params\">int flag,int cnt</span>)</span>&#123;</span><br><span class=\"line\">    cout &lt;&lt; a[flag];<span class=\"comment\">//输出</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(flag != cnt - <span class=\"number\">2</span>) cout &lt;&lt; <span class=\"string\">&quot; &quot;</span>;<span class=\"comment\">//不是最后一位，那么输出空格</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//验证3n+1    </span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"function\"><span class=\"title\">check</span>(<span class=\"params\">int num</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//3n+1猜想</span></span><br><span class=\"line\">    int step = num;<span class=\"comment\">//一个替身</span></span><br><span class=\"line\">    s[num] = <span class=\"number\">1</span>;<span class=\"comment\">//num开始验证，标记先标记</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(step != <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(step % <span class=\"number\">2</span> == <span class=\"number\">0</span>) step /= <span class=\"number\">2</span>;<span class=\"comment\">//偶数</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span> step = (<span class=\"number\">3</span> * step + <span class=\"number\">1</span>) / <span class=\"number\">2</span>;<span class=\"comment\">//奇数</span></span><br><span class=\"line\"></span><br><span class=\"line\">        s[step] = <span class=\"number\">1</span>;<span class=\"comment\">//被记录，标记一次</span></span><br><span class=\"line\">        &#125; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">int <span class=\"function\"><span class=\"title\">main</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    int n,num;<span class=\"comment\">//</span></span><br><span class=\"line\">    cin &gt;&gt; n;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(n --)&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        cin &gt;&gt; num;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(s[num] == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            a[cnt ++] = num;<span class=\"comment\">//未在s数组中标记即这个num是关键数字，存在a数组中</span></span><br><span class=\"line\">            check(num);<span class=\"comment\">//关键数字进行验证，但是第一个输入的数字不是</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//因为第一个输入验证猜想的数不是关键数字,此时他在as数组的第一位，我们将他移除</span></span><br><span class=\"line\">    <span class=\"comment\">//此时关键数字数量为cnt-1</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(int i = <span class=\"number\">0</span>;i &lt; cnt; i++)&#123;</span><br><span class=\"line\">        a[i] = a[i + <span class=\"number\">1</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">   </span><br><span class=\"line\">    sort(a, a + cnt - <span class=\"number\">1</span>, cmp);<span class=\"comment\">//从大到小排序</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//for(int i = 0; i &lt; cnt - 1; i ++) cout &lt;&lt; a[i] &lt;&lt; endl;</span></span><br><span class=\"line\">    <span class=\"comment\">//cout &lt;&lt; cnt - 1 &lt;&lt; endl;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(int i = <span class=\"number\">0</span>; i &lt; cnt - <span class=\"number\">1</span>; i ++)&#123;</span><br><span class=\"line\">        check_space(i,cnt);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    cout &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//一行中最后一个数字后没有空格</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">6</span></span><br><span class=\"line\"><span class=\"comment\">3 5 6 7 8 11</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></div></figure>\n<p>虽然可以过部分测试点，但毫无疑问是错的，我想了很久不，在朋友的提醒下找到了错误。那就是<br><code>  //因为第一个输入验证猜想的数不是关键数字,此时他在as数组的第一位，我们将他移除     //此时关键数字数量为cnt-1     for(int i = 0;i &lt; cnt; i++)&#123;         a[i] = a[i + 1];     &#125;</code>这一段代码，其中有一点是样例中第一个输入的3不是关键数字，所以我直接在记录数组排序前将第一个数也就是输入的3给剔除了。但是出现了很严重的错误，那就是谁说得第一个就不能说关键数字呢?代码逻辑出现了错误，之所以出现这个错误，我发现是我的理解吧出现错误，他的关键数字是针对整个数字，后面有一个数字的验证覆盖了前面的数字，那么前面的数字就不是关键数字了。他并不是按照输入顺序来的。那么一切重来，但基本的思想不变，那就是用一个数组去记录这个数字被覆盖了没有，用不用自己去验证。先不对数组做任何处理，所有的都循环完之后，再去寻找没有被标记的数组位置，那就是关键数字了，代码如下：</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//为了避免重复计算，可以记录下递推过程中遇到的每一个数</span></span><br><span class=\"line\"><span class=\"comment\">//每个测试输入包含 1 个测试用例，第 1 行给出一个正整数 K (&lt;100)，第 2 行给出 K 个互不相同的待验证的正整数 n (1&lt;n≤100)的值，数字间用空格隔开</span></span><br><span class=\"line\"><span class=\"comment\">//你的任务就是找出这些关键数字，并按从大到小的顺序输出它们。</span></span><br><span class=\"line\">#include &lt;cstdio&gt;</span><br><span class=\"line\">#include &lt;cstring&gt;</span><br><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">#include &lt;algorithm&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//数组开大</span></span><br><span class=\"line\">int b[<span class=\"number\">100005</span>];<span class=\"comment\">//存输入的数组</span></span><br><span class=\"line\">int s[<span class=\"number\">100005</span>];<span class=\"comment\">//s记录数组.被记录记为1，未被记录为0</span></span><br><span class=\"line\">int a[<span class=\"number\">100005</span>];<span class=\"comment\">//记录关键数字的数组，要进行排序（从大到小</span></span><br><span class=\"line\">int cnt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//比较函数用</span></span><br><span class=\"line\">bool <span class=\"function\"><span class=\"title\">cmp</span>(<span class=\"params\">int a, int b</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a &gt; b;<span class=\"comment\">//从大到小</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*/判断是否是最后一个</span></span><br><span class=\"line\"><span class=\"comment\">int check_flag(int n)&#123;</span></span><br><span class=\"line\"><span class=\"comment\">    if(n != 1) return 1;</span></span><br><span class=\"line\"><span class=\"comment\">    else return 0;</span></span><br><span class=\"line\"><span class=\"comment\">&#125;*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//判断输出空格 </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//验证3n+1    </span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"function\"><span class=\"title\">check</span>(<span class=\"params\">int num</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//3n+1猜想</span></span><br><span class=\"line\">    int step = num;<span class=\"comment\">//一个替身</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(step != <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(step % <span class=\"number\">2</span> == <span class=\"number\">0</span>) step /= <span class=\"number\">2</span>;<span class=\"comment\">//偶数</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span> step = (<span class=\"number\">3</span> * step + <span class=\"number\">1</span>) / <span class=\"number\">2</span>;<span class=\"comment\">//奇数</span></span><br><span class=\"line\"></span><br><span class=\"line\">        s[step] = <span class=\"number\">1</span>;<span class=\"comment\">//被记录，标记一次</span></span><br><span class=\"line\">        &#125; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">int <span class=\"function\"><span class=\"title\">main</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    int n;<span class=\"comment\">//</span></span><br><span class=\"line\">    cin &gt;&gt; n;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(int i = <span class=\"number\">0</span>; i &lt; n; i ++)</span><br><span class=\"line\">        cin &gt;&gt; b[i];<span class=\"comment\">//输入数组</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(int i = <span class=\"number\">0</span>; i &lt; n; i ++)&#123;</span><br><span class=\"line\">        int temp = b[i];</span><br><span class=\"line\">        check(temp);<span class=\"comment\">//检查验证</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//sort(b,b + n,cmp);</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(int i = <span class=\"number\">0</span>; i &lt; n; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!s[b[i]])</span><br><span class=\"line\">            a[cnt ++] = b[i];<span class=\"comment\">//关键数字存进去</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    sort(a,a + cnt,cmp);</span><br><span class=\"line\">    </span><br><span class=\"line\">    cout &lt;&lt; a[<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(int i = <span class=\"number\">1</span>; i &lt; cnt; i ++)</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot; &quot;</span> &lt;&lt; a[i];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//一行中最后一个数字后没有空格</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">6</span></span><br><span class=\"line\"><span class=\"comment\">3 5 6 7 8 11</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></div></figure>\n<p>成功AC,困扰我一天的题目被解决了，真是可以被让人放心睡觉，眠了。<br><span class=\"exturl\"><a class=\"exturl__link\"   href=\"https://pintia.cn/problem-sets/994805260223102976/problems/994805320306507776\" >题目链接</a><span class=\"exturl__icon\"><i class=\"fas fa-external-link-alt\"></i></span></span></p>\n","site":{"data":{}},"excerpt":"","more":"<p>题目如下：<br><img src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/68f1d7f4e0c646b780e64013bb684601~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\"><br>这是1001 3n+1的进阶版。这里是3n+1猜想：</p>\n<p><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/53c82dfa2ab84dad9c544caa8fe3b70b~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\"><br>我们来比较一下二者的不同，1001就是简单的验证3n+1,求其中到达一的步数。而1005提出了一个新的概念：关键数字。好，那么重点来了，关键数字是什么？这里根据题目条件，比如当你验证5的猜想时<br><code>5 8 4 2 1</code>,那么接下来当你需要验证8 4 2时，可以直接得出满足条件，因为你在之前验证5时的过程中出现了这几个数。但是如果没有出现，那么你不得不判断一下这个数是否满足猜想，比如7。</p>\n<p>了解之后我们来看这个题，要求输入一段数字。寻找其中的关键数字，我第一次的代码如下，思路都在注释，比较清晰了：</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//为了避免重复计算，可以记录下递推过程中遇到的每一个数</span></span><br><span class=\"line\"><span class=\"comment\">//每个测试输入包含 1 个测试用例，第 1 行给出一个正整数 K (&lt;100)，第 2 行给出 K 个互不相同的待验证的正整数 n (1&lt;n≤100)的值，数字间用空格隔开</span></span><br><span class=\"line\"><span class=\"comment\">//你的任务就是找出这些关键数字，并按从大到小的顺序输出它们。</span></span><br><span class=\"line\">#include &lt;cstdio&gt;</span><br><span class=\"line\">#include &lt;cstring&gt;</span><br><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">#include &lt;algorithm&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//数组开大</span></span><br><span class=\"line\">int s[<span class=\"number\">100005</span>];<span class=\"comment\">//s记录数组.被记录记为1，未被记录为0</span></span><br><span class=\"line\">int a[<span class=\"number\">100005</span>];<span class=\"comment\">//记录关键数字的数组，要进行排序（从大到小</span></span><br><span class=\"line\">int cnt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//比较函数用</span></span><br><span class=\"line\">bool <span class=\"function\"><span class=\"title\">cmp</span>(<span class=\"params\">int a, int b</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a &gt; b;<span class=\"comment\">//从大到小</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*/判断是否是最后一个</span></span><br><span class=\"line\"><span class=\"comment\">int check_flag(int n)&#123;</span></span><br><span class=\"line\"><span class=\"comment\">    if(n != 1) return 1;</span></span><br><span class=\"line\"><span class=\"comment\">    else return 0;</span></span><br><span class=\"line\"><span class=\"comment\">&#125;*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//判断输出空格 </span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"function\"><span class=\"title\">check_space</span>(<span class=\"params\">int flag,int cnt</span>)</span>&#123;</span><br><span class=\"line\">    cout &lt;&lt; a[flag];<span class=\"comment\">//输出</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(flag != cnt - <span class=\"number\">2</span>) cout &lt;&lt; <span class=\"string\">&quot; &quot;</span>;<span class=\"comment\">//不是最后一位，那么输出空格</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//验证3n+1    </span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"function\"><span class=\"title\">check</span>(<span class=\"params\">int num</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//3n+1猜想</span></span><br><span class=\"line\">    int step = num;<span class=\"comment\">//一个替身</span></span><br><span class=\"line\">    s[num] = <span class=\"number\">1</span>;<span class=\"comment\">//num开始验证，标记先标记</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(step != <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(step % <span class=\"number\">2</span> == <span class=\"number\">0</span>) step /= <span class=\"number\">2</span>;<span class=\"comment\">//偶数</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span> step = (<span class=\"number\">3</span> * step + <span class=\"number\">1</span>) / <span class=\"number\">2</span>;<span class=\"comment\">//奇数</span></span><br><span class=\"line\"></span><br><span class=\"line\">        s[step] = <span class=\"number\">1</span>;<span class=\"comment\">//被记录，标记一次</span></span><br><span class=\"line\">        &#125; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">int <span class=\"function\"><span class=\"title\">main</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    int n,num;<span class=\"comment\">//</span></span><br><span class=\"line\">    cin &gt;&gt; n;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(n --)&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        cin &gt;&gt; num;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(s[num] == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            a[cnt ++] = num;<span class=\"comment\">//未在s数组中标记即这个num是关键数字，存在a数组中</span></span><br><span class=\"line\">            check(num);<span class=\"comment\">//关键数字进行验证，但是第一个输入的数字不是</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//因为第一个输入验证猜想的数不是关键数字,此时他在as数组的第一位，我们将他移除</span></span><br><span class=\"line\">    <span class=\"comment\">//此时关键数字数量为cnt-1</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(int i = <span class=\"number\">0</span>;i &lt; cnt; i++)&#123;</span><br><span class=\"line\">        a[i] = a[i + <span class=\"number\">1</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">   </span><br><span class=\"line\">    sort(a, a + cnt - <span class=\"number\">1</span>, cmp);<span class=\"comment\">//从大到小排序</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//for(int i = 0; i &lt; cnt - 1; i ++) cout &lt;&lt; a[i] &lt;&lt; endl;</span></span><br><span class=\"line\">    <span class=\"comment\">//cout &lt;&lt; cnt - 1 &lt;&lt; endl;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(int i = <span class=\"number\">0</span>; i &lt; cnt - <span class=\"number\">1</span>; i ++)&#123;</span><br><span class=\"line\">        check_space(i,cnt);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    cout &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//一行中最后一个数字后没有空格</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">6</span></span><br><span class=\"line\"><span class=\"comment\">3 5 6 7 8 11</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></div></figure>\n<p>虽然可以过部分测试点，但毫无疑问是错的，我想了很久不，在朋友的提醒下找到了错误。那就是<br><code>  //因为第一个输入验证猜想的数不是关键数字,此时他在as数组的第一位，我们将他移除     //此时关键数字数量为cnt-1     for(int i = 0;i &lt; cnt; i++)&#123;         a[i] = a[i + 1];     &#125;</code>这一段代码，其中有一点是样例中第一个输入的3不是关键数字，所以我直接在记录数组排序前将第一个数也就是输入的3给剔除了。但是出现了很严重的错误，那就是谁说得第一个就不能说关键数字呢?代码逻辑出现了错误，之所以出现这个错误，我发现是我的理解吧出现错误，他的关键数字是针对整个数字，后面有一个数字的验证覆盖了前面的数字，那么前面的数字就不是关键数字了。他并不是按照输入顺序来的。那么一切重来，但基本的思想不变，那就是用一个数组去记录这个数字被覆盖了没有，用不用自己去验证。先不对数组做任何处理，所有的都循环完之后，再去寻找没有被标记的数组位置，那就是关键数字了，代码如下：</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//为了避免重复计算，可以记录下递推过程中遇到的每一个数</span></span><br><span class=\"line\"><span class=\"comment\">//每个测试输入包含 1 个测试用例，第 1 行给出一个正整数 K (&lt;100)，第 2 行给出 K 个互不相同的待验证的正整数 n (1&lt;n≤100)的值，数字间用空格隔开</span></span><br><span class=\"line\"><span class=\"comment\">//你的任务就是找出这些关键数字，并按从大到小的顺序输出它们。</span></span><br><span class=\"line\">#include &lt;cstdio&gt;</span><br><span class=\"line\">#include &lt;cstring&gt;</span><br><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">#include &lt;algorithm&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//数组开大</span></span><br><span class=\"line\">int b[<span class=\"number\">100005</span>];<span class=\"comment\">//存输入的数组</span></span><br><span class=\"line\">int s[<span class=\"number\">100005</span>];<span class=\"comment\">//s记录数组.被记录记为1，未被记录为0</span></span><br><span class=\"line\">int a[<span class=\"number\">100005</span>];<span class=\"comment\">//记录关键数字的数组，要进行排序（从大到小</span></span><br><span class=\"line\">int cnt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//比较函数用</span></span><br><span class=\"line\">bool <span class=\"function\"><span class=\"title\">cmp</span>(<span class=\"params\">int a, int b</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a &gt; b;<span class=\"comment\">//从大到小</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*/判断是否是最后一个</span></span><br><span class=\"line\"><span class=\"comment\">int check_flag(int n)&#123;</span></span><br><span class=\"line\"><span class=\"comment\">    if(n != 1) return 1;</span></span><br><span class=\"line\"><span class=\"comment\">    else return 0;</span></span><br><span class=\"line\"><span class=\"comment\">&#125;*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//判断输出空格 </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//验证3n+1    </span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"function\"><span class=\"title\">check</span>(<span class=\"params\">int num</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//3n+1猜想</span></span><br><span class=\"line\">    int step = num;<span class=\"comment\">//一个替身</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(step != <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(step % <span class=\"number\">2</span> == <span class=\"number\">0</span>) step /= <span class=\"number\">2</span>;<span class=\"comment\">//偶数</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span> step = (<span class=\"number\">3</span> * step + <span class=\"number\">1</span>) / <span class=\"number\">2</span>;<span class=\"comment\">//奇数</span></span><br><span class=\"line\"></span><br><span class=\"line\">        s[step] = <span class=\"number\">1</span>;<span class=\"comment\">//被记录，标记一次</span></span><br><span class=\"line\">        &#125; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">int <span class=\"function\"><span class=\"title\">main</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    int n;<span class=\"comment\">//</span></span><br><span class=\"line\">    cin &gt;&gt; n;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(int i = <span class=\"number\">0</span>; i &lt; n; i ++)</span><br><span class=\"line\">        cin &gt;&gt; b[i];<span class=\"comment\">//输入数组</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(int i = <span class=\"number\">0</span>; i &lt; n; i ++)&#123;</span><br><span class=\"line\">        int temp = b[i];</span><br><span class=\"line\">        check(temp);<span class=\"comment\">//检查验证</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//sort(b,b + n,cmp);</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(int i = <span class=\"number\">0</span>; i &lt; n; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!s[b[i]])</span><br><span class=\"line\">            a[cnt ++] = b[i];<span class=\"comment\">//关键数字存进去</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    sort(a,a + cnt,cmp);</span><br><span class=\"line\">    </span><br><span class=\"line\">    cout &lt;&lt; a[<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(int i = <span class=\"number\">1</span>; i &lt; cnt; i ++)</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot; &quot;</span> &lt;&lt; a[i];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//一行中最后一个数字后没有空格</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">6</span></span><br><span class=\"line\"><span class=\"comment\">3 5 6 7 8 11</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></div></figure>\n<p>成功AC,困扰我一天的题目被解决了，真是可以被让人放心睡觉，眠了。<br><span class=\"exturl\"><a class=\"exturl__link\"   href=\"https://pintia.cn/problem-sets/994805260223102976/problems/994805320306507776\" >题目链接</a><span class=\"exturl__icon\"><i class=\"fas fa-external-link-alt\"></i></span></span></p>\n"},{"title":"PAT乙级1008","date":"2021-04-28T01:50:04.000Z","_content":"   我们首先来看题目：\n\n![image.png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5be71b31b7d94492877411b485e54dac~tplv-k3u1fbpfcp-watermark.image)\n\n\n题目的核心就是要将一个数组循环右移M个位置（将每个整数循环向右移M（≥0）个位置（最后M个数循环移至最前面的M个位置）\n，这样看着很简单，好像只要下标加上m在模n就好了。但是有一个条件是，不允许使用格外的数组。这样我们不能直接下标加上m模n； ，因为这样会覆盖掉一些数据。那么，我们稍微思考一下，将数组开的很大，大到足够你放下两组数据还有余（不要舍不得空间），在你输入数据时，完全复制一组数组紧接着原始数据。好，接下来我们只需要对复制数据进行移动。\n\n```js\n举例：输入样例\n6 2\n1 2 3 4 5 6\n\n那么其实真实的数组是1 2 3 4 5 6 1 2 3 4 5 6\n这个时候对后面的复制数据做处理，经过一个遍历，将他原始数据的下标+m再模n\n（以原始数据的下标，表示该向，但是数据是一样的，只是这样即便原始数据下标位置的数据被循环右移的数据所覆盖，但是其数据还保存在复制数组内，依然可以进行循环右移），这样这道题就做好了。代码如下：\n//1008 数组元素循环右移问题 (20 分)\n//一个数组A中存有N（>0）个整数，在不允许使用另外数组的前提下，将每个整数循环向右移M\n#include <cstdio>\n#include <cstring>\n#include <iostream>\n#include <algorithm>\n\nusing namespace std;\n\nconst int N = 205;\n\nint a[N],m,n;\n\n//输入\nvoid in(){\n    cin >> n >> m;\n    for(int i = 0; i < n; i ++){\n        cin >> a[i];\n        a[i + n] = a[i];//将数组全体往后移动m，先将每一个数组完全复制一份到本数组（后移n位\n        }\n    }\n            \n\n//\nvoid work(){\n    for(int i = n; i < 2 * n; i ++)\n        a[(i - n + m) % n] = a[i];//循环右移，那么要进行一次取模\n    \n}\n\nvoid out(){\n    for(int i = 0; i < n - 1; i ++){\n        cout << a[i] << \" \";\n    }\n    cout << a[n - 1] << endl;\n}\n\nint main(){\n    \n    in();\n    //不允许使用另一个数组\n    work();\n    out();\n\n    return 0;\n}\n\n```\n[题目链接](https://pintia.cn/problem-sets/994805260223102976/problems/994805316250615808)\n    ","source":"_posts/PAT乙级1008.md","raw":"---\ntitle: PAT乙级1008\ndate: 2021-04-28 09:50:04\ntags: \n    - Study\ncategories: \n    - 题解\n    - PAT题解\n---\n   我们首先来看题目：\n\n![image.png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5be71b31b7d94492877411b485e54dac~tplv-k3u1fbpfcp-watermark.image)\n\n\n题目的核心就是要将一个数组循环右移M个位置（将每个整数循环向右移M（≥0）个位置（最后M个数循环移至最前面的M个位置）\n，这样看着很简单，好像只要下标加上m在模n就好了。但是有一个条件是，不允许使用格外的数组。这样我们不能直接下标加上m模n； ，因为这样会覆盖掉一些数据。那么，我们稍微思考一下，将数组开的很大，大到足够你放下两组数据还有余（不要舍不得空间），在你输入数据时，完全复制一组数组紧接着原始数据。好，接下来我们只需要对复制数据进行移动。\n\n```js\n举例：输入样例\n6 2\n1 2 3 4 5 6\n\n那么其实真实的数组是1 2 3 4 5 6 1 2 3 4 5 6\n这个时候对后面的复制数据做处理，经过一个遍历，将他原始数据的下标+m再模n\n（以原始数据的下标，表示该向，但是数据是一样的，只是这样即便原始数据下标位置的数据被循环右移的数据所覆盖，但是其数据还保存在复制数组内，依然可以进行循环右移），这样这道题就做好了。代码如下：\n//1008 数组元素循环右移问题 (20 分)\n//一个数组A中存有N（>0）个整数，在不允许使用另外数组的前提下，将每个整数循环向右移M\n#include <cstdio>\n#include <cstring>\n#include <iostream>\n#include <algorithm>\n\nusing namespace std;\n\nconst int N = 205;\n\nint a[N],m,n;\n\n//输入\nvoid in(){\n    cin >> n >> m;\n    for(int i = 0; i < n; i ++){\n        cin >> a[i];\n        a[i + n] = a[i];//将数组全体往后移动m，先将每一个数组完全复制一份到本数组（后移n位\n        }\n    }\n            \n\n//\nvoid work(){\n    for(int i = n; i < 2 * n; i ++)\n        a[(i - n + m) % n] = a[i];//循环右移，那么要进行一次取模\n    \n}\n\nvoid out(){\n    for(int i = 0; i < n - 1; i ++){\n        cout << a[i] << \" \";\n    }\n    cout << a[n - 1] << endl;\n}\n\nint main(){\n    \n    in();\n    //不允许使用另一个数组\n    work();\n    out();\n\n    return 0;\n}\n\n```\n[题目链接](https://pintia.cn/problem-sets/994805260223102976/problems/994805316250615808)\n    ","slug":"PAT乙级1008","published":1,"updated":"2021-05-01T01:48:18.934Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktvk78en00071cws8supaetp","content":"<p>   我们首先来看题目：</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5be71b31b7d94492877411b485e54dac~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\"></p>\n<p>题目的核心就是要将一个数组循环右移M个位置（将每个整数循环向右移M（≥0）个位置（最后M个数循环移至最前面的M个位置）<br>，这样看着很简单，好像只要下标加上m在模n就好了。但是有一个条件是，不允许使用格外的数组。这样我们不能直接下标加上m模n； ，因为这样会覆盖掉一些数据。那么，我们稍微思考一下，将数组开的很大，大到足够你放下两组数据还有余（不要舍不得空间），在你输入数据时，完全复制一组数组紧接着原始数据。好，接下来我们只需要对复制数据进行移动。</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">举例：输入样例</span><br><span class=\"line\"><span class=\"number\">6</span> <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">3</span> <span class=\"number\">4</span> <span class=\"number\">5</span> <span class=\"number\">6</span></span><br><span class=\"line\"></span><br><span class=\"line\">那么其实真实的数组是<span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">3</span> <span class=\"number\">4</span> <span class=\"number\">5</span> <span class=\"number\">6</span> <span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">3</span> <span class=\"number\">4</span> <span class=\"number\">5</span> <span class=\"number\">6</span></span><br><span class=\"line\">这个时候对后面的复制数据做处理，经过一个遍历，将他原始数据的下标+m再模n</span><br><span class=\"line\">（以原始数据的下标，表示该向，但是数据是一样的，只是这样即便原始数据下标位置的数据被循环右移的数据所覆盖，但是其数据还保存在复制数组内，依然可以进行循环右移），这样这道题就做好了。代码如下：</span><br><span class=\"line\"><span class=\"comment\">//1008 数组元素循环右移问题 (20 分)</span></span><br><span class=\"line\"><span class=\"comment\">//一个数组A中存有N（&gt;0）个整数，在不允许使用另外数组的前提下，将每个整数循环向右移M</span></span><br><span class=\"line\">#include &lt;cstdio&gt;</span><br><span class=\"line\">#include &lt;cstring&gt;</span><br><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">#include &lt;algorithm&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> int N = <span class=\"number\">205</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">int a[N],m,n;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//输入</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"function\"><span class=\"title\">in</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(int i = <span class=\"number\">0</span>; i &lt; n; i ++)&#123;</span><br><span class=\"line\">        cin &gt;&gt; a[i];</span><br><span class=\"line\">        a[i + n] = a[i];<span class=\"comment\">//将数组全体往后移动m，先将每一个数组完全复制一份到本数组（后移n位</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">            </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"function\"><span class=\"title\">work</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(int i = n; i &lt; <span class=\"number\">2</span> * n; i ++)</span><br><span class=\"line\">        a[(i - n + m) % n] = a[i];<span class=\"comment\">//循环右移，那么要进行一次取模</span></span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"function\"><span class=\"title\">out</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(int i = <span class=\"number\">0</span>; i &lt; n - <span class=\"number\">1</span>; i ++)&#123;</span><br><span class=\"line\">        cout &lt;&lt; a[i] &lt;&lt; <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; a[n - <span class=\"number\">1</span>] &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">int <span class=\"function\"><span class=\"title\">main</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">in</span>();</span><br><span class=\"line\">    <span class=\"comment\">//不允许使用另一个数组</span></span><br><span class=\"line\">    work();</span><br><span class=\"line\">    out();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></div></figure>\n<p><span class=\"exturl\"><a class=\"exturl__link\"   href=\"https://pintia.cn/problem-sets/994805260223102976/problems/994805316250615808\" >题目链接</a><span class=\"exturl__icon\"><i class=\"fas fa-external-link-alt\"></i></span></span>\n    </p>\n","site":{"data":{}},"excerpt":"","more":"<p>   我们首先来看题目：</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5be71b31b7d94492877411b485e54dac~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\"></p>\n<p>题目的核心就是要将一个数组循环右移M个位置（将每个整数循环向右移M（≥0）个位置（最后M个数循环移至最前面的M个位置）<br>，这样看着很简单，好像只要下标加上m在模n就好了。但是有一个条件是，不允许使用格外的数组。这样我们不能直接下标加上m模n； ，因为这样会覆盖掉一些数据。那么，我们稍微思考一下，将数组开的很大，大到足够你放下两组数据还有余（不要舍不得空间），在你输入数据时，完全复制一组数组紧接着原始数据。好，接下来我们只需要对复制数据进行移动。</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">举例：输入样例</span><br><span class=\"line\"><span class=\"number\">6</span> <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">3</span> <span class=\"number\">4</span> <span class=\"number\">5</span> <span class=\"number\">6</span></span><br><span class=\"line\"></span><br><span class=\"line\">那么其实真实的数组是<span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">3</span> <span class=\"number\">4</span> <span class=\"number\">5</span> <span class=\"number\">6</span> <span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">3</span> <span class=\"number\">4</span> <span class=\"number\">5</span> <span class=\"number\">6</span></span><br><span class=\"line\">这个时候对后面的复制数据做处理，经过一个遍历，将他原始数据的下标+m再模n</span><br><span class=\"line\">（以原始数据的下标，表示该向，但是数据是一样的，只是这样即便原始数据下标位置的数据被循环右移的数据所覆盖，但是其数据还保存在复制数组内，依然可以进行循环右移），这样这道题就做好了。代码如下：</span><br><span class=\"line\"><span class=\"comment\">//1008 数组元素循环右移问题 (20 分)</span></span><br><span class=\"line\"><span class=\"comment\">//一个数组A中存有N（&gt;0）个整数，在不允许使用另外数组的前提下，将每个整数循环向右移M</span></span><br><span class=\"line\">#include &lt;cstdio&gt;</span><br><span class=\"line\">#include &lt;cstring&gt;</span><br><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">#include &lt;algorithm&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> int N = <span class=\"number\">205</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">int a[N],m,n;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//输入</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"function\"><span class=\"title\">in</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(int i = <span class=\"number\">0</span>; i &lt; n; i ++)&#123;</span><br><span class=\"line\">        cin &gt;&gt; a[i];</span><br><span class=\"line\">        a[i + n] = a[i];<span class=\"comment\">//将数组全体往后移动m，先将每一个数组完全复制一份到本数组（后移n位</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">            </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"function\"><span class=\"title\">work</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(int i = n; i &lt; <span class=\"number\">2</span> * n; i ++)</span><br><span class=\"line\">        a[(i - n + m) % n] = a[i];<span class=\"comment\">//循环右移，那么要进行一次取模</span></span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"function\"><span class=\"title\">out</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(int i = <span class=\"number\">0</span>; i &lt; n - <span class=\"number\">1</span>; i ++)&#123;</span><br><span class=\"line\">        cout &lt;&lt; a[i] &lt;&lt; <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; a[n - <span class=\"number\">1</span>] &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">int <span class=\"function\"><span class=\"title\">main</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">in</span>();</span><br><span class=\"line\">    <span class=\"comment\">//不允许使用另一个数组</span></span><br><span class=\"line\">    work();</span><br><span class=\"line\">    out();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></div></figure>\n<p><span class=\"exturl\"><a class=\"exturl__link\"   href=\"https://pintia.cn/problem-sets/994805260223102976/problems/994805316250615808\" >题目链接</a><span class=\"exturl__icon\"><i class=\"fas fa-external-link-alt\"></i></span></span>\n    </p>\n"},{"title":"PAT乙级1009","date":"2021-05-05T14:11:38.000Z","_content":"\n![image.png](https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/fd031b97ac664bad9c18d02c1daf6236~tplv-k3u1fbpfcp-watermark.image)\n首先是常规思路，用一个二维数组来存单词。一个单词占据一行的位置。每一行一'\\0'结束。然后倒序输出这个二维字符数组。注意处理一下末尾的空格。\n```js\n//测试输入包含一个测试用例，在一行内给出总长度不超过 80 的字符串。字符串由若干单词和若干空格组成，其中单词是由英文字母（大小写有区分）组成的字符串，单词之间用 1 个空格分开，输入保证句子末尾没有多余的空格。\n#include <cstdio>\n#include <cstring>\n#include <iostream>\n#include <algorithm>\n#include <string>\n\nusing namespace std;\n\nstring s;\nchar a[85][85];//用来存单词，一行一个\nint m,n;//行，列\nint main(){\n    getline(cin,s);//输入字符串，getline包含在#include<string>中\n    \n    for(int i = 0; i < s.size(); i ++){\n        if(s[i] != ' ') \n            a[m][n ++] = s[i];\n        else{\n            a[m ++][n] = '\\0';//有一个空格了，单词存在下一行\n            n = 0;//n 归零，下一个单词要在下一行重新存\n        }\n    }\n\n    for(int i = m; i >= 0; i --){//倒序输出单词\n        cout << a[i];//输出一整个单词\n        if(i != 0)\n            cout << \" \";//最后不能输出空格\n    }\n\n    cout << endl;\n    return 0;\n}\n```\n倒序输出，就不得不想到栈，这样只从一段出入是不是和栈很像。所以我们使用STL库中的stack来完成题目,：将输⼊的每个单词s都分别v.push(s)压⼊栈中，再输出栈顶v.top()，然后将栈顶元素弹出v.pop()，直到栈空为⽌:\n```js\n//foreverking\n#include <cstdio>\n#include <queue>\n#include <algorithm>\n#include <cstring>\n#include <iostream>\n#include <cmath>\n#include <stack>\nusing namespace std;\nint main() {\n    stack<string> v;\n    string s;\n    while(cin >> s) v.push(s);\n    cout << v.top();\n    v.pop();\n    while(!v.empty()) {\n        cout << \" \" << v.top();\n        v.pop();\n    }\n    return 0;\n}\n```\n[题目链接](https://pintia.cn/problem-sets/994805260223102976/problems/994805314941992960)","source":"_posts/PAT乙级1009.md","raw":"---\ntitle: PAT乙级1009\ndate: 2021-05-05 22:11:38\ntags: \n    - Study\ncategories: \n    - 题解\n    - PAT题解\n---\n\n![image.png](https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/fd031b97ac664bad9c18d02c1daf6236~tplv-k3u1fbpfcp-watermark.image)\n首先是常规思路，用一个二维数组来存单词。一个单词占据一行的位置。每一行一'\\0'结束。然后倒序输出这个二维字符数组。注意处理一下末尾的空格。\n```js\n//测试输入包含一个测试用例，在一行内给出总长度不超过 80 的字符串。字符串由若干单词和若干空格组成，其中单词是由英文字母（大小写有区分）组成的字符串，单词之间用 1 个空格分开，输入保证句子末尾没有多余的空格。\n#include <cstdio>\n#include <cstring>\n#include <iostream>\n#include <algorithm>\n#include <string>\n\nusing namespace std;\n\nstring s;\nchar a[85][85];//用来存单词，一行一个\nint m,n;//行，列\nint main(){\n    getline(cin,s);//输入字符串，getline包含在#include<string>中\n    \n    for(int i = 0; i < s.size(); i ++){\n        if(s[i] != ' ') \n            a[m][n ++] = s[i];\n        else{\n            a[m ++][n] = '\\0';//有一个空格了，单词存在下一行\n            n = 0;//n 归零，下一个单词要在下一行重新存\n        }\n    }\n\n    for(int i = m; i >= 0; i --){//倒序输出单词\n        cout << a[i];//输出一整个单词\n        if(i != 0)\n            cout << \" \";//最后不能输出空格\n    }\n\n    cout << endl;\n    return 0;\n}\n```\n倒序输出，就不得不想到栈，这样只从一段出入是不是和栈很像。所以我们使用STL库中的stack来完成题目,：将输⼊的每个单词s都分别v.push(s)压⼊栈中，再输出栈顶v.top()，然后将栈顶元素弹出v.pop()，直到栈空为⽌:\n```js\n//foreverking\n#include <cstdio>\n#include <queue>\n#include <algorithm>\n#include <cstring>\n#include <iostream>\n#include <cmath>\n#include <stack>\nusing namespace std;\nint main() {\n    stack<string> v;\n    string s;\n    while(cin >> s) v.push(s);\n    cout << v.top();\n    v.pop();\n    while(!v.empty()) {\n        cout << \" \" << v.top();\n        v.pop();\n    }\n    return 0;\n}\n```\n[题目链接](https://pintia.cn/problem-sets/994805260223102976/problems/994805314941992960)","slug":"PAT乙级1009","published":1,"updated":"2021-05-05T14:16:22.149Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktvk78et00091cws7jto0hg9","content":"<p><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/fd031b97ac664bad9c18d02c1daf6236~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\"><br>首先是常规思路，用一个二维数组来存单词。一个单词占据一行的位置。每一行一’\\0’结束。然后倒序输出这个二维字符数组。注意处理一下末尾的空格。</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//测试输入包含一个测试用例，在一行内给出总长度不超过 80 的字符串。字符串由若干单词和若干空格组成，其中单词是由英文字母（大小写有区分）组成的字符串，单词之间用 1 个空格分开，输入保证句子末尾没有多余的空格。</span></span><br><span class=\"line\">#include &lt;cstdio&gt;</span><br><span class=\"line\">#include &lt;cstring&gt;</span><br><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">#include &lt;algorithm&gt;</span><br><span class=\"line\">#include &lt;string&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\"></span><br><span class=\"line\">string s;</span><br><span class=\"line\">char a[<span class=\"number\">85</span>][<span class=\"number\">85</span>];<span class=\"comment\">//用来存单词，一行一个</span></span><br><span class=\"line\">int m,n;<span class=\"comment\">//行，列</span></span><br><span class=\"line\">int <span class=\"function\"><span class=\"title\">main</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    getline(cin,s);<span class=\"comment\">//输入字符串，getline包含在#include&lt;string&gt;中</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(int i = <span class=\"number\">0</span>; i &lt; s.size(); i ++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(s[i] != <span class=\"string\">&#x27; &#x27;</span>) </span><br><span class=\"line\">            a[m][n ++] = s[i];</span><br><span class=\"line\">        <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            a[m ++][n] = <span class=\"string\">&#x27;\\0&#x27;</span>;<span class=\"comment\">//有一个空格了，单词存在下一行</span></span><br><span class=\"line\">            n = <span class=\"number\">0</span>;<span class=\"comment\">//n 归零，下一个单词要在下一行重新存</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(int i = m; i &gt;= <span class=\"number\">0</span>; i --)&#123;<span class=\"comment\">//倒序输出单词</span></span><br><span class=\"line\">        cout &lt;&lt; a[i];<span class=\"comment\">//输出一整个单词</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i != <span class=\"number\">0</span>)</span><br><span class=\"line\">            cout &lt;&lt; <span class=\"string\">&quot; &quot;</span>;<span class=\"comment\">//最后不能输出空格</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    cout &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>倒序输出，就不得不想到栈，这样只从一段出入是不是和栈很像。所以我们使用STL库中的stack来完成题目,：将输⼊的每个单词s都分别v.push(s)压⼊栈中，再输出栈顶v.top()，然后将栈顶元素弹出v.pop()，直到栈空为⽌:</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//foreverking</span></span><br><span class=\"line\">#include &lt;cstdio&gt;</span><br><span class=\"line\">#include &lt;queue&gt;</span><br><span class=\"line\">#include &lt;algorithm&gt;</span><br><span class=\"line\">#include &lt;cstring&gt;</span><br><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">#include &lt;cmath&gt;</span><br><span class=\"line\">#include &lt;stack&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\">int <span class=\"function\"><span class=\"title\">main</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    stack&lt;string&gt; v;</span><br><span class=\"line\">    string s;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(cin &gt;&gt; s) v.push(s);</span><br><span class=\"line\">    cout &lt;&lt; v.top();</span><br><span class=\"line\">    v.pop();</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(!v.empty()) &#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot; &quot;</span> &lt;&lt; v.top();</span><br><span class=\"line\">        v.pop();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p><span class=\"exturl\"><a class=\"exturl__link\"   href=\"https://pintia.cn/problem-sets/994805260223102976/problems/994805314941992960\" >题目链接</a><span class=\"exturl__icon\"><i class=\"fas fa-external-link-alt\"></i></span></span></p>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/fd031b97ac664bad9c18d02c1daf6236~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\"><br>首先是常规思路，用一个二维数组来存单词。一个单词占据一行的位置。每一行一’\\0’结束。然后倒序输出这个二维字符数组。注意处理一下末尾的空格。</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//测试输入包含一个测试用例，在一行内给出总长度不超过 80 的字符串。字符串由若干单词和若干空格组成，其中单词是由英文字母（大小写有区分）组成的字符串，单词之间用 1 个空格分开，输入保证句子末尾没有多余的空格。</span></span><br><span class=\"line\">#include &lt;cstdio&gt;</span><br><span class=\"line\">#include &lt;cstring&gt;</span><br><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">#include &lt;algorithm&gt;</span><br><span class=\"line\">#include &lt;string&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\"></span><br><span class=\"line\">string s;</span><br><span class=\"line\">char a[<span class=\"number\">85</span>][<span class=\"number\">85</span>];<span class=\"comment\">//用来存单词，一行一个</span></span><br><span class=\"line\">int m,n;<span class=\"comment\">//行，列</span></span><br><span class=\"line\">int <span class=\"function\"><span class=\"title\">main</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    getline(cin,s);<span class=\"comment\">//输入字符串，getline包含在#include&lt;string&gt;中</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(int i = <span class=\"number\">0</span>; i &lt; s.size(); i ++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(s[i] != <span class=\"string\">&#x27; &#x27;</span>) </span><br><span class=\"line\">            a[m][n ++] = s[i];</span><br><span class=\"line\">        <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            a[m ++][n] = <span class=\"string\">&#x27;\\0&#x27;</span>;<span class=\"comment\">//有一个空格了，单词存在下一行</span></span><br><span class=\"line\">            n = <span class=\"number\">0</span>;<span class=\"comment\">//n 归零，下一个单词要在下一行重新存</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(int i = m; i &gt;= <span class=\"number\">0</span>; i --)&#123;<span class=\"comment\">//倒序输出单词</span></span><br><span class=\"line\">        cout &lt;&lt; a[i];<span class=\"comment\">//输出一整个单词</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i != <span class=\"number\">0</span>)</span><br><span class=\"line\">            cout &lt;&lt; <span class=\"string\">&quot; &quot;</span>;<span class=\"comment\">//最后不能输出空格</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    cout &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>倒序输出，就不得不想到栈，这样只从一段出入是不是和栈很像。所以我们使用STL库中的stack来完成题目,：将输⼊的每个单词s都分别v.push(s)压⼊栈中，再输出栈顶v.top()，然后将栈顶元素弹出v.pop()，直到栈空为⽌:</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//foreverking</span></span><br><span class=\"line\">#include &lt;cstdio&gt;</span><br><span class=\"line\">#include &lt;queue&gt;</span><br><span class=\"line\">#include &lt;algorithm&gt;</span><br><span class=\"line\">#include &lt;cstring&gt;</span><br><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">#include &lt;cmath&gt;</span><br><span class=\"line\">#include &lt;stack&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\">int <span class=\"function\"><span class=\"title\">main</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    stack&lt;string&gt; v;</span><br><span class=\"line\">    string s;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(cin &gt;&gt; s) v.push(s);</span><br><span class=\"line\">    cout &lt;&lt; v.top();</span><br><span class=\"line\">    v.pop();</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(!v.empty()) &#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot; &quot;</span> &lt;&lt; v.top();</span><br><span class=\"line\">        v.pop();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p><span class=\"exturl\"><a class=\"exturl__link\"   href=\"https://pintia.cn/problem-sets/994805260223102976/problems/994805314941992960\" >题目链接</a><span class=\"exturl__icon\"><i class=\"fas fa-external-link-alt\"></i></span></span></p>\n"},{"title":"PAT乙级1010","date":"2021-04-28T01:52:26.000Z","_content":"今天做到一道不错的题目，题目很简单，但是细节上的处理花费了我一些时间。首先看看题目：\n\n![image.png](https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b5e44ac35671465290774c8a1c5f6d51~tplv-k3u1fbpfcp-watermark.image)\n意思就是按递降依次输入一个一元多项式的系数和指数，输入的系数不能为0（为0还有啥意义），然后你输出他求导后的系数和指数（求导怎么求都会），其实就是递降输入各组（m,n）,最后输出m*n，n--.但是如果是“零多项式”，如果是在最后输入零多项式，那么就不输出（从样例得知），如果是第一组输入零多项式（第一组输出那么就只输入了一组哦，不毕竟降序），就输出0 0。当然还有一点是输出的最后一行后没有空格。那我们就需要对每一组判定，是不是零多项式，是不是最后一个输出。是不是零多项式就看指数是不是0；用一个FLAG判断是不是第一个输入的。代码如下：\n\n```js\n//设计函数求一元多项式的导数。（注：xn（n为整数）的一阶导数为nx^n−1\n#include <cstring>\n#include <cstdio>\n#include <iostream>\n\nusing namespace std;\n\nint coe,exp;//系数和指数的缩写\n\n//以指数递降方式输入多项式非零项系数和指数（绝对值均为不超过 1000 的整数）。数字间以空格分隔\n//如果指数为0，那么输出0 0（最后就不输出），如果\nint main(){\n    int flag = 0;//flag判断是否输出已经输出过，如果已经输出过（即不是第一次输出），那么要在本次输出前输出一个空格\n    while(scanf(\"%d%d\",&coe,&exp) != EOF){\n        if(exp == 0){\n            //指数为0的情况\n            if(flag == 0) printf(\"0 0\");//如果是第一次输出的，那么指数为0时输入 0 0 ，不然末尾直接不输出\n        }\n        else{\n            if(flag++ == 0) printf(\"%d %d\",coe*exp,exp - 1);//这是第一次输出，不用输出空格就好\n            else printf(\" %d %d\",coe*exp,exp - 1);//已经输出过了，要中间有空格\n        }\n    }\n\n    return 0;\n}\n\n```\n这道题思路就是这样，\n我的一个网友也做了这个题，他的代码出现了错误：\n\n```js\n//设计函数求一元多项式的导数。（注：xn（n为整数）的一阶导数为nx^n−1\n#include <stdio.h>\n#include <stdlib.h>\n\nint main()\n{\n    int n[50],m[50];\n    int i=-1;\n    int j=0;\n    //输入数\n    do\n    {\n        i++;\n        scanf(\"%d %d\",&n[i],&m[i]);\n    }while(m[i]!=0);\n    int sum=i; \n    for(i=0; i<=sum; i++)\n    {\n        n[i]=n[i]*m[i];\n        m[i]--;\n        if(!j&&n[i]!=0)//如果第一个输出且系数不为0\n        {\n            printf(\"%d %d\",n[i],m[i]);\n            j=1;\n        }\n        else if(!j&&n[i]==0&&m[i]==0)//第一个输出且为零多项式\n        {\n          j=1;\n          printf(\"0 0\");\n\n        }\n        else if(j&&n[i]!=0) //不是第一个输出且系数不为0\n        {\n            printf(\" %d %d\",n[i],m[i]);\n        }\n        else if(j&&n[i]==0&&m[i]==0)//第一个输出且为零多项式\n        printf(\" 0 0\");\n    }\n  putchar('\\n');\n}\n```\n发现错误没，就在那这里：\n\n![image.png](https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c1092bb35c8941918b329bc534ff3772~tplv-k3u1fbpfcp-watermark.image)\n\n他写出当求导后的系数和指数都为0就输出 0 0.但实际上求导后系数变为0，这个时候指数必不可能为0。所以改为就好了。\n\n![image.png](https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0db66fe244694f5baf581bfcb0875173~tplv-k3u1fbpfcp-watermark.image)\n\n\n这道题就是这样。\n[题目链接](https://pintia.cn/problem-sets/994805260223102976/problems/994805313708867584)\n","source":"_posts/PAT乙级1010.md","raw":"---\ntitle: PAT乙级1010\ndate: 2021-04-28 09:52:26\ntags: \n    - Study\ncategories: \n    - 题解\n    - PAT题解\n---\n今天做到一道不错的题目，题目很简单，但是细节上的处理花费了我一些时间。首先看看题目：\n\n![image.png](https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b5e44ac35671465290774c8a1c5f6d51~tplv-k3u1fbpfcp-watermark.image)\n意思就是按递降依次输入一个一元多项式的系数和指数，输入的系数不能为0（为0还有啥意义），然后你输出他求导后的系数和指数（求导怎么求都会），其实就是递降输入各组（m,n）,最后输出m*n，n--.但是如果是“零多项式”，如果是在最后输入零多项式，那么就不输出（从样例得知），如果是第一组输入零多项式（第一组输出那么就只输入了一组哦，不毕竟降序），就输出0 0。当然还有一点是输出的最后一行后没有空格。那我们就需要对每一组判定，是不是零多项式，是不是最后一个输出。是不是零多项式就看指数是不是0；用一个FLAG判断是不是第一个输入的。代码如下：\n\n```js\n//设计函数求一元多项式的导数。（注：xn（n为整数）的一阶导数为nx^n−1\n#include <cstring>\n#include <cstdio>\n#include <iostream>\n\nusing namespace std;\n\nint coe,exp;//系数和指数的缩写\n\n//以指数递降方式输入多项式非零项系数和指数（绝对值均为不超过 1000 的整数）。数字间以空格分隔\n//如果指数为0，那么输出0 0（最后就不输出），如果\nint main(){\n    int flag = 0;//flag判断是否输出已经输出过，如果已经输出过（即不是第一次输出），那么要在本次输出前输出一个空格\n    while(scanf(\"%d%d\",&coe,&exp) != EOF){\n        if(exp == 0){\n            //指数为0的情况\n            if(flag == 0) printf(\"0 0\");//如果是第一次输出的，那么指数为0时输入 0 0 ，不然末尾直接不输出\n        }\n        else{\n            if(flag++ == 0) printf(\"%d %d\",coe*exp,exp - 1);//这是第一次输出，不用输出空格就好\n            else printf(\" %d %d\",coe*exp,exp - 1);//已经输出过了，要中间有空格\n        }\n    }\n\n    return 0;\n}\n\n```\n这道题思路就是这样，\n我的一个网友也做了这个题，他的代码出现了错误：\n\n```js\n//设计函数求一元多项式的导数。（注：xn（n为整数）的一阶导数为nx^n−1\n#include <stdio.h>\n#include <stdlib.h>\n\nint main()\n{\n    int n[50],m[50];\n    int i=-1;\n    int j=0;\n    //输入数\n    do\n    {\n        i++;\n        scanf(\"%d %d\",&n[i],&m[i]);\n    }while(m[i]!=0);\n    int sum=i; \n    for(i=0; i<=sum; i++)\n    {\n        n[i]=n[i]*m[i];\n        m[i]--;\n        if(!j&&n[i]!=0)//如果第一个输出且系数不为0\n        {\n            printf(\"%d %d\",n[i],m[i]);\n            j=1;\n        }\n        else if(!j&&n[i]==0&&m[i]==0)//第一个输出且为零多项式\n        {\n          j=1;\n          printf(\"0 0\");\n\n        }\n        else if(j&&n[i]!=0) //不是第一个输出且系数不为0\n        {\n            printf(\" %d %d\",n[i],m[i]);\n        }\n        else if(j&&n[i]==0&&m[i]==0)//第一个输出且为零多项式\n        printf(\" 0 0\");\n    }\n  putchar('\\n');\n}\n```\n发现错误没，就在那这里：\n\n![image.png](https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c1092bb35c8941918b329bc534ff3772~tplv-k3u1fbpfcp-watermark.image)\n\n他写出当求导后的系数和指数都为0就输出 0 0.但实际上求导后系数变为0，这个时候指数必不可能为0。所以改为就好了。\n\n![image.png](https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0db66fe244694f5baf581bfcb0875173~tplv-k3u1fbpfcp-watermark.image)\n\n\n这道题就是这样。\n[题目链接](https://pintia.cn/problem-sets/994805260223102976/problems/994805313708867584)\n","slug":"PAT乙级1010","published":1,"updated":"2021-05-01T01:48:42.262Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktvk78eu000a1cwsa0ql04me","content":"<p>今天做到一道不错的题目，题目很简单，但是细节上的处理花费了我一些时间。首先看看题目：</p>\n<p><img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b5e44ac35671465290774c8a1c5f6d51~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\"><br>意思就是按递降依次输入一个一元多项式的系数和指数，输入的系数不能为0（为0还有啥意义），然后你输出他求导后的系数和指数（求导怎么求都会），其实就是递降输入各组（m,n）,最后输出m*n，n–.但是如果是“零多项式”，如果是在最后输入零多项式，那么就不输出（从样例得知），如果是第一组输入零多项式（第一组输出那么就只输入了一组哦，不毕竟降序），就输出0 0。当然还有一点是输出的最后一行后没有空格。那我们就需要对每一组判定，是不是零多项式，是不是最后一个输出。是不是零多项式就看指数是不是0；用一个FLAG判断是不是第一个输入的。代码如下：</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//设计函数求一元多项式的导数。（注：xn（n为整数）的一阶导数为nx^n−1</span></span><br><span class=\"line\">#include &lt;cstring&gt;</span><br><span class=\"line\">#include &lt;cstdio&gt;</span><br><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\"></span><br><span class=\"line\">int coe,exp;<span class=\"comment\">//系数和指数的缩写</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//以指数递降方式输入多项式非零项系数和指数（绝对值均为不超过 1000 的整数）。数字间以空格分隔</span></span><br><span class=\"line\"><span class=\"comment\">//如果指数为0，那么输出0 0（最后就不输出），如果</span></span><br><span class=\"line\">int <span class=\"function\"><span class=\"title\">main</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    int flag = <span class=\"number\">0</span>;<span class=\"comment\">//flag判断是否输出已经输出过，如果已经输出过（即不是第一次输出），那么要在本次输出前输出一个空格</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(scanf(<span class=\"string\">&quot;%d%d&quot;</span>,&amp;coe,&amp;exp) != EOF)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(exp == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            <span class=\"comment\">//指数为0的情况</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(flag == <span class=\"number\">0</span>) printf(<span class=\"string\">&quot;0 0&quot;</span>);<span class=\"comment\">//如果是第一次输出的，那么指数为0时输入 0 0 ，不然末尾直接不输出</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(flag++ == <span class=\"number\">0</span>) printf(<span class=\"string\">&quot;%d %d&quot;</span>,coe*exp,exp - <span class=\"number\">1</span>);<span class=\"comment\">//这是第一次输出，不用输出空格就好</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span> printf(<span class=\"string\">&quot; %d %d&quot;</span>,coe*exp,exp - <span class=\"number\">1</span>);<span class=\"comment\">//已经输出过了，要中间有空格</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></div></figure>\n<p>这道题思路就是这样，<br>我的一个网友也做了这个题，他的代码出现了错误：</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//设计函数求一元多项式的导数。（注：xn（n为整数）的一阶导数为nx^n−1</span></span><br><span class=\"line\">#include &lt;stdio.h&gt;</span><br><span class=\"line\">#include &lt;stdlib.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">int main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    int n[<span class=\"number\">50</span>],m[<span class=\"number\">50</span>];</span><br><span class=\"line\">    int i=-<span class=\"number\">1</span>;</span><br><span class=\"line\">    int j=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"comment\">//输入数</span></span><br><span class=\"line\">    <span class=\"keyword\">do</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        i++;</span><br><span class=\"line\">        scanf(<span class=\"string\">&quot;%d %d&quot;</span>,&amp;n[i],&amp;m[i]);</span><br><span class=\"line\">    &#125;<span class=\"keyword\">while</span>(m[i]!=<span class=\"number\">0</span>);</span><br><span class=\"line\">    int sum=i; </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(i=<span class=\"number\">0</span>; i&lt;=sum; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        n[i]=n[i]*m[i];</span><br><span class=\"line\">        m[i]--;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!j&amp;&amp;n[i]!=<span class=\"number\">0</span>)<span class=\"comment\">//如果第一个输出且系数不为0</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            printf(<span class=\"string\">&quot;%d %d&quot;</span>,n[i],m[i]);</span><br><span class=\"line\">            j=<span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(!j&amp;&amp;n[i]==<span class=\"number\">0</span>&amp;&amp;m[i]==<span class=\"number\">0</span>)<span class=\"comment\">//第一个输出且为零多项式</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          j=<span class=\"number\">1</span>;</span><br><span class=\"line\">          printf(<span class=\"string\">&quot;0 0&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(j&amp;&amp;n[i]!=<span class=\"number\">0</span>) <span class=\"comment\">//不是第一个输出且系数不为0</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            printf(<span class=\"string\">&quot; %d %d&quot;</span>,n[i],m[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(j&amp;&amp;n[i]==<span class=\"number\">0</span>&amp;&amp;m[i]==<span class=\"number\">0</span>)<span class=\"comment\">//第一个输出且为零多项式</span></span><br><span class=\"line\">        printf(<span class=\"string\">&quot; 0 0&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  putchar(<span class=\"string\">&#x27;\\n&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>发现错误没，就在那这里：</p>\n<p><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c1092bb35c8941918b329bc534ff3772~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\"></p>\n<p>他写出当求导后的系数和指数都为0就输出 0 0.但实际上求导后系数变为0，这个时候指数必不可能为0。所以改为就好了。</p>\n<p><img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0db66fe244694f5baf581bfcb0875173~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\"></p>\n<p>这道题就是这样。<br><span class=\"exturl\"><a class=\"exturl__link\"   href=\"https://pintia.cn/problem-sets/994805260223102976/problems/994805313708867584\" >题目链接</a><span class=\"exturl__icon\"><i class=\"fas fa-external-link-alt\"></i></span></span></p>\n","site":{"data":{}},"excerpt":"","more":"<p>今天做到一道不错的题目，题目很简单，但是细节上的处理花费了我一些时间。首先看看题目：</p>\n<p><img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b5e44ac35671465290774c8a1c5f6d51~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\"><br>意思就是按递降依次输入一个一元多项式的系数和指数，输入的系数不能为0（为0还有啥意义），然后你输出他求导后的系数和指数（求导怎么求都会），其实就是递降输入各组（m,n）,最后输出m*n，n–.但是如果是“零多项式”，如果是在最后输入零多项式，那么就不输出（从样例得知），如果是第一组输入零多项式（第一组输出那么就只输入了一组哦，不毕竟降序），就输出0 0。当然还有一点是输出的最后一行后没有空格。那我们就需要对每一组判定，是不是零多项式，是不是最后一个输出。是不是零多项式就看指数是不是0；用一个FLAG判断是不是第一个输入的。代码如下：</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//设计函数求一元多项式的导数。（注：xn（n为整数）的一阶导数为nx^n−1</span></span><br><span class=\"line\">#include &lt;cstring&gt;</span><br><span class=\"line\">#include &lt;cstdio&gt;</span><br><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\"></span><br><span class=\"line\">int coe,exp;<span class=\"comment\">//系数和指数的缩写</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//以指数递降方式输入多项式非零项系数和指数（绝对值均为不超过 1000 的整数）。数字间以空格分隔</span></span><br><span class=\"line\"><span class=\"comment\">//如果指数为0，那么输出0 0（最后就不输出），如果</span></span><br><span class=\"line\">int <span class=\"function\"><span class=\"title\">main</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    int flag = <span class=\"number\">0</span>;<span class=\"comment\">//flag判断是否输出已经输出过，如果已经输出过（即不是第一次输出），那么要在本次输出前输出一个空格</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(scanf(<span class=\"string\">&quot;%d%d&quot;</span>,&amp;coe,&amp;exp) != EOF)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(exp == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            <span class=\"comment\">//指数为0的情况</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(flag == <span class=\"number\">0</span>) printf(<span class=\"string\">&quot;0 0&quot;</span>);<span class=\"comment\">//如果是第一次输出的，那么指数为0时输入 0 0 ，不然末尾直接不输出</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(flag++ == <span class=\"number\">0</span>) printf(<span class=\"string\">&quot;%d %d&quot;</span>,coe*exp,exp - <span class=\"number\">1</span>);<span class=\"comment\">//这是第一次输出，不用输出空格就好</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span> printf(<span class=\"string\">&quot; %d %d&quot;</span>,coe*exp,exp - <span class=\"number\">1</span>);<span class=\"comment\">//已经输出过了，要中间有空格</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></div></figure>\n<p>这道题思路就是这样，<br>我的一个网友也做了这个题，他的代码出现了错误：</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//设计函数求一元多项式的导数。（注：xn（n为整数）的一阶导数为nx^n−1</span></span><br><span class=\"line\">#include &lt;stdio.h&gt;</span><br><span class=\"line\">#include &lt;stdlib.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">int main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    int n[<span class=\"number\">50</span>],m[<span class=\"number\">50</span>];</span><br><span class=\"line\">    int i=-<span class=\"number\">1</span>;</span><br><span class=\"line\">    int j=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"comment\">//输入数</span></span><br><span class=\"line\">    <span class=\"keyword\">do</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        i++;</span><br><span class=\"line\">        scanf(<span class=\"string\">&quot;%d %d&quot;</span>,&amp;n[i],&amp;m[i]);</span><br><span class=\"line\">    &#125;<span class=\"keyword\">while</span>(m[i]!=<span class=\"number\">0</span>);</span><br><span class=\"line\">    int sum=i; </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(i=<span class=\"number\">0</span>; i&lt;=sum; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        n[i]=n[i]*m[i];</span><br><span class=\"line\">        m[i]--;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!j&amp;&amp;n[i]!=<span class=\"number\">0</span>)<span class=\"comment\">//如果第一个输出且系数不为0</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            printf(<span class=\"string\">&quot;%d %d&quot;</span>,n[i],m[i]);</span><br><span class=\"line\">            j=<span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(!j&amp;&amp;n[i]==<span class=\"number\">0</span>&amp;&amp;m[i]==<span class=\"number\">0</span>)<span class=\"comment\">//第一个输出且为零多项式</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          j=<span class=\"number\">1</span>;</span><br><span class=\"line\">          printf(<span class=\"string\">&quot;0 0&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(j&amp;&amp;n[i]!=<span class=\"number\">0</span>) <span class=\"comment\">//不是第一个输出且系数不为0</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            printf(<span class=\"string\">&quot; %d %d&quot;</span>,n[i],m[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(j&amp;&amp;n[i]==<span class=\"number\">0</span>&amp;&amp;m[i]==<span class=\"number\">0</span>)<span class=\"comment\">//第一个输出且为零多项式</span></span><br><span class=\"line\">        printf(<span class=\"string\">&quot; 0 0&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  putchar(<span class=\"string\">&#x27;\\n&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>发现错误没，就在那这里：</p>\n<p><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c1092bb35c8941918b329bc534ff3772~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\"></p>\n<p>他写出当求导后的系数和指数都为0就输出 0 0.但实际上求导后系数变为0，这个时候指数必不可能为0。所以改为就好了。</p>\n<p><img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0db66fe244694f5baf581bfcb0875173~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\"></p>\n<p>这道题就是这样。<br><span class=\"exturl\"><a class=\"exturl__link\"   href=\"https://pintia.cn/problem-sets/994805260223102976/problems/994805313708867584\" >题目链接</a><span class=\"exturl__icon\"><i class=\"fas fa-external-link-alt\"></i></span></span></p>\n"},{"title":"PAT乙级1014","date":"2021-04-28T01:59:15.000Z","_content":"这是一道比较繁琐的题，题目是这样的：\n\n![image.png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/806306c923174d2da703c84b5a4571bb~tplv-k3u1fbpfcp-watermark.image)\n首先的难点就在于，一对相同的字母（数字）是指在一对字符串上相同位置的相同字母，~~这其实让题目更简单~~，只要三个循环就可以完成题目。然后是相同字母的位置代表星期几，小时数。值得是字母在字母表中的位置：比如D是第四个。最后一点是输出时间的小时和分钟时，若时间小于10应该在个位前面加'0'补足两位数、分析完毕，展示代码：\n\n```js\n#include <cstdio>\n#include <iostream>\n#include <cstring>\n#include <cmath>\n\nusing namespace std;\n\nstring day[7] = { \"MON\",\"TUE\",\"WED\",\"THU\",\"FRI\",\"SAT\",\"SUN\"};\nstring a,b,c,d;//两对字符串\nint pos;//记录第一个相同大写字母的位置\n\n//输出星期几\nvoid week_Day(){\n    for(int i = 0; i < a.length() && i < b.length(); i++){\n        if(a[i] == b[i] && a[i] - 'A'>= 0 && a[i] - 'G'<= 0){\n            cout << day[a[i] - 'A'] << \" \";\n            pos = i;//记录第一对大写字母的位置\n            break;//找到就推出\n        }\n    }\n}\n\n//输出小时\nvoid time_Hour(){\n    for(int i = pos + 1;  i < a.length() && i < b.length(); i++){\n        if(a[i] == b[i])\n            if(a[i] - '0' >= 0 && a[i] - '9' <= 0){//找到的属于0~9\n                cout << \"0\" << a[i] - '0' << \":\";\n                break;//找到退出\n            }\n            else if(a[i] - 'A'>= 0 && a[i] - 'N' <= 0){//找到的属于A~G\n                cout << a[i] - 'A' + 10 <<  \":\";\n                break;\n            }\n\n    }\n}\n\n//输出分钟\nvoid time_Mi(){\n    for(int i = 0; i < c.length() && i < d.length() && i < 60; i++){\n        if(c[i] == d[i]){\n            if ((c[i] - 'a' >= 0 && c[i] - 'z' <= 0) || (c[i] - 'A' >= 0 && c[i] - 'Z' <= 0))//满足是英文字母\n                if(i < 10)\n                    cout << \"0\" << i << endl;//小于十时，前面加上0补足两位\n                else\n                    cout << i << endl;//直接输出分钟\n        }\n    }\n}\n\n\nint main(){\n    cin >> a >> b >> c >> d;//输入\n\n    week_Day();\n    time_Hour();\n    time_Mi();\n\n    return 0;\n}\n```\n[题目链接]：(https://pintia.cn/problem-sets/994805260223102976/problems/994805308755394560)","source":"_posts/PAT乙级1014.md","raw":"---\ntitle: PAT乙级1014\ndate: 2021-04-28 09:59:15\ntags: \n    - Study\ncategories: \n    - 题解\n    - PAT题解\n---\n这是一道比较繁琐的题，题目是这样的：\n\n![image.png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/806306c923174d2da703c84b5a4571bb~tplv-k3u1fbpfcp-watermark.image)\n首先的难点就在于，一对相同的字母（数字）是指在一对字符串上相同位置的相同字母，~~这其实让题目更简单~~，只要三个循环就可以完成题目。然后是相同字母的位置代表星期几，小时数。值得是字母在字母表中的位置：比如D是第四个。最后一点是输出时间的小时和分钟时，若时间小于10应该在个位前面加'0'补足两位数、分析完毕，展示代码：\n\n```js\n#include <cstdio>\n#include <iostream>\n#include <cstring>\n#include <cmath>\n\nusing namespace std;\n\nstring day[7] = { \"MON\",\"TUE\",\"WED\",\"THU\",\"FRI\",\"SAT\",\"SUN\"};\nstring a,b,c,d;//两对字符串\nint pos;//记录第一个相同大写字母的位置\n\n//输出星期几\nvoid week_Day(){\n    for(int i = 0; i < a.length() && i < b.length(); i++){\n        if(a[i] == b[i] && a[i] - 'A'>= 0 && a[i] - 'G'<= 0){\n            cout << day[a[i] - 'A'] << \" \";\n            pos = i;//记录第一对大写字母的位置\n            break;//找到就推出\n        }\n    }\n}\n\n//输出小时\nvoid time_Hour(){\n    for(int i = pos + 1;  i < a.length() && i < b.length(); i++){\n        if(a[i] == b[i])\n            if(a[i] - '0' >= 0 && a[i] - '9' <= 0){//找到的属于0~9\n                cout << \"0\" << a[i] - '0' << \":\";\n                break;//找到退出\n            }\n            else if(a[i] - 'A'>= 0 && a[i] - 'N' <= 0){//找到的属于A~G\n                cout << a[i] - 'A' + 10 <<  \":\";\n                break;\n            }\n\n    }\n}\n\n//输出分钟\nvoid time_Mi(){\n    for(int i = 0; i < c.length() && i < d.length() && i < 60; i++){\n        if(c[i] == d[i]){\n            if ((c[i] - 'a' >= 0 && c[i] - 'z' <= 0) || (c[i] - 'A' >= 0 && c[i] - 'Z' <= 0))//满足是英文字母\n                if(i < 10)\n                    cout << \"0\" << i << endl;//小于十时，前面加上0补足两位\n                else\n                    cout << i << endl;//直接输出分钟\n        }\n    }\n}\n\n\nint main(){\n    cin >> a >> b >> c >> d;//输入\n\n    week_Day();\n    time_Hour();\n    time_Mi();\n\n    return 0;\n}\n```\n[题目链接]：(https://pintia.cn/problem-sets/994805260223102976/problems/994805308755394560)","slug":"PAT乙级1014","published":1,"updated":"2021-05-01T01:48:54.318Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktvk78ew000e1cws0fz0els1","content":"<p>这是一道比较繁琐的题，题目是这样的：</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/806306c923174d2da703c84b5a4571bb~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\"><br>首先的难点就在于，一对相同的字母（数字）是指在一对字符串上相同位置的相同字母，<del>这其实让题目更简单</del>，只要三个循环就可以完成题目。然后是相同字母的位置代表星期几，小时数。值得是字母在字母表中的位置：比如D是第四个。最后一点是输出时间的小时和分钟时，若时间小于10应该在个位前面加’0’补足两位数、分析完毕，展示代码：</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;cstdio&gt;</span><br><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">#include &lt;cstring&gt;</span><br><span class=\"line\">#include &lt;cmath&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\"></span><br><span class=\"line\">string day[<span class=\"number\">7</span>] = &#123; <span class=\"string\">&quot;MON&quot;</span>,<span class=\"string\">&quot;TUE&quot;</span>,<span class=\"string\">&quot;WED&quot;</span>,<span class=\"string\">&quot;THU&quot;</span>,<span class=\"string\">&quot;FRI&quot;</span>,<span class=\"string\">&quot;SAT&quot;</span>,<span class=\"string\">&quot;SUN&quot;</span>&#125;;</span><br><span class=\"line\">string a,b,c,d;<span class=\"comment\">//两对字符串</span></span><br><span class=\"line\">int pos;<span class=\"comment\">//记录第一个相同大写字母的位置</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//输出星期几</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"function\"><span class=\"title\">week_Day</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(int i = <span class=\"number\">0</span>; i &lt; a.length() &amp;&amp; i &lt; b.length(); i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(a[i] == b[i] &amp;&amp; a[i] - <span class=\"string\">&#x27;A&#x27;</span>&gt;= <span class=\"number\">0</span> &amp;&amp; a[i] - <span class=\"string\">&#x27;G&#x27;</span>&lt;= <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            cout &lt;&lt; day[a[i] - <span class=\"string\">&#x27;A&#x27;</span>] &lt;&lt; <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">            pos = i;<span class=\"comment\">//记录第一对大写字母的位置</span></span><br><span class=\"line\">            <span class=\"keyword\">break</span>;<span class=\"comment\">//找到就推出</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//输出小时</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"function\"><span class=\"title\">time_Hour</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(int i = pos + <span class=\"number\">1</span>;  i &lt; a.length() &amp;&amp; i &lt; b.length(); i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(a[i] == b[i])</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(a[i] - <span class=\"string\">&#x27;0&#x27;</span> &gt;= <span class=\"number\">0</span> &amp;&amp; a[i] - <span class=\"string\">&#x27;9&#x27;</span> &lt;= <span class=\"number\">0</span>)&#123;<span class=\"comment\">//找到的属于0~9</span></span><br><span class=\"line\">                cout &lt;&lt; <span class=\"string\">&quot;0&quot;</span> &lt;&lt; a[i] - <span class=\"string\">&#x27;0&#x27;</span> &lt;&lt; <span class=\"string\">&quot;:&quot;</span>;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;<span class=\"comment\">//找到退出</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(a[i] - <span class=\"string\">&#x27;A&#x27;</span>&gt;= <span class=\"number\">0</span> &amp;&amp; a[i] - <span class=\"string\">&#x27;N&#x27;</span> &lt;= <span class=\"number\">0</span>)&#123;<span class=\"comment\">//找到的属于A~G</span></span><br><span class=\"line\">                cout &lt;&lt; a[i] - <span class=\"string\">&#x27;A&#x27;</span> + <span class=\"number\">10</span> &lt;&lt;  <span class=\"string\">&quot;:&quot;</span>;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//输出分钟</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"function\"><span class=\"title\">time_Mi</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(int i = <span class=\"number\">0</span>; i &lt; c.length() &amp;&amp; i &lt; d.length() &amp;&amp; i &lt; <span class=\"number\">60</span>; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(c[i] == d[i])&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> ((c[i] - <span class=\"string\">&#x27;a&#x27;</span> &gt;= <span class=\"number\">0</span> &amp;&amp; c[i] - <span class=\"string\">&#x27;z&#x27;</span> &lt;= <span class=\"number\">0</span>) || (c[i] - <span class=\"string\">&#x27;A&#x27;</span> &gt;= <span class=\"number\">0</span> &amp;&amp; c[i] - <span class=\"string\">&#x27;Z&#x27;</span> &lt;= <span class=\"number\">0</span>))<span class=\"comment\">//满足是英文字母</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span>(i &lt; <span class=\"number\">10</span>)</span><br><span class=\"line\">                    cout &lt;&lt; <span class=\"string\">&quot;0&quot;</span> &lt;&lt; i &lt;&lt; endl;<span class=\"comment\">//小于十时，前面加上0补足两位</span></span><br><span class=\"line\">                <span class=\"keyword\">else</span></span><br><span class=\"line\">                    cout &lt;&lt; i &lt;&lt; endl;<span class=\"comment\">//直接输出分钟</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">int <span class=\"function\"><span class=\"title\">main</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    cin &gt;&gt; a &gt;&gt; b &gt;&gt; c &gt;&gt; d;<span class=\"comment\">//输入</span></span><br><span class=\"line\"></span><br><span class=\"line\">    week_Day();</span><br><span class=\"line\">    time_Hour();</span><br><span class=\"line\">    time_Mi();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>[题目链接]：(<span class=\"exturl\"><a class=\"exturl__link\"   href=\"https://pintia.cn/problem-sets/994805260223102976/problems/994805308755394560\" >https://pintia.cn/problem-sets/994805260223102976/problems/994805308755394560</a><span class=\"exturl__icon\"><i class=\"fas fa-external-link-alt\"></i></span></span>)</p>\n","site":{"data":{}},"excerpt":"","more":"<p>这是一道比较繁琐的题，题目是这样的：</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/806306c923174d2da703c84b5a4571bb~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\"><br>首先的难点就在于，一对相同的字母（数字）是指在一对字符串上相同位置的相同字母，<del>这其实让题目更简单</del>，只要三个循环就可以完成题目。然后是相同字母的位置代表星期几，小时数。值得是字母在字母表中的位置：比如D是第四个。最后一点是输出时间的小时和分钟时，若时间小于10应该在个位前面加’0’补足两位数、分析完毕，展示代码：</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;cstdio&gt;</span><br><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">#include &lt;cstring&gt;</span><br><span class=\"line\">#include &lt;cmath&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\"></span><br><span class=\"line\">string day[<span class=\"number\">7</span>] = &#123; <span class=\"string\">&quot;MON&quot;</span>,<span class=\"string\">&quot;TUE&quot;</span>,<span class=\"string\">&quot;WED&quot;</span>,<span class=\"string\">&quot;THU&quot;</span>,<span class=\"string\">&quot;FRI&quot;</span>,<span class=\"string\">&quot;SAT&quot;</span>,<span class=\"string\">&quot;SUN&quot;</span>&#125;;</span><br><span class=\"line\">string a,b,c,d;<span class=\"comment\">//两对字符串</span></span><br><span class=\"line\">int pos;<span class=\"comment\">//记录第一个相同大写字母的位置</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//输出星期几</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"function\"><span class=\"title\">week_Day</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(int i = <span class=\"number\">0</span>; i &lt; a.length() &amp;&amp; i &lt; b.length(); i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(a[i] == b[i] &amp;&amp; a[i] - <span class=\"string\">&#x27;A&#x27;</span>&gt;= <span class=\"number\">0</span> &amp;&amp; a[i] - <span class=\"string\">&#x27;G&#x27;</span>&lt;= <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            cout &lt;&lt; day[a[i] - <span class=\"string\">&#x27;A&#x27;</span>] &lt;&lt; <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">            pos = i;<span class=\"comment\">//记录第一对大写字母的位置</span></span><br><span class=\"line\">            <span class=\"keyword\">break</span>;<span class=\"comment\">//找到就推出</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//输出小时</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"function\"><span class=\"title\">time_Hour</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(int i = pos + <span class=\"number\">1</span>;  i &lt; a.length() &amp;&amp; i &lt; b.length(); i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(a[i] == b[i])</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(a[i] - <span class=\"string\">&#x27;0&#x27;</span> &gt;= <span class=\"number\">0</span> &amp;&amp; a[i] - <span class=\"string\">&#x27;9&#x27;</span> &lt;= <span class=\"number\">0</span>)&#123;<span class=\"comment\">//找到的属于0~9</span></span><br><span class=\"line\">                cout &lt;&lt; <span class=\"string\">&quot;0&quot;</span> &lt;&lt; a[i] - <span class=\"string\">&#x27;0&#x27;</span> &lt;&lt; <span class=\"string\">&quot;:&quot;</span>;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;<span class=\"comment\">//找到退出</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(a[i] - <span class=\"string\">&#x27;A&#x27;</span>&gt;= <span class=\"number\">0</span> &amp;&amp; a[i] - <span class=\"string\">&#x27;N&#x27;</span> &lt;= <span class=\"number\">0</span>)&#123;<span class=\"comment\">//找到的属于A~G</span></span><br><span class=\"line\">                cout &lt;&lt; a[i] - <span class=\"string\">&#x27;A&#x27;</span> + <span class=\"number\">10</span> &lt;&lt;  <span class=\"string\">&quot;:&quot;</span>;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//输出分钟</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"function\"><span class=\"title\">time_Mi</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(int i = <span class=\"number\">0</span>; i &lt; c.length() &amp;&amp; i &lt; d.length() &amp;&amp; i &lt; <span class=\"number\">60</span>; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(c[i] == d[i])&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> ((c[i] - <span class=\"string\">&#x27;a&#x27;</span> &gt;= <span class=\"number\">0</span> &amp;&amp; c[i] - <span class=\"string\">&#x27;z&#x27;</span> &lt;= <span class=\"number\">0</span>) || (c[i] - <span class=\"string\">&#x27;A&#x27;</span> &gt;= <span class=\"number\">0</span> &amp;&amp; c[i] - <span class=\"string\">&#x27;Z&#x27;</span> &lt;= <span class=\"number\">0</span>))<span class=\"comment\">//满足是英文字母</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span>(i &lt; <span class=\"number\">10</span>)</span><br><span class=\"line\">                    cout &lt;&lt; <span class=\"string\">&quot;0&quot;</span> &lt;&lt; i &lt;&lt; endl;<span class=\"comment\">//小于十时，前面加上0补足两位</span></span><br><span class=\"line\">                <span class=\"keyword\">else</span></span><br><span class=\"line\">                    cout &lt;&lt; i &lt;&lt; endl;<span class=\"comment\">//直接输出分钟</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">int <span class=\"function\"><span class=\"title\">main</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    cin &gt;&gt; a &gt;&gt; b &gt;&gt; c &gt;&gt; d;<span class=\"comment\">//输入</span></span><br><span class=\"line\"></span><br><span class=\"line\">    week_Day();</span><br><span class=\"line\">    time_Hour();</span><br><span class=\"line\">    time_Mi();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>[题目链接]：(<span class=\"exturl\"><a class=\"exturl__link\"   href=\"https://pintia.cn/problem-sets/994805260223102976/problems/994805308755394560\" >https://pintia.cn/problem-sets/994805260223102976/problems/994805308755394560</a><span class=\"exturl__icon\"><i class=\"fas fa-external-link-alt\"></i></span></span>)</p>\n"},{"title":"PAT乙级1018","date":"2021-04-28T02:04:30.000Z","_content":"\n![image.png](https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7bae7ae68c7243eba8adc62c982f9b59~tplv-k3u1fbpfcp-watermark.image)\n就是简单的统计甲乙赢，平局的次数（输的个数用总数减），和出什么手势赢得次数。没什么好说的。但奇幻的是题目有一个如果解不唯一，输出字母序最小的解，我并没有判定这个就过了，蛮怪的。\n好吧，想一想好像判定时用个的>=就够了。\n\n```js\n//现给出两人的交锋记录，请统计双方的胜、平、负次数，并且给出双方分别出什么手势的胜算最大。\n#include <cstdio>\n#include <iostream>\n#include <cstring>\n#include <cmath>\n\nusing namespace std;\n\n//C:锤子 J:剪刀 B:布\nint n;//交锋次数\nchar x,y;//x:甲 y:乙\nint winer_x,winer_y,draw;//记录甲乙分别赢,平局的次数\nint y_j,y_c,y_b,x_j,x_c,x_b;//要求获胜次数最多的手势\n\n//判断胜负\n//cjb\nvoid win(char x,char y){\n    //甲出剪刀\n    if(x == 'J'){\n        if(y == 'J')\n            draw++;\n        else if(y == 'C'){\n            winer_y++;\n            y_c++;\n        }\n        else if(y == 'B'){\n            winer_x++;\n            x_j++;\n        }\n    }\n    \n    //甲出石头\n    if(x == 'C'){\n        if(y == 'J'){\n            winer_x++;\n            x_c++;\n        }\n        else if(y == 'C'){\n            draw++;\n        }\n        else if(y == 'B'){\n            winer_y++;\n            y_b++;\n        }\n    }\n\n     //甲出布\n    if(x == 'B'){\n        if(y == 'J'){\n            winer_y++;\n            y_j++;\n        }\n        else if(y == 'B'){\n            draw++;\n        }\n        else if(y == 'C'){\n            winer_x++;\n            x_b++;\n        }\n    }\n}\n\n//判断甲乙分别出哪个胜算大\n//只求胜\nchar cmp(int b,int c,int j){\n    char ans;\n    if(b >= c && b >= j)\n        ans = 'B';\n    else if(c >= b && c >= j)\n        ans = 'C';\n    else\n        ans = 'J';\n\n    return ans;\n}\n\nint main(){\n    cin >> n;\n    int m = n;\n    while(n--) {\n        cin >> x >> y;//输入本次交锋的出法\n\n        win(x,y);        \n        \n    }\n    \n    char res_y = cmp(y_b,y_c,y_j);\n    char res_x = cmp(x_b,x_c,x_j);\n\n    cout << winer_x << \" \" << draw << \" \" << m - winer_x - draw << endl;\n    cout << winer_y << \" \" << draw << \" \" << m - winer_y - draw << endl;\n    cout << res_x << \" \" << res_y << endl;\n    return 0;\n}\n\n//挺离谱的，本来还想看看解不唯一的状况，唯没想到直接过了，奇怪。\n```\n希望下次代码可以写的简短一点┭┮﹏┭┮，柳婼写的只有我的三分之一/(ㄒoㄒ)/~~\n[题目链接](https://pintia.cn/problem-sets/994805260223102976/problems/994805304020025344)","source":"_posts/PAT乙级1018.md","raw":"---\ntitle: PAT乙级1018\ndate: 2021-04-28 10:04:30\ntags: \n    - Study\ncategories: \n    - 题解\n    - PAT题解\n---\n\n![image.png](https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7bae7ae68c7243eba8adc62c982f9b59~tplv-k3u1fbpfcp-watermark.image)\n就是简单的统计甲乙赢，平局的次数（输的个数用总数减），和出什么手势赢得次数。没什么好说的。但奇幻的是题目有一个如果解不唯一，输出字母序最小的解，我并没有判定这个就过了，蛮怪的。\n好吧，想一想好像判定时用个的>=就够了。\n\n```js\n//现给出两人的交锋记录，请统计双方的胜、平、负次数，并且给出双方分别出什么手势的胜算最大。\n#include <cstdio>\n#include <iostream>\n#include <cstring>\n#include <cmath>\n\nusing namespace std;\n\n//C:锤子 J:剪刀 B:布\nint n;//交锋次数\nchar x,y;//x:甲 y:乙\nint winer_x,winer_y,draw;//记录甲乙分别赢,平局的次数\nint y_j,y_c,y_b,x_j,x_c,x_b;//要求获胜次数最多的手势\n\n//判断胜负\n//cjb\nvoid win(char x,char y){\n    //甲出剪刀\n    if(x == 'J'){\n        if(y == 'J')\n            draw++;\n        else if(y == 'C'){\n            winer_y++;\n            y_c++;\n        }\n        else if(y == 'B'){\n            winer_x++;\n            x_j++;\n        }\n    }\n    \n    //甲出石头\n    if(x == 'C'){\n        if(y == 'J'){\n            winer_x++;\n            x_c++;\n        }\n        else if(y == 'C'){\n            draw++;\n        }\n        else if(y == 'B'){\n            winer_y++;\n            y_b++;\n        }\n    }\n\n     //甲出布\n    if(x == 'B'){\n        if(y == 'J'){\n            winer_y++;\n            y_j++;\n        }\n        else if(y == 'B'){\n            draw++;\n        }\n        else if(y == 'C'){\n            winer_x++;\n            x_b++;\n        }\n    }\n}\n\n//判断甲乙分别出哪个胜算大\n//只求胜\nchar cmp(int b,int c,int j){\n    char ans;\n    if(b >= c && b >= j)\n        ans = 'B';\n    else if(c >= b && c >= j)\n        ans = 'C';\n    else\n        ans = 'J';\n\n    return ans;\n}\n\nint main(){\n    cin >> n;\n    int m = n;\n    while(n--) {\n        cin >> x >> y;//输入本次交锋的出法\n\n        win(x,y);        \n        \n    }\n    \n    char res_y = cmp(y_b,y_c,y_j);\n    char res_x = cmp(x_b,x_c,x_j);\n\n    cout << winer_x << \" \" << draw << \" \" << m - winer_x - draw << endl;\n    cout << winer_y << \" \" << draw << \" \" << m - winer_y - draw << endl;\n    cout << res_x << \" \" << res_y << endl;\n    return 0;\n}\n\n//挺离谱的，本来还想看看解不唯一的状况，唯没想到直接过了，奇怪。\n```\n希望下次代码可以写的简短一点┭┮﹏┭┮，柳婼写的只有我的三分之一/(ㄒoㄒ)/~~\n[题目链接](https://pintia.cn/problem-sets/994805260223102976/problems/994805304020025344)","slug":"PAT乙级1018","published":1,"updated":"2021-05-18T06:36:48.798Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktvk78ex000g1cwsbw3d4taf","content":"<p><img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7bae7ae68c7243eba8adc62c982f9b59~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\"><br>就是简单的统计甲乙赢，平局的次数（输的个数用总数减），和出什么手势赢得次数。没什么好说的。但奇幻的是题目有一个如果解不唯一，输出字母序最小的解，我并没有判定这个就过了，蛮怪的。<br>好吧，想一想好像判定时用个的&gt;=就够了。</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//现给出两人的交锋记录，请统计双方的胜、平、负次数，并且给出双方分别出什么手势的胜算最大。</span></span><br><span class=\"line\">#include &lt;cstdio&gt;</span><br><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">#include &lt;cstring&gt;</span><br><span class=\"line\">#include &lt;cmath&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//C:锤子 J:剪刀 B:布</span></span><br><span class=\"line\">int n;<span class=\"comment\">//交锋次数</span></span><br><span class=\"line\">char x,y;<span class=\"comment\">//x:甲 y:乙</span></span><br><span class=\"line\">int winer_x,winer_y,draw;<span class=\"comment\">//记录甲乙分别赢,平局的次数</span></span><br><span class=\"line\">int y_j,y_c,y_b,x_j,x_c,x_b;<span class=\"comment\">//要求获胜次数最多的手势</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//判断胜负</span></span><br><span class=\"line\"><span class=\"comment\">//cjb</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"function\"><span class=\"title\">win</span>(<span class=\"params\">char x,char y</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//甲出剪刀</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x == <span class=\"string\">&#x27;J&#x27;</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(y == <span class=\"string\">&#x27;J&#x27;</span>)</span><br><span class=\"line\">            draw++;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(y == <span class=\"string\">&#x27;C&#x27;</span>)&#123;</span><br><span class=\"line\">            winer_y++;</span><br><span class=\"line\">            y_c++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(y == <span class=\"string\">&#x27;B&#x27;</span>)&#123;</span><br><span class=\"line\">            winer_x++;</span><br><span class=\"line\">            x_j++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//甲出石头</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x == <span class=\"string\">&#x27;C&#x27;</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(y == <span class=\"string\">&#x27;J&#x27;</span>)&#123;</span><br><span class=\"line\">            winer_x++;</span><br><span class=\"line\">            x_c++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(y == <span class=\"string\">&#x27;C&#x27;</span>)&#123;</span><br><span class=\"line\">            draw++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(y == <span class=\"string\">&#x27;B&#x27;</span>)&#123;</span><br><span class=\"line\">            winer_y++;</span><br><span class=\"line\">            y_b++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"comment\">//甲出布</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x == <span class=\"string\">&#x27;B&#x27;</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(y == <span class=\"string\">&#x27;J&#x27;</span>)&#123;</span><br><span class=\"line\">            winer_y++;</span><br><span class=\"line\">            y_j++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(y == <span class=\"string\">&#x27;B&#x27;</span>)&#123;</span><br><span class=\"line\">            draw++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(y == <span class=\"string\">&#x27;C&#x27;</span>)&#123;</span><br><span class=\"line\">            winer_x++;</span><br><span class=\"line\">            x_b++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//判断甲乙分别出哪个胜算大</span></span><br><span class=\"line\"><span class=\"comment\">//只求胜</span></span><br><span class=\"line\">char <span class=\"function\"><span class=\"title\">cmp</span>(<span class=\"params\">int b,int c,int j</span>)</span>&#123;</span><br><span class=\"line\">    char ans;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(b &gt;= c &amp;&amp; b &gt;= j)</span><br><span class=\"line\">        ans = <span class=\"string\">&#x27;B&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(c &gt;= b &amp;&amp; c &gt;= j)</span><br><span class=\"line\">        ans = <span class=\"string\">&#x27;C&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        ans = <span class=\"string\">&#x27;J&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">int <span class=\"function\"><span class=\"title\">main</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    cin &gt;&gt; n;</span><br><span class=\"line\">    int m = n;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(n--) &#123;</span><br><span class=\"line\">        cin &gt;&gt; x &gt;&gt; y;<span class=\"comment\">//输入本次交锋的出法</span></span><br><span class=\"line\"></span><br><span class=\"line\">        win(x,y);        </span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    char res_y = cmp(y_b,y_c,y_j);</span><br><span class=\"line\">    char res_x = cmp(x_b,x_c,x_j);</span><br><span class=\"line\"></span><br><span class=\"line\">    cout &lt;&lt; winer_x &lt;&lt; <span class=\"string\">&quot; &quot;</span> &lt;&lt; draw &lt;&lt; <span class=\"string\">&quot; &quot;</span> &lt;&lt; m - winer_x - draw &lt;&lt; endl;</span><br><span class=\"line\">    cout &lt;&lt; winer_y &lt;&lt; <span class=\"string\">&quot; &quot;</span> &lt;&lt; draw &lt;&lt; <span class=\"string\">&quot; &quot;</span> &lt;&lt; m - winer_y - draw &lt;&lt; endl;</span><br><span class=\"line\">    cout &lt;&lt; res_x &lt;&lt; <span class=\"string\">&quot; &quot;</span> &lt;&lt; res_y &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//挺离谱的，本来还想看看解不唯一的状况，唯没想到直接过了，奇怪。</span></span><br></pre></td></tr></table></div></figure>\n<p>希望下次代码可以写的简短一点┭┮﹏┭┮，柳婼写的只有我的三分之一/(ㄒoㄒ)/~~<br><span class=\"exturl\"><a class=\"exturl__link\"   href=\"https://pintia.cn/problem-sets/994805260223102976/problems/994805304020025344\" >题目链接</a><span class=\"exturl__icon\"><i class=\"fas fa-external-link-alt\"></i></span></span></p>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7bae7ae68c7243eba8adc62c982f9b59~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\"><br>就是简单的统计甲乙赢，平局的次数（输的个数用总数减），和出什么手势赢得次数。没什么好说的。但奇幻的是题目有一个如果解不唯一，输出字母序最小的解，我并没有判定这个就过了，蛮怪的。<br>好吧，想一想好像判定时用个的&gt;=就够了。</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//现给出两人的交锋记录，请统计双方的胜、平、负次数，并且给出双方分别出什么手势的胜算最大。</span></span><br><span class=\"line\">#include &lt;cstdio&gt;</span><br><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">#include &lt;cstring&gt;</span><br><span class=\"line\">#include &lt;cmath&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//C:锤子 J:剪刀 B:布</span></span><br><span class=\"line\">int n;<span class=\"comment\">//交锋次数</span></span><br><span class=\"line\">char x,y;<span class=\"comment\">//x:甲 y:乙</span></span><br><span class=\"line\">int winer_x,winer_y,draw;<span class=\"comment\">//记录甲乙分别赢,平局的次数</span></span><br><span class=\"line\">int y_j,y_c,y_b,x_j,x_c,x_b;<span class=\"comment\">//要求获胜次数最多的手势</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//判断胜负</span></span><br><span class=\"line\"><span class=\"comment\">//cjb</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"function\"><span class=\"title\">win</span>(<span class=\"params\">char x,char y</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//甲出剪刀</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x == <span class=\"string\">&#x27;J&#x27;</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(y == <span class=\"string\">&#x27;J&#x27;</span>)</span><br><span class=\"line\">            draw++;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(y == <span class=\"string\">&#x27;C&#x27;</span>)&#123;</span><br><span class=\"line\">            winer_y++;</span><br><span class=\"line\">            y_c++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(y == <span class=\"string\">&#x27;B&#x27;</span>)&#123;</span><br><span class=\"line\">            winer_x++;</span><br><span class=\"line\">            x_j++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//甲出石头</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x == <span class=\"string\">&#x27;C&#x27;</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(y == <span class=\"string\">&#x27;J&#x27;</span>)&#123;</span><br><span class=\"line\">            winer_x++;</span><br><span class=\"line\">            x_c++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(y == <span class=\"string\">&#x27;C&#x27;</span>)&#123;</span><br><span class=\"line\">            draw++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(y == <span class=\"string\">&#x27;B&#x27;</span>)&#123;</span><br><span class=\"line\">            winer_y++;</span><br><span class=\"line\">            y_b++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"comment\">//甲出布</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x == <span class=\"string\">&#x27;B&#x27;</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(y == <span class=\"string\">&#x27;J&#x27;</span>)&#123;</span><br><span class=\"line\">            winer_y++;</span><br><span class=\"line\">            y_j++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(y == <span class=\"string\">&#x27;B&#x27;</span>)&#123;</span><br><span class=\"line\">            draw++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(y == <span class=\"string\">&#x27;C&#x27;</span>)&#123;</span><br><span class=\"line\">            winer_x++;</span><br><span class=\"line\">            x_b++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//判断甲乙分别出哪个胜算大</span></span><br><span class=\"line\"><span class=\"comment\">//只求胜</span></span><br><span class=\"line\">char <span class=\"function\"><span class=\"title\">cmp</span>(<span class=\"params\">int b,int c,int j</span>)</span>&#123;</span><br><span class=\"line\">    char ans;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(b &gt;= c &amp;&amp; b &gt;= j)</span><br><span class=\"line\">        ans = <span class=\"string\">&#x27;B&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(c &gt;= b &amp;&amp; c &gt;= j)</span><br><span class=\"line\">        ans = <span class=\"string\">&#x27;C&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        ans = <span class=\"string\">&#x27;J&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">int <span class=\"function\"><span class=\"title\">main</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    cin &gt;&gt; n;</span><br><span class=\"line\">    int m = n;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(n--) &#123;</span><br><span class=\"line\">        cin &gt;&gt; x &gt;&gt; y;<span class=\"comment\">//输入本次交锋的出法</span></span><br><span class=\"line\"></span><br><span class=\"line\">        win(x,y);        </span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    char res_y = cmp(y_b,y_c,y_j);</span><br><span class=\"line\">    char res_x = cmp(x_b,x_c,x_j);</span><br><span class=\"line\"></span><br><span class=\"line\">    cout &lt;&lt; winer_x &lt;&lt; <span class=\"string\">&quot; &quot;</span> &lt;&lt; draw &lt;&lt; <span class=\"string\">&quot; &quot;</span> &lt;&lt; m - winer_x - draw &lt;&lt; endl;</span><br><span class=\"line\">    cout &lt;&lt; winer_y &lt;&lt; <span class=\"string\">&quot; &quot;</span> &lt;&lt; draw &lt;&lt; <span class=\"string\">&quot; &quot;</span> &lt;&lt; m - winer_y - draw &lt;&lt; endl;</span><br><span class=\"line\">    cout &lt;&lt; res_x &lt;&lt; <span class=\"string\">&quot; &quot;</span> &lt;&lt; res_y &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//挺离谱的，本来还想看看解不唯一的状况，唯没想到直接过了，奇怪。</span></span><br></pre></td></tr></table></div></figure>\n<p>希望下次代码可以写的简短一点┭┮﹏┭┮，柳婼写的只有我的三分之一/(ㄒoㄒ)/~~<br><span class=\"exturl\"><a class=\"exturl__link\"   href=\"https://pintia.cn/problem-sets/994805260223102976/problems/994805304020025344\" >题目链接</a><span class=\"exturl__icon\"><i class=\"fas fa-external-link-alt\"></i></span></span></p>\n"},{"title":"PAT乙级1019","date":"2021-05-03T09:20:18.000Z","_content":"我认为这是较为难的一道题，题目意思还是比较容易理解的。但是较为难处理\n##### 题目\n![image.png](https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2beec1f04af04f85b4eae06b9c9b3c36~tplv-k3u1fbpfcp-watermark.image)\n看着的第一个想法就是将一个数字两次排序后相减得到的数字再次进行上述操作，直到出现数字黑洞“6174”，值得注意的是输入的四位数各位上数字都相等，那么直接输出$N - N = 0000 $.\n<link rel=\"apple-touch-icon\" sizes=\"180x180\" href=\"/apple-touch-icon.png\">\n<link rel=\"icon\" type=\"image/png\" sizes=\"32x32\" href=\"/favicon-32x32.png\">\n<link rel=\"icon\" type=\"image/png\" sizes=\"16x16\" href=\"/favicon-16x16.png\">\n<link rel=\"manifest\" href=\"/site.webmanifest\">\n<link rel=\"mask-icon\" href=\"/safari-pinned-tab.svg\" color=\"#5bbad5\">\n<meta name=\"msapplication-TileColor\" content=\"#da532c\">\n<meta name=\"theme-color\" content=\"#ffffff\">\n\n*在做题目时，要注意两个小地方，测试要求输入的N是0~1e4,所以输入的可能不是四位数，这个时候就要在处理字符串时在字符串前人工添上0补足四位。第二点是以防第一次输入的就是6174，所以要是有do while循环，不管怎么样，先进行一次循环，输出7641 - 6174 = 6174。*\n\n第一种，使用多种函数，思路，代码很简单，只要会使用函数就会。我们来看看需要使用那些函数。\n##### insert函数\n> string &insert(int p0, const char *s);——在p0位置插入字符串s\n> \n> string &insert(int p0, const char *s, int n);——在p0位置插入字符串s的前n个字符\n> \n> string &insert(int p0,const string &s);——在p0位置插入字符串s\n> \n> string &insert(int p0,const string &s, int pos, int n);——在p0位置插入字符串s从pos开始的连续n个字符\n> \n> string &insert(int p0, int n, char c);——在p0处插入n个字符c\n> \n> iterator insert(iterator it, char c);——在it处插入字符c，返回插入后迭代器的位置\n> \n> void insert(iterator it, const_iterator first, const_iteratorlast);——在it处插入从first开始至last-1的所有字符\n> void insert(iterator it, int n, char c);——在it处插入n个字符c\n\n很容易看出来insert就是一个插入的函数。上面的iterator就是迭代器，代表String的某个位置。一般，就写0，代表从开头插。而插入的东西插入的个数都由自己写进去参数。我们这里就需要从开头插入0，个数是补全四位数。\n##### sort函数\nsort函数的头两个参数，分别是排序的起始地址，结束地址。\n本题对字符串全体排序，那么使用sort前，首先明确两个概念，一个是begin(),一个是end().\n> begin：得到数组头的指针\n> \n> end：得到数组的最后一个单元+1的指针\n\n那么sort函数对string进行排序就用到begin(),和end().\n一般的：`sort(s.begin(),s.end());`这是默认从小到大的排序\n而当你想进行降序排序时，就要写一个cmp函数，\n`bool compare(int a,int b) \n{ \n    return a< b; //升序排列，如果改为return a>b，则为降序 \n} `。\n##### stoi函数\n作用非常的简单实用，把数字字符串转换成int输出，而且stoi()会非常贴心的做范围检查，默认范围是在int的范围内的，如果超出范围的话则会runtime error。当然要注意只能是字符串中的数字转化为int，其他字符一般也没有需要转化为数字的需求吧。\n##### to_string函数\n这个函数和上面那个函数相反，他的作用是将整数转换为字符串表示形式。这也是一个简单好用的函数。\n介绍完这些函数，代码就很简单了。\n\n```js\n//数字黑洞之称的 6174\n#include <cstring>\n#include <iostream>\n#include <cstdio>\n#include <algorithm>\n\nusing namespace std;\n\nstring s;\n\n\nbool cmp(char a,char b){\n    return a > b;\n}\n\nint main(){\n    cin >> s;\n    s.insert(0, 4 - s.length(), '0');//不足四位，插0\n    \n    do {\n    string a = s,b = s;\n    sort(a.begin(),a.end(),cmp);//从大到小排序\n    sort(b.begin(),b.end());//反过来\n    int res = stoi(a) - stoi(b);\n    s = to_string(res);\n    s.insert(0, 4 - s.length(), '0');//不足四位，插0\n    cout << a << \" - \" << b << \" = \" << s << endl; \n    } while (s != \"6174\" && s != \"0000\");\n\n    return 0;\n}\n```\n这是很简单的做法，还有其他不适用这么多函数或者使用char[]类型的代码，但是都不如这个简洁。\n[题目链接](https://pintia.cn/problem-sets/994805260223102976/problems/994805302786899968)","source":"_posts/PAT乙级1019.md","raw":"---\ntitle: PAT乙级1019\ndate: 2021-05-03 17:20:18\ntags: \n    - Study\ncategories: \n    - 题解\n    - PAT题解\n---\n我认为这是较为难的一道题，题目意思还是比较容易理解的。但是较为难处理\n##### 题目\n![image.png](https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2beec1f04af04f85b4eae06b9c9b3c36~tplv-k3u1fbpfcp-watermark.image)\n看着的第一个想法就是将一个数字两次排序后相减得到的数字再次进行上述操作，直到出现数字黑洞“6174”，值得注意的是输入的四位数各位上数字都相等，那么直接输出$N - N = 0000 $.\n<link rel=\"apple-touch-icon\" sizes=\"180x180\" href=\"/apple-touch-icon.png\">\n<link rel=\"icon\" type=\"image/png\" sizes=\"32x32\" href=\"/favicon-32x32.png\">\n<link rel=\"icon\" type=\"image/png\" sizes=\"16x16\" href=\"/favicon-16x16.png\">\n<link rel=\"manifest\" href=\"/site.webmanifest\">\n<link rel=\"mask-icon\" href=\"/safari-pinned-tab.svg\" color=\"#5bbad5\">\n<meta name=\"msapplication-TileColor\" content=\"#da532c\">\n<meta name=\"theme-color\" content=\"#ffffff\">\n\n*在做题目时，要注意两个小地方，测试要求输入的N是0~1e4,所以输入的可能不是四位数，这个时候就要在处理字符串时在字符串前人工添上0补足四位。第二点是以防第一次输入的就是6174，所以要是有do while循环，不管怎么样，先进行一次循环，输出7641 - 6174 = 6174。*\n\n第一种，使用多种函数，思路，代码很简单，只要会使用函数就会。我们来看看需要使用那些函数。\n##### insert函数\n> string &insert(int p0, const char *s);——在p0位置插入字符串s\n> \n> string &insert(int p0, const char *s, int n);——在p0位置插入字符串s的前n个字符\n> \n> string &insert(int p0,const string &s);——在p0位置插入字符串s\n> \n> string &insert(int p0,const string &s, int pos, int n);——在p0位置插入字符串s从pos开始的连续n个字符\n> \n> string &insert(int p0, int n, char c);——在p0处插入n个字符c\n> \n> iterator insert(iterator it, char c);——在it处插入字符c，返回插入后迭代器的位置\n> \n> void insert(iterator it, const_iterator first, const_iteratorlast);——在it处插入从first开始至last-1的所有字符\n> void insert(iterator it, int n, char c);——在it处插入n个字符c\n\n很容易看出来insert就是一个插入的函数。上面的iterator就是迭代器，代表String的某个位置。一般，就写0，代表从开头插。而插入的东西插入的个数都由自己写进去参数。我们这里就需要从开头插入0，个数是补全四位数。\n##### sort函数\nsort函数的头两个参数，分别是排序的起始地址，结束地址。\n本题对字符串全体排序，那么使用sort前，首先明确两个概念，一个是begin(),一个是end().\n> begin：得到数组头的指针\n> \n> end：得到数组的最后一个单元+1的指针\n\n那么sort函数对string进行排序就用到begin(),和end().\n一般的：`sort(s.begin(),s.end());`这是默认从小到大的排序\n而当你想进行降序排序时，就要写一个cmp函数，\n`bool compare(int a,int b) \n{ \n    return a< b; //升序排列，如果改为return a>b，则为降序 \n} `。\n##### stoi函数\n作用非常的简单实用，把数字字符串转换成int输出，而且stoi()会非常贴心的做范围检查，默认范围是在int的范围内的，如果超出范围的话则会runtime error。当然要注意只能是字符串中的数字转化为int，其他字符一般也没有需要转化为数字的需求吧。\n##### to_string函数\n这个函数和上面那个函数相反，他的作用是将整数转换为字符串表示形式。这也是一个简单好用的函数。\n介绍完这些函数，代码就很简单了。\n\n```js\n//数字黑洞之称的 6174\n#include <cstring>\n#include <iostream>\n#include <cstdio>\n#include <algorithm>\n\nusing namespace std;\n\nstring s;\n\n\nbool cmp(char a,char b){\n    return a > b;\n}\n\nint main(){\n    cin >> s;\n    s.insert(0, 4 - s.length(), '0');//不足四位，插0\n    \n    do {\n    string a = s,b = s;\n    sort(a.begin(),a.end(),cmp);//从大到小排序\n    sort(b.begin(),b.end());//反过来\n    int res = stoi(a) - stoi(b);\n    s = to_string(res);\n    s.insert(0, 4 - s.length(), '0');//不足四位，插0\n    cout << a << \" - \" << b << \" = \" << s << endl; \n    } while (s != \"6174\" && s != \"0000\");\n\n    return 0;\n}\n```\n这是很简单的做法，还有其他不适用这么多函数或者使用char[]类型的代码，但是都不如这个简洁。\n[题目链接](https://pintia.cn/problem-sets/994805260223102976/problems/994805302786899968)","slug":"PAT乙级1019","published":1,"updated":"2021-05-03T12:59:08.066Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktvk78ez000k1cws5phr9pim","content":"<p>我认为这是较为难的一道题，题目意思还是比较容易理解的。但是较为难处理</p>\n\n        <h5 id=\"题目\"   >\n          <a href=\"#题目\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h5>\n      <p><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2beec1f04af04f85b4eae06b9c9b3c36~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\"><br>看着的第一个想法就是将一个数字两次排序后相减得到的数字再次进行上述操作，直到出现数字黑洞“6174”，值得注意的是输入的四位数各位上数字都相等，那么直接输出$N - N = 0000 $.</p>\n<link rel=\"apple-touch-icon\" sizes=\"180x180\" href=\"/apple-touch-icon.png\">\n<link rel=\"icon\" type=\"image/png\" sizes=\"32x32\" href=\"/favicon-32x32.png\">\n<link rel=\"icon\" type=\"image/png\" sizes=\"16x16\" href=\"/favicon-16x16.png\">\n<link rel=\"manifest\" href=\"/site.webmanifest\">\n<link rel=\"mask-icon\" href=\"/safari-pinned-tab.svg\" color=\"#5bbad5\">\n<meta name=\"msapplication-TileColor\" content=\"#da532c\">\n<meta name=\"theme-color\" content=\"#ffffff\">\n\n<p><em>在做题目时，要注意两个小地方，测试要求输入的N是0~1e4,所以输入的可能不是四位数，这个时候就要在处理字符串时在字符串前人工添上0补足四位。第二点是以防第一次输入的就是6174，所以要是有do while循环，不管怎么样，先进行一次循环，输出7641 - 6174 = 6174。</em></p>\n<p>第一种，使用多种函数，思路，代码很简单，只要会使用函数就会。我们来看看需要使用那些函数。</p>\n\n        <h5 id=\"insert函数\"   >\n          <a href=\"#insert函数\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#insert函数\" class=\"headerlink\" title=\"insert函数\"></a>insert函数</h5>\n      <blockquote>\n<p>string &amp;insert(int p0, const char *s);——在p0位置插入字符串s</p>\n<p>string &amp;insert(int p0, const char *s, int n);——在p0位置插入字符串s的前n个字符</p>\n<p>string &amp;insert(int p0,const string &amp;s);——在p0位置插入字符串s</p>\n<p>string &amp;insert(int p0,const string &amp;s, int pos, int n);——在p0位置插入字符串s从pos开始的连续n个字符</p>\n<p>string &amp;insert(int p0, int n, char c);——在p0处插入n个字符c</p>\n<p>iterator insert(iterator it, char c);——在it处插入字符c，返回插入后迭代器的位置</p>\n<p>void insert(iterator it, const_iterator first, const_iteratorlast);——在it处插入从first开始至last-1的所有字符<br>void insert(iterator it, int n, char c);——在it处插入n个字符c</p>\n</blockquote>\n<p>很容易看出来insert就是一个插入的函数。上面的iterator就是迭代器，代表String的某个位置。一般，就写0，代表从开头插。而插入的东西插入的个数都由自己写进去参数。我们这里就需要从开头插入0，个数是补全四位数。</p>\n\n        <h5 id=\"sort函数\"   >\n          <a href=\"#sort函数\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#sort函数\" class=\"headerlink\" title=\"sort函数\"></a>sort函数</h5>\n      <p>sort函数的头两个参数，分别是排序的起始地址，结束地址。<br>本题对字符串全体排序，那么使用sort前，首先明确两个概念，一个是begin(),一个是end().</p>\n<blockquote>\n<p>begin：得到数组头的指针</p>\n<p>end：得到数组的最后一个单元+1的指针</p>\n</blockquote>\n<p>那么sort函数对string进行排序就用到begin(),和end().<br>一般的：<code>sort(s.begin(),s.end());</code>这是默认从小到大的排序<br>而当你想进行降序排序时，就要写一个cmp函数，<br><code>bool compare(int a,int b)  &#123;      return a&lt; b; //升序排列，如果改为return a&gt;b，则为降序  &#125; </code>。</p>\n\n        <h5 id=\"stoi函数\"   >\n          <a href=\"#stoi函数\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#stoi函数\" class=\"headerlink\" title=\"stoi函数\"></a>stoi函数</h5>\n      <p>作用非常的简单实用，把数字字符串转换成int输出，而且stoi()会非常贴心的做范围检查，默认范围是在int的范围内的，如果超出范围的话则会runtime error。当然要注意只能是字符串中的数字转化为int，其他字符一般也没有需要转化为数字的需求吧。</p>\n\n        <h5 id=\"to-string函数\"   >\n          <a href=\"#to-string函数\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#to-string函数\" class=\"headerlink\" title=\"to_string函数\"></a>to_string函数</h5>\n      <p>这个函数和上面那个函数相反，他的作用是将整数转换为字符串表示形式。这也是一个简单好用的函数。<br>介绍完这些函数，代码就很简单了。</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//数字黑洞之称的 6174</span></span><br><span class=\"line\">#include &lt;cstring&gt;</span><br><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">#include &lt;cstdio&gt;</span><br><span class=\"line\">#include &lt;algorithm&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\"></span><br><span class=\"line\">string s;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">bool <span class=\"function\"><span class=\"title\">cmp</span>(<span class=\"params\">char a,char b</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a &gt; b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">int <span class=\"function\"><span class=\"title\">main</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    cin &gt;&gt; s;</span><br><span class=\"line\">    s.insert(<span class=\"number\">0</span>, <span class=\"number\">4</span> - s.length(), <span class=\"string\">&#x27;0&#x27;</span>);<span class=\"comment\">//不足四位，插0</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">    string a = s,b = s;</span><br><span class=\"line\">    sort(a.begin(),a.end(),cmp);<span class=\"comment\">//从大到小排序</span></span><br><span class=\"line\">    sort(b.begin(),b.end());<span class=\"comment\">//反过来</span></span><br><span class=\"line\">    int res = stoi(a) - stoi(b);</span><br><span class=\"line\">    s = to_string(res);</span><br><span class=\"line\">    s.insert(<span class=\"number\">0</span>, <span class=\"number\">4</span> - s.length(), <span class=\"string\">&#x27;0&#x27;</span>);<span class=\"comment\">//不足四位，插0</span></span><br><span class=\"line\">    cout &lt;&lt; a &lt;&lt; <span class=\"string\">&quot; - &quot;</span> &lt;&lt; b &lt;&lt; <span class=\"string\">&quot; = &quot;</span> &lt;&lt; s &lt;&lt; endl; </span><br><span class=\"line\">    &#125; <span class=\"keyword\">while</span> (s != <span class=\"string\">&quot;6174&quot;</span> &amp;&amp; s != <span class=\"string\">&quot;0000&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>这是很简单的做法，还有其他不适用这么多函数或者使用char[]类型的代码，但是都不如这个简洁。<br><span class=\"exturl\"><a class=\"exturl__link\"   href=\"https://pintia.cn/problem-sets/994805260223102976/problems/994805302786899968\" >题目链接</a><span class=\"exturl__icon\"><i class=\"fas fa-external-link-alt\"></i></span></span></p>\n","site":{"data":{}},"excerpt":"","more":"<p>我认为这是较为难的一道题，题目意思还是比较容易理解的。但是较为难处理</p>\n\n        <h5 id=\"题目\"   >\n          <a href=\"#题目\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h5>\n      <p><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2beec1f04af04f85b4eae06b9c9b3c36~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\"><br>看着的第一个想法就是将一个数字两次排序后相减得到的数字再次进行上述操作，直到出现数字黑洞“6174”，值得注意的是输入的四位数各位上数字都相等，那么直接输出$N - N = 0000 $.</p>\n<link rel=\"apple-touch-icon\" sizes=\"180x180\" href=\"/apple-touch-icon.png\">\n<link rel=\"icon\" type=\"image/png\" sizes=\"32x32\" href=\"/favicon-32x32.png\">\n<link rel=\"icon\" type=\"image/png\" sizes=\"16x16\" href=\"/favicon-16x16.png\">\n<link rel=\"manifest\" href=\"/site.webmanifest\">\n<link rel=\"mask-icon\" href=\"/safari-pinned-tab.svg\" color=\"#5bbad5\">\n<meta name=\"msapplication-TileColor\" content=\"#da532c\">\n<meta name=\"theme-color\" content=\"#ffffff\">\n\n<p><em>在做题目时，要注意两个小地方，测试要求输入的N是0~1e4,所以输入的可能不是四位数，这个时候就要在处理字符串时在字符串前人工添上0补足四位。第二点是以防第一次输入的就是6174，所以要是有do while循环，不管怎么样，先进行一次循环，输出7641 - 6174 = 6174。</em></p>\n<p>第一种，使用多种函数，思路，代码很简单，只要会使用函数就会。我们来看看需要使用那些函数。</p>\n\n        <h5 id=\"insert函数\"   >\n          <a href=\"#insert函数\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#insert函数\" class=\"headerlink\" title=\"insert函数\"></a>insert函数</h5>\n      <blockquote>\n<p>string &amp;insert(int p0, const char *s);——在p0位置插入字符串s</p>\n<p>string &amp;insert(int p0, const char *s, int n);——在p0位置插入字符串s的前n个字符</p>\n<p>string &amp;insert(int p0,const string &amp;s);——在p0位置插入字符串s</p>\n<p>string &amp;insert(int p0,const string &amp;s, int pos, int n);——在p0位置插入字符串s从pos开始的连续n个字符</p>\n<p>string &amp;insert(int p0, int n, char c);——在p0处插入n个字符c</p>\n<p>iterator insert(iterator it, char c);——在it处插入字符c，返回插入后迭代器的位置</p>\n<p>void insert(iterator it, const_iterator first, const_iteratorlast);——在it处插入从first开始至last-1的所有字符<br>void insert(iterator it, int n, char c);——在it处插入n个字符c</p>\n</blockquote>\n<p>很容易看出来insert就是一个插入的函数。上面的iterator就是迭代器，代表String的某个位置。一般，就写0，代表从开头插。而插入的东西插入的个数都由自己写进去参数。我们这里就需要从开头插入0，个数是补全四位数。</p>\n\n        <h5 id=\"sort函数\"   >\n          <a href=\"#sort函数\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#sort函数\" class=\"headerlink\" title=\"sort函数\"></a>sort函数</h5>\n      <p>sort函数的头两个参数，分别是排序的起始地址，结束地址。<br>本题对字符串全体排序，那么使用sort前，首先明确两个概念，一个是begin(),一个是end().</p>\n<blockquote>\n<p>begin：得到数组头的指针</p>\n<p>end：得到数组的最后一个单元+1的指针</p>\n</blockquote>\n<p>那么sort函数对string进行排序就用到begin(),和end().<br>一般的：<code>sort(s.begin(),s.end());</code>这是默认从小到大的排序<br>而当你想进行降序排序时，就要写一个cmp函数，<br><code>bool compare(int a,int b)  &#123;      return a&lt; b; //升序排列，如果改为return a&gt;b，则为降序  &#125; </code>。</p>\n\n        <h5 id=\"stoi函数\"   >\n          <a href=\"#stoi函数\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#stoi函数\" class=\"headerlink\" title=\"stoi函数\"></a>stoi函数</h5>\n      <p>作用非常的简单实用，把数字字符串转换成int输出，而且stoi()会非常贴心的做范围检查，默认范围是在int的范围内的，如果超出范围的话则会runtime error。当然要注意只能是字符串中的数字转化为int，其他字符一般也没有需要转化为数字的需求吧。</p>\n\n        <h5 id=\"to-string函数\"   >\n          <a href=\"#to-string函数\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#to-string函数\" class=\"headerlink\" title=\"to_string函数\"></a>to_string函数</h5>\n      <p>这个函数和上面那个函数相反，他的作用是将整数转换为字符串表示形式。这也是一个简单好用的函数。<br>介绍完这些函数，代码就很简单了。</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//数字黑洞之称的 6174</span></span><br><span class=\"line\">#include &lt;cstring&gt;</span><br><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">#include &lt;cstdio&gt;</span><br><span class=\"line\">#include &lt;algorithm&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\"></span><br><span class=\"line\">string s;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">bool <span class=\"function\"><span class=\"title\">cmp</span>(<span class=\"params\">char a,char b</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a &gt; b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">int <span class=\"function\"><span class=\"title\">main</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    cin &gt;&gt; s;</span><br><span class=\"line\">    s.insert(<span class=\"number\">0</span>, <span class=\"number\">4</span> - s.length(), <span class=\"string\">&#x27;0&#x27;</span>);<span class=\"comment\">//不足四位，插0</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">    string a = s,b = s;</span><br><span class=\"line\">    sort(a.begin(),a.end(),cmp);<span class=\"comment\">//从大到小排序</span></span><br><span class=\"line\">    sort(b.begin(),b.end());<span class=\"comment\">//反过来</span></span><br><span class=\"line\">    int res = stoi(a) - stoi(b);</span><br><span class=\"line\">    s = to_string(res);</span><br><span class=\"line\">    s.insert(<span class=\"number\">0</span>, <span class=\"number\">4</span> - s.length(), <span class=\"string\">&#x27;0&#x27;</span>);<span class=\"comment\">//不足四位，插0</span></span><br><span class=\"line\">    cout &lt;&lt; a &lt;&lt; <span class=\"string\">&quot; - &quot;</span> &lt;&lt; b &lt;&lt; <span class=\"string\">&quot; = &quot;</span> &lt;&lt; s &lt;&lt; endl; </span><br><span class=\"line\">    &#125; <span class=\"keyword\">while</span> (s != <span class=\"string\">&quot;6174&quot;</span> &amp;&amp; s != <span class=\"string\">&quot;0000&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>这是很简单的做法，还有其他不适用这么多函数或者使用char[]类型的代码，但是都不如这个简洁。<br><span class=\"exturl\"><a class=\"exturl__link\"   href=\"https://pintia.cn/problem-sets/994805260223102976/problems/994805302786899968\" >题目链接</a><span class=\"exturl__icon\"><i class=\"fas fa-external-link-alt\"></i></span></span></p>\n"},{"title":"PAT乙级1017","date":"2021-04-28T02:02:11.000Z","_content":"这一道题真的比较难，我一开始看到1000位就想到用string a,然后用一个str[1000]将a字符串全部转化为数字，最后进行除法的模拟。思路时没问题的，但是我去看了一眼柳婼的代码，就回不去了。她写的太简便了，就是一个简单的除法的模拟。\n先看题目：\n\n![image.png](https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6d363759a5a54e8ea071a32239d67c04~tplv-k3u1fbpfcp-watermark.image)\n再说思路，首先是数据存入string a中，然后进行除法的模拟。每一位的余数，都将在下一位*10加上此位的数值在进行除法。特殊的是第一位，此时没有上一位，所以我们进行特判处理，所以除了第一位都可以放在循环处理。先定义两个变量res,temp（分别存每一位的商和余数）。特判的第一位，res存第一位除以b的值，如果不等于0即有商（自己找两个数除着看看，比如47/3）,如果res不为0，那么这就是余数的第一位，输出。**注意**如果a只有一位时，此时就算时0也要输入，毕竟就这一位。此后用temp存第一位/b的余数。然后是1——len-1的循环，一直求某一位的商和余数，直到最后（有一个好处是除不掉时res=0可以直接输出0）。然后是输出一个空格加最后一位剩下的余数temp.\n\n好了，就是这样，代码如下：\n\n```js\n//你需要输出商数 Q 和余数 R，使得 A=B×Q+R 成立\n#include <cstdio>\n#include <cstring>\n#include <iostream>\n\nusing namespace std;\n\ntypedef long long ll;\n\nstring a;//100位太大了，longlong都不够，直接用string存好了\nint b;//b一位，in\nint q,r;//商和余数\n//写成A=B×Q+R，分别输出q,r\nint main(){\n    cin >> a >> b;\n    int len = a.size();//长度\n\n    int res = (a[0] - '0') / b;//计算第一位上除以B的情况\n    if(res != 0|| len == 1)\n        cout << res;//当第一位除以b有值即有商的第一位，或者商只有一位时，输出一个数字\n    \n    int temp =  (a[0] - '0') % b;//初始化余数\n    for(int i = 1; i < len; i++){\n        res =((temp * 10) + a[i] - '0') / b;\n        cout << res;\n        temp = ((temp * 10) + a[i] - '0') % b;\n    }\n    cout << \" \" << temp << endl;\n    return 0;\n}\n```\n\n[题目链接](https://pintia.cn/problem-sets/994805260223102976/problems/994805305181847552)\n","source":"_posts/PAT乙级1017.md","raw":"---\ntitle: PAT乙级1017\ndate: 2021-04-28 10:02:11\ntags: \n    - Study\ncategories: \n    - 题解\n    - PAT题解\n---\n这一道题真的比较难，我一开始看到1000位就想到用string a,然后用一个str[1000]将a字符串全部转化为数字，最后进行除法的模拟。思路时没问题的，但是我去看了一眼柳婼的代码，就回不去了。她写的太简便了，就是一个简单的除法的模拟。\n先看题目：\n\n![image.png](https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6d363759a5a54e8ea071a32239d67c04~tplv-k3u1fbpfcp-watermark.image)\n再说思路，首先是数据存入string a中，然后进行除法的模拟。每一位的余数，都将在下一位*10加上此位的数值在进行除法。特殊的是第一位，此时没有上一位，所以我们进行特判处理，所以除了第一位都可以放在循环处理。先定义两个变量res,temp（分别存每一位的商和余数）。特判的第一位，res存第一位除以b的值，如果不等于0即有商（自己找两个数除着看看，比如47/3）,如果res不为0，那么这就是余数的第一位，输出。**注意**如果a只有一位时，此时就算时0也要输入，毕竟就这一位。此后用temp存第一位/b的余数。然后是1——len-1的循环，一直求某一位的商和余数，直到最后（有一个好处是除不掉时res=0可以直接输出0）。然后是输出一个空格加最后一位剩下的余数temp.\n\n好了，就是这样，代码如下：\n\n```js\n//你需要输出商数 Q 和余数 R，使得 A=B×Q+R 成立\n#include <cstdio>\n#include <cstring>\n#include <iostream>\n\nusing namespace std;\n\ntypedef long long ll;\n\nstring a;//100位太大了，longlong都不够，直接用string存好了\nint b;//b一位，in\nint q,r;//商和余数\n//写成A=B×Q+R，分别输出q,r\nint main(){\n    cin >> a >> b;\n    int len = a.size();//长度\n\n    int res = (a[0] - '0') / b;//计算第一位上除以B的情况\n    if(res != 0|| len == 1)\n        cout << res;//当第一位除以b有值即有商的第一位，或者商只有一位时，输出一个数字\n    \n    int temp =  (a[0] - '0') % b;//初始化余数\n    for(int i = 1; i < len; i++){\n        res =((temp * 10) + a[i] - '0') / b;\n        cout << res;\n        temp = ((temp * 10) + a[i] - '0') % b;\n    }\n    cout << \" \" << temp << endl;\n    return 0;\n}\n```\n\n[题目链接](https://pintia.cn/problem-sets/994805260223102976/problems/994805305181847552)\n","slug":"PAT乙级1017","published":1,"updated":"2021-05-05T07:01:10.826Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktvk78f0000m1cwsbnkubuef","content":"<p>这一道题真的比较难，我一开始看到1000位就想到用string a,然后用一个str[1000]将a字符串全部转化为数字，最后进行除法的模拟。思路时没问题的，但是我去看了一眼柳婼的代码，就回不去了。她写的太简便了，就是一个简单的除法的模拟。<br>先看题目：</p>\n<p><img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6d363759a5a54e8ea071a32239d67c04~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\"><br>再说思路，首先是数据存入string a中，然后进行除法的模拟。每一位的余数，都将在下一位*10加上此位的数值在进行除法。特殊的是第一位，此时没有上一位，所以我们进行特判处理，所以除了第一位都可以放在循环处理。先定义两个变量res,temp（分别存每一位的商和余数）。特判的第一位，res存第一位除以b的值，如果不等于0即有商（自己找两个数除着看看，比如47/3）,如果res不为0，那么这就是余数的第一位，输出。<strong>注意</strong>如果a只有一位时，此时就算时0也要输入，毕竟就这一位。此后用temp存第一位/b的余数。然后是1——len-1的循环，一直求某一位的商和余数，直到最后（有一个好处是除不掉时res=0可以直接输出0）。然后是输出一个空格加最后一位剩下的余数temp.</p>\n<p>好了，就是这样，代码如下：</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//你需要输出商数 Q 和余数 R，使得 A=B×Q+R 成立</span></span><br><span class=\"line\">#include &lt;cstdio&gt;</span><br><span class=\"line\">#include &lt;cstring&gt;</span><br><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\"></span><br><span class=\"line\">typedef long long ll;</span><br><span class=\"line\"></span><br><span class=\"line\">string a;<span class=\"comment\">//100位太大了，longlong都不够，直接用string存好了</span></span><br><span class=\"line\">int b;<span class=\"comment\">//b一位，in</span></span><br><span class=\"line\">int q,r;<span class=\"comment\">//商和余数</span></span><br><span class=\"line\"><span class=\"comment\">//写成A=B×Q+R，分别输出q,r</span></span><br><span class=\"line\">int <span class=\"function\"><span class=\"title\">main</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    cin &gt;&gt; a &gt;&gt; b;</span><br><span class=\"line\">    int len = a.size();<span class=\"comment\">//长度</span></span><br><span class=\"line\"></span><br><span class=\"line\">    int res = (a[<span class=\"number\">0</span>] - <span class=\"string\">&#x27;0&#x27;</span>) / b;<span class=\"comment\">//计算第一位上除以B的情况</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(res != <span class=\"number\">0</span>|| len == <span class=\"number\">1</span>)</span><br><span class=\"line\">        cout &lt;&lt; res;<span class=\"comment\">//当第一位除以b有值即有商的第一位，或者商只有一位时，输出一个数字</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    int temp =  (a[<span class=\"number\">0</span>] - <span class=\"string\">&#x27;0&#x27;</span>) % b;<span class=\"comment\">//初始化余数</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(int i = <span class=\"number\">1</span>; i &lt; len; i++)&#123;</span><br><span class=\"line\">        res =((temp * <span class=\"number\">10</span>) + a[i] - <span class=\"string\">&#x27;0&#x27;</span>) / b;</span><br><span class=\"line\">        cout &lt;&lt; res;</span><br><span class=\"line\">        temp = ((temp * <span class=\"number\">10</span>) + a[i] - <span class=\"string\">&#x27;0&#x27;</span>) % b;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot; &quot;</span> &lt;&lt; temp &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p><span class=\"exturl\"><a class=\"exturl__link\"   href=\"https://pintia.cn/problem-sets/994805260223102976/problems/994805305181847552\" >题目链接</a><span class=\"exturl__icon\"><i class=\"fas fa-external-link-alt\"></i></span></span></p>\n","site":{"data":{}},"excerpt":"","more":"<p>这一道题真的比较难，我一开始看到1000位就想到用string a,然后用一个str[1000]将a字符串全部转化为数字，最后进行除法的模拟。思路时没问题的，但是我去看了一眼柳婼的代码，就回不去了。她写的太简便了，就是一个简单的除法的模拟。<br>先看题目：</p>\n<p><img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6d363759a5a54e8ea071a32239d67c04~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\"><br>再说思路，首先是数据存入string a中，然后进行除法的模拟。每一位的余数，都将在下一位*10加上此位的数值在进行除法。特殊的是第一位，此时没有上一位，所以我们进行特判处理，所以除了第一位都可以放在循环处理。先定义两个变量res,temp（分别存每一位的商和余数）。特判的第一位，res存第一位除以b的值，如果不等于0即有商（自己找两个数除着看看，比如47/3）,如果res不为0，那么这就是余数的第一位，输出。<strong>注意</strong>如果a只有一位时，此时就算时0也要输入，毕竟就这一位。此后用temp存第一位/b的余数。然后是1——len-1的循环，一直求某一位的商和余数，直到最后（有一个好处是除不掉时res=0可以直接输出0）。然后是输出一个空格加最后一位剩下的余数temp.</p>\n<p>好了，就是这样，代码如下：</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//你需要输出商数 Q 和余数 R，使得 A=B×Q+R 成立</span></span><br><span class=\"line\">#include &lt;cstdio&gt;</span><br><span class=\"line\">#include &lt;cstring&gt;</span><br><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\"></span><br><span class=\"line\">typedef long long ll;</span><br><span class=\"line\"></span><br><span class=\"line\">string a;<span class=\"comment\">//100位太大了，longlong都不够，直接用string存好了</span></span><br><span class=\"line\">int b;<span class=\"comment\">//b一位，in</span></span><br><span class=\"line\">int q,r;<span class=\"comment\">//商和余数</span></span><br><span class=\"line\"><span class=\"comment\">//写成A=B×Q+R，分别输出q,r</span></span><br><span class=\"line\">int <span class=\"function\"><span class=\"title\">main</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    cin &gt;&gt; a &gt;&gt; b;</span><br><span class=\"line\">    int len = a.size();<span class=\"comment\">//长度</span></span><br><span class=\"line\"></span><br><span class=\"line\">    int res = (a[<span class=\"number\">0</span>] - <span class=\"string\">&#x27;0&#x27;</span>) / b;<span class=\"comment\">//计算第一位上除以B的情况</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(res != <span class=\"number\">0</span>|| len == <span class=\"number\">1</span>)</span><br><span class=\"line\">        cout &lt;&lt; res;<span class=\"comment\">//当第一位除以b有值即有商的第一位，或者商只有一位时，输出一个数字</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    int temp =  (a[<span class=\"number\">0</span>] - <span class=\"string\">&#x27;0&#x27;</span>) % b;<span class=\"comment\">//初始化余数</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(int i = <span class=\"number\">1</span>; i &lt; len; i++)&#123;</span><br><span class=\"line\">        res =((temp * <span class=\"number\">10</span>) + a[i] - <span class=\"string\">&#x27;0&#x27;</span>) / b;</span><br><span class=\"line\">        cout &lt;&lt; res;</span><br><span class=\"line\">        temp = ((temp * <span class=\"number\">10</span>) + a[i] - <span class=\"string\">&#x27;0&#x27;</span>) % b;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot; &quot;</span> &lt;&lt; temp &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p><span class=\"exturl\"><a class=\"exturl__link\"   href=\"https://pintia.cn/problem-sets/994805260223102976/problems/994805305181847552\" >题目链接</a><span class=\"exturl__icon\"><i class=\"fas fa-external-link-alt\"></i></span></span></p>\n"},{"title":"PAT乙级1020","date":"2021-05-04T02:09:39.000Z","_content":"题目如下：\n![image.png](https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7ac4bd707bc64801b8007f64277bc0b1~tplv-k3u1fbpfcp-watermark.image)\n这是一道简单贪心，保证眼前的利益，确保每次拿到的都是你目前能拿到的最大的利益，那这道题就解出来了。\n\n为了确保能拿到最大利益，你需要每次尽量拿性价比最高，最划算的月饼。这里性价比最高就是单位价值最高。所以需要对单位价值进行排序，排序后对遍历月饼，每次先拿走单位价值最大的月饼，拿完这种月饼后再拿剩下月饼中单位价值最大的，直到拿的月饼到达需求量。\n\n代码：\n\n```js\n//请你计算可以获得的最大收益是多少\n//贪心\n//选择月饼单位价格最高的月饼进行排序，然后从高到低选\n//foreverking\n#include <cstdio>\n#include <queue>\n#include <algorithm>\n#include <cstring>\n#include <iostream>\n#include <cmath>\nusing namespace std;\n\nstruct cake{\n    double num,sale;//num:总库存 sale:总售价 price: 单位价格\n}mooncake[1000];//最多1K\nint n,d;//n:月饼总量  d：最大需求量\nint cnt;\ndouble sum;\n\nbool cmp(struct cake one,struct cake two){\n    double price_one = one.sale / one.num;\n    double price_two = two.sale / two.num;\n    return price_one > price_two;//按照降序\n}\n\nint main(){\n    cin >> n >> d;\n    for(int i = 0; i < n; i++) cin >> mooncake[i].num;//输入库存 \n    for(int i = 0; i < n; i++) cin >> mooncake[i].sale;//输入总价\n    sort(mooncake,mooncake + n,cmp);//对月饼排序（单价），降序\n\n    //开始往最大需求里塞东西\n    for(int i = 0; i < n; i++){\n        if(d > cnt){\n            if(d -  cnt > mooncake[i].num){//需求还可以完全吃下这一种月饼\n                sum += mooncake[i].sale;\n                cnt += mooncake[i].num;\n            }\n            else{//吃不完这一批货，那么按单价来，且这时候已经到达最大需求,break\n                sum += (mooncake[i].sale / mooncake[i].num) * (d - cnt);\n                break;\n            }\n        }\n    }\n    printf(\"%.2lf\",sum);\n    return 0;\n}\n```\n可以变得更简便一点，不用变量cnt记录拿了多少月饼，而是直接对需求D减。\n\n```js\n//请你计算可以获得的最大收益是多少\n//贪心\n//选择月饼单位价格最高的月饼进行排序，然后从高到低选\n//foreverking\n#include <cstdio>\n#include <queue>\n#include <algorithm>\n#include <cstring>\n#include <iostream>\n#include <cmath>\nusing namespace std;\n\nstruct cake{\n    double num,sale;//num:总库存 sale:总售价 price: 单位价格\n}mooncake[1000];//最多1K\nint n,d;//n:月饼总量  d：最大需求量\ndouble sum;\n\nbool cmp(struct cake one,struct cake two){\n    double price_one = one.sale / one.num;\n    double price_two = two.sale / two.num;\n    return price_one > price_two;//按照降序\n}\n\nint main(){\n    cin >> n >> d;\n    for(int i = 0; i < n; i++) cin >> mooncake[i].num;//输入库存 \n    for(int i = 0; i < n; i++) cin >> mooncake[i].sale;//输入总价\n    sort(mooncake,mooncake + n,cmp);//对月饼排序（单价），降序\n\n    //开始往最大需求里塞东西\n    for(int i = 0; i < n; i++){\n       if(d > mooncake[i].num){//全部放下\n           sum += mooncake[i].sale;\n           d -= mooncake[i].num;\n       }\n       else{\n           sum += (mooncake[i].sale / mooncake[i].num) * d;\n           break;\n       }\n    }\n    printf(\"%.2lf\",sum);\n    return 0;\n}\n```\n[题目链接](https://pintia.cn/problem-sets/994805260223102976/problems/994805301562163200)\n","source":"_posts/PAT乙级1020.md","raw":"---\ntitle: PAT乙级1020\ndate: 2021-05-04 10:09:39\ntags: \n    - Study\ncategories: \n    - 题解\n    - PAT题解\n---\n题目如下：\n![image.png](https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7ac4bd707bc64801b8007f64277bc0b1~tplv-k3u1fbpfcp-watermark.image)\n这是一道简单贪心，保证眼前的利益，确保每次拿到的都是你目前能拿到的最大的利益，那这道题就解出来了。\n\n为了确保能拿到最大利益，你需要每次尽量拿性价比最高，最划算的月饼。这里性价比最高就是单位价值最高。所以需要对单位价值进行排序，排序后对遍历月饼，每次先拿走单位价值最大的月饼，拿完这种月饼后再拿剩下月饼中单位价值最大的，直到拿的月饼到达需求量。\n\n代码：\n\n```js\n//请你计算可以获得的最大收益是多少\n//贪心\n//选择月饼单位价格最高的月饼进行排序，然后从高到低选\n//foreverking\n#include <cstdio>\n#include <queue>\n#include <algorithm>\n#include <cstring>\n#include <iostream>\n#include <cmath>\nusing namespace std;\n\nstruct cake{\n    double num,sale;//num:总库存 sale:总售价 price: 单位价格\n}mooncake[1000];//最多1K\nint n,d;//n:月饼总量  d：最大需求量\nint cnt;\ndouble sum;\n\nbool cmp(struct cake one,struct cake two){\n    double price_one = one.sale / one.num;\n    double price_two = two.sale / two.num;\n    return price_one > price_two;//按照降序\n}\n\nint main(){\n    cin >> n >> d;\n    for(int i = 0; i < n; i++) cin >> mooncake[i].num;//输入库存 \n    for(int i = 0; i < n; i++) cin >> mooncake[i].sale;//输入总价\n    sort(mooncake,mooncake + n,cmp);//对月饼排序（单价），降序\n\n    //开始往最大需求里塞东西\n    for(int i = 0; i < n; i++){\n        if(d > cnt){\n            if(d -  cnt > mooncake[i].num){//需求还可以完全吃下这一种月饼\n                sum += mooncake[i].sale;\n                cnt += mooncake[i].num;\n            }\n            else{//吃不完这一批货，那么按单价来，且这时候已经到达最大需求,break\n                sum += (mooncake[i].sale / mooncake[i].num) * (d - cnt);\n                break;\n            }\n        }\n    }\n    printf(\"%.2lf\",sum);\n    return 0;\n}\n```\n可以变得更简便一点，不用变量cnt记录拿了多少月饼，而是直接对需求D减。\n\n```js\n//请你计算可以获得的最大收益是多少\n//贪心\n//选择月饼单位价格最高的月饼进行排序，然后从高到低选\n//foreverking\n#include <cstdio>\n#include <queue>\n#include <algorithm>\n#include <cstring>\n#include <iostream>\n#include <cmath>\nusing namespace std;\n\nstruct cake{\n    double num,sale;//num:总库存 sale:总售价 price: 单位价格\n}mooncake[1000];//最多1K\nint n,d;//n:月饼总量  d：最大需求量\ndouble sum;\n\nbool cmp(struct cake one,struct cake two){\n    double price_one = one.sale / one.num;\n    double price_two = two.sale / two.num;\n    return price_one > price_two;//按照降序\n}\n\nint main(){\n    cin >> n >> d;\n    for(int i = 0; i < n; i++) cin >> mooncake[i].num;//输入库存 \n    for(int i = 0; i < n; i++) cin >> mooncake[i].sale;//输入总价\n    sort(mooncake,mooncake + n,cmp);//对月饼排序（单价），降序\n\n    //开始往最大需求里塞东西\n    for(int i = 0; i < n; i++){\n       if(d > mooncake[i].num){//全部放下\n           sum += mooncake[i].sale;\n           d -= mooncake[i].num;\n       }\n       else{\n           sum += (mooncake[i].sale / mooncake[i].num) * d;\n           break;\n       }\n    }\n    printf(\"%.2lf\",sum);\n    return 0;\n}\n```\n[题目链接](https://pintia.cn/problem-sets/994805260223102976/problems/994805301562163200)\n","slug":"PAT乙级1020","published":1,"updated":"2021-05-04T02:10:13.221Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktvk78f1000p1cws8m0i0ii1","content":"<p>题目如下：<br><img src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7ac4bd707bc64801b8007f64277bc0b1~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\"><br>这是一道简单贪心，保证眼前的利益，确保每次拿到的都是你目前能拿到的最大的利益，那这道题就解出来了。</p>\n<p>为了确保能拿到最大利益，你需要每次尽量拿性价比最高，最划算的月饼。这里性价比最高就是单位价值最高。所以需要对单位价值进行排序，排序后对遍历月饼，每次先拿走单位价值最大的月饼，拿完这种月饼后再拿剩下月饼中单位价值最大的，直到拿的月饼到达需求量。</p>\n<p>代码：</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//请你计算可以获得的最大收益是多少</span></span><br><span class=\"line\"><span class=\"comment\">//贪心</span></span><br><span class=\"line\"><span class=\"comment\">//选择月饼单位价格最高的月饼进行排序，然后从高到低选</span></span><br><span class=\"line\"><span class=\"comment\">//foreverking</span></span><br><span class=\"line\">#include &lt;cstdio&gt;</span><br><span class=\"line\">#include &lt;queue&gt;</span><br><span class=\"line\">#include &lt;algorithm&gt;</span><br><span class=\"line\">#include &lt;cstring&gt;</span><br><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">#include &lt;cmath&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\"></span><br><span class=\"line\">struct cake&#123;</span><br><span class=\"line\">    double num,sale;<span class=\"comment\">//num:总库存 sale:总售价 price: 单位价格</span></span><br><span class=\"line\">&#125;mooncake[<span class=\"number\">1000</span>];<span class=\"comment\">//最多1K</span></span><br><span class=\"line\">int n,d;<span class=\"comment\">//n:月饼总量  d：最大需求量</span></span><br><span class=\"line\">int cnt;</span><br><span class=\"line\">double sum;</span><br><span class=\"line\"></span><br><span class=\"line\">bool <span class=\"function\"><span class=\"title\">cmp</span>(<span class=\"params\">struct cake one,struct cake two</span>)</span>&#123;</span><br><span class=\"line\">    double price_one = one.sale / one.num;</span><br><span class=\"line\">    double price_two = two.sale / two.num;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> price_one &gt; price_two;<span class=\"comment\">//按照降序</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">int <span class=\"function\"><span class=\"title\">main</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    cin &gt;&gt; n &gt;&gt; d;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(int i = <span class=\"number\">0</span>; i &lt; n; i++) cin &gt;&gt; mooncake[i].num;<span class=\"comment\">//输入库存 </span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(int i = <span class=\"number\">0</span>; i &lt; n; i++) cin &gt;&gt; mooncake[i].sale;<span class=\"comment\">//输入总价</span></span><br><span class=\"line\">    sort(mooncake,mooncake + n,cmp);<span class=\"comment\">//对月饼排序（单价），降序</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//开始往最大需求里塞东西</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(int i = <span class=\"number\">0</span>; i &lt; n; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(d &gt; cnt)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(d -  cnt &gt; mooncake[i].num)&#123;<span class=\"comment\">//需求还可以完全吃下这一种月饼</span></span><br><span class=\"line\">                sum += mooncake[i].sale;</span><br><span class=\"line\">                cnt += mooncake[i].num;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span>&#123;<span class=\"comment\">//吃不完这一批货，那么按单价来，且这时候已经到达最大需求,break</span></span><br><span class=\"line\">                sum += (mooncake[i].sale / mooncake[i].num) * (d - cnt);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    printf(<span class=\"string\">&quot;%.2lf&quot;</span>,sum);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>可以变得更简便一点，不用变量cnt记录拿了多少月饼，而是直接对需求D减。</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//请你计算可以获得的最大收益是多少</span></span><br><span class=\"line\"><span class=\"comment\">//贪心</span></span><br><span class=\"line\"><span class=\"comment\">//选择月饼单位价格最高的月饼进行排序，然后从高到低选</span></span><br><span class=\"line\"><span class=\"comment\">//foreverking</span></span><br><span class=\"line\">#include &lt;cstdio&gt;</span><br><span class=\"line\">#include &lt;queue&gt;</span><br><span class=\"line\">#include &lt;algorithm&gt;</span><br><span class=\"line\">#include &lt;cstring&gt;</span><br><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">#include &lt;cmath&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\"></span><br><span class=\"line\">struct cake&#123;</span><br><span class=\"line\">    double num,sale;<span class=\"comment\">//num:总库存 sale:总售价 price: 单位价格</span></span><br><span class=\"line\">&#125;mooncake[<span class=\"number\">1000</span>];<span class=\"comment\">//最多1K</span></span><br><span class=\"line\">int n,d;<span class=\"comment\">//n:月饼总量  d：最大需求量</span></span><br><span class=\"line\">double sum;</span><br><span class=\"line\"></span><br><span class=\"line\">bool <span class=\"function\"><span class=\"title\">cmp</span>(<span class=\"params\">struct cake one,struct cake two</span>)</span>&#123;</span><br><span class=\"line\">    double price_one = one.sale / one.num;</span><br><span class=\"line\">    double price_two = two.sale / two.num;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> price_one &gt; price_two;<span class=\"comment\">//按照降序</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">int <span class=\"function\"><span class=\"title\">main</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    cin &gt;&gt; n &gt;&gt; d;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(int i = <span class=\"number\">0</span>; i &lt; n; i++) cin &gt;&gt; mooncake[i].num;<span class=\"comment\">//输入库存 </span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(int i = <span class=\"number\">0</span>; i &lt; n; i++) cin &gt;&gt; mooncake[i].sale;<span class=\"comment\">//输入总价</span></span><br><span class=\"line\">    sort(mooncake,mooncake + n,cmp);<span class=\"comment\">//对月饼排序（单价），降序</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//开始往最大需求里塞东西</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(int i = <span class=\"number\">0</span>; i &lt; n; i++)&#123;</span><br><span class=\"line\">       <span class=\"keyword\">if</span>(d &gt; mooncake[i].num)&#123;<span class=\"comment\">//全部放下</span></span><br><span class=\"line\">           sum += mooncake[i].sale;</span><br><span class=\"line\">           d -= mooncake[i].num;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">           sum += (mooncake[i].sale / mooncake[i].num) * d;</span><br><span class=\"line\">           <span class=\"keyword\">break</span>;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    printf(<span class=\"string\">&quot;%.2lf&quot;</span>,sum);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p><span class=\"exturl\"><a class=\"exturl__link\"   href=\"https://pintia.cn/problem-sets/994805260223102976/problems/994805301562163200\" >题目链接</a><span class=\"exturl__icon\"><i class=\"fas fa-external-link-alt\"></i></span></span></p>\n","site":{"data":{}},"excerpt":"","more":"<p>题目如下：<br><img src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7ac4bd707bc64801b8007f64277bc0b1~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\"><br>这是一道简单贪心，保证眼前的利益，确保每次拿到的都是你目前能拿到的最大的利益，那这道题就解出来了。</p>\n<p>为了确保能拿到最大利益，你需要每次尽量拿性价比最高，最划算的月饼。这里性价比最高就是单位价值最高。所以需要对单位价值进行排序，排序后对遍历月饼，每次先拿走单位价值最大的月饼，拿完这种月饼后再拿剩下月饼中单位价值最大的，直到拿的月饼到达需求量。</p>\n<p>代码：</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//请你计算可以获得的最大收益是多少</span></span><br><span class=\"line\"><span class=\"comment\">//贪心</span></span><br><span class=\"line\"><span class=\"comment\">//选择月饼单位价格最高的月饼进行排序，然后从高到低选</span></span><br><span class=\"line\"><span class=\"comment\">//foreverking</span></span><br><span class=\"line\">#include &lt;cstdio&gt;</span><br><span class=\"line\">#include &lt;queue&gt;</span><br><span class=\"line\">#include &lt;algorithm&gt;</span><br><span class=\"line\">#include &lt;cstring&gt;</span><br><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">#include &lt;cmath&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\"></span><br><span class=\"line\">struct cake&#123;</span><br><span class=\"line\">    double num,sale;<span class=\"comment\">//num:总库存 sale:总售价 price: 单位价格</span></span><br><span class=\"line\">&#125;mooncake[<span class=\"number\">1000</span>];<span class=\"comment\">//最多1K</span></span><br><span class=\"line\">int n,d;<span class=\"comment\">//n:月饼总量  d：最大需求量</span></span><br><span class=\"line\">int cnt;</span><br><span class=\"line\">double sum;</span><br><span class=\"line\"></span><br><span class=\"line\">bool <span class=\"function\"><span class=\"title\">cmp</span>(<span class=\"params\">struct cake one,struct cake two</span>)</span>&#123;</span><br><span class=\"line\">    double price_one = one.sale / one.num;</span><br><span class=\"line\">    double price_two = two.sale / two.num;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> price_one &gt; price_two;<span class=\"comment\">//按照降序</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">int <span class=\"function\"><span class=\"title\">main</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    cin &gt;&gt; n &gt;&gt; d;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(int i = <span class=\"number\">0</span>; i &lt; n; i++) cin &gt;&gt; mooncake[i].num;<span class=\"comment\">//输入库存 </span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(int i = <span class=\"number\">0</span>; i &lt; n; i++) cin &gt;&gt; mooncake[i].sale;<span class=\"comment\">//输入总价</span></span><br><span class=\"line\">    sort(mooncake,mooncake + n,cmp);<span class=\"comment\">//对月饼排序（单价），降序</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//开始往最大需求里塞东西</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(int i = <span class=\"number\">0</span>; i &lt; n; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(d &gt; cnt)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(d -  cnt &gt; mooncake[i].num)&#123;<span class=\"comment\">//需求还可以完全吃下这一种月饼</span></span><br><span class=\"line\">                sum += mooncake[i].sale;</span><br><span class=\"line\">                cnt += mooncake[i].num;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span>&#123;<span class=\"comment\">//吃不完这一批货，那么按单价来，且这时候已经到达最大需求,break</span></span><br><span class=\"line\">                sum += (mooncake[i].sale / mooncake[i].num) * (d - cnt);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    printf(<span class=\"string\">&quot;%.2lf&quot;</span>,sum);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>可以变得更简便一点，不用变量cnt记录拿了多少月饼，而是直接对需求D减。</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//请你计算可以获得的最大收益是多少</span></span><br><span class=\"line\"><span class=\"comment\">//贪心</span></span><br><span class=\"line\"><span class=\"comment\">//选择月饼单位价格最高的月饼进行排序，然后从高到低选</span></span><br><span class=\"line\"><span class=\"comment\">//foreverking</span></span><br><span class=\"line\">#include &lt;cstdio&gt;</span><br><span class=\"line\">#include &lt;queue&gt;</span><br><span class=\"line\">#include &lt;algorithm&gt;</span><br><span class=\"line\">#include &lt;cstring&gt;</span><br><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">#include &lt;cmath&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\"></span><br><span class=\"line\">struct cake&#123;</span><br><span class=\"line\">    double num,sale;<span class=\"comment\">//num:总库存 sale:总售价 price: 单位价格</span></span><br><span class=\"line\">&#125;mooncake[<span class=\"number\">1000</span>];<span class=\"comment\">//最多1K</span></span><br><span class=\"line\">int n,d;<span class=\"comment\">//n:月饼总量  d：最大需求量</span></span><br><span class=\"line\">double sum;</span><br><span class=\"line\"></span><br><span class=\"line\">bool <span class=\"function\"><span class=\"title\">cmp</span>(<span class=\"params\">struct cake one,struct cake two</span>)</span>&#123;</span><br><span class=\"line\">    double price_one = one.sale / one.num;</span><br><span class=\"line\">    double price_two = two.sale / two.num;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> price_one &gt; price_two;<span class=\"comment\">//按照降序</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">int <span class=\"function\"><span class=\"title\">main</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    cin &gt;&gt; n &gt;&gt; d;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(int i = <span class=\"number\">0</span>; i &lt; n; i++) cin &gt;&gt; mooncake[i].num;<span class=\"comment\">//输入库存 </span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(int i = <span class=\"number\">0</span>; i &lt; n; i++) cin &gt;&gt; mooncake[i].sale;<span class=\"comment\">//输入总价</span></span><br><span class=\"line\">    sort(mooncake,mooncake + n,cmp);<span class=\"comment\">//对月饼排序（单价），降序</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//开始往最大需求里塞东西</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(int i = <span class=\"number\">0</span>; i &lt; n; i++)&#123;</span><br><span class=\"line\">       <span class=\"keyword\">if</span>(d &gt; mooncake[i].num)&#123;<span class=\"comment\">//全部放下</span></span><br><span class=\"line\">           sum += mooncake[i].sale;</span><br><span class=\"line\">           d -= mooncake[i].num;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">           sum += (mooncake[i].sale / mooncake[i].num) * d;</span><br><span class=\"line\">           <span class=\"keyword\">break</span>;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    printf(<span class=\"string\">&quot;%.2lf&quot;</span>,sum);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p><span class=\"exturl\"><a class=\"exturl__link\"   href=\"https://pintia.cn/problem-sets/994805260223102976/problems/994805301562163200\" >题目链接</a><span class=\"exturl__icon\"><i class=\"fas fa-external-link-alt\"></i></span></span></p>\n"},{"title":"PAT乙级1022","date":"2021-05-04T11:01:51.000Z","_content":"\n![image.png](https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/761a3939bbf44aec9d5212ea44f17b04~tplv-k3u1fbpfcp-watermark.image)\n题目是很简单的，你找几个十进制数，将他手工转化为其他进制的数，记住这个过程，用代码模拟这个过程。首先是用数去除以要转化的进制，余数留下作为进制在此位上的数值，除数进到下一位，在做一次除法。以此类推，直到除不够进制。用一个数组去存，最后记得倒序，因为你是到这放进数组的。记得有一个测试点需要考虑为0的情况。\n\n```js\n//foreverking\n#include <cstdio>\n#include <queue>\n#include <algorithm>\n#include <cstring>\n#include <iostream>\n#include <cmath>\nusing namespace std;\n\n//输入两个非负 10 进制整数 A 和 B (≤2^30−1)，输出 A+B 的 D (1<D≤10)进制数\nint a,b,d;\nint array[100];//存放进制的数\nint main(){\n    cin >> a >> b >> d;\n    long s = a + b;//太大了，转化为string\n    int i = 0;\n    if(s == 0){\n        cout << 0;\n        return 0;\n    }\n    while(s != 0){\n        //代码\n        array[i++] = s % d;\n        s /= d;\n        }\n    for(int j = i - 1; j >= 0; j--){\n            //代码\n            cout << array[j];\n            }\n\n    return 0;\n    \n}\n```\n[题目链接](https://pintia.cn/problem-sets/994805260223102976/problems/994805299301433344)\n","source":"_posts/PAT乙级1022.md","raw":"---\ntitle: PAT乙级1022\ndate: 2021-05-04 19:01:51\ntags: \n    - Study\ncategories: \n    - 题解\n    - PAT题解\n---\n\n![image.png](https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/761a3939bbf44aec9d5212ea44f17b04~tplv-k3u1fbpfcp-watermark.image)\n题目是很简单的，你找几个十进制数，将他手工转化为其他进制的数，记住这个过程，用代码模拟这个过程。首先是用数去除以要转化的进制，余数留下作为进制在此位上的数值，除数进到下一位，在做一次除法。以此类推，直到除不够进制。用一个数组去存，最后记得倒序，因为你是到这放进数组的。记得有一个测试点需要考虑为0的情况。\n\n```js\n//foreverking\n#include <cstdio>\n#include <queue>\n#include <algorithm>\n#include <cstring>\n#include <iostream>\n#include <cmath>\nusing namespace std;\n\n//输入两个非负 10 进制整数 A 和 B (≤2^30−1)，输出 A+B 的 D (1<D≤10)进制数\nint a,b,d;\nint array[100];//存放进制的数\nint main(){\n    cin >> a >> b >> d;\n    long s = a + b;//太大了，转化为string\n    int i = 0;\n    if(s == 0){\n        cout << 0;\n        return 0;\n    }\n    while(s != 0){\n        //代码\n        array[i++] = s % d;\n        s /= d;\n        }\n    for(int j = i - 1; j >= 0; j--){\n            //代码\n            cout << array[j];\n            }\n\n    return 0;\n    \n}\n```\n[题目链接](https://pintia.cn/problem-sets/994805260223102976/problems/994805299301433344)\n","slug":"PAT乙级1022","published":1,"updated":"2021-05-04T11:03:03.415Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktvk78f2000r1cws75o9gpku","content":"<p><img src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/761a3939bbf44aec9d5212ea44f17b04~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\"><br>题目是很简单的，你找几个十进制数，将他手工转化为其他进制的数，记住这个过程，用代码模拟这个过程。首先是用数去除以要转化的进制，余数留下作为进制在此位上的数值，除数进到下一位，在做一次除法。以此类推，直到除不够进制。用一个数组去存，最后记得倒序，因为你是到这放进数组的。记得有一个测试点需要考虑为0的情况。</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//foreverking</span></span><br><span class=\"line\">#include &lt;cstdio&gt;</span><br><span class=\"line\">#include &lt;queue&gt;</span><br><span class=\"line\">#include &lt;algorithm&gt;</span><br><span class=\"line\">#include &lt;cstring&gt;</span><br><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">#include &lt;cmath&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//输入两个非负 10 进制整数 A 和 B (≤2^30−1)，输出 A+B 的 D (1&lt;D≤10)进制数</span></span><br><span class=\"line\">int a,b,d;</span><br><span class=\"line\">int array[<span class=\"number\">100</span>];<span class=\"comment\">//存放进制的数</span></span><br><span class=\"line\">int <span class=\"function\"><span class=\"title\">main</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    cin &gt;&gt; a &gt;&gt; b &gt;&gt; d;</span><br><span class=\"line\">    long s = a + b;<span class=\"comment\">//太大了，转化为string</span></span><br><span class=\"line\">    int i = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(s == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(s != <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        <span class=\"comment\">//代码</span></span><br><span class=\"line\">        array[i++] = s % d;</span><br><span class=\"line\">        s /= d;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(int j = i - <span class=\"number\">1</span>; j &gt;= <span class=\"number\">0</span>; j--)&#123;</span><br><span class=\"line\">            <span class=\"comment\">//代码</span></span><br><span class=\"line\">            cout &lt;&lt; array[j];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p><span class=\"exturl\"><a class=\"exturl__link\"   href=\"https://pintia.cn/problem-sets/994805260223102976/problems/994805299301433344\" >题目链接</a><span class=\"exturl__icon\"><i class=\"fas fa-external-link-alt\"></i></span></span></p>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/761a3939bbf44aec9d5212ea44f17b04~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\"><br>题目是很简单的，你找几个十进制数，将他手工转化为其他进制的数，记住这个过程，用代码模拟这个过程。首先是用数去除以要转化的进制，余数留下作为进制在此位上的数值，除数进到下一位，在做一次除法。以此类推，直到除不够进制。用一个数组去存，最后记得倒序，因为你是到这放进数组的。记得有一个测试点需要考虑为0的情况。</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//foreverking</span></span><br><span class=\"line\">#include &lt;cstdio&gt;</span><br><span class=\"line\">#include &lt;queue&gt;</span><br><span class=\"line\">#include &lt;algorithm&gt;</span><br><span class=\"line\">#include &lt;cstring&gt;</span><br><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">#include &lt;cmath&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//输入两个非负 10 进制整数 A 和 B (≤2^30−1)，输出 A+B 的 D (1&lt;D≤10)进制数</span></span><br><span class=\"line\">int a,b,d;</span><br><span class=\"line\">int array[<span class=\"number\">100</span>];<span class=\"comment\">//存放进制的数</span></span><br><span class=\"line\">int <span class=\"function\"><span class=\"title\">main</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    cin &gt;&gt; a &gt;&gt; b &gt;&gt; d;</span><br><span class=\"line\">    long s = a + b;<span class=\"comment\">//太大了，转化为string</span></span><br><span class=\"line\">    int i = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(s == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(s != <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        <span class=\"comment\">//代码</span></span><br><span class=\"line\">        array[i++] = s % d;</span><br><span class=\"line\">        s /= d;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(int j = i - <span class=\"number\">1</span>; j &gt;= <span class=\"number\">0</span>; j--)&#123;</span><br><span class=\"line\">            <span class=\"comment\">//代码</span></span><br><span class=\"line\">            cout &lt;&lt; array[j];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p><span class=\"exturl\"><a class=\"exturl__link\"   href=\"https://pintia.cn/problem-sets/994805260223102976/problems/994805299301433344\" >题目链接</a><span class=\"exturl__icon\"><i class=\"fas fa-external-link-alt\"></i></span></span></p>\n"},{"title":"PAT乙级1023","date":"2021-05-05T06:56:45.000Z","_content":"\n![image.png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/678b70d93a73434bbebe499a3efd22d8~tplv-k3u1fbpfcp-watermark.image)\n一道简单贪心，甚至你都看不出他想贪心（大概。\n\n大概思路就是用数组存储输出的数字，将数值小的数放在数组前面。因为0不能放在数字的最前方，所以数组第一位要放除0以外最小的数，就可以了。\n\n```js\n//foreverking\n//贪心\n#include <cstdio>\n#include <queue>\n#include <algorithm>\n#include <cstring>\n#include <iostream>\n#include <cmath>\nusing namespace std;\n//1023 组个最小数 (20 分)\n//给定数字0-9各若干个。你可以以任意顺序排列这些数字，但必须全部使用。目标是使得最后得到的数尽可能小（注意 0 不能做首位）\nint array[10];//存各个数字个数\nint s[50];//放答案\nint cnt;\n\nint main(){\n    for(int i = 0; i  < 10; i++)\n        cin >> array[i];//存放\n    \n    for(int i = 1; i < 10; i++){\n        if(array[i] != 0){\n            //找到第一个拥有个数不为0的数字作为开头输出，从1~9找，因为0不能开头\n            s[cnt++] = i;\n            break;\n        }\n    }\n    \n    for(int i = 0; i < array[0]; i++)\n        s[cnt++] = 0;\n    for(int i = 0; i < array[s[0]] - 1;i++)\n        s[cnt++] = s[0];\n        \n    for(int i = s[0] + 1; i <= 9; i++)\n        for(int j = 0; j < array[i]; j++)\n            s[cnt++] = i;\n    \n    for(int i = 0;i < cnt ; i++)\n        cout << s[i];\n    return 0;\n}\n```\n当然可以优化一下，不存储数字，每找到一个数字就将他输出，省空间。\n\n```js\n//foreverking\n//贪心\n#include <cstdio>\n#include <queue>\n#include <algorithm>\n#include <cstring>\n#include <iostream>\n#include <cmath>\nusing namespace std;\nint main()\n{\n    int a[10], t;\n    for (int i = 0; i < 10; i++)\n        cin >> a[i];\n    for (int i = 1; i < 10; i++)\n    {\n        if (a[i] != 0)\n        {\n            cout << i;\n            t = i;\n            break;\n        }\n    }\n    for (int i = 0; i < a[0]; i++)\n        cout << 0;\n    for (int i = 0; i < a[t] - 1; i++)\n        cout << t;\n    for (int i = t + 1; i < 10; i++)\n        for (int k = 0; k < a[i]; k++)\n            cout << i;\n    return 0;\n}\n\n```\n[题目链接](https://pintia.cn/problem-sets/994805260223102976/problems/994805298269634560)","source":"_posts/PAT乙级1023.md","raw":"---\ntitle: PAT乙级1023\ndate: 2021-05-05 14:56:45\ntags: \n    - Study\ncategories: \n    - 题解\n    - PAT题解\n---\n\n![image.png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/678b70d93a73434bbebe499a3efd22d8~tplv-k3u1fbpfcp-watermark.image)\n一道简单贪心，甚至你都看不出他想贪心（大概。\n\n大概思路就是用数组存储输出的数字，将数值小的数放在数组前面。因为0不能放在数字的最前方，所以数组第一位要放除0以外最小的数，就可以了。\n\n```js\n//foreverking\n//贪心\n#include <cstdio>\n#include <queue>\n#include <algorithm>\n#include <cstring>\n#include <iostream>\n#include <cmath>\nusing namespace std;\n//1023 组个最小数 (20 分)\n//给定数字0-9各若干个。你可以以任意顺序排列这些数字，但必须全部使用。目标是使得最后得到的数尽可能小（注意 0 不能做首位）\nint array[10];//存各个数字个数\nint s[50];//放答案\nint cnt;\n\nint main(){\n    for(int i = 0; i  < 10; i++)\n        cin >> array[i];//存放\n    \n    for(int i = 1; i < 10; i++){\n        if(array[i] != 0){\n            //找到第一个拥有个数不为0的数字作为开头输出，从1~9找，因为0不能开头\n            s[cnt++] = i;\n            break;\n        }\n    }\n    \n    for(int i = 0; i < array[0]; i++)\n        s[cnt++] = 0;\n    for(int i = 0; i < array[s[0]] - 1;i++)\n        s[cnt++] = s[0];\n        \n    for(int i = s[0] + 1; i <= 9; i++)\n        for(int j = 0; j < array[i]; j++)\n            s[cnt++] = i;\n    \n    for(int i = 0;i < cnt ; i++)\n        cout << s[i];\n    return 0;\n}\n```\n当然可以优化一下，不存储数字，每找到一个数字就将他输出，省空间。\n\n```js\n//foreverking\n//贪心\n#include <cstdio>\n#include <queue>\n#include <algorithm>\n#include <cstring>\n#include <iostream>\n#include <cmath>\nusing namespace std;\nint main()\n{\n    int a[10], t;\n    for (int i = 0; i < 10; i++)\n        cin >> a[i];\n    for (int i = 1; i < 10; i++)\n    {\n        if (a[i] != 0)\n        {\n            cout << i;\n            t = i;\n            break;\n        }\n    }\n    for (int i = 0; i < a[0]; i++)\n        cout << 0;\n    for (int i = 0; i < a[t] - 1; i++)\n        cout << t;\n    for (int i = t + 1; i < 10; i++)\n        for (int k = 0; k < a[i]; k++)\n            cout << i;\n    return 0;\n}\n\n```\n[题目链接](https://pintia.cn/problem-sets/994805260223102976/problems/994805298269634560)","slug":"PAT乙级1023","published":1,"updated":"2021-05-05T06:57:27.908Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktvk78f3000u1cws81bs2hkg","content":"<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/678b70d93a73434bbebe499a3efd22d8~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\"><br>一道简单贪心，甚至你都看不出他想贪心（大概。</p>\n<p>大概思路就是用数组存储输出的数字，将数值小的数放在数组前面。因为0不能放在数字的最前方，所以数组第一位要放除0以外最小的数，就可以了。</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//foreverking</span></span><br><span class=\"line\"><span class=\"comment\">//贪心</span></span><br><span class=\"line\">#include &lt;cstdio&gt;</span><br><span class=\"line\">#include &lt;queue&gt;</span><br><span class=\"line\">#include &lt;algorithm&gt;</span><br><span class=\"line\">#include &lt;cstring&gt;</span><br><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">#include &lt;cmath&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\"><span class=\"comment\">//1023 组个最小数 (20 分)</span></span><br><span class=\"line\"><span class=\"comment\">//给定数字0-9各若干个。你可以以任意顺序排列这些数字，但必须全部使用。目标是使得最后得到的数尽可能小（注意 0 不能做首位）</span></span><br><span class=\"line\">int array[<span class=\"number\">10</span>];<span class=\"comment\">//存各个数字个数</span></span><br><span class=\"line\">int s[<span class=\"number\">50</span>];<span class=\"comment\">//放答案</span></span><br><span class=\"line\">int cnt;</span><br><span class=\"line\"></span><br><span class=\"line\">int <span class=\"function\"><span class=\"title\">main</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(int i = <span class=\"number\">0</span>; i  &lt; <span class=\"number\">10</span>; i++)</span><br><span class=\"line\">        cin &gt;&gt; array[i];<span class=\"comment\">//存放</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(int i = <span class=\"number\">1</span>; i &lt; <span class=\"number\">10</span>; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(array[i] != <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            <span class=\"comment\">//找到第一个拥有个数不为0的数字作为开头输出，从1~9找，因为0不能开头</span></span><br><span class=\"line\">            s[cnt++] = i;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(int i = <span class=\"number\">0</span>; i &lt; array[<span class=\"number\">0</span>]; i++)</span><br><span class=\"line\">        s[cnt++] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(int i = <span class=\"number\">0</span>; i &lt; array[s[<span class=\"number\">0</span>]] - <span class=\"number\">1</span>;i++)</span><br><span class=\"line\">        s[cnt++] = s[<span class=\"number\">0</span>];</span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(int i = s[<span class=\"number\">0</span>] + <span class=\"number\">1</span>; i &lt;= <span class=\"number\">9</span>; i++)</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(int j = <span class=\"number\">0</span>; j &lt; array[i]; j++)</span><br><span class=\"line\">            s[cnt++] = i;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(int i = <span class=\"number\">0</span>;i &lt; cnt ; i++)</span><br><span class=\"line\">        cout &lt;&lt; s[i];</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>当然可以优化一下，不存储数字，每找到一个数字就将他输出，省空间。</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//foreverking</span></span><br><span class=\"line\"><span class=\"comment\">//贪心</span></span><br><span class=\"line\">#include &lt;cstdio&gt;</span><br><span class=\"line\">#include &lt;queue&gt;</span><br><span class=\"line\">#include &lt;algorithm&gt;</span><br><span class=\"line\">#include &lt;cstring&gt;</span><br><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">#include &lt;cmath&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\">int main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    int a[<span class=\"number\">10</span>], t;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (int i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++)</span><br><span class=\"line\">        cin &gt;&gt; a[i];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (int i = <span class=\"number\">1</span>; i &lt; <span class=\"number\">10</span>; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (a[i] != <span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            cout &lt;&lt; i;</span><br><span class=\"line\">            t = i;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (int i = <span class=\"number\">0</span>; i &lt; a[<span class=\"number\">0</span>]; i++)</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (int i = <span class=\"number\">0</span>; i &lt; a[t] - <span class=\"number\">1</span>; i++)</span><br><span class=\"line\">        cout &lt;&lt; t;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (int i = t + <span class=\"number\">1</span>; i &lt; <span class=\"number\">10</span>; i++)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (int k = <span class=\"number\">0</span>; k &lt; a[i]; k++)</span><br><span class=\"line\">            cout &lt;&lt; i;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></div></figure>\n<p><span class=\"exturl\"><a class=\"exturl__link\"   href=\"https://pintia.cn/problem-sets/994805260223102976/problems/994805298269634560\" >题目链接</a><span class=\"exturl__icon\"><i class=\"fas fa-external-link-alt\"></i></span></span></p>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/678b70d93a73434bbebe499a3efd22d8~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\"><br>一道简单贪心，甚至你都看不出他想贪心（大概。</p>\n<p>大概思路就是用数组存储输出的数字，将数值小的数放在数组前面。因为0不能放在数字的最前方，所以数组第一位要放除0以外最小的数，就可以了。</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//foreverking</span></span><br><span class=\"line\"><span class=\"comment\">//贪心</span></span><br><span class=\"line\">#include &lt;cstdio&gt;</span><br><span class=\"line\">#include &lt;queue&gt;</span><br><span class=\"line\">#include &lt;algorithm&gt;</span><br><span class=\"line\">#include &lt;cstring&gt;</span><br><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">#include &lt;cmath&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\"><span class=\"comment\">//1023 组个最小数 (20 分)</span></span><br><span class=\"line\"><span class=\"comment\">//给定数字0-9各若干个。你可以以任意顺序排列这些数字，但必须全部使用。目标是使得最后得到的数尽可能小（注意 0 不能做首位）</span></span><br><span class=\"line\">int array[<span class=\"number\">10</span>];<span class=\"comment\">//存各个数字个数</span></span><br><span class=\"line\">int s[<span class=\"number\">50</span>];<span class=\"comment\">//放答案</span></span><br><span class=\"line\">int cnt;</span><br><span class=\"line\"></span><br><span class=\"line\">int <span class=\"function\"><span class=\"title\">main</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(int i = <span class=\"number\">0</span>; i  &lt; <span class=\"number\">10</span>; i++)</span><br><span class=\"line\">        cin &gt;&gt; array[i];<span class=\"comment\">//存放</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(int i = <span class=\"number\">1</span>; i &lt; <span class=\"number\">10</span>; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(array[i] != <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            <span class=\"comment\">//找到第一个拥有个数不为0的数字作为开头输出，从1~9找，因为0不能开头</span></span><br><span class=\"line\">            s[cnt++] = i;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(int i = <span class=\"number\">0</span>; i &lt; array[<span class=\"number\">0</span>]; i++)</span><br><span class=\"line\">        s[cnt++] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(int i = <span class=\"number\">0</span>; i &lt; array[s[<span class=\"number\">0</span>]] - <span class=\"number\">1</span>;i++)</span><br><span class=\"line\">        s[cnt++] = s[<span class=\"number\">0</span>];</span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(int i = s[<span class=\"number\">0</span>] + <span class=\"number\">1</span>; i &lt;= <span class=\"number\">9</span>; i++)</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(int j = <span class=\"number\">0</span>; j &lt; array[i]; j++)</span><br><span class=\"line\">            s[cnt++] = i;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(int i = <span class=\"number\">0</span>;i &lt; cnt ; i++)</span><br><span class=\"line\">        cout &lt;&lt; s[i];</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>当然可以优化一下，不存储数字，每找到一个数字就将他输出，省空间。</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//foreverking</span></span><br><span class=\"line\"><span class=\"comment\">//贪心</span></span><br><span class=\"line\">#include &lt;cstdio&gt;</span><br><span class=\"line\">#include &lt;queue&gt;</span><br><span class=\"line\">#include &lt;algorithm&gt;</span><br><span class=\"line\">#include &lt;cstring&gt;</span><br><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">#include &lt;cmath&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\">int main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    int a[<span class=\"number\">10</span>], t;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (int i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++)</span><br><span class=\"line\">        cin &gt;&gt; a[i];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (int i = <span class=\"number\">1</span>; i &lt; <span class=\"number\">10</span>; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (a[i] != <span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            cout &lt;&lt; i;</span><br><span class=\"line\">            t = i;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (int i = <span class=\"number\">0</span>; i &lt; a[<span class=\"number\">0</span>]; i++)</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (int i = <span class=\"number\">0</span>; i &lt; a[t] - <span class=\"number\">1</span>; i++)</span><br><span class=\"line\">        cout &lt;&lt; t;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (int i = t + <span class=\"number\">1</span>; i &lt; <span class=\"number\">10</span>; i++)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (int k = <span class=\"number\">0</span>; k &lt; a[i]; k++)</span><br><span class=\"line\">            cout &lt;&lt; i;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></div></figure>\n<p><span class=\"exturl\"><a class=\"exturl__link\"   href=\"https://pintia.cn/problem-sets/994805260223102976/problems/994805298269634560\" >题目链接</a><span class=\"exturl__icon\"><i class=\"fas fa-external-link-alt\"></i></span></span></p>\n"},{"title":"PAT乙级1025","date":"2021-05-08T07:13:07.000Z","_content":"\n#### 题目\n![image.png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6e0db6478ee74544b821806054a7a243~tplv-k3u1fbpfcp-watermark.image)\n\n是不是乍一看就是一个顺序表，其实也差不多，就运用顺序表。先定义一个结构体，就叫List，里面存放Address 是结点地址，Data 是该结点保存的整数数据，Next 是下一结点的地址。再输入每个结点的数据，再把顺序存入vector数组中。最后就可以每k个数就反转一次，末尾如果没有凑够k个数字，就不用反转。\n\n#### 代码\n如下:\n\n```js\n//foreverking\n#include <cstdio>\n#include <queue>\n#include <algorithm>\n#include <cstring>\n#include <iostream>\n#include <cmath>\nusing namespace std;\n\ntypedef struct node{\n    int address;//地址（下标）\n    int data;//数据\n    int next;//下一个元素的地址\n}List;\n\nint first,n, k;//first:首节点 n:总节点数 k：反转数\nint main(){\n    vector<List> v;\n    List s[100000];\n    cin >> first >> n >> k;\n    for (int i = 0; i < n; i++) {\n        //cin >> s[i].address >> s[i].data >> s[i].next;\n        List l;\n        cin >> l.address >> l.data >> l.next;\n        s[l.address] = l;\n    }\n\n    //NULL 地址用 -1 表示\n    int nextaddress = first;\n    while(nextaddress != -1){//链表存入vector\n        v.push_back(s[nextaddress]);\n        nextaddress = s[nextaddress].next;//指针后移\n    }\n    vector<List>::iterator it = v.begin();//迭代器\n    for(int i = 0; i < v.size() / k; i++){//可以凑够几次的反转，最后不到k的不反转\n        reverse(it,it + k);//反转\n        it = it + k;\n    }\n    for(int i = 0; i < v.size() - 1; i++){//输出\n        printf(\"%05d %d %05d\\n\", v[i].address, v[i].data, v[i + 1].address);\n    }\n    printf(\"%05d %d -1\\n\", v[v.size()-1].address, v[v.size()-1].data); //打印最后一个节点\n    return 0;\n\n}\n\n/*\n00100 6 4\n00000 4 99999\n00100 1 12309\n68237 6 -1\n33218 3 00000\n99999 5 68237\n12309 2 33218\n */\n```\n#### 代码细节\n首先是输入时，不能这样输入`cin >> s[i].address >> s[i].data >> s[i].next;`。这样会超时，但是具体原因我也不是很清楚。第二是迭代器的使用，通过迭代器可以读取它指向的元素，*迭代器名就表示迭代器指向的元素，迭代器就像指针，指向的是地址 `vector<int>::iterator it;  //定义正向迭代器`.最后是用上好的反转函数reverse可以用。\n#### 其他方法\n\n```js\n#include <iostream>\n#include <algorithm>\nusing namespace std;\nint main()\n{\n    int first, k, n, temp;\n    cin >> first >> n >> k;\n    int data[100005], next[100005], list[100005];\n    for (int i = 0; i < n; i++)\n    {\n        cin >> temp;\n        cin >> data[temp] >> next[temp];\n    }\n    int sum = 0; //不一定所有的输入的结点都是有用的，加个计数器\n    while (first != -1)\n    {\n        list[sum++] = first;\n        first = next[first];\n    }\n    for (int i = 0; i < (sum - sum % k); i += k)\n        reverse(begin(list) + i, begin(list) + i + k);\n    for (int i = 0; i < sum - 1; i++)\n        printf(\"%05d %d %05d\\n\", list[i], data[list[i]], list[i + 1]);\n    printf(\"%05d %d -1\", list[sum - 1], data[list[sum - 1]]);\n    return 0;\n}\n```\n柳婼的简短代码，没有使用结构体，使用两个数组分别存数据，下一个地址。再将表结点的各地址存入List数组。最后反转输出\n\n[题目链接](https://pintia.cn/problem-sets/994805260223102976/problems/994805296180871168)","source":"_posts/PAT乙级1025.md","raw":"---\ntitle: PAT乙级1025\ndate: 2021-05-08 15:13:07\ntags: \n    - Study\ncategories: \n    - 题解\n    - PAT题解\n---\n\n#### 题目\n![image.png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6e0db6478ee74544b821806054a7a243~tplv-k3u1fbpfcp-watermark.image)\n\n是不是乍一看就是一个顺序表，其实也差不多，就运用顺序表。先定义一个结构体，就叫List，里面存放Address 是结点地址，Data 是该结点保存的整数数据，Next 是下一结点的地址。再输入每个结点的数据，再把顺序存入vector数组中。最后就可以每k个数就反转一次，末尾如果没有凑够k个数字，就不用反转。\n\n#### 代码\n如下:\n\n```js\n//foreverking\n#include <cstdio>\n#include <queue>\n#include <algorithm>\n#include <cstring>\n#include <iostream>\n#include <cmath>\nusing namespace std;\n\ntypedef struct node{\n    int address;//地址（下标）\n    int data;//数据\n    int next;//下一个元素的地址\n}List;\n\nint first,n, k;//first:首节点 n:总节点数 k：反转数\nint main(){\n    vector<List> v;\n    List s[100000];\n    cin >> first >> n >> k;\n    for (int i = 0; i < n; i++) {\n        //cin >> s[i].address >> s[i].data >> s[i].next;\n        List l;\n        cin >> l.address >> l.data >> l.next;\n        s[l.address] = l;\n    }\n\n    //NULL 地址用 -1 表示\n    int nextaddress = first;\n    while(nextaddress != -1){//链表存入vector\n        v.push_back(s[nextaddress]);\n        nextaddress = s[nextaddress].next;//指针后移\n    }\n    vector<List>::iterator it = v.begin();//迭代器\n    for(int i = 0; i < v.size() / k; i++){//可以凑够几次的反转，最后不到k的不反转\n        reverse(it,it + k);//反转\n        it = it + k;\n    }\n    for(int i = 0; i < v.size() - 1; i++){//输出\n        printf(\"%05d %d %05d\\n\", v[i].address, v[i].data, v[i + 1].address);\n    }\n    printf(\"%05d %d -1\\n\", v[v.size()-1].address, v[v.size()-1].data); //打印最后一个节点\n    return 0;\n\n}\n\n/*\n00100 6 4\n00000 4 99999\n00100 1 12309\n68237 6 -1\n33218 3 00000\n99999 5 68237\n12309 2 33218\n */\n```\n#### 代码细节\n首先是输入时，不能这样输入`cin >> s[i].address >> s[i].data >> s[i].next;`。这样会超时，但是具体原因我也不是很清楚。第二是迭代器的使用，通过迭代器可以读取它指向的元素，*迭代器名就表示迭代器指向的元素，迭代器就像指针，指向的是地址 `vector<int>::iterator it;  //定义正向迭代器`.最后是用上好的反转函数reverse可以用。\n#### 其他方法\n\n```js\n#include <iostream>\n#include <algorithm>\nusing namespace std;\nint main()\n{\n    int first, k, n, temp;\n    cin >> first >> n >> k;\n    int data[100005], next[100005], list[100005];\n    for (int i = 0; i < n; i++)\n    {\n        cin >> temp;\n        cin >> data[temp] >> next[temp];\n    }\n    int sum = 0; //不一定所有的输入的结点都是有用的，加个计数器\n    while (first != -1)\n    {\n        list[sum++] = first;\n        first = next[first];\n    }\n    for (int i = 0; i < (sum - sum % k); i += k)\n        reverse(begin(list) + i, begin(list) + i + k);\n    for (int i = 0; i < sum - 1; i++)\n        printf(\"%05d %d %05d\\n\", list[i], data[list[i]], list[i + 1]);\n    printf(\"%05d %d -1\", list[sum - 1], data[list[sum - 1]]);\n    return 0;\n}\n```\n柳婼的简短代码，没有使用结构体，使用两个数组分别存数据，下一个地址。再将表结点的各地址存入List数组。最后反转输出\n\n[题目链接](https://pintia.cn/problem-sets/994805260223102976/problems/994805296180871168)","slug":"PAT乙级1025","published":1,"updated":"2021-05-08T07:13:41.975Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktvk78f4000w1cwse91417hx","content":"\n        <h4 id=\"题目\"   >\n          <a href=\"#题目\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h4>\n      <p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6e0db6478ee74544b821806054a7a243~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\"></p>\n<p>是不是乍一看就是一个顺序表，其实也差不多，就运用顺序表。先定义一个结构体，就叫List，里面存放Address 是结点地址，Data 是该结点保存的整数数据，Next 是下一结点的地址。再输入每个结点的数据，再把顺序存入vector数组中。最后就可以每k个数就反转一次，末尾如果没有凑够k个数字，就不用反转。</p>\n\n        <h4 id=\"代码\"   >\n          <a href=\"#代码\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h4>\n      <p>如下:</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//foreverking</span></span><br><span class=\"line\">#include &lt;cstdio&gt;</span><br><span class=\"line\">#include &lt;queue&gt;</span><br><span class=\"line\">#include &lt;algorithm&gt;</span><br><span class=\"line\">#include &lt;cstring&gt;</span><br><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">#include &lt;cmath&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\"></span><br><span class=\"line\">typedef struct node&#123;</span><br><span class=\"line\">    int address;<span class=\"comment\">//地址（下标）</span></span><br><span class=\"line\">    int data;<span class=\"comment\">//数据</span></span><br><span class=\"line\">    int next;<span class=\"comment\">//下一个元素的地址</span></span><br><span class=\"line\">&#125;List;</span><br><span class=\"line\"></span><br><span class=\"line\">int first,n, k;<span class=\"comment\">//first:首节点 n:总节点数 k：反转数</span></span><br><span class=\"line\">int <span class=\"function\"><span class=\"title\">main</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    vector&lt;List&gt; v;</span><br><span class=\"line\">    List s[<span class=\"number\">100000</span>];</span><br><span class=\"line\">    cin &gt;&gt; first &gt;&gt; n &gt;&gt; k;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (int i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//cin &gt;&gt; s[i].address &gt;&gt; s[i].data &gt;&gt; s[i].next;</span></span><br><span class=\"line\">        List l;</span><br><span class=\"line\">        cin &gt;&gt; l.address &gt;&gt; l.data &gt;&gt; l.next;</span><br><span class=\"line\">        s[l.address] = l;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//NULL 地址用 -1 表示</span></span><br><span class=\"line\">    int nextaddress = first;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(nextaddress != -<span class=\"number\">1</span>)&#123;<span class=\"comment\">//链表存入vector</span></span><br><span class=\"line\">        v.push_back(s[nextaddress]);</span><br><span class=\"line\">        nextaddress = s[nextaddress].next;<span class=\"comment\">//指针后移</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    vector&lt;List&gt;::iterator it = v.begin();<span class=\"comment\">//迭代器</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(int i = <span class=\"number\">0</span>; i &lt; v.size() / k; i++)&#123;<span class=\"comment\">//可以凑够几次的反转，最后不到k的不反转</span></span><br><span class=\"line\">        reverse(it,it + k);<span class=\"comment\">//反转</span></span><br><span class=\"line\">        it = it + k;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(int i = <span class=\"number\">0</span>; i &lt; v.size() - <span class=\"number\">1</span>; i++)&#123;<span class=\"comment\">//输出</span></span><br><span class=\"line\">        printf(<span class=\"string\">&quot;%05d %d %05d\\n&quot;</span>, v[i].address, v[i].data, v[i + <span class=\"number\">1</span>].address);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    printf(<span class=\"string\">&quot;%05d %d -1\\n&quot;</span>, v[v.size()-<span class=\"number\">1</span>].address, v[v.size()-<span class=\"number\">1</span>].data); <span class=\"comment\">//打印最后一个节点</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">00100 6 4</span></span><br><span class=\"line\"><span class=\"comment\">00000 4 99999</span></span><br><span class=\"line\"><span class=\"comment\">00100 1 12309</span></span><br><span class=\"line\"><span class=\"comment\">68237 6 -1</span></span><br><span class=\"line\"><span class=\"comment\">33218 3 00000</span></span><br><span class=\"line\"><span class=\"comment\">99999 5 68237</span></span><br><span class=\"line\"><span class=\"comment\">12309 2 33218</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br></pre></td></tr></table></div></figure>\n\n        <h4 id=\"代码细节\"   >\n          <a href=\"#代码细节\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#代码细节\" class=\"headerlink\" title=\"代码细节\"></a>代码细节</h4>\n      <p>首先是输入时，不能这样输入<code>cin &gt;&gt; s[i].address &gt;&gt; s[i].data &gt;&gt; s[i].next;</code>。这样会超时，但是具体原因我也不是很清楚。第二是迭代器的使用，通过迭代器可以读取它指向的元素，*迭代器名就表示迭代器指向的元素，迭代器就像指针，指向的是地址 <code>vector&lt;int&gt;::iterator it;  //定义正向迭代器</code>.最后是用上好的反转函数reverse可以用。</p>\n\n        <h4 id=\"其他方法\"   >\n          <a href=\"#其他方法\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#其他方法\" class=\"headerlink\" title=\"其他方法\"></a>其他方法</h4>\n      <figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">#include &lt;algorithm&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\">int main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    int first, k, n, temp;</span><br><span class=\"line\">    cin &gt;&gt; first &gt;&gt; n &gt;&gt; k;</span><br><span class=\"line\">    int data[<span class=\"number\">100005</span>], next[<span class=\"number\">100005</span>], list[<span class=\"number\">100005</span>];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (int i = <span class=\"number\">0</span>; i &lt; n; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cin &gt;&gt; temp;</span><br><span class=\"line\">        cin &gt;&gt; data[temp] &gt;&gt; next[temp];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    int sum = <span class=\"number\">0</span>; <span class=\"comment\">//不一定所有的输入的结点都是有用的，加个计数器</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (first != -<span class=\"number\">1</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        list[sum++] = first;</span><br><span class=\"line\">        first = next[first];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (int i = <span class=\"number\">0</span>; i &lt; (sum - sum % k); i += k)</span><br><span class=\"line\">        reverse(begin(list) + i, begin(list) + i + k);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (int i = <span class=\"number\">0</span>; i &lt; sum - <span class=\"number\">1</span>; i++)</span><br><span class=\"line\">        printf(<span class=\"string\">&quot;%05d %d %05d\\n&quot;</span>, list[i], data[list[i]], list[i + <span class=\"number\">1</span>]);</span><br><span class=\"line\">    printf(<span class=\"string\">&quot;%05d %d -1&quot;</span>, list[sum - <span class=\"number\">1</span>], data[list[sum - <span class=\"number\">1</span>]]);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>柳婼的简短代码，没有使用结构体，使用两个数组分别存数据，下一个地址。再将表结点的各地址存入List数组。最后反转输出</p>\n<p><span class=\"exturl\"><a class=\"exturl__link\"   href=\"https://pintia.cn/problem-sets/994805260223102976/problems/994805296180871168\" >题目链接</a><span class=\"exturl__icon\"><i class=\"fas fa-external-link-alt\"></i></span></span></p>\n","site":{"data":{}},"excerpt":"","more":"\n        <h4 id=\"题目\"   >\n          <a href=\"#题目\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h4>\n      <p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6e0db6478ee74544b821806054a7a243~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\"></p>\n<p>是不是乍一看就是一个顺序表，其实也差不多，就运用顺序表。先定义一个结构体，就叫List，里面存放Address 是结点地址，Data 是该结点保存的整数数据，Next 是下一结点的地址。再输入每个结点的数据，再把顺序存入vector数组中。最后就可以每k个数就反转一次，末尾如果没有凑够k个数字，就不用反转。</p>\n\n        <h4 id=\"代码\"   >\n          <a href=\"#代码\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h4>\n      <p>如下:</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//foreverking</span></span><br><span class=\"line\">#include &lt;cstdio&gt;</span><br><span class=\"line\">#include &lt;queue&gt;</span><br><span class=\"line\">#include &lt;algorithm&gt;</span><br><span class=\"line\">#include &lt;cstring&gt;</span><br><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">#include &lt;cmath&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\"></span><br><span class=\"line\">typedef struct node&#123;</span><br><span class=\"line\">    int address;<span class=\"comment\">//地址（下标）</span></span><br><span class=\"line\">    int data;<span class=\"comment\">//数据</span></span><br><span class=\"line\">    int next;<span class=\"comment\">//下一个元素的地址</span></span><br><span class=\"line\">&#125;List;</span><br><span class=\"line\"></span><br><span class=\"line\">int first,n, k;<span class=\"comment\">//first:首节点 n:总节点数 k：反转数</span></span><br><span class=\"line\">int <span class=\"function\"><span class=\"title\">main</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    vector&lt;List&gt; v;</span><br><span class=\"line\">    List s[<span class=\"number\">100000</span>];</span><br><span class=\"line\">    cin &gt;&gt; first &gt;&gt; n &gt;&gt; k;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (int i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//cin &gt;&gt; s[i].address &gt;&gt; s[i].data &gt;&gt; s[i].next;</span></span><br><span class=\"line\">        List l;</span><br><span class=\"line\">        cin &gt;&gt; l.address &gt;&gt; l.data &gt;&gt; l.next;</span><br><span class=\"line\">        s[l.address] = l;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//NULL 地址用 -1 表示</span></span><br><span class=\"line\">    int nextaddress = first;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(nextaddress != -<span class=\"number\">1</span>)&#123;<span class=\"comment\">//链表存入vector</span></span><br><span class=\"line\">        v.push_back(s[nextaddress]);</span><br><span class=\"line\">        nextaddress = s[nextaddress].next;<span class=\"comment\">//指针后移</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    vector&lt;List&gt;::iterator it = v.begin();<span class=\"comment\">//迭代器</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(int i = <span class=\"number\">0</span>; i &lt; v.size() / k; i++)&#123;<span class=\"comment\">//可以凑够几次的反转，最后不到k的不反转</span></span><br><span class=\"line\">        reverse(it,it + k);<span class=\"comment\">//反转</span></span><br><span class=\"line\">        it = it + k;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(int i = <span class=\"number\">0</span>; i &lt; v.size() - <span class=\"number\">1</span>; i++)&#123;<span class=\"comment\">//输出</span></span><br><span class=\"line\">        printf(<span class=\"string\">&quot;%05d %d %05d\\n&quot;</span>, v[i].address, v[i].data, v[i + <span class=\"number\">1</span>].address);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    printf(<span class=\"string\">&quot;%05d %d -1\\n&quot;</span>, v[v.size()-<span class=\"number\">1</span>].address, v[v.size()-<span class=\"number\">1</span>].data); <span class=\"comment\">//打印最后一个节点</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">00100 6 4</span></span><br><span class=\"line\"><span class=\"comment\">00000 4 99999</span></span><br><span class=\"line\"><span class=\"comment\">00100 1 12309</span></span><br><span class=\"line\"><span class=\"comment\">68237 6 -1</span></span><br><span class=\"line\"><span class=\"comment\">33218 3 00000</span></span><br><span class=\"line\"><span class=\"comment\">99999 5 68237</span></span><br><span class=\"line\"><span class=\"comment\">12309 2 33218</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br></pre></td></tr></table></div></figure>\n\n        <h4 id=\"代码细节\"   >\n          <a href=\"#代码细节\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#代码细节\" class=\"headerlink\" title=\"代码细节\"></a>代码细节</h4>\n      <p>首先是输入时，不能这样输入<code>cin &gt;&gt; s[i].address &gt;&gt; s[i].data &gt;&gt; s[i].next;</code>。这样会超时，但是具体原因我也不是很清楚。第二是迭代器的使用，通过迭代器可以读取它指向的元素，*迭代器名就表示迭代器指向的元素，迭代器就像指针，指向的是地址 <code>vector&lt;int&gt;::iterator it;  //定义正向迭代器</code>.最后是用上好的反转函数reverse可以用。</p>\n\n        <h4 id=\"其他方法\"   >\n          <a href=\"#其他方法\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#其他方法\" class=\"headerlink\" title=\"其他方法\"></a>其他方法</h4>\n      <figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">#include &lt;algorithm&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\">int main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    int first, k, n, temp;</span><br><span class=\"line\">    cin &gt;&gt; first &gt;&gt; n &gt;&gt; k;</span><br><span class=\"line\">    int data[<span class=\"number\">100005</span>], next[<span class=\"number\">100005</span>], list[<span class=\"number\">100005</span>];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (int i = <span class=\"number\">0</span>; i &lt; n; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cin &gt;&gt; temp;</span><br><span class=\"line\">        cin &gt;&gt; data[temp] &gt;&gt; next[temp];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    int sum = <span class=\"number\">0</span>; <span class=\"comment\">//不一定所有的输入的结点都是有用的，加个计数器</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (first != -<span class=\"number\">1</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        list[sum++] = first;</span><br><span class=\"line\">        first = next[first];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (int i = <span class=\"number\">0</span>; i &lt; (sum - sum % k); i += k)</span><br><span class=\"line\">        reverse(begin(list) + i, begin(list) + i + k);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (int i = <span class=\"number\">0</span>; i &lt; sum - <span class=\"number\">1</span>; i++)</span><br><span class=\"line\">        printf(<span class=\"string\">&quot;%05d %d %05d\\n&quot;</span>, list[i], data[list[i]], list[i + <span class=\"number\">1</span>]);</span><br><span class=\"line\">    printf(<span class=\"string\">&quot;%05d %d -1&quot;</span>, list[sum - <span class=\"number\">1</span>], data[list[sum - <span class=\"number\">1</span>]]);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>柳婼的简短代码，没有使用结构体，使用两个数组分别存数据，下一个地址。再将表结点的各地址存入List数组。最后反转输出</p>\n<p><span class=\"exturl\"><a class=\"exturl__link\"   href=\"https://pintia.cn/problem-sets/994805260223102976/problems/994805296180871168\" >题目链接</a><span class=\"exturl__icon\"><i class=\"fas fa-external-link-alt\"></i></span></span></p>\n"},{"title":"PAT乙级1026","date":"2021-05-09T09:26:18.000Z","_content":"\n![image.png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8bdff5a5bf9243759492cd58e95751a2~tplv-k3u1fbpfcp-watermark.image)\n这是一道比较水的题目，唯一的问题是数据的处理。\n> 格式输出；不足 1 秒的时间四舍五入到秒。\n\n那就涉及到一点精度的问题，用double存一些数据来保持精度。\n\n```js\n//foreverking\n#include <vector>\n#include <cstdio>\n#include <queue>\n#include <algorithm>\n#include <cstring>\n#include <iostream>\n#include <cmath>\nusing namespace std;\n\nconst int CLK_TCK = 100;\n\ndouble c1,c2;\n//在一行中输出被测函数运行的时间。运行时间必须按照 hh:mm:ss（即2位的 时:分:秒）格式输出；不足 1 秒的时间四舍五入到秒。\n\n//检查是否需要输出0\nvoid check(int x){\n    if(x < 10)\n        cout << '0';//小于10请补齐\n}\n\nint main(){\n    int hour,mi,sc;\n    cin >> c1 >> c2;\n    double res = (c2 - c1) / CLK_TCK;\n    hour = res / 3600;\n    mi = (res - 3600 * hour) / 60;\n    sc = (res - 3600 * hour - 60 * mi) + 0.5;\n    check(hour);\n    cout << hour << ':';\n    check(mi);\n    cout << mi << ':';\n    check(sc);\n    cout << sc << endl;\n}\n```\n这里有个小技巧`四舍五入的小技巧 int (a+0.5)`。当然你也可以在一开始的时候，`（c1 - c2 + 50） / CLK_TCK `效果是一样的，都是为了让不足一秒的当做一秒。你也可以试试向上取整的ceil函数~\n\n[题目链接](https://pintia.cn/problem-sets/994805260223102976/problems/994805295203598336)","source":"_posts/PAT乙级1026.md","raw":"---\ntitle: PAT乙级1026\ndate: 2021-05-09 17:26:18\ntags: \n    - Study\ncategories: \n    - 题解\n    - PAT题解\n---\n\n![image.png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8bdff5a5bf9243759492cd58e95751a2~tplv-k3u1fbpfcp-watermark.image)\n这是一道比较水的题目，唯一的问题是数据的处理。\n> 格式输出；不足 1 秒的时间四舍五入到秒。\n\n那就涉及到一点精度的问题，用double存一些数据来保持精度。\n\n```js\n//foreverking\n#include <vector>\n#include <cstdio>\n#include <queue>\n#include <algorithm>\n#include <cstring>\n#include <iostream>\n#include <cmath>\nusing namespace std;\n\nconst int CLK_TCK = 100;\n\ndouble c1,c2;\n//在一行中输出被测函数运行的时间。运行时间必须按照 hh:mm:ss（即2位的 时:分:秒）格式输出；不足 1 秒的时间四舍五入到秒。\n\n//检查是否需要输出0\nvoid check(int x){\n    if(x < 10)\n        cout << '0';//小于10请补齐\n}\n\nint main(){\n    int hour,mi,sc;\n    cin >> c1 >> c2;\n    double res = (c2 - c1) / CLK_TCK;\n    hour = res / 3600;\n    mi = (res - 3600 * hour) / 60;\n    sc = (res - 3600 * hour - 60 * mi) + 0.5;\n    check(hour);\n    cout << hour << ':';\n    check(mi);\n    cout << mi << ':';\n    check(sc);\n    cout << sc << endl;\n}\n```\n这里有个小技巧`四舍五入的小技巧 int (a+0.5)`。当然你也可以在一开始的时候，`（c1 - c2 + 50） / CLK_TCK `效果是一样的，都是为了让不足一秒的当做一秒。你也可以试试向上取整的ceil函数~\n\n[题目链接](https://pintia.cn/problem-sets/994805260223102976/problems/994805295203598336)","slug":"PAT乙级1026","published":1,"updated":"2021-05-09T09:27:30.503Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktvk78f5000z1cws4tse85yv","content":"<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8bdff5a5bf9243759492cd58e95751a2~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\"><br>这是一道比较水的题目，唯一的问题是数据的处理。</p>\n<blockquote>\n<p>格式输出；不足 1 秒的时间四舍五入到秒。</p>\n</blockquote>\n<p>那就涉及到一点精度的问题，用double存一些数据来保持精度。</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//foreverking</span></span><br><span class=\"line\">#include &lt;vector&gt;</span><br><span class=\"line\">#include &lt;cstdio&gt;</span><br><span class=\"line\">#include &lt;queue&gt;</span><br><span class=\"line\">#include &lt;algorithm&gt;</span><br><span class=\"line\">#include &lt;cstring&gt;</span><br><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">#include &lt;cmath&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> int CLK_TCK = <span class=\"number\">100</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">double c1,c2;</span><br><span class=\"line\"><span class=\"comment\">//在一行中输出被测函数运行的时间。运行时间必须按照 hh:mm:ss（即2位的 时:分:秒）格式输出；不足 1 秒的时间四舍五入到秒。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//检查是否需要输出0</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"function\"><span class=\"title\">check</span>(<span class=\"params\">int x</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x &lt; <span class=\"number\">10</span>)</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&#x27;0&#x27;</span>;<span class=\"comment\">//小于10请补齐</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">int <span class=\"function\"><span class=\"title\">main</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    int hour,mi,sc;</span><br><span class=\"line\">    cin &gt;&gt; c1 &gt;&gt; c2;</span><br><span class=\"line\">    double res = (c2 - c1) / CLK_TCK;</span><br><span class=\"line\">    hour = res / <span class=\"number\">3600</span>;</span><br><span class=\"line\">    mi = (res - <span class=\"number\">3600</span> * hour) / <span class=\"number\">60</span>;</span><br><span class=\"line\">    sc = (res - <span class=\"number\">3600</span> * hour - <span class=\"number\">60</span> * mi) + <span class=\"number\">0.5</span>;</span><br><span class=\"line\">    check(hour);</span><br><span class=\"line\">    cout &lt;&lt; hour &lt;&lt; <span class=\"string\">&#x27;:&#x27;</span>;</span><br><span class=\"line\">    check(mi);</span><br><span class=\"line\">    cout &lt;&lt; mi &lt;&lt; <span class=\"string\">&#x27;:&#x27;</span>;</span><br><span class=\"line\">    check(sc);</span><br><span class=\"line\">    cout &lt;&lt; sc &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>这里有个小技巧<code>四舍五入的小技巧 int (a+0.5)</code>。当然你也可以在一开始的时候，<code>（c1 - c2 + 50） / CLK_TCK </code>效果是一样的，都是为了让不足一秒的当做一秒。你也可以试试向上取整的ceil函数~</p>\n<p><span class=\"exturl\"><a class=\"exturl__link\"   href=\"https://pintia.cn/problem-sets/994805260223102976/problems/994805295203598336\" >题目链接</a><span class=\"exturl__icon\"><i class=\"fas fa-external-link-alt\"></i></span></span></p>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8bdff5a5bf9243759492cd58e95751a2~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\"><br>这是一道比较水的题目，唯一的问题是数据的处理。</p>\n<blockquote>\n<p>格式输出；不足 1 秒的时间四舍五入到秒。</p>\n</blockquote>\n<p>那就涉及到一点精度的问题，用double存一些数据来保持精度。</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//foreverking</span></span><br><span class=\"line\">#include &lt;vector&gt;</span><br><span class=\"line\">#include &lt;cstdio&gt;</span><br><span class=\"line\">#include &lt;queue&gt;</span><br><span class=\"line\">#include &lt;algorithm&gt;</span><br><span class=\"line\">#include &lt;cstring&gt;</span><br><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">#include &lt;cmath&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> int CLK_TCK = <span class=\"number\">100</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">double c1,c2;</span><br><span class=\"line\"><span class=\"comment\">//在一行中输出被测函数运行的时间。运行时间必须按照 hh:mm:ss（即2位的 时:分:秒）格式输出；不足 1 秒的时间四舍五入到秒。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//检查是否需要输出0</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"function\"><span class=\"title\">check</span>(<span class=\"params\">int x</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x &lt; <span class=\"number\">10</span>)</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&#x27;0&#x27;</span>;<span class=\"comment\">//小于10请补齐</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">int <span class=\"function\"><span class=\"title\">main</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    int hour,mi,sc;</span><br><span class=\"line\">    cin &gt;&gt; c1 &gt;&gt; c2;</span><br><span class=\"line\">    double res = (c2 - c1) / CLK_TCK;</span><br><span class=\"line\">    hour = res / <span class=\"number\">3600</span>;</span><br><span class=\"line\">    mi = (res - <span class=\"number\">3600</span> * hour) / <span class=\"number\">60</span>;</span><br><span class=\"line\">    sc = (res - <span class=\"number\">3600</span> * hour - <span class=\"number\">60</span> * mi) + <span class=\"number\">0.5</span>;</span><br><span class=\"line\">    check(hour);</span><br><span class=\"line\">    cout &lt;&lt; hour &lt;&lt; <span class=\"string\">&#x27;:&#x27;</span>;</span><br><span class=\"line\">    check(mi);</span><br><span class=\"line\">    cout &lt;&lt; mi &lt;&lt; <span class=\"string\">&#x27;:&#x27;</span>;</span><br><span class=\"line\">    check(sc);</span><br><span class=\"line\">    cout &lt;&lt; sc &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>这里有个小技巧<code>四舍五入的小技巧 int (a+0.5)</code>。当然你也可以在一开始的时候，<code>（c1 - c2 + 50） / CLK_TCK </code>效果是一样的，都是为了让不足一秒的当做一秒。你也可以试试向上取整的ceil函数~</p>\n<p><span class=\"exturl\"><a class=\"exturl__link\"   href=\"https://pintia.cn/problem-sets/994805260223102976/problems/994805295203598336\" >题目链接</a><span class=\"exturl__icon\"><i class=\"fas fa-external-link-alt\"></i></span></span></p>\n"},{"title":"PAT乙级1027","date":"2021-05-09T11:20:08.000Z","_content":"\n![image.png](https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5891b5de17bf4a1094d485f2ab594b36~tplv-k3u1fbpfcp-watermark.image)\n画图找规律的题目，找到行数，空格与字符的规律。\n\n以中间的行为基准，向两边散发行，每一行都是奇数个字符。以中间行为第0行，因为两边是对称的，值计算一边再乘以2就行。散发开来每行是3，5，7~~~ 。设有x行，那么可以得出第i行是（2i+1）[3,5,7,9,~,2i+1]。根据求和公式，仅上中间行0行上面的字符数是： $(3 + 2i + 1) * i / 2 = i * (i + 2)$。而总的字符数为$2 * i * (i + 2) + 1$。所以当所需字符数大于n（可使用的字符数）时，说明最多行了。\n\n而输入规则，先输入0行上面的，再输入0行本身，最后时0行下面的，而每一行先要输入一定的空格，空格数就是单侧行数 - 输入到第几行。0行前就输入单侧行数个数的空格。注意两侧时对称的哦。\n\n```js\n//foreverking\n#include <vector>\n#include <cstdio>\n#include <queue>\n#include <algorithm>\n#include <cstring>\n#include <iostream>\n#include <cmath>\nusing namespace std;\n//谓“沙漏形状”，是指每行输出奇数个符号；各行符号中心对齐；相邻两行符号数差2；符号数先从大到小顺序递减到1，再从小到大顺序递增；首尾符号数相等\nint main(){\n    int n,cnt = 0;\n    char ch;\n    cin >> n >> ch;\n    for(int i = 0; i < n; i++){\n        if((2 * i * (i + 2) + 1) > n){\n            cnt = i - 1;//这时候层数应该是i-1\n            break;//跳出循环\n        }\n    }\n    // cout << cnt;\n    for(int i = cnt ; i > 0; i--){//上面的行\n        for(int j = cnt - i; j > 0; j--) cout << ' ';//输入空格\n        for(int k = 0; k < i * 2 + 1; k++) cout << ch;\n        cout << endl;\n    }\n    //输入中间的一行，只有一个字符\n    for(int i = 0 ; i < cnt; i++) cout << ' ';\n    cout << ch << endl;\n    //输入下main的行\n    for(int i = 1 ; i <= cnt; i++){//下面的行\n        for(int j = cnt - i; j > 0; j--) cout << ' ';//输入空格\n        for(int k = 0; k < i * 2 + 1; k++) cout << ch;\n        cout << endl;\n    }\n    cout << n - (2 * cnt * (cnt + 2) + 1);\n    return 0;\n}\n\n```\n[题目链接](https://pintia.cn/problem-sets/994805260223102976/problems/994805294251491328)\n","source":"_posts/PAT乙级1027.md","raw":"---\ntitle: PAT乙级1027\ndate: 2021-05-09 19:20:08\ntags: \n    - Study\ncategories: \n    - 题解\n    - PAT题解\n---\n\n![image.png](https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5891b5de17bf4a1094d485f2ab594b36~tplv-k3u1fbpfcp-watermark.image)\n画图找规律的题目，找到行数，空格与字符的规律。\n\n以中间的行为基准，向两边散发行，每一行都是奇数个字符。以中间行为第0行，因为两边是对称的，值计算一边再乘以2就行。散发开来每行是3，5，7~~~ 。设有x行，那么可以得出第i行是（2i+1）[3,5,7,9,~,2i+1]。根据求和公式，仅上中间行0行上面的字符数是： $(3 + 2i + 1) * i / 2 = i * (i + 2)$。而总的字符数为$2 * i * (i + 2) + 1$。所以当所需字符数大于n（可使用的字符数）时，说明最多行了。\n\n而输入规则，先输入0行上面的，再输入0行本身，最后时0行下面的，而每一行先要输入一定的空格，空格数就是单侧行数 - 输入到第几行。0行前就输入单侧行数个数的空格。注意两侧时对称的哦。\n\n```js\n//foreverking\n#include <vector>\n#include <cstdio>\n#include <queue>\n#include <algorithm>\n#include <cstring>\n#include <iostream>\n#include <cmath>\nusing namespace std;\n//谓“沙漏形状”，是指每行输出奇数个符号；各行符号中心对齐；相邻两行符号数差2；符号数先从大到小顺序递减到1，再从小到大顺序递增；首尾符号数相等\nint main(){\n    int n,cnt = 0;\n    char ch;\n    cin >> n >> ch;\n    for(int i = 0; i < n; i++){\n        if((2 * i * (i + 2) + 1) > n){\n            cnt = i - 1;//这时候层数应该是i-1\n            break;//跳出循环\n        }\n    }\n    // cout << cnt;\n    for(int i = cnt ; i > 0; i--){//上面的行\n        for(int j = cnt - i; j > 0; j--) cout << ' ';//输入空格\n        for(int k = 0; k < i * 2 + 1; k++) cout << ch;\n        cout << endl;\n    }\n    //输入中间的一行，只有一个字符\n    for(int i = 0 ; i < cnt; i++) cout << ' ';\n    cout << ch << endl;\n    //输入下main的行\n    for(int i = 1 ; i <= cnt; i++){//下面的行\n        for(int j = cnt - i; j > 0; j--) cout << ' ';//输入空格\n        for(int k = 0; k < i * 2 + 1; k++) cout << ch;\n        cout << endl;\n    }\n    cout << n - (2 * cnt * (cnt + 2) + 1);\n    return 0;\n}\n\n```\n[题目链接](https://pintia.cn/problem-sets/994805260223102976/problems/994805294251491328)\n","slug":"PAT乙级1027","published":1,"updated":"2021-05-09T11:20:27.980Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktvk78f500111cws38vud8e2","content":"<p><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5891b5de17bf4a1094d485f2ab594b36~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\"><br>画图找规律的题目，找到行数，空格与字符的规律。</p>\n<p>以中间的行为基准，向两边散发行，每一行都是奇数个字符。以中间行为第0行，因为两边是对称的，值计算一边再乘以2就行。散发开来每行是3，5，7~~~ 。设有x行，那么可以得出第i行是（2i+1）[3,5,7,9,~,2i+1]。根据求和公式，仅上中间行0行上面的字符数是： $(3 + 2i + 1) * i / 2 = i * (i + 2)$。而总的字符数为$2 * i * (i + 2) + 1$。所以当所需字符数大于n（可使用的字符数）时，说明最多行了。</p>\n<p>而输入规则，先输入0行上面的，再输入0行本身，最后时0行下面的，而每一行先要输入一定的空格，空格数就是单侧行数 - 输入到第几行。0行前就输入单侧行数个数的空格。注意两侧时对称的哦。</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//foreverking</span></span><br><span class=\"line\">#include &lt;vector&gt;</span><br><span class=\"line\">#include &lt;cstdio&gt;</span><br><span class=\"line\">#include &lt;queue&gt;</span><br><span class=\"line\">#include &lt;algorithm&gt;</span><br><span class=\"line\">#include &lt;cstring&gt;</span><br><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">#include &lt;cmath&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\"><span class=\"comment\">//谓“沙漏形状”，是指每行输出奇数个符号；各行符号中心对齐；相邻两行符号数差2；符号数先从大到小顺序递减到1，再从小到大顺序递增；首尾符号数相等</span></span><br><span class=\"line\">int <span class=\"function\"><span class=\"title\">main</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    int n,cnt = <span class=\"number\">0</span>;</span><br><span class=\"line\">    char ch;</span><br><span class=\"line\">    cin &gt;&gt; n &gt;&gt; ch;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(int i = <span class=\"number\">0</span>; i &lt; n; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>((<span class=\"number\">2</span> * i * (i + <span class=\"number\">2</span>) + <span class=\"number\">1</span>) &gt; n)&#123;</span><br><span class=\"line\">            cnt = i - <span class=\"number\">1</span>;<span class=\"comment\">//这时候层数应该是i-1</span></span><br><span class=\"line\">            <span class=\"keyword\">break</span>;<span class=\"comment\">//跳出循环</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// cout &lt;&lt; cnt;</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(int i = cnt ; i &gt; <span class=\"number\">0</span>; i--)&#123;<span class=\"comment\">//上面的行</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(int j = cnt - i; j &gt; <span class=\"number\">0</span>; j--) cout &lt;&lt; <span class=\"string\">&#x27; &#x27;</span>;<span class=\"comment\">//输入空格</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(int k = <span class=\"number\">0</span>; k &lt; i * <span class=\"number\">2</span> + <span class=\"number\">1</span>; k++) cout &lt;&lt; ch;</span><br><span class=\"line\">        cout &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//输入中间的一行，只有一个字符</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(int i = <span class=\"number\">0</span> ; i &lt; cnt; i++) cout &lt;&lt; <span class=\"string\">&#x27; &#x27;</span>;</span><br><span class=\"line\">    cout &lt;&lt; ch &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"comment\">//输入下main的行</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(int i = <span class=\"number\">1</span> ; i &lt;= cnt; i++)&#123;<span class=\"comment\">//下面的行</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(int j = cnt - i; j &gt; <span class=\"number\">0</span>; j--) cout &lt;&lt; <span class=\"string\">&#x27; &#x27;</span>;<span class=\"comment\">//输入空格</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(int k = <span class=\"number\">0</span>; k &lt; i * <span class=\"number\">2</span> + <span class=\"number\">1</span>; k++) cout &lt;&lt; ch;</span><br><span class=\"line\">        cout &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; n - (<span class=\"number\">2</span> * cnt * (cnt + <span class=\"number\">2</span>) + <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></div></figure>\n<p><span class=\"exturl\"><a class=\"exturl__link\"   href=\"https://pintia.cn/problem-sets/994805260223102976/problems/994805294251491328\" >题目链接</a><span class=\"exturl__icon\"><i class=\"fas fa-external-link-alt\"></i></span></span></p>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5891b5de17bf4a1094d485f2ab594b36~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\"><br>画图找规律的题目，找到行数，空格与字符的规律。</p>\n<p>以中间的行为基准，向两边散发行，每一行都是奇数个字符。以中间行为第0行，因为两边是对称的，值计算一边再乘以2就行。散发开来每行是3，5，7~~~ 。设有x行，那么可以得出第i行是（2i+1）[3,5,7,9,~,2i+1]。根据求和公式，仅上中间行0行上面的字符数是： $(3 + 2i + 1) * i / 2 = i * (i + 2)$。而总的字符数为$2 * i * (i + 2) + 1$。所以当所需字符数大于n（可使用的字符数）时，说明最多行了。</p>\n<p>而输入规则，先输入0行上面的，再输入0行本身，最后时0行下面的，而每一行先要输入一定的空格，空格数就是单侧行数 - 输入到第几行。0行前就输入单侧行数个数的空格。注意两侧时对称的哦。</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//foreverking</span></span><br><span class=\"line\">#include &lt;vector&gt;</span><br><span class=\"line\">#include &lt;cstdio&gt;</span><br><span class=\"line\">#include &lt;queue&gt;</span><br><span class=\"line\">#include &lt;algorithm&gt;</span><br><span class=\"line\">#include &lt;cstring&gt;</span><br><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">#include &lt;cmath&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\"><span class=\"comment\">//谓“沙漏形状”，是指每行输出奇数个符号；各行符号中心对齐；相邻两行符号数差2；符号数先从大到小顺序递减到1，再从小到大顺序递增；首尾符号数相等</span></span><br><span class=\"line\">int <span class=\"function\"><span class=\"title\">main</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    int n,cnt = <span class=\"number\">0</span>;</span><br><span class=\"line\">    char ch;</span><br><span class=\"line\">    cin &gt;&gt; n &gt;&gt; ch;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(int i = <span class=\"number\">0</span>; i &lt; n; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>((<span class=\"number\">2</span> * i * (i + <span class=\"number\">2</span>) + <span class=\"number\">1</span>) &gt; n)&#123;</span><br><span class=\"line\">            cnt = i - <span class=\"number\">1</span>;<span class=\"comment\">//这时候层数应该是i-1</span></span><br><span class=\"line\">            <span class=\"keyword\">break</span>;<span class=\"comment\">//跳出循环</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// cout &lt;&lt; cnt;</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(int i = cnt ; i &gt; <span class=\"number\">0</span>; i--)&#123;<span class=\"comment\">//上面的行</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(int j = cnt - i; j &gt; <span class=\"number\">0</span>; j--) cout &lt;&lt; <span class=\"string\">&#x27; &#x27;</span>;<span class=\"comment\">//输入空格</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(int k = <span class=\"number\">0</span>; k &lt; i * <span class=\"number\">2</span> + <span class=\"number\">1</span>; k++) cout &lt;&lt; ch;</span><br><span class=\"line\">        cout &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//输入中间的一行，只有一个字符</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(int i = <span class=\"number\">0</span> ; i &lt; cnt; i++) cout &lt;&lt; <span class=\"string\">&#x27; &#x27;</span>;</span><br><span class=\"line\">    cout &lt;&lt; ch &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"comment\">//输入下main的行</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(int i = <span class=\"number\">1</span> ; i &lt;= cnt; i++)&#123;<span class=\"comment\">//下面的行</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(int j = cnt - i; j &gt; <span class=\"number\">0</span>; j--) cout &lt;&lt; <span class=\"string\">&#x27; &#x27;</span>;<span class=\"comment\">//输入空格</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(int k = <span class=\"number\">0</span>; k &lt; i * <span class=\"number\">2</span> + <span class=\"number\">1</span>; k++) cout &lt;&lt; ch;</span><br><span class=\"line\">        cout &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; n - (<span class=\"number\">2</span> * cnt * (cnt + <span class=\"number\">2</span>) + <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></div></figure>\n<p><span class=\"exturl\"><a class=\"exturl__link\"   href=\"https://pintia.cn/problem-sets/994805260223102976/problems/994805294251491328\" >题目链接</a><span class=\"exturl__icon\"><i class=\"fas fa-external-link-alt\"></i></span></span></p>\n"},{"title":"PAT乙级1029","date":"2021-05-11T06:38:36.000Z","_content":"\n![image.png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b432678f9fe04d25bb3f946dafc8dc05~tplv-k3u1fbpfcp-watermark.image)\n这道题目的就是在于判断字符串1中的每个字母是否在字符串2中出现。如果没有出现，就说明那个按键损坏了。我认为简单的就是使用string的内置find函数。\n> string中find()返回值是字母在母串中的位置（下标记录），如果没有找到，那么会返回一个特别的标记npos。（返回值可以看成是一个int型的数）\n\n当然你不想使用别人写好的，你可以用一个字符数组分别存字符串1出现的26个字母加数字，然后遍历字符串2找到有没有出现，这就很麻烦啊，我就老老实实使用find好了。\n\n然后是要求字母输入大写，直接全部先换成大写再找，也可以找到了在输出时再换成大写。\n推荐函数toupper(c)。\n> 若参数c为小写字母则将该对应的大写字母返回,不须转换则将参数c值返回\n\n```js\n//foreverking\n//其中英文字母只输出大写，每个坏键只输出一次。题目保证至少有 1 个坏键\n#include <vector>\n#include <cstdio>\n#include <queue>\n#include <algorithm>\n#include <cstring>\n#include <iostream>\n#include <cmath>\nusing namespace std;\n\nstring s1,s2,res;\n\nint main(){\n    cin >> s1 >> s2;\n    //因为他值输出大写，那么小写提前转化为大写\n    for(int i = 0; i <= s2.size(); i++){\n        //代码\n        if(s2[i] >= 'a' && s2[i] <= 'z')\n            s2[i] += 'A' - 'a';\n        }\n    \n    for(int i = 0; i <= s1.size(); i++){\n        //代码\n        if(s1[i] >= 'a' && s1[i] <= 'z')\n            s1[i] += 'A' - 'a';\n\n        if(s2.find(s1[i]) == s2.npos && res.find(s1[i]) == res.npos)\n            res = res + s1[i];\n        }\n\n        cout << res << endl;\n        return 0;\n    }\n\n```\n[题目链接](https://pintia.cn/problem-sets/994805260223102976/problems/994805292322111488)","source":"_posts/PAT乙级1029.md","raw":"---\ntitle: PAT乙级1029\ndate: 2021-05-11 14:38:36\ntags: \n    - Study\ncategories: \n    - 题解\n    - PAT题解\n---\n\n![image.png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b432678f9fe04d25bb3f946dafc8dc05~tplv-k3u1fbpfcp-watermark.image)\n这道题目的就是在于判断字符串1中的每个字母是否在字符串2中出现。如果没有出现，就说明那个按键损坏了。我认为简单的就是使用string的内置find函数。\n> string中find()返回值是字母在母串中的位置（下标记录），如果没有找到，那么会返回一个特别的标记npos。（返回值可以看成是一个int型的数）\n\n当然你不想使用别人写好的，你可以用一个字符数组分别存字符串1出现的26个字母加数字，然后遍历字符串2找到有没有出现，这就很麻烦啊，我就老老实实使用find好了。\n\n然后是要求字母输入大写，直接全部先换成大写再找，也可以找到了在输出时再换成大写。\n推荐函数toupper(c)。\n> 若参数c为小写字母则将该对应的大写字母返回,不须转换则将参数c值返回\n\n```js\n//foreverking\n//其中英文字母只输出大写，每个坏键只输出一次。题目保证至少有 1 个坏键\n#include <vector>\n#include <cstdio>\n#include <queue>\n#include <algorithm>\n#include <cstring>\n#include <iostream>\n#include <cmath>\nusing namespace std;\n\nstring s1,s2,res;\n\nint main(){\n    cin >> s1 >> s2;\n    //因为他值输出大写，那么小写提前转化为大写\n    for(int i = 0; i <= s2.size(); i++){\n        //代码\n        if(s2[i] >= 'a' && s2[i] <= 'z')\n            s2[i] += 'A' - 'a';\n        }\n    \n    for(int i = 0; i <= s1.size(); i++){\n        //代码\n        if(s1[i] >= 'a' && s1[i] <= 'z')\n            s1[i] += 'A' - 'a';\n\n        if(s2.find(s1[i]) == s2.npos && res.find(s1[i]) == res.npos)\n            res = res + s1[i];\n        }\n\n        cout << res << endl;\n        return 0;\n    }\n\n```\n[题目链接](https://pintia.cn/problem-sets/994805260223102976/problems/994805292322111488)","slug":"PAT乙级1029","published":1,"updated":"2021-05-11T06:39:04.313Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktvk78f700151cws09fs3le7","content":"<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b432678f9fe04d25bb3f946dafc8dc05~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\"><br>这道题目的就是在于判断字符串1中的每个字母是否在字符串2中出现。如果没有出现，就说明那个按键损坏了。我认为简单的就是使用string的内置find函数。</p>\n<blockquote>\n<p>string中find()返回值是字母在母串中的位置（下标记录），如果没有找到，那么会返回一个特别的标记npos。（返回值可以看成是一个int型的数）</p>\n</blockquote>\n<p>当然你不想使用别人写好的，你可以用一个字符数组分别存字符串1出现的26个字母加数字，然后遍历字符串2找到有没有出现，这就很麻烦啊，我就老老实实使用find好了。</p>\n<p>然后是要求字母输入大写，直接全部先换成大写再找，也可以找到了在输出时再换成大写。<br>推荐函数toupper(c)。</p>\n<blockquote>\n<p>若参数c为小写字母则将该对应的大写字母返回,不须转换则将参数c值返回</p>\n</blockquote>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//foreverking</span></span><br><span class=\"line\"><span class=\"comment\">//其中英文字母只输出大写，每个坏键只输出一次。题目保证至少有 1 个坏键</span></span><br><span class=\"line\">#include &lt;vector&gt;</span><br><span class=\"line\">#include &lt;cstdio&gt;</span><br><span class=\"line\">#include &lt;queue&gt;</span><br><span class=\"line\">#include &lt;algorithm&gt;</span><br><span class=\"line\">#include &lt;cstring&gt;</span><br><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">#include &lt;cmath&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\"></span><br><span class=\"line\">string s1,s2,res;</span><br><span class=\"line\"></span><br><span class=\"line\">int <span class=\"function\"><span class=\"title\">main</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    cin &gt;&gt; s1 &gt;&gt; s2;</span><br><span class=\"line\">    <span class=\"comment\">//因为他值输出大写，那么小写提前转化为大写</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(int i = <span class=\"number\">0</span>; i &lt;= s2.size(); i++)&#123;</span><br><span class=\"line\">        <span class=\"comment\">//代码</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(s2[i] &gt;= <span class=\"string\">&#x27;a&#x27;</span> &amp;&amp; s2[i] &lt;= <span class=\"string\">&#x27;z&#x27;</span>)</span><br><span class=\"line\">            s2[i] += <span class=\"string\">&#x27;A&#x27;</span> - <span class=\"string\">&#x27;a&#x27;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(int i = <span class=\"number\">0</span>; i &lt;= s1.size(); i++)&#123;</span><br><span class=\"line\">        <span class=\"comment\">//代码</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(s1[i] &gt;= <span class=\"string\">&#x27;a&#x27;</span> &amp;&amp; s1[i] &lt;= <span class=\"string\">&#x27;z&#x27;</span>)</span><br><span class=\"line\">            s1[i] += <span class=\"string\">&#x27;A&#x27;</span> - <span class=\"string\">&#x27;a&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(s2.find(s1[i]) == s2.npos &amp;&amp; res.find(s1[i]) == res.npos)</span><br><span class=\"line\">            res = res + s1[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        cout &lt;&lt; res &lt;&lt; endl;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></div></figure>\n<p><span class=\"exturl\"><a class=\"exturl__link\"   href=\"https://pintia.cn/problem-sets/994805260223102976/problems/994805292322111488\" >题目链接</a><span class=\"exturl__icon\"><i class=\"fas fa-external-link-alt\"></i></span></span></p>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b432678f9fe04d25bb3f946dafc8dc05~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\"><br>这道题目的就是在于判断字符串1中的每个字母是否在字符串2中出现。如果没有出现，就说明那个按键损坏了。我认为简单的就是使用string的内置find函数。</p>\n<blockquote>\n<p>string中find()返回值是字母在母串中的位置（下标记录），如果没有找到，那么会返回一个特别的标记npos。（返回值可以看成是一个int型的数）</p>\n</blockquote>\n<p>当然你不想使用别人写好的，你可以用一个字符数组分别存字符串1出现的26个字母加数字，然后遍历字符串2找到有没有出现，这就很麻烦啊，我就老老实实使用find好了。</p>\n<p>然后是要求字母输入大写，直接全部先换成大写再找，也可以找到了在输出时再换成大写。<br>推荐函数toupper(c)。</p>\n<blockquote>\n<p>若参数c为小写字母则将该对应的大写字母返回,不须转换则将参数c值返回</p>\n</blockquote>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//foreverking</span></span><br><span class=\"line\"><span class=\"comment\">//其中英文字母只输出大写，每个坏键只输出一次。题目保证至少有 1 个坏键</span></span><br><span class=\"line\">#include &lt;vector&gt;</span><br><span class=\"line\">#include &lt;cstdio&gt;</span><br><span class=\"line\">#include &lt;queue&gt;</span><br><span class=\"line\">#include &lt;algorithm&gt;</span><br><span class=\"line\">#include &lt;cstring&gt;</span><br><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">#include &lt;cmath&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\"></span><br><span class=\"line\">string s1,s2,res;</span><br><span class=\"line\"></span><br><span class=\"line\">int <span class=\"function\"><span class=\"title\">main</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    cin &gt;&gt; s1 &gt;&gt; s2;</span><br><span class=\"line\">    <span class=\"comment\">//因为他值输出大写，那么小写提前转化为大写</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(int i = <span class=\"number\">0</span>; i &lt;= s2.size(); i++)&#123;</span><br><span class=\"line\">        <span class=\"comment\">//代码</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(s2[i] &gt;= <span class=\"string\">&#x27;a&#x27;</span> &amp;&amp; s2[i] &lt;= <span class=\"string\">&#x27;z&#x27;</span>)</span><br><span class=\"line\">            s2[i] += <span class=\"string\">&#x27;A&#x27;</span> - <span class=\"string\">&#x27;a&#x27;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(int i = <span class=\"number\">0</span>; i &lt;= s1.size(); i++)&#123;</span><br><span class=\"line\">        <span class=\"comment\">//代码</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(s1[i] &gt;= <span class=\"string\">&#x27;a&#x27;</span> &amp;&amp; s1[i] &lt;= <span class=\"string\">&#x27;z&#x27;</span>)</span><br><span class=\"line\">            s1[i] += <span class=\"string\">&#x27;A&#x27;</span> - <span class=\"string\">&#x27;a&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(s2.find(s1[i]) == s2.npos &amp;&amp; res.find(s1[i]) == res.npos)</span><br><span class=\"line\">            res = res + s1[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        cout &lt;&lt; res &lt;&lt; endl;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></div></figure>\n<p><span class=\"exturl\"><a class=\"exturl__link\"   href=\"https://pintia.cn/problem-sets/994805260223102976/problems/994805292322111488\" >题目链接</a><span class=\"exturl__icon\"><i class=\"fas fa-external-link-alt\"></i></span></span></p>\n"},{"title":"PAT乙级1030","date":"2021-05-12T13:18:50.000Z","_content":"### 题目\n给定一个正整数数列，和正整数 p，设这个数列中的最大值是 M，最小值是 m，如果 M≤mp，则称这个数列是完美数列。\n现在给定参数 p 和一些正整数，请你从中选择尽可能多的数构成一个完美数列。\n### 输入格式：\n输入第一行给出两个正整数 N 和 p，其中 10^5）是输入的正整数的个数，p（≤10\n^9）是给定的参数。第二行给出 N 个正整数，每个数不超过 10^9 。\n### 输出格式：\n在一行中输出最多可以选择多少个数可以用它们组成一个完美数列。\n\n样例就不放了。感兴趣自己去官网看看。\n\n#### 思路\n这是我乙级目前做的最莫名其妙的题了。先开始用开一个10000的数组总是超时，转化为vector就过了，再回来改一下数组的又过了。总之很离谱。\n\n先将数据全部存入数组或者vector容器中，差别不大。在用sort进行从小到大的排序。最后进行两个嵌套循环。注意第二个循环的条件起始值j为i+maxx(maxx是目前的最大完美数列个数)。毕竟你找的完美序列个数比maxx小就能没用，徒劳占据运行时间。循环内进行判定`(v[j] <= v[i] * p`若不满足直接跳出循环，v[j]只会越来越大，不会满足这个条件的，优化成功！\n[错误代码被注释了]\n```js\n//foreverking\n// 给定一个正整数数列，和正整数 p，设这个数列中的最大值是 M，最小值是 m，如果 M≤mp，则称这个数列是完美数列。\n#include <vector>\n#include <cstdio>\n#include <queue>\n#include <algorithm>\n#include <cstring>\n#include <iostream>\n#include <cmath>\nusing namespace std;\n\nint n;\nlong long p;\nint res,maxx;\n\n// int main(){\n//     scanf(\"%d%lld\", &n, &p);\n//     //cin >> n >> p;\n//     for(int i = 0; i < n; i++){\n//         //代码\n//         cin >> s[i];\n//         }\n//     //先排序\n//     sort(s,s + n);//从小到大\n\n//     for(int i = 0; i < n; i++){\n//         //int minn = s[i];//将此数当作最小数\n        \n//         for(int j = n - 1; j >= i + maxx; j--){\n//             if(s[j] <= s[i] * p)\n//                 res = j - i + 1;//ji之间的元素\n//                 if(res > maxx)\n//                     maxx = res;\n//         }\n//     }\n\n//     printf(\"%d\\n\",maxx);\n//     return 0;\n// }\n\nint main(){\n    cin >> n >> p;\n    vector<int> v(n);//有n个元素的vector容器\n    for(int i = 0; i < n; i++){\n        cin >> v[i];\n        }\n    //先排序\n    /*\n    !也可以这样输入\n    vector<int> v;\n\tfor (int i = 0; i < n; i++)\n\t{\n\t\tint c;\n\t\tcin >> c;\n\t\tv.push_back(c);\n\t\t}\n    */\n    sort(v.begin(),v.end());//从小到大\n\n    for(int i = 0; i < n; i++){\n        //int minn = s[i];//将此数当作最小数\n        \n        for(int j = i + maxx; j < n; j++){//小于暂时的maxx\n            if(v[j] <= v[i] * p){\n                res = j - i + 1;//ji之间的元素\n                if(res > maxx)\n                    maxx = res;\n            }\n            else\n                break;//v[j]变得更大了，不可能满足v[j] <= v[i] * p\n        }\n    }\n\n    printf(\"%d\\n\",maxx);\n    return 0;\n}\n```\n这就过了。回过头看数组，一样的思路，只是用数组存数据。\n\n```js\n//foreverking\n// 给定一个正整数数列，和正整数 p，设这个数列中的最大值是 M，最小值是 m，如果 M≤mp，则称这个数列是完美数列。\n#include <vector>\n#include <cstdio>\n#include <queue>\n#include <algorithm>\n#include <cstring>\n#include <iostream>\n#include <cmath>\nusing namespace std;\n\nconst int N = 1e5;\n\nint n;\nlong long p;\nint s[N];\nint res,maxx;\n\nint main(){\n    scanf(\"%d%lld\", &n, &p);\n    //cin >> n >> p;\n    for(int i = 0; i < n; i++){\n        //代码\n        cin >> s[i];\n        }\n    //先排序\n    sort(s,s + n);//从小到大\n\n    for(int i = 0; i < n; i++){\n        //int minn = s[i];//将此数当作最小数\n        \n        for(int j = i + maxx; j < n; j++){\n            if(s[j] <= s[i] * p){\n                res = j - i + 1;//ji之间的元素\n                if(res > maxx)\n                    maxx = res;\n            }\n                else\n                    break;\n                    \n        }\n    }\n\n    printf(\"%d\\n\",maxx);\n    return 0;\n}\n```\n[题目链接](https://pintia.cn/problem-sets/994805260223102976/problems/994805291311284224)","source":"_posts/PAT乙级1030.md","raw":"---\ntitle: PAT乙级1030\ndate: 2021-05-12 21:18:50\ntags: \n    - Study\ncategories: \n    - 题解\n    - PAT题解\n---\n### 题目\n给定一个正整数数列，和正整数 p，设这个数列中的最大值是 M，最小值是 m，如果 M≤mp，则称这个数列是完美数列。\n现在给定参数 p 和一些正整数，请你从中选择尽可能多的数构成一个完美数列。\n### 输入格式：\n输入第一行给出两个正整数 N 和 p，其中 10^5）是输入的正整数的个数，p（≤10\n^9）是给定的参数。第二行给出 N 个正整数，每个数不超过 10^9 。\n### 输出格式：\n在一行中输出最多可以选择多少个数可以用它们组成一个完美数列。\n\n样例就不放了。感兴趣自己去官网看看。\n\n#### 思路\n这是我乙级目前做的最莫名其妙的题了。先开始用开一个10000的数组总是超时，转化为vector就过了，再回来改一下数组的又过了。总之很离谱。\n\n先将数据全部存入数组或者vector容器中，差别不大。在用sort进行从小到大的排序。最后进行两个嵌套循环。注意第二个循环的条件起始值j为i+maxx(maxx是目前的最大完美数列个数)。毕竟你找的完美序列个数比maxx小就能没用，徒劳占据运行时间。循环内进行判定`(v[j] <= v[i] * p`若不满足直接跳出循环，v[j]只会越来越大，不会满足这个条件的，优化成功！\n[错误代码被注释了]\n```js\n//foreverking\n// 给定一个正整数数列，和正整数 p，设这个数列中的最大值是 M，最小值是 m，如果 M≤mp，则称这个数列是完美数列。\n#include <vector>\n#include <cstdio>\n#include <queue>\n#include <algorithm>\n#include <cstring>\n#include <iostream>\n#include <cmath>\nusing namespace std;\n\nint n;\nlong long p;\nint res,maxx;\n\n// int main(){\n//     scanf(\"%d%lld\", &n, &p);\n//     //cin >> n >> p;\n//     for(int i = 0; i < n; i++){\n//         //代码\n//         cin >> s[i];\n//         }\n//     //先排序\n//     sort(s,s + n);//从小到大\n\n//     for(int i = 0; i < n; i++){\n//         //int minn = s[i];//将此数当作最小数\n        \n//         for(int j = n - 1; j >= i + maxx; j--){\n//             if(s[j] <= s[i] * p)\n//                 res = j - i + 1;//ji之间的元素\n//                 if(res > maxx)\n//                     maxx = res;\n//         }\n//     }\n\n//     printf(\"%d\\n\",maxx);\n//     return 0;\n// }\n\nint main(){\n    cin >> n >> p;\n    vector<int> v(n);//有n个元素的vector容器\n    for(int i = 0; i < n; i++){\n        cin >> v[i];\n        }\n    //先排序\n    /*\n    !也可以这样输入\n    vector<int> v;\n\tfor (int i = 0; i < n; i++)\n\t{\n\t\tint c;\n\t\tcin >> c;\n\t\tv.push_back(c);\n\t\t}\n    */\n    sort(v.begin(),v.end());//从小到大\n\n    for(int i = 0; i < n; i++){\n        //int minn = s[i];//将此数当作最小数\n        \n        for(int j = i + maxx; j < n; j++){//小于暂时的maxx\n            if(v[j] <= v[i] * p){\n                res = j - i + 1;//ji之间的元素\n                if(res > maxx)\n                    maxx = res;\n            }\n            else\n                break;//v[j]变得更大了，不可能满足v[j] <= v[i] * p\n        }\n    }\n\n    printf(\"%d\\n\",maxx);\n    return 0;\n}\n```\n这就过了。回过头看数组，一样的思路，只是用数组存数据。\n\n```js\n//foreverking\n// 给定一个正整数数列，和正整数 p，设这个数列中的最大值是 M，最小值是 m，如果 M≤mp，则称这个数列是完美数列。\n#include <vector>\n#include <cstdio>\n#include <queue>\n#include <algorithm>\n#include <cstring>\n#include <iostream>\n#include <cmath>\nusing namespace std;\n\nconst int N = 1e5;\n\nint n;\nlong long p;\nint s[N];\nint res,maxx;\n\nint main(){\n    scanf(\"%d%lld\", &n, &p);\n    //cin >> n >> p;\n    for(int i = 0; i < n; i++){\n        //代码\n        cin >> s[i];\n        }\n    //先排序\n    sort(s,s + n);//从小到大\n\n    for(int i = 0; i < n; i++){\n        //int minn = s[i];//将此数当作最小数\n        \n        for(int j = i + maxx; j < n; j++){\n            if(s[j] <= s[i] * p){\n                res = j - i + 1;//ji之间的元素\n                if(res > maxx)\n                    maxx = res;\n            }\n                else\n                    break;\n                    \n        }\n    }\n\n    printf(\"%d\\n\",maxx);\n    return 0;\n}\n```\n[题目链接](https://pintia.cn/problem-sets/994805260223102976/problems/994805291311284224)","slug":"PAT乙级1030","published":1,"updated":"2021-05-12T13:21:10.018Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktvk78f700181cws2usgf4h4","content":"\n        <h3 id=\"题目\"   >\n          <a href=\"#题目\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h3>\n      <p>给定一个正整数数列，和正整数 p，设这个数列中的最大值是 M，最小值是 m，如果 M≤mp，则称这个数列是完美数列。<br>现在给定参数 p 和一些正整数，请你从中选择尽可能多的数构成一个完美数列。</p>\n\n        <h3 id=\"输入格式：\"   >\n          <a href=\"#输入格式：\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#输入格式：\" class=\"headerlink\" title=\"输入格式：\"></a>输入格式：</h3>\n      <p>输入第一行给出两个正整数 N 和 p，其中 10^5）是输入的正整数的个数，p（≤10<br>^9）是给定的参数。第二行给出 N 个正整数，每个数不超过 10^9 。</p>\n\n        <h3 id=\"输出格式：\"   >\n          <a href=\"#输出格式：\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#输出格式：\" class=\"headerlink\" title=\"输出格式：\"></a>输出格式：</h3>\n      <p>在一行中输出最多可以选择多少个数可以用它们组成一个完美数列。</p>\n<p>样例就不放了。感兴趣自己去官网看看。</p>\n\n        <h4 id=\"思路\"   >\n          <a href=\"#思路\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h4>\n      <p>这是我乙级目前做的最莫名其妙的题了。先开始用开一个10000的数组总是超时，转化为vector就过了，再回来改一下数组的又过了。总之很离谱。</p>\n<p>先将数据全部存入数组或者vector容器中，差别不大。在用sort进行从小到大的排序。最后进行两个嵌套循环。注意第二个循环的条件起始值j为i+maxx(maxx是目前的最大完美数列个数)。毕竟你找的完美序列个数比maxx小就能没用，徒劳占据运行时间。循环内进行判定<code>(v[j] &lt;= v[i] * p</code>若不满足直接跳出循环，v[j]只会越来越大，不会满足这个条件的，优化成功！<br>[错误代码被注释了]</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//foreverking</span></span><br><span class=\"line\"><span class=\"comment\">// 给定一个正整数数列，和正整数 p，设这个数列中的最大值是 M，最小值是 m，如果 M≤mp，则称这个数列是完美数列。</span></span><br><span class=\"line\">#include &lt;vector&gt;</span><br><span class=\"line\">#include &lt;cstdio&gt;</span><br><span class=\"line\">#include &lt;queue&gt;</span><br><span class=\"line\">#include &lt;algorithm&gt;</span><br><span class=\"line\">#include &lt;cstring&gt;</span><br><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">#include &lt;cmath&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\"></span><br><span class=\"line\">int n;</span><br><span class=\"line\">long long p;</span><br><span class=\"line\">int res,maxx;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// int main()&#123;</span></span><br><span class=\"line\"><span class=\"comment\">//     scanf(&quot;%d%lld&quot;, &amp;n, &amp;p);</span></span><br><span class=\"line\"><span class=\"comment\">//     //cin &gt;&gt; n &gt;&gt; p;</span></span><br><span class=\"line\"><span class=\"comment\">//     for(int i = 0; i &lt; n; i++)&#123;</span></span><br><span class=\"line\"><span class=\"comment\">//         //代码</span></span><br><span class=\"line\"><span class=\"comment\">//         cin &gt;&gt; s[i];</span></span><br><span class=\"line\"><span class=\"comment\">//         &#125;</span></span><br><span class=\"line\"><span class=\"comment\">//     //先排序</span></span><br><span class=\"line\"><span class=\"comment\">//     sort(s,s + n);//从小到大</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//     for(int i = 0; i &lt; n; i++)&#123;</span></span><br><span class=\"line\"><span class=\"comment\">//         //int minn = s[i];//将此数当作最小数</span></span><br><span class=\"line\">        </span><br><span class=\"line\"><span class=\"comment\">//         for(int j = n - 1; j &gt;= i + maxx; j--)&#123;</span></span><br><span class=\"line\"><span class=\"comment\">//             if(s[j] &lt;= s[i] * p)</span></span><br><span class=\"line\"><span class=\"comment\">//                 res = j - i + 1;//ji之间的元素</span></span><br><span class=\"line\"><span class=\"comment\">//                 if(res &gt; maxx)</span></span><br><span class=\"line\"><span class=\"comment\">//                     maxx = res;</span></span><br><span class=\"line\"><span class=\"comment\">//         &#125;</span></span><br><span class=\"line\"><span class=\"comment\">//     &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//     printf(&quot;%d\\n&quot;,maxx);</span></span><br><span class=\"line\"><span class=\"comment\">//     return 0;</span></span><br><span class=\"line\"><span class=\"comment\">// &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">int <span class=\"function\"><span class=\"title\">main</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    cin &gt;&gt; n &gt;&gt; p;</span><br><span class=\"line\">    vector&lt;int&gt; v(n);<span class=\"comment\">//有n个元素的vector容器</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(int i = <span class=\"number\">0</span>; i &lt; n; i++)&#123;</span><br><span class=\"line\">        cin &gt;&gt; v[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    <span class=\"comment\">//先排序</span></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    !也可以这样输入</span></span><br><span class=\"line\"><span class=\"comment\">    vector&lt;int&gt; v;</span></span><br><span class=\"line\"><span class=\"comment\">\tfor (int i = 0; i &lt; n; i++)</span></span><br><span class=\"line\"><span class=\"comment\">\t&#123;</span></span><br><span class=\"line\"><span class=\"comment\">\t\tint c;</span></span><br><span class=\"line\"><span class=\"comment\">\t\tcin &gt;&gt; c;</span></span><br><span class=\"line\"><span class=\"comment\">\t\tv.push_back(c);</span></span><br><span class=\"line\"><span class=\"comment\">\t\t&#125;</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    sort(v.begin(),v.end());<span class=\"comment\">//从小到大</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(int i = <span class=\"number\">0</span>; i &lt; n; i++)&#123;</span><br><span class=\"line\">        <span class=\"comment\">//int minn = s[i];//将此数当作最小数</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">for</span>(int j = i + maxx; j &lt; n; j++)&#123;<span class=\"comment\">//小于暂时的maxx</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(v[j] &lt;= v[i] * p)&#123;</span><br><span class=\"line\">                res = j - i + <span class=\"number\">1</span>;<span class=\"comment\">//ji之间的元素</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span>(res &gt; maxx)</span><br><span class=\"line\">                    maxx = res;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">                <span class=\"keyword\">break</span>;<span class=\"comment\">//v[j]变得更大了，不可能满足v[j] &lt;= v[i] * p</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    printf(<span class=\"string\">&quot;%d\\n&quot;</span>,maxx);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>这就过了。回过头看数组，一样的思路，只是用数组存数据。</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//foreverking</span></span><br><span class=\"line\"><span class=\"comment\">// 给定一个正整数数列，和正整数 p，设这个数列中的最大值是 M，最小值是 m，如果 M≤mp，则称这个数列是完美数列。</span></span><br><span class=\"line\">#include &lt;vector&gt;</span><br><span class=\"line\">#include &lt;cstdio&gt;</span><br><span class=\"line\">#include &lt;queue&gt;</span><br><span class=\"line\">#include &lt;algorithm&gt;</span><br><span class=\"line\">#include &lt;cstring&gt;</span><br><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">#include &lt;cmath&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> int N = <span class=\"number\">1e5</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">int n;</span><br><span class=\"line\">long long p;</span><br><span class=\"line\">int s[N];</span><br><span class=\"line\">int res,maxx;</span><br><span class=\"line\"></span><br><span class=\"line\">int <span class=\"function\"><span class=\"title\">main</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    scanf(<span class=\"string\">&quot;%d%lld&quot;</span>, &amp;n, &amp;p);</span><br><span class=\"line\">    <span class=\"comment\">//cin &gt;&gt; n &gt;&gt; p;</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(int i = <span class=\"number\">0</span>; i &lt; n; i++)&#123;</span><br><span class=\"line\">        <span class=\"comment\">//代码</span></span><br><span class=\"line\">        cin &gt;&gt; s[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    <span class=\"comment\">//先排序</span></span><br><span class=\"line\">    sort(s,s + n);<span class=\"comment\">//从小到大</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(int i = <span class=\"number\">0</span>; i &lt; n; i++)&#123;</span><br><span class=\"line\">        <span class=\"comment\">//int minn = s[i];//将此数当作最小数</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">for</span>(int j = i + maxx; j &lt; n; j++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(s[j] &lt;= s[i] * p)&#123;</span><br><span class=\"line\">                res = j - i + <span class=\"number\">1</span>;<span class=\"comment\">//ji之间的元素</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span>(res &gt; maxx)</span><br><span class=\"line\">                    maxx = res;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">                <span class=\"keyword\">else</span></span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                    </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    printf(<span class=\"string\">&quot;%d\\n&quot;</span>,maxx);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p><span class=\"exturl\"><a class=\"exturl__link\"   href=\"https://pintia.cn/problem-sets/994805260223102976/problems/994805291311284224\" >题目链接</a><span class=\"exturl__icon\"><i class=\"fas fa-external-link-alt\"></i></span></span></p>\n","site":{"data":{}},"excerpt":"","more":"\n        <h3 id=\"题目\"   >\n          <a href=\"#题目\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h3>\n      <p>给定一个正整数数列，和正整数 p，设这个数列中的最大值是 M，最小值是 m，如果 M≤mp，则称这个数列是完美数列。<br>现在给定参数 p 和一些正整数，请你从中选择尽可能多的数构成一个完美数列。</p>\n\n        <h3 id=\"输入格式：\"   >\n          <a href=\"#输入格式：\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#输入格式：\" class=\"headerlink\" title=\"输入格式：\"></a>输入格式：</h3>\n      <p>输入第一行给出两个正整数 N 和 p，其中 10^5）是输入的正整数的个数，p（≤10<br>^9）是给定的参数。第二行给出 N 个正整数，每个数不超过 10^9 。</p>\n\n        <h3 id=\"输出格式：\"   >\n          <a href=\"#输出格式：\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#输出格式：\" class=\"headerlink\" title=\"输出格式：\"></a>输出格式：</h3>\n      <p>在一行中输出最多可以选择多少个数可以用它们组成一个完美数列。</p>\n<p>样例就不放了。感兴趣自己去官网看看。</p>\n\n        <h4 id=\"思路\"   >\n          <a href=\"#思路\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h4>\n      <p>这是我乙级目前做的最莫名其妙的题了。先开始用开一个10000的数组总是超时，转化为vector就过了，再回来改一下数组的又过了。总之很离谱。</p>\n<p>先将数据全部存入数组或者vector容器中，差别不大。在用sort进行从小到大的排序。最后进行两个嵌套循环。注意第二个循环的条件起始值j为i+maxx(maxx是目前的最大完美数列个数)。毕竟你找的完美序列个数比maxx小就能没用，徒劳占据运行时间。循环内进行判定<code>(v[j] &lt;= v[i] * p</code>若不满足直接跳出循环，v[j]只会越来越大，不会满足这个条件的，优化成功！<br>[错误代码被注释了]</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//foreverking</span></span><br><span class=\"line\"><span class=\"comment\">// 给定一个正整数数列，和正整数 p，设这个数列中的最大值是 M，最小值是 m，如果 M≤mp，则称这个数列是完美数列。</span></span><br><span class=\"line\">#include &lt;vector&gt;</span><br><span class=\"line\">#include &lt;cstdio&gt;</span><br><span class=\"line\">#include &lt;queue&gt;</span><br><span class=\"line\">#include &lt;algorithm&gt;</span><br><span class=\"line\">#include &lt;cstring&gt;</span><br><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">#include &lt;cmath&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\"></span><br><span class=\"line\">int n;</span><br><span class=\"line\">long long p;</span><br><span class=\"line\">int res,maxx;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// int main()&#123;</span></span><br><span class=\"line\"><span class=\"comment\">//     scanf(&quot;%d%lld&quot;, &amp;n, &amp;p);</span></span><br><span class=\"line\"><span class=\"comment\">//     //cin &gt;&gt; n &gt;&gt; p;</span></span><br><span class=\"line\"><span class=\"comment\">//     for(int i = 0; i &lt; n; i++)&#123;</span></span><br><span class=\"line\"><span class=\"comment\">//         //代码</span></span><br><span class=\"line\"><span class=\"comment\">//         cin &gt;&gt; s[i];</span></span><br><span class=\"line\"><span class=\"comment\">//         &#125;</span></span><br><span class=\"line\"><span class=\"comment\">//     //先排序</span></span><br><span class=\"line\"><span class=\"comment\">//     sort(s,s + n);//从小到大</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//     for(int i = 0; i &lt; n; i++)&#123;</span></span><br><span class=\"line\"><span class=\"comment\">//         //int minn = s[i];//将此数当作最小数</span></span><br><span class=\"line\">        </span><br><span class=\"line\"><span class=\"comment\">//         for(int j = n - 1; j &gt;= i + maxx; j--)&#123;</span></span><br><span class=\"line\"><span class=\"comment\">//             if(s[j] &lt;= s[i] * p)</span></span><br><span class=\"line\"><span class=\"comment\">//                 res = j - i + 1;//ji之间的元素</span></span><br><span class=\"line\"><span class=\"comment\">//                 if(res &gt; maxx)</span></span><br><span class=\"line\"><span class=\"comment\">//                     maxx = res;</span></span><br><span class=\"line\"><span class=\"comment\">//         &#125;</span></span><br><span class=\"line\"><span class=\"comment\">//     &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//     printf(&quot;%d\\n&quot;,maxx);</span></span><br><span class=\"line\"><span class=\"comment\">//     return 0;</span></span><br><span class=\"line\"><span class=\"comment\">// &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">int <span class=\"function\"><span class=\"title\">main</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    cin &gt;&gt; n &gt;&gt; p;</span><br><span class=\"line\">    vector&lt;int&gt; v(n);<span class=\"comment\">//有n个元素的vector容器</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(int i = <span class=\"number\">0</span>; i &lt; n; i++)&#123;</span><br><span class=\"line\">        cin &gt;&gt; v[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    <span class=\"comment\">//先排序</span></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    !也可以这样输入</span></span><br><span class=\"line\"><span class=\"comment\">    vector&lt;int&gt; v;</span></span><br><span class=\"line\"><span class=\"comment\">\tfor (int i = 0; i &lt; n; i++)</span></span><br><span class=\"line\"><span class=\"comment\">\t&#123;</span></span><br><span class=\"line\"><span class=\"comment\">\t\tint c;</span></span><br><span class=\"line\"><span class=\"comment\">\t\tcin &gt;&gt; c;</span></span><br><span class=\"line\"><span class=\"comment\">\t\tv.push_back(c);</span></span><br><span class=\"line\"><span class=\"comment\">\t\t&#125;</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    sort(v.begin(),v.end());<span class=\"comment\">//从小到大</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(int i = <span class=\"number\">0</span>; i &lt; n; i++)&#123;</span><br><span class=\"line\">        <span class=\"comment\">//int minn = s[i];//将此数当作最小数</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">for</span>(int j = i + maxx; j &lt; n; j++)&#123;<span class=\"comment\">//小于暂时的maxx</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(v[j] &lt;= v[i] * p)&#123;</span><br><span class=\"line\">                res = j - i + <span class=\"number\">1</span>;<span class=\"comment\">//ji之间的元素</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span>(res &gt; maxx)</span><br><span class=\"line\">                    maxx = res;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">                <span class=\"keyword\">break</span>;<span class=\"comment\">//v[j]变得更大了，不可能满足v[j] &lt;= v[i] * p</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    printf(<span class=\"string\">&quot;%d\\n&quot;</span>,maxx);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>这就过了。回过头看数组，一样的思路，只是用数组存数据。</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//foreverking</span></span><br><span class=\"line\"><span class=\"comment\">// 给定一个正整数数列，和正整数 p，设这个数列中的最大值是 M，最小值是 m，如果 M≤mp，则称这个数列是完美数列。</span></span><br><span class=\"line\">#include &lt;vector&gt;</span><br><span class=\"line\">#include &lt;cstdio&gt;</span><br><span class=\"line\">#include &lt;queue&gt;</span><br><span class=\"line\">#include &lt;algorithm&gt;</span><br><span class=\"line\">#include &lt;cstring&gt;</span><br><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">#include &lt;cmath&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> int N = <span class=\"number\">1e5</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">int n;</span><br><span class=\"line\">long long p;</span><br><span class=\"line\">int s[N];</span><br><span class=\"line\">int res,maxx;</span><br><span class=\"line\"></span><br><span class=\"line\">int <span class=\"function\"><span class=\"title\">main</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    scanf(<span class=\"string\">&quot;%d%lld&quot;</span>, &amp;n, &amp;p);</span><br><span class=\"line\">    <span class=\"comment\">//cin &gt;&gt; n &gt;&gt; p;</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(int i = <span class=\"number\">0</span>; i &lt; n; i++)&#123;</span><br><span class=\"line\">        <span class=\"comment\">//代码</span></span><br><span class=\"line\">        cin &gt;&gt; s[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    <span class=\"comment\">//先排序</span></span><br><span class=\"line\">    sort(s,s + n);<span class=\"comment\">//从小到大</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(int i = <span class=\"number\">0</span>; i &lt; n; i++)&#123;</span><br><span class=\"line\">        <span class=\"comment\">//int minn = s[i];//将此数当作最小数</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">for</span>(int j = i + maxx; j &lt; n; j++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(s[j] &lt;= s[i] * p)&#123;</span><br><span class=\"line\">                res = j - i + <span class=\"number\">1</span>;<span class=\"comment\">//ji之间的元素</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span>(res &gt; maxx)</span><br><span class=\"line\">                    maxx = res;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">                <span class=\"keyword\">else</span></span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                    </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    printf(<span class=\"string\">&quot;%d\\n&quot;</span>,maxx);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p><span class=\"exturl\"><a class=\"exturl__link\"   href=\"https://pintia.cn/problem-sets/994805260223102976/problems/994805291311284224\" >题目链接</a><span class=\"exturl__icon\"><i class=\"fas fa-external-link-alt\"></i></span></span></p>\n"},{"title":"PAT乙级1031","date":"2021-05-14T07:52:38.000Z","_content":"### 题目\n一个合法的身份证号码由17位地区、日期编号和顺序编号加1位校验码组成。校验码的计算规则如下：\n\n首先对前17位数字加权求和，权重分配为：{7，9，10，5，8，4，2，1，6，3，7，9，10，5，8，4，2}；然后将计算的和对11取模得到值Z；最后按照以下关系对应Z值与校验码M的值：\n> Z：0 1 2 3 4 5 6 7 8 9 10<br>\n> M：1 0 X 9 8 7 6 5 4 3 2\n现在给定一些身份证号码，请你验证校验码的有效性，并输出有问题的号码。\n### 输入格式\n输入第一行给出正整数N（≤100）是输入的身份证号码的个数。随后N行，每行给出1个18位身份证号码。\n### 输出格式\n按照输入的顺序每行输出1个有问题的身份证号码。这里并不检验前17位是否合理，只检查前17位是否全为数字且最后1位校验码计算准确。如果所有号码都正常，则输出`All passed`。\n### 思路\n用一个数组，一个子覅数组分别存Z值（权重），M值（检验值）。而后用sring s存身份证号。写一个isPrime函数判断这个身份证是否合法。注意，**只检查前17位是否全为数字且最后1位校验码计算准确**。检验过程就是先判断身份证每一位是不是数字，而后甲醛求和，对最后一位进行验证： `s[17] == m[sum % 11]`.\n### 代码\n\n```js\n//foreverking\n#include <vector>\n#include <cstdio>\n#include <queue>\n#include <algorithm>\n#include <cstring>\n#include <iostream>\n#include <cmath>\nusing namespace std;\n//每行输出1个有问题的身份证号码,这里并不检验前17位是否合理，只检查前17位是否全为数字且最后1位校验码计算准确\n\nint n;\nstring s;\nint a[17] = {7,9,10,5,8,4,2,1,6,3,7,9,10,5,8,4,2};\nchar m[11] = {'1','0','X','9','8','7','6','5','4','3','2' };\n\n//判断是否合法\nbool isPrime(string s) {\n    int sum = 0;\n    for(int i = 0; i < 17; i++) {\n        if(s[i] < '0' || s[i] > '9')\n           return  false;//不为数字，不合法。\n        \n    sum += (s[i] - '0') * a[i];//加权求和\n    }\n\n    return s[17] == m[sum % 11];//如果最后一位没问题就返回true，有问题就返回false\n}\n\n\n\nint main(){\n    cin >> n;\n    int cnt = n;\n    for(int i = 0; i < n; i++) {\n        cin >> s;//本次的身份证\n        if(!isPrime(s)) {\n            cout << s << endl;\n            cnt--;\n        }\n    }\n    if(cnt == n)\n        cout << \"All passed\";;\n    return 0;\n}\n```\n[题目链接](https://pintia.cn/problem-sets/994805260223102976/problems/994805290334011392)","source":"_posts/PAT乙级1031.md","raw":"---\ntitle: PAT乙级1031\ndate: 2021-05-14 15:52:38\ntags: \n    - Study\ncategories: \n    - 题解\n    - PAT题解\n---\n### 题目\n一个合法的身份证号码由17位地区、日期编号和顺序编号加1位校验码组成。校验码的计算规则如下：\n\n首先对前17位数字加权求和，权重分配为：{7，9，10，5，8，4，2，1，6，3，7，9，10，5，8，4，2}；然后将计算的和对11取模得到值Z；最后按照以下关系对应Z值与校验码M的值：\n> Z：0 1 2 3 4 5 6 7 8 9 10<br>\n> M：1 0 X 9 8 7 6 5 4 3 2\n现在给定一些身份证号码，请你验证校验码的有效性，并输出有问题的号码。\n### 输入格式\n输入第一行给出正整数N（≤100）是输入的身份证号码的个数。随后N行，每行给出1个18位身份证号码。\n### 输出格式\n按照输入的顺序每行输出1个有问题的身份证号码。这里并不检验前17位是否合理，只检查前17位是否全为数字且最后1位校验码计算准确。如果所有号码都正常，则输出`All passed`。\n### 思路\n用一个数组，一个子覅数组分别存Z值（权重），M值（检验值）。而后用sring s存身份证号。写一个isPrime函数判断这个身份证是否合法。注意，**只检查前17位是否全为数字且最后1位校验码计算准确**。检验过程就是先判断身份证每一位是不是数字，而后甲醛求和，对最后一位进行验证： `s[17] == m[sum % 11]`.\n### 代码\n\n```js\n//foreverking\n#include <vector>\n#include <cstdio>\n#include <queue>\n#include <algorithm>\n#include <cstring>\n#include <iostream>\n#include <cmath>\nusing namespace std;\n//每行输出1个有问题的身份证号码,这里并不检验前17位是否合理，只检查前17位是否全为数字且最后1位校验码计算准确\n\nint n;\nstring s;\nint a[17] = {7,9,10,5,8,4,2,1,6,3,7,9,10,5,8,4,2};\nchar m[11] = {'1','0','X','9','8','7','6','5','4','3','2' };\n\n//判断是否合法\nbool isPrime(string s) {\n    int sum = 0;\n    for(int i = 0; i < 17; i++) {\n        if(s[i] < '0' || s[i] > '9')\n           return  false;//不为数字，不合法。\n        \n    sum += (s[i] - '0') * a[i];//加权求和\n    }\n\n    return s[17] == m[sum % 11];//如果最后一位没问题就返回true，有问题就返回false\n}\n\n\n\nint main(){\n    cin >> n;\n    int cnt = n;\n    for(int i = 0; i < n; i++) {\n        cin >> s;//本次的身份证\n        if(!isPrime(s)) {\n            cout << s << endl;\n            cnt--;\n        }\n    }\n    if(cnt == n)\n        cout << \"All passed\";;\n    return 0;\n}\n```\n[题目链接](https://pintia.cn/problem-sets/994805260223102976/problems/994805290334011392)","slug":"PAT乙级1031","published":1,"updated":"2021-05-14T07:53:12.783Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktvk78f8001b1cwsdl0sbdoq","content":"\n        <h3 id=\"题目\"   >\n          <a href=\"#题目\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h3>\n      <p>一个合法的身份证号码由17位地区、日期编号和顺序编号加1位校验码组成。校验码的计算规则如下：</p>\n<p>首先对前17位数字加权求和，权重分配为：{7，9，10，5，8，4，2，1，6，3，7，9，10，5，8，4，2}；然后将计算的和对11取模得到值Z；最后按照以下关系对应Z值与校验码M的值：</p>\n<blockquote>\n<p>Z：0 1 2 3 4 5 6 7 8 9 10<br><br>M：1 0 X 9 8 7 6 5 4 3 2<br>现在给定一些身份证号码，请你验证校验码的有效性，并输出有问题的号码。</p>\n</blockquote>\n\n        <h3 id=\"输入格式\"   >\n          <a href=\"#输入格式\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#输入格式\" class=\"headerlink\" title=\"输入格式\"></a>输入格式</h3>\n      <p>输入第一行给出正整数N（≤100）是输入的身份证号码的个数。随后N行，每行给出1个18位身份证号码。</p>\n\n        <h3 id=\"输出格式\"   >\n          <a href=\"#输出格式\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#输出格式\" class=\"headerlink\" title=\"输出格式\"></a>输出格式</h3>\n      <p>按照输入的顺序每行输出1个有问题的身份证号码。这里并不检验前17位是否合理，只检查前17位是否全为数字且最后1位校验码计算准确。如果所有号码都正常，则输出<code>All passed</code>。</p>\n\n        <h3 id=\"思路\"   >\n          <a href=\"#思路\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3>\n      <p>用一个数组，一个子覅数组分别存Z值（权重），M值（检验值）。而后用sring s存身份证号。写一个isPrime函数判断这个身份证是否合法。注意，<strong>只检查前17位是否全为数字且最后1位校验码计算准确</strong>。检验过程就是先判断身份证每一位是不是数字，而后甲醛求和，对最后一位进行验证： <code>s[17] == m[sum % 11]</code>.</p>\n\n        <h3 id=\"代码\"   >\n          <a href=\"#代码\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3>\n      <figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//foreverking</span></span><br><span class=\"line\">#include &lt;vector&gt;</span><br><span class=\"line\">#include &lt;cstdio&gt;</span><br><span class=\"line\">#include &lt;queue&gt;</span><br><span class=\"line\">#include &lt;algorithm&gt;</span><br><span class=\"line\">#include &lt;cstring&gt;</span><br><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">#include &lt;cmath&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\"><span class=\"comment\">//每行输出1个有问题的身份证号码,这里并不检验前17位是否合理，只检查前17位是否全为数字且最后1位校验码计算准确</span></span><br><span class=\"line\"></span><br><span class=\"line\">int n;</span><br><span class=\"line\">string s;</span><br><span class=\"line\">int a[<span class=\"number\">17</span>] = &#123;<span class=\"number\">7</span>,<span class=\"number\">9</span>,<span class=\"number\">10</span>,<span class=\"number\">5</span>,<span class=\"number\">8</span>,<span class=\"number\">4</span>,<span class=\"number\">2</span>,<span class=\"number\">1</span>,<span class=\"number\">6</span>,<span class=\"number\">3</span>,<span class=\"number\">7</span>,<span class=\"number\">9</span>,<span class=\"number\">10</span>,<span class=\"number\">5</span>,<span class=\"number\">8</span>,<span class=\"number\">4</span>,<span class=\"number\">2</span>&#125;;</span><br><span class=\"line\">char m[<span class=\"number\">11</span>] = &#123;<span class=\"string\">&#x27;1&#x27;</span>,<span class=\"string\">&#x27;0&#x27;</span>,<span class=\"string\">&#x27;X&#x27;</span>,<span class=\"string\">&#x27;9&#x27;</span>,<span class=\"string\">&#x27;8&#x27;</span>,<span class=\"string\">&#x27;7&#x27;</span>,<span class=\"string\">&#x27;6&#x27;</span>,<span class=\"string\">&#x27;5&#x27;</span>,<span class=\"string\">&#x27;4&#x27;</span>,<span class=\"string\">&#x27;3&#x27;</span>,<span class=\"string\">&#x27;2&#x27;</span> &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//判断是否合法</span></span><br><span class=\"line\">bool <span class=\"function\"><span class=\"title\">isPrime</span>(<span class=\"params\">string s</span>)</span> &#123;</span><br><span class=\"line\">    int sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(int i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">17</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(s[i] &lt; <span class=\"string\">&#x27;0&#x27;</span> || s[i] &gt; <span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">           <span class=\"keyword\">return</span>  <span class=\"literal\">false</span>;<span class=\"comment\">//不为数字，不合法。</span></span><br><span class=\"line\">        </span><br><span class=\"line\">    sum += (s[i] - <span class=\"string\">&#x27;0&#x27;</span>) * a[i];<span class=\"comment\">//加权求和</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> s[<span class=\"number\">17</span>] == m[sum % <span class=\"number\">11</span>];<span class=\"comment\">//如果最后一位没问题就返回true，有问题就返回false</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">int <span class=\"function\"><span class=\"title\">main</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    cin &gt;&gt; n;</span><br><span class=\"line\">    int cnt = n;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(int i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">        cin &gt;&gt; s;<span class=\"comment\">//本次的身份证</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!isPrime(s)) &#123;</span><br><span class=\"line\">            cout &lt;&lt; s &lt;&lt; endl;</span><br><span class=\"line\">            cnt--;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(cnt == n)</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;All passed&quot;</span>;;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p><span class=\"exturl\"><a class=\"exturl__link\"   href=\"https://pintia.cn/problem-sets/994805260223102976/problems/994805290334011392\" >题目链接</a><span class=\"exturl__icon\"><i class=\"fas fa-external-link-alt\"></i></span></span></p>\n","site":{"data":{}},"excerpt":"","more":"\n        <h3 id=\"题目\"   >\n          <a href=\"#题目\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h3>\n      <p>一个合法的身份证号码由17位地区、日期编号和顺序编号加1位校验码组成。校验码的计算规则如下：</p>\n<p>首先对前17位数字加权求和，权重分配为：{7，9，10，5，8，4，2，1，6，3，7，9，10，5，8，4，2}；然后将计算的和对11取模得到值Z；最后按照以下关系对应Z值与校验码M的值：</p>\n<blockquote>\n<p>Z：0 1 2 3 4 5 6 7 8 9 10<br><br>M：1 0 X 9 8 7 6 5 4 3 2<br>现在给定一些身份证号码，请你验证校验码的有效性，并输出有问题的号码。</p>\n</blockquote>\n\n        <h3 id=\"输入格式\"   >\n          <a href=\"#输入格式\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#输入格式\" class=\"headerlink\" title=\"输入格式\"></a>输入格式</h3>\n      <p>输入第一行给出正整数N（≤100）是输入的身份证号码的个数。随后N行，每行给出1个18位身份证号码。</p>\n\n        <h3 id=\"输出格式\"   >\n          <a href=\"#输出格式\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#输出格式\" class=\"headerlink\" title=\"输出格式\"></a>输出格式</h3>\n      <p>按照输入的顺序每行输出1个有问题的身份证号码。这里并不检验前17位是否合理，只检查前17位是否全为数字且最后1位校验码计算准确。如果所有号码都正常，则输出<code>All passed</code>。</p>\n\n        <h3 id=\"思路\"   >\n          <a href=\"#思路\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3>\n      <p>用一个数组，一个子覅数组分别存Z值（权重），M值（检验值）。而后用sring s存身份证号。写一个isPrime函数判断这个身份证是否合法。注意，<strong>只检查前17位是否全为数字且最后1位校验码计算准确</strong>。检验过程就是先判断身份证每一位是不是数字，而后甲醛求和，对最后一位进行验证： <code>s[17] == m[sum % 11]</code>.</p>\n\n        <h3 id=\"代码\"   >\n          <a href=\"#代码\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3>\n      <figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//foreverking</span></span><br><span class=\"line\">#include &lt;vector&gt;</span><br><span class=\"line\">#include &lt;cstdio&gt;</span><br><span class=\"line\">#include &lt;queue&gt;</span><br><span class=\"line\">#include &lt;algorithm&gt;</span><br><span class=\"line\">#include &lt;cstring&gt;</span><br><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">#include &lt;cmath&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\"><span class=\"comment\">//每行输出1个有问题的身份证号码,这里并不检验前17位是否合理，只检查前17位是否全为数字且最后1位校验码计算准确</span></span><br><span class=\"line\"></span><br><span class=\"line\">int n;</span><br><span class=\"line\">string s;</span><br><span class=\"line\">int a[<span class=\"number\">17</span>] = &#123;<span class=\"number\">7</span>,<span class=\"number\">9</span>,<span class=\"number\">10</span>,<span class=\"number\">5</span>,<span class=\"number\">8</span>,<span class=\"number\">4</span>,<span class=\"number\">2</span>,<span class=\"number\">1</span>,<span class=\"number\">6</span>,<span class=\"number\">3</span>,<span class=\"number\">7</span>,<span class=\"number\">9</span>,<span class=\"number\">10</span>,<span class=\"number\">5</span>,<span class=\"number\">8</span>,<span class=\"number\">4</span>,<span class=\"number\">2</span>&#125;;</span><br><span class=\"line\">char m[<span class=\"number\">11</span>] = &#123;<span class=\"string\">&#x27;1&#x27;</span>,<span class=\"string\">&#x27;0&#x27;</span>,<span class=\"string\">&#x27;X&#x27;</span>,<span class=\"string\">&#x27;9&#x27;</span>,<span class=\"string\">&#x27;8&#x27;</span>,<span class=\"string\">&#x27;7&#x27;</span>,<span class=\"string\">&#x27;6&#x27;</span>,<span class=\"string\">&#x27;5&#x27;</span>,<span class=\"string\">&#x27;4&#x27;</span>,<span class=\"string\">&#x27;3&#x27;</span>,<span class=\"string\">&#x27;2&#x27;</span> &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//判断是否合法</span></span><br><span class=\"line\">bool <span class=\"function\"><span class=\"title\">isPrime</span>(<span class=\"params\">string s</span>)</span> &#123;</span><br><span class=\"line\">    int sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(int i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">17</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(s[i] &lt; <span class=\"string\">&#x27;0&#x27;</span> || s[i] &gt; <span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">           <span class=\"keyword\">return</span>  <span class=\"literal\">false</span>;<span class=\"comment\">//不为数字，不合法。</span></span><br><span class=\"line\">        </span><br><span class=\"line\">    sum += (s[i] - <span class=\"string\">&#x27;0&#x27;</span>) * a[i];<span class=\"comment\">//加权求和</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> s[<span class=\"number\">17</span>] == m[sum % <span class=\"number\">11</span>];<span class=\"comment\">//如果最后一位没问题就返回true，有问题就返回false</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">int <span class=\"function\"><span class=\"title\">main</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    cin &gt;&gt; n;</span><br><span class=\"line\">    int cnt = n;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(int i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">        cin &gt;&gt; s;<span class=\"comment\">//本次的身份证</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!isPrime(s)) &#123;</span><br><span class=\"line\">            cout &lt;&lt; s &lt;&lt; endl;</span><br><span class=\"line\">            cnt--;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(cnt == n)</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;All passed&quot;</span>;;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p><span class=\"exturl\"><a class=\"exturl__link\"   href=\"https://pintia.cn/problem-sets/994805260223102976/problems/994805290334011392\" >题目链接</a><span class=\"exturl__icon\"><i class=\"fas fa-external-link-alt\"></i></span></span></p>\n"},{"title":"PAT乙级1032","date":"2021-05-14T08:29:01.000Z","_content":"### 题目\n题目请忽略，为了用事实说明挖掘机技术到底哪家强，PAT 组织了一场挖掘机技能大赛。现请你根据比赛结果统计出技术最强的那个学校。\n### 输入格式：\n输入在第 1 行给出不超过 10^5的正整数 N，即参赛人数。随后 N 行，每行给出一位参赛者的信息和成绩，包括其所代表的学校的编号（从 1 开始连续编号）、及其比赛成绩（百分制），中间以空格分隔。\n### 输入格式\n在一行中给出总得分最高的学校的编号、及其总分，中间以空格分隔。题目保证答案唯一，没有并列。\n### 思路\n用一个数组去存储各个学校的总分数，再遍历求分数最大值的学校，并输出其编号与分数。\n\n```js\n```\n```js\n//foreverking\n#include <vector>\n#include <cstdio>\n#include <queue>\n#include <algorithm>\n#include <cstring>\n#include <iostream>\n#include <cmath>\nusing namespace std;\n\nconst int  N = 1e5 + 1;\n\nint n;\nint sum[N];\n\nint main(){\n    cin >> n;\n    for(int i = 0; i < n; i++) {\n        int school,score;\n        cin >> school >> score;\n        sum[school] += score;//将分数加入\n    }\n    int maxx = 1;//学校从1开始编号\n    for(int i = 1; i < n; i++){\n        if(sum[maxx] < sum[i]){\n            maxx = i;\n        }\n    }\n\n    cout << maxx << \" \" << sum[maxx] << endl;\n    return 0;\n}\n```\n最后一个点过不了，超时了，我想了想选择用vector存各学校的分数。\n\n```js\n//foreverking\n#include <vector>\n#include <cstdio>\n#include <queue>\n#include <algorithm>\n#include <cstring>\n#include <iostream>\n#include <cmath>\nusing namespace std;\n\nint n;\n\nint main(){\n    cin >> n;\n    vector<int> v(n + 1);\n    for(int i = 0; i < n; i++) {\n        int school,score;\n        cin >> school >> score;\n        v[school] += score;//将分数加入\n    }\n\n    int maxx = 1;//学校从1开始编号\n    for(int i = 1; i < n; i++){\n        if(v[maxx] < v[i]){\n            maxx = i;\n        }\n    }\n    cout << maxx << \" \" << v[maxx] << endl;\n    return 0;\n}\n```\n成功过了，但是回过头看第一个代码，发觉是边界问题，只需`const int  N = 1e5 + 1;`就可以通过。\n\n[题目链接](https://pintia.cn/problem-sets/994805260223102976/problems/994805289432236032)","source":"_posts/PAT乙级1032.md","raw":"---\ntitle: PAT乙级1032\ndate: 2021-05-14 16:29:01\ntags: \n    - Study\ncategories: \n    - 题解\n    - PAT题解\n---\n### 题目\n题目请忽略，为了用事实说明挖掘机技术到底哪家强，PAT 组织了一场挖掘机技能大赛。现请你根据比赛结果统计出技术最强的那个学校。\n### 输入格式：\n输入在第 1 行给出不超过 10^5的正整数 N，即参赛人数。随后 N 行，每行给出一位参赛者的信息和成绩，包括其所代表的学校的编号（从 1 开始连续编号）、及其比赛成绩（百分制），中间以空格分隔。\n### 输入格式\n在一行中给出总得分最高的学校的编号、及其总分，中间以空格分隔。题目保证答案唯一，没有并列。\n### 思路\n用一个数组去存储各个学校的总分数，再遍历求分数最大值的学校，并输出其编号与分数。\n\n```js\n```\n```js\n//foreverking\n#include <vector>\n#include <cstdio>\n#include <queue>\n#include <algorithm>\n#include <cstring>\n#include <iostream>\n#include <cmath>\nusing namespace std;\n\nconst int  N = 1e5 + 1;\n\nint n;\nint sum[N];\n\nint main(){\n    cin >> n;\n    for(int i = 0; i < n; i++) {\n        int school,score;\n        cin >> school >> score;\n        sum[school] += score;//将分数加入\n    }\n    int maxx = 1;//学校从1开始编号\n    for(int i = 1; i < n; i++){\n        if(sum[maxx] < sum[i]){\n            maxx = i;\n        }\n    }\n\n    cout << maxx << \" \" << sum[maxx] << endl;\n    return 0;\n}\n```\n最后一个点过不了，超时了，我想了想选择用vector存各学校的分数。\n\n```js\n//foreverking\n#include <vector>\n#include <cstdio>\n#include <queue>\n#include <algorithm>\n#include <cstring>\n#include <iostream>\n#include <cmath>\nusing namespace std;\n\nint n;\n\nint main(){\n    cin >> n;\n    vector<int> v(n + 1);\n    for(int i = 0; i < n; i++) {\n        int school,score;\n        cin >> school >> score;\n        v[school] += score;//将分数加入\n    }\n\n    int maxx = 1;//学校从1开始编号\n    for(int i = 1; i < n; i++){\n        if(v[maxx] < v[i]){\n            maxx = i;\n        }\n    }\n    cout << maxx << \" \" << v[maxx] << endl;\n    return 0;\n}\n```\n成功过了，但是回过头看第一个代码，发觉是边界问题，只需`const int  N = 1e5 + 1;`就可以通过。\n\n[题目链接](https://pintia.cn/problem-sets/994805260223102976/problems/994805289432236032)","slug":"PAT乙级1032","published":1,"updated":"2021-05-14T08:29:32.270Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktvk78f9001d1cws3t1fd05w","content":"\n        <h3 id=\"题目\"   >\n          <a href=\"#题目\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h3>\n      <p>题目请忽略，为了用事实说明挖掘机技术到底哪家强，PAT 组织了一场挖掘机技能大赛。现请你根据比赛结果统计出技术最强的那个学校。</p>\n\n        <h3 id=\"输入格式：\"   >\n          <a href=\"#输入格式：\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#输入格式：\" class=\"headerlink\" title=\"输入格式：\"></a>输入格式：</h3>\n      <p>输入在第 1 行给出不超过 10^5的正整数 N，即参赛人数。随后 N 行，每行给出一位参赛者的信息和成绩，包括其所代表的学校的编号（从 1 开始连续编号）、及其比赛成绩（百分制），中间以空格分隔。</p>\n\n        <h3 id=\"输入格式\"   >\n          <a href=\"#输入格式\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#输入格式\" class=\"headerlink\" title=\"输入格式\"></a>输入格式</h3>\n      <p>在一行中给出总得分最高的学校的编号、及其总分，中间以空格分隔。题目保证答案唯一，没有并列。</p>\n\n        <h3 id=\"思路\"   >\n          <a href=\"#思路\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3>\n      <p>用一个数组去存储各个学校的总分数，再遍历求分数最大值的学校，并输出其编号与分数。</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">``</span><span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">`</span><span class=\"string\">``</span>js</span><br><span class=\"line\"><span class=\"comment\">//foreverking</span></span><br><span class=\"line\">#include &lt;vector&gt;</span><br><span class=\"line\">#include &lt;cstdio&gt;</span><br><span class=\"line\">#include &lt;queue&gt;</span><br><span class=\"line\">#include &lt;algorithm&gt;</span><br><span class=\"line\">#include &lt;cstring&gt;</span><br><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">#include &lt;cmath&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> int  N = <span class=\"number\">1e5</span> + <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">int n;</span><br><span class=\"line\">int sum[N];</span><br><span class=\"line\"></span><br><span class=\"line\">int <span class=\"function\"><span class=\"title\">main</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    cin &gt;&gt; n;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(int i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">        int school,score;</span><br><span class=\"line\">        cin &gt;&gt; school &gt;&gt; score;</span><br><span class=\"line\">        sum[school] += score;<span class=\"comment\">//将分数加入</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    int maxx = <span class=\"number\">1</span>;<span class=\"comment\">//学校从1开始编号</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(int i = <span class=\"number\">1</span>; i &lt; n; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(sum[maxx] &lt; sum[i])&#123;</span><br><span class=\"line\">            maxx = i;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    cout &lt;&lt; maxx &lt;&lt; <span class=\"string\">&quot; &quot;</span> &lt;&lt; sum[maxx] &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>最后一个点过不了，超时了，我想了想选择用vector存各学校的分数。</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//foreverking</span></span><br><span class=\"line\">#include &lt;vector&gt;</span><br><span class=\"line\">#include &lt;cstdio&gt;</span><br><span class=\"line\">#include &lt;queue&gt;</span><br><span class=\"line\">#include &lt;algorithm&gt;</span><br><span class=\"line\">#include &lt;cstring&gt;</span><br><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">#include &lt;cmath&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\"></span><br><span class=\"line\">int n;</span><br><span class=\"line\"></span><br><span class=\"line\">int <span class=\"function\"><span class=\"title\">main</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    cin &gt;&gt; n;</span><br><span class=\"line\">    vector&lt;int&gt; v(n + <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(int i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">        int school,score;</span><br><span class=\"line\">        cin &gt;&gt; school &gt;&gt; score;</span><br><span class=\"line\">        v[school] += score;<span class=\"comment\">//将分数加入</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    int maxx = <span class=\"number\">1</span>;<span class=\"comment\">//学校从1开始编号</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(int i = <span class=\"number\">1</span>; i &lt; n; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(v[maxx] &lt; v[i])&#123;</span><br><span class=\"line\">            maxx = i;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; maxx &lt;&lt; <span class=\"string\">&quot; &quot;</span> &lt;&lt; v[maxx] &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>成功过了，但是回过头看第一个代码，发觉是边界问题，只需<code>const int  N = 1e5 + 1;</code>就可以通过。</p>\n<p><span class=\"exturl\"><a class=\"exturl__link\"   href=\"https://pintia.cn/problem-sets/994805260223102976/problems/994805289432236032\" >题目链接</a><span class=\"exturl__icon\"><i class=\"fas fa-external-link-alt\"></i></span></span></p>\n","site":{"data":{}},"excerpt":"","more":"\n        <h3 id=\"题目\"   >\n          <a href=\"#题目\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h3>\n      <p>题目请忽略，为了用事实说明挖掘机技术到底哪家强，PAT 组织了一场挖掘机技能大赛。现请你根据比赛结果统计出技术最强的那个学校。</p>\n\n        <h3 id=\"输入格式：\"   >\n          <a href=\"#输入格式：\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#输入格式：\" class=\"headerlink\" title=\"输入格式：\"></a>输入格式：</h3>\n      <p>输入在第 1 行给出不超过 10^5的正整数 N，即参赛人数。随后 N 行，每行给出一位参赛者的信息和成绩，包括其所代表的学校的编号（从 1 开始连续编号）、及其比赛成绩（百分制），中间以空格分隔。</p>\n\n        <h3 id=\"输入格式\"   >\n          <a href=\"#输入格式\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#输入格式\" class=\"headerlink\" title=\"输入格式\"></a>输入格式</h3>\n      <p>在一行中给出总得分最高的学校的编号、及其总分，中间以空格分隔。题目保证答案唯一，没有并列。</p>\n\n        <h3 id=\"思路\"   >\n          <a href=\"#思路\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3>\n      <p>用一个数组去存储各个学校的总分数，再遍历求分数最大值的学校，并输出其编号与分数。</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">``</span><span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">`</span><span class=\"string\">``</span>js</span><br><span class=\"line\"><span class=\"comment\">//foreverking</span></span><br><span class=\"line\">#include &lt;vector&gt;</span><br><span class=\"line\">#include &lt;cstdio&gt;</span><br><span class=\"line\">#include &lt;queue&gt;</span><br><span class=\"line\">#include &lt;algorithm&gt;</span><br><span class=\"line\">#include &lt;cstring&gt;</span><br><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">#include &lt;cmath&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> int  N = <span class=\"number\">1e5</span> + <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">int n;</span><br><span class=\"line\">int sum[N];</span><br><span class=\"line\"></span><br><span class=\"line\">int <span class=\"function\"><span class=\"title\">main</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    cin &gt;&gt; n;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(int i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">        int school,score;</span><br><span class=\"line\">        cin &gt;&gt; school &gt;&gt; score;</span><br><span class=\"line\">        sum[school] += score;<span class=\"comment\">//将分数加入</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    int maxx = <span class=\"number\">1</span>;<span class=\"comment\">//学校从1开始编号</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(int i = <span class=\"number\">1</span>; i &lt; n; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(sum[maxx] &lt; sum[i])&#123;</span><br><span class=\"line\">            maxx = i;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    cout &lt;&lt; maxx &lt;&lt; <span class=\"string\">&quot; &quot;</span> &lt;&lt; sum[maxx] &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>最后一个点过不了，超时了，我想了想选择用vector存各学校的分数。</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//foreverking</span></span><br><span class=\"line\">#include &lt;vector&gt;</span><br><span class=\"line\">#include &lt;cstdio&gt;</span><br><span class=\"line\">#include &lt;queue&gt;</span><br><span class=\"line\">#include &lt;algorithm&gt;</span><br><span class=\"line\">#include &lt;cstring&gt;</span><br><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">#include &lt;cmath&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\"></span><br><span class=\"line\">int n;</span><br><span class=\"line\"></span><br><span class=\"line\">int <span class=\"function\"><span class=\"title\">main</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    cin &gt;&gt; n;</span><br><span class=\"line\">    vector&lt;int&gt; v(n + <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(int i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">        int school,score;</span><br><span class=\"line\">        cin &gt;&gt; school &gt;&gt; score;</span><br><span class=\"line\">        v[school] += score;<span class=\"comment\">//将分数加入</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    int maxx = <span class=\"number\">1</span>;<span class=\"comment\">//学校从1开始编号</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(int i = <span class=\"number\">1</span>; i &lt; n; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(v[maxx] &lt; v[i])&#123;</span><br><span class=\"line\">            maxx = i;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; maxx &lt;&lt; <span class=\"string\">&quot; &quot;</span> &lt;&lt; v[maxx] &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>成功过了，但是回过头看第一个代码，发觉是边界问题，只需<code>const int  N = 1e5 + 1;</code>就可以通过。</p>\n<p><span class=\"exturl\"><a class=\"exturl__link\"   href=\"https://pintia.cn/problem-sets/994805260223102976/problems/994805289432236032\" >题目链接</a><span class=\"exturl__icon\"><i class=\"fas fa-external-link-alt\"></i></span></span></p>\n"},{"title":"PAT乙级1033","date":"2021-05-15T12:54:31.000Z","_content":"### 题目：\n旧键盘上坏了几个键，于是在敲一段文字的时候，对应的字符就不会出现。现在给出应该输入的一段文字、以及坏掉的那些键，打出的结果文字会是怎样？\n### 输入格式：\n输入在 2 行中分别给出坏掉的那些键、以及应该输入的文字。其中对应英文字母的坏键以大写给出；每段文字是不超过 10^5个字符的串。可用的字符包括字母 [a-z, A-Z]、数字 0-9、以及下划线 _（代表空格）、,、.、-、+（代表上档键）。题目保证第 2 行输入的文字串非空。\n\n注意：如果上档键坏掉了，那么大写的英文字母无法被打出。\n### 输出格式\n在一行中输出能够被打出的结果文字。如果没有一个字符能被打出，则输出空行。\n### 思路\n输入两组到string，然后要用到find函数，toupper函数,isupper函数。find函数是我们的老朋友了，查找在某个字符串中是否存在某个字串，没有则返回特殊值npos.而toupper则是将小写字母转化为大写字母的函数。isupper是简单的判断是否是大写字母。\n\n先进行判断error串中是否存在上档键'+'，存在的话就不能输出大写，再判定error中与s中小写及其他字符。因为`error其中对应英文字母的坏键以大写给出 `,所以使用toupper函数转化一下再进行find.上档键没坏的话直接对每个字符进行判定就好，不再在意大小写。\n\n```js\n//foreverking\n#include <vector>\n#include <cstdio>\n#include <queue>\n#include <algorithm>\n#include <cstring>\n#include <iostream>\n#include <cmath>\nusing namespace std;\n\nstring error, s;\n\nint main(){\n    \n\tgetline(cin, error);\n\tgetline(cin, s);\n    //上档键坏了\n    if(error.find('+') != error.npos){\n        for(int i = 0; i < s.size(); i++){//不能输出大写，大写一律不要\n            if(!isupper(s[i]) && error.find(toupper(s[i])) ==error.npos)\n                cout << s[i];\n        }\n    }\n    //上档键没坏，可以输出大写\n    else {\n        for(int i = 0; i < s.size(); i++){//出现在error的不要\n            if(error.find(toupper(s[i])) == error.npos)\n                cout << s[i];\n        }\n    }\n\n    cout << endl;\n    return 0;\n}\n```\n优化一下，直接遍历s串，每次都判定一下上档键是否坏了，坏了就不输出大写，直接continue.还有一个是判定是判断小写及其他字符是否能输出。\n\n```js\n//foreverking\n#include <vector>\n#include <cstdio>\n#include <queue>\n#include <algorithm>\n#include <cstring>\n#include <iostream>\n#include <cmath>\nusing namespace std;\n\n\nstring error,s;\nint main(){\n    getline(cin, error);\n    getline(cin, s);\n    for(int i = 0; i < s.length(); i++) {\n        if(error.find(toupper(s[i])) != error.npos) \n            continue;//找到对应大写，键坏了，不能输出\n        if(isupper(s[i]) && error.find('+') != error.npos) \n            continue;//上档键坏了，不能输出大写，但是s中有的字母偏偏是大写，所以不能输出\n\n        cout << s[i];\n    }\n\n    cout << endl;\n    return 0;\n}\n```\n记住输出的时候使用string头文件中的getline,可以输入一行。\n[题目链接](https://pintia.cn/problem-sets/994805260223102976/problems/994805288530460672)","source":"_posts/PAT乙级1033.md","raw":"---\ntitle: PAT乙级1033\ndate: 2021-05-15 20:54:31\ntags: \n    - Study\ncategories: \n    - 题解\n    - PAT题解\n---\n### 题目：\n旧键盘上坏了几个键，于是在敲一段文字的时候，对应的字符就不会出现。现在给出应该输入的一段文字、以及坏掉的那些键，打出的结果文字会是怎样？\n### 输入格式：\n输入在 2 行中分别给出坏掉的那些键、以及应该输入的文字。其中对应英文字母的坏键以大写给出；每段文字是不超过 10^5个字符的串。可用的字符包括字母 [a-z, A-Z]、数字 0-9、以及下划线 _（代表空格）、,、.、-、+（代表上档键）。题目保证第 2 行输入的文字串非空。\n\n注意：如果上档键坏掉了，那么大写的英文字母无法被打出。\n### 输出格式\n在一行中输出能够被打出的结果文字。如果没有一个字符能被打出，则输出空行。\n### 思路\n输入两组到string，然后要用到find函数，toupper函数,isupper函数。find函数是我们的老朋友了，查找在某个字符串中是否存在某个字串，没有则返回特殊值npos.而toupper则是将小写字母转化为大写字母的函数。isupper是简单的判断是否是大写字母。\n\n先进行判断error串中是否存在上档键'+'，存在的话就不能输出大写，再判定error中与s中小写及其他字符。因为`error其中对应英文字母的坏键以大写给出 `,所以使用toupper函数转化一下再进行find.上档键没坏的话直接对每个字符进行判定就好，不再在意大小写。\n\n```js\n//foreverking\n#include <vector>\n#include <cstdio>\n#include <queue>\n#include <algorithm>\n#include <cstring>\n#include <iostream>\n#include <cmath>\nusing namespace std;\n\nstring error, s;\n\nint main(){\n    \n\tgetline(cin, error);\n\tgetline(cin, s);\n    //上档键坏了\n    if(error.find('+') != error.npos){\n        for(int i = 0; i < s.size(); i++){//不能输出大写，大写一律不要\n            if(!isupper(s[i]) && error.find(toupper(s[i])) ==error.npos)\n                cout << s[i];\n        }\n    }\n    //上档键没坏，可以输出大写\n    else {\n        for(int i = 0; i < s.size(); i++){//出现在error的不要\n            if(error.find(toupper(s[i])) == error.npos)\n                cout << s[i];\n        }\n    }\n\n    cout << endl;\n    return 0;\n}\n```\n优化一下，直接遍历s串，每次都判定一下上档键是否坏了，坏了就不输出大写，直接continue.还有一个是判定是判断小写及其他字符是否能输出。\n\n```js\n//foreverking\n#include <vector>\n#include <cstdio>\n#include <queue>\n#include <algorithm>\n#include <cstring>\n#include <iostream>\n#include <cmath>\nusing namespace std;\n\n\nstring error,s;\nint main(){\n    getline(cin, error);\n    getline(cin, s);\n    for(int i = 0; i < s.length(); i++) {\n        if(error.find(toupper(s[i])) != error.npos) \n            continue;//找到对应大写，键坏了，不能输出\n        if(isupper(s[i]) && error.find('+') != error.npos) \n            continue;//上档键坏了，不能输出大写，但是s中有的字母偏偏是大写，所以不能输出\n\n        cout << s[i];\n    }\n\n    cout << endl;\n    return 0;\n}\n```\n记住输出的时候使用string头文件中的getline,可以输入一行。\n[题目链接](https://pintia.cn/problem-sets/994805260223102976/problems/994805288530460672)","slug":"PAT乙级1033","published":1,"updated":"2021-05-15T12:55:29.527Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktvk78fa001h1cws0vwj5w4b","content":"\n        <h3 id=\"题目：\"   >\n          <a href=\"#题目：\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#题目：\" class=\"headerlink\" title=\"题目：\"></a>题目：</h3>\n      <p>旧键盘上坏了几个键，于是在敲一段文字的时候，对应的字符就不会出现。现在给出应该输入的一段文字、以及坏掉的那些键，打出的结果文字会是怎样？</p>\n\n        <h3 id=\"输入格式：\"   >\n          <a href=\"#输入格式：\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#输入格式：\" class=\"headerlink\" title=\"输入格式：\"></a>输入格式：</h3>\n      <p>输入在 2 行中分别给出坏掉的那些键、以及应该输入的文字。其中对应英文字母的坏键以大写给出；每段文字是不超过 10^5个字符的串。可用的字符包括字母 [a-z, A-Z]、数字 0-9、以及下划线 _（代表空格）、,、.、-、+（代表上档键）。题目保证第 2 行输入的文字串非空。</p>\n<p>注意：如果上档键坏掉了，那么大写的英文字母无法被打出。</p>\n\n        <h3 id=\"输出格式\"   >\n          <a href=\"#输出格式\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#输出格式\" class=\"headerlink\" title=\"输出格式\"></a>输出格式</h3>\n      <p>在一行中输出能够被打出的结果文字。如果没有一个字符能被打出，则输出空行。</p>\n\n        <h3 id=\"思路\"   >\n          <a href=\"#思路\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3>\n      <p>输入两组到string，然后要用到find函数，toupper函数,isupper函数。find函数是我们的老朋友了，查找在某个字符串中是否存在某个字串，没有则返回特殊值npos.而toupper则是将小写字母转化为大写字母的函数。isupper是简单的判断是否是大写字母。</p>\n<p>先进行判断error串中是否存在上档键’+’，存在的话就不能输出大写，再判定error中与s中小写及其他字符。因为<code>error其中对应英文字母的坏键以大写给出 </code>,所以使用toupper函数转化一下再进行find.上档键没坏的话直接对每个字符进行判定就好，不再在意大小写。</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//foreverking</span></span><br><span class=\"line\">#include &lt;vector&gt;</span><br><span class=\"line\">#include &lt;cstdio&gt;</span><br><span class=\"line\">#include &lt;queue&gt;</span><br><span class=\"line\">#include &lt;algorithm&gt;</span><br><span class=\"line\">#include &lt;cstring&gt;</span><br><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">#include &lt;cmath&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\"></span><br><span class=\"line\">string error, s;</span><br><span class=\"line\"></span><br><span class=\"line\">int <span class=\"function\"><span class=\"title\">main</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">\tgetline(cin, error);</span><br><span class=\"line\">\tgetline(cin, s);</span><br><span class=\"line\">    <span class=\"comment\">//上档键坏了</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(error.find(<span class=\"string\">&#x27;+&#x27;</span>) != error.npos)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(int i = <span class=\"number\">0</span>; i &lt; s.size(); i++)&#123;<span class=\"comment\">//不能输出大写，大写一律不要</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!isupper(s[i]) &amp;&amp; error.find(toupper(s[i])) ==error.npos)</span><br><span class=\"line\">                cout &lt;&lt; s[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//上档键没坏，可以输出大写</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(int i = <span class=\"number\">0</span>; i &lt; s.size(); i++)&#123;<span class=\"comment\">//出现在error的不要</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(error.find(toupper(s[i])) == error.npos)</span><br><span class=\"line\">                cout &lt;&lt; s[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    cout &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>优化一下，直接遍历s串，每次都判定一下上档键是否坏了，坏了就不输出大写，直接continue.还有一个是判定是判断小写及其他字符是否能输出。</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//foreverking</span></span><br><span class=\"line\">#include &lt;vector&gt;</span><br><span class=\"line\">#include &lt;cstdio&gt;</span><br><span class=\"line\">#include &lt;queue&gt;</span><br><span class=\"line\">#include &lt;algorithm&gt;</span><br><span class=\"line\">#include &lt;cstring&gt;</span><br><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">#include &lt;cmath&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">string error,s;</span><br><span class=\"line\">int <span class=\"function\"><span class=\"title\">main</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    getline(cin, error);</span><br><span class=\"line\">    getline(cin, s);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(int i = <span class=\"number\">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(error.find(toupper(s[i])) != error.npos) </span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;<span class=\"comment\">//找到对应大写，键坏了，不能输出</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(isupper(s[i]) &amp;&amp; error.find(<span class=\"string\">&#x27;+&#x27;</span>) != error.npos) </span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;<span class=\"comment\">//上档键坏了，不能输出大写，但是s中有的字母偏偏是大写，所以不能输出</span></span><br><span class=\"line\"></span><br><span class=\"line\">        cout &lt;&lt; s[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    cout &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>记住输出的时候使用string头文件中的getline,可以输入一行。<br><span class=\"exturl\"><a class=\"exturl__link\"   href=\"https://pintia.cn/problem-sets/994805260223102976/problems/994805288530460672\" >题目链接</a><span class=\"exturl__icon\"><i class=\"fas fa-external-link-alt\"></i></span></span></p>\n","site":{"data":{}},"excerpt":"","more":"\n        <h3 id=\"题目：\"   >\n          <a href=\"#题目：\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#题目：\" class=\"headerlink\" title=\"题目：\"></a>题目：</h3>\n      <p>旧键盘上坏了几个键，于是在敲一段文字的时候，对应的字符就不会出现。现在给出应该输入的一段文字、以及坏掉的那些键，打出的结果文字会是怎样？</p>\n\n        <h3 id=\"输入格式：\"   >\n          <a href=\"#输入格式：\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#输入格式：\" class=\"headerlink\" title=\"输入格式：\"></a>输入格式：</h3>\n      <p>输入在 2 行中分别给出坏掉的那些键、以及应该输入的文字。其中对应英文字母的坏键以大写给出；每段文字是不超过 10^5个字符的串。可用的字符包括字母 [a-z, A-Z]、数字 0-9、以及下划线 _（代表空格）、,、.、-、+（代表上档键）。题目保证第 2 行输入的文字串非空。</p>\n<p>注意：如果上档键坏掉了，那么大写的英文字母无法被打出。</p>\n\n        <h3 id=\"输出格式\"   >\n          <a href=\"#输出格式\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#输出格式\" class=\"headerlink\" title=\"输出格式\"></a>输出格式</h3>\n      <p>在一行中输出能够被打出的结果文字。如果没有一个字符能被打出，则输出空行。</p>\n\n        <h3 id=\"思路\"   >\n          <a href=\"#思路\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3>\n      <p>输入两组到string，然后要用到find函数，toupper函数,isupper函数。find函数是我们的老朋友了，查找在某个字符串中是否存在某个字串，没有则返回特殊值npos.而toupper则是将小写字母转化为大写字母的函数。isupper是简单的判断是否是大写字母。</p>\n<p>先进行判断error串中是否存在上档键’+’，存在的话就不能输出大写，再判定error中与s中小写及其他字符。因为<code>error其中对应英文字母的坏键以大写给出 </code>,所以使用toupper函数转化一下再进行find.上档键没坏的话直接对每个字符进行判定就好，不再在意大小写。</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//foreverking</span></span><br><span class=\"line\">#include &lt;vector&gt;</span><br><span class=\"line\">#include &lt;cstdio&gt;</span><br><span class=\"line\">#include &lt;queue&gt;</span><br><span class=\"line\">#include &lt;algorithm&gt;</span><br><span class=\"line\">#include &lt;cstring&gt;</span><br><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">#include &lt;cmath&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\"></span><br><span class=\"line\">string error, s;</span><br><span class=\"line\"></span><br><span class=\"line\">int <span class=\"function\"><span class=\"title\">main</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">\tgetline(cin, error);</span><br><span class=\"line\">\tgetline(cin, s);</span><br><span class=\"line\">    <span class=\"comment\">//上档键坏了</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(error.find(<span class=\"string\">&#x27;+&#x27;</span>) != error.npos)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(int i = <span class=\"number\">0</span>; i &lt; s.size(); i++)&#123;<span class=\"comment\">//不能输出大写，大写一律不要</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!isupper(s[i]) &amp;&amp; error.find(toupper(s[i])) ==error.npos)</span><br><span class=\"line\">                cout &lt;&lt; s[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//上档键没坏，可以输出大写</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(int i = <span class=\"number\">0</span>; i &lt; s.size(); i++)&#123;<span class=\"comment\">//出现在error的不要</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(error.find(toupper(s[i])) == error.npos)</span><br><span class=\"line\">                cout &lt;&lt; s[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    cout &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>优化一下，直接遍历s串，每次都判定一下上档键是否坏了，坏了就不输出大写，直接continue.还有一个是判定是判断小写及其他字符是否能输出。</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//foreverking</span></span><br><span class=\"line\">#include &lt;vector&gt;</span><br><span class=\"line\">#include &lt;cstdio&gt;</span><br><span class=\"line\">#include &lt;queue&gt;</span><br><span class=\"line\">#include &lt;algorithm&gt;</span><br><span class=\"line\">#include &lt;cstring&gt;</span><br><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">#include &lt;cmath&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">string error,s;</span><br><span class=\"line\">int <span class=\"function\"><span class=\"title\">main</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    getline(cin, error);</span><br><span class=\"line\">    getline(cin, s);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(int i = <span class=\"number\">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(error.find(toupper(s[i])) != error.npos) </span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;<span class=\"comment\">//找到对应大写，键坏了，不能输出</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(isupper(s[i]) &amp;&amp; error.find(<span class=\"string\">&#x27;+&#x27;</span>) != error.npos) </span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;<span class=\"comment\">//上档键坏了，不能输出大写，但是s中有的字母偏偏是大写，所以不能输出</span></span><br><span class=\"line\"></span><br><span class=\"line\">        cout &lt;&lt; s[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    cout &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>记住输出的时候使用string头文件中的getline,可以输入一行。<br><span class=\"exturl\"><a class=\"exturl__link\"   href=\"https://pintia.cn/problem-sets/994805260223102976/problems/994805288530460672\" >题目链接</a><span class=\"exturl__icon\"><i class=\"fas fa-external-link-alt\"></i></span></span></p>\n"},{"title":"PAT乙级1034","date":"2021-05-16T08:36:59.000Z","_content":"### 题目\n本题要求编写程序，计算 2 个有理数的和、差、积、商。（最难的题，往往有最简单的描述\n### 输入格式\n输入在一行中按照 a1/b1 a2/b2 的格式给出两个分数形式的有理数，其中分子和分母全是整型范围内的整数，负号只可能出现在分子前，分母不为 0。\n### 输出格式\n分别在 4 行中按照 有理数1 运算符 有理数2 = 结果 的格式顺序输出 2 个有理数的和、差、积、商。注意输出的每个有理数必须是该有理数的最简形式 k a/b，其中 k 是整数部分，a/b 是最简分数部分；若为负数，则须加括号；若除法分母为 0，则输出 Inf。题目保证正确的输出中没有超过整型范围的整数。\n### 样例\n输入样例1：\n```js\n2/3 -4/2\n```\n输出样例1：\n\n```js\n2/3 + (-2) = (-1 1/3)\n2/3 - (-2) = 2 2/3\n2/3 * (-2) = (-1 1/3)\n2/3 / (-2) = (-1/3)\n```\n输入样例2：\n```js\n5/3 0/6\n```\n输出样例2：\n```js\n1 2/3 + 0 = 1 2/3\n1 2/3 - 0 = 1 2/3\n1 2/3 * 0 = 0\n1 2/3 / 0 = Inf\n```\n### 思路\n#### gcd函数\n欧几里得算法，也就是高中数学书上的辗转相除法。他的核心是：`gcd(a,b) == gcd(b,a % b) `,而终止递归的条件就是b（除数）变为了0，这个时候已经返回了a,b的最大公约数。\n\n```js\n//gcd算法\nint gcd(int a,int b) {\n    if(b == 0)\n        return a;\n    return gcd(b,a % b);\n}\n```\n还有个简版：\n\n```js\nlong long gcd(long long a,long long b) {return b == 0 ? a : gcd(b,a % b);}\n```\n#### 注意点\n1. 负数要有括号，为了判断是否为负数，用一个flag保存是否为负数，是de话就要输入括号与负号。\n2. 假分数时的整数部分若为0不输出，但分子分母能整除时只输出整数部分\n3. 分母为0时输出Inf，分子为0时输出0.记住一旦为0要return 直接跳出，不进行接下来的操作。（看了好久\n4. 输入的记住用long long，数据有点大（a1*b1时可能爆掉）\n5. 注意空格\n#### 代码：\ngcd函数寻找最大公约数，workout函数进行格式化输出。\n```js\n//foreverking\n#include <vector>\n#include <cstdio>\n#include <queue>\n#include <algorithm>\n#include <cstring>\n#include <iostream>\n#include <cmath>\nusing namespace std;\n\n//分子和分母全是整型范围内的整数，负号只可能出现在分子前，分母不为 0\nlong long a1,a2,b1,b2;\n\n//gcd,辗转相除求最大公约数\nlong long gcd(long long a,long long b) {\n    //return b == 0 ? a : gcd(b,a % b);\n    if(b == 0)\n        return a;\n    return gcd(b,a % b);\n}\n\n//输出处理过后的数字\nvoid workOut(long long m,long long n) {\n    //判断有0没\n    if(m * n == 0) {\n        if(m == 0) cout << 0;\n        if(n == 0) cout << \"Inf\";\n        return;\n    }\n    //这是一个负数，注意负号要在分子，而且负号有括号\n    bool flag = 0;\n    if((m < 0 && n > 0) || (m > 0 && n < 0))\n        flag = 1;;//是负数则flag为1\n    m = abs(m);\n    n = abs(n);//都取绝对值\n    long long num = m / n;//如果是带分数，那么这是整数部分\n    long long x = gcd(m,n);//最大公约数\n    m /= x;\n    n /= x;//得出约分后的分子分母\n    m = m - num * n;\n    if(flag == 1) cout << \"(-\";//实际负数，输出括号与负号\n    if(num != 0) cout << num;//有整数部分，输出\n    //可以整除，没有分数部分了，是负数就输出括号，不是直接返回了\n    if(m % n== 0){\n        if(flag == 1) cout << ')';\n        return;\n    }\n    if(num != 0) cout << ' ';\n    cout << m << '/' << n;\n    if(flag == 1) cout << ')';\n}\n\n\nint main() {\n    //a1/b1 a2/b2\n    scanf(\"%lld/%lld %lld/%lld\",&a1,&b1,&a2,&b2);\n   \t//加法\n\tworkOut(a1,b1);\n    cout << \" + \";\n    workOut(a2,b2);\n    cout << \" = \";\n    workOut(a1 * b2 + a2 * b1, b1 * b2);\n    cout << endl;\n    //减法\n\tworkOut(a1, b1);\n\tcout << \" - \";\n\tworkOut(a2, b2);\n    cout << \" = \";\n\tworkOut(a1 * b2 - a2 * b1,b1 * b2);\n\tcout << endl;\n\t//乘法\n\tworkOut(a1, b1);\n\tcout << \" * \";\n\tworkOut(a2, b2);\n\tcout << \" = \";\n\tworkOut(a1 * a2,b1 * b2);\n\tcout << endl;\n\t//除法\n\tworkOut(a1,b1);\n    cout << \" / \";\n    workOut(a2,b2);\n    cout << \" = \";\n    workOut(a1 * b2,b1 * a2);\n\tcout << endl;\n\treturn 0;\n}\n```\n有一些语句是可以优化的。\n[题目链接](https://pintia.cn/problem-sets/994805260223102976/problems/994805287624491008)","source":"_posts/PAT乙级1034.md","raw":"---\ntitle: PAT乙级1034\ndate: 2021-05-16 16:36:59\ntags: \n    - Study\ncategories: \n    - 题解\n    - PAT题解\n---\n### 题目\n本题要求编写程序，计算 2 个有理数的和、差、积、商。（最难的题，往往有最简单的描述\n### 输入格式\n输入在一行中按照 a1/b1 a2/b2 的格式给出两个分数形式的有理数，其中分子和分母全是整型范围内的整数，负号只可能出现在分子前，分母不为 0。\n### 输出格式\n分别在 4 行中按照 有理数1 运算符 有理数2 = 结果 的格式顺序输出 2 个有理数的和、差、积、商。注意输出的每个有理数必须是该有理数的最简形式 k a/b，其中 k 是整数部分，a/b 是最简分数部分；若为负数，则须加括号；若除法分母为 0，则输出 Inf。题目保证正确的输出中没有超过整型范围的整数。\n### 样例\n输入样例1：\n```js\n2/3 -4/2\n```\n输出样例1：\n\n```js\n2/3 + (-2) = (-1 1/3)\n2/3 - (-2) = 2 2/3\n2/3 * (-2) = (-1 1/3)\n2/3 / (-2) = (-1/3)\n```\n输入样例2：\n```js\n5/3 0/6\n```\n输出样例2：\n```js\n1 2/3 + 0 = 1 2/3\n1 2/3 - 0 = 1 2/3\n1 2/3 * 0 = 0\n1 2/3 / 0 = Inf\n```\n### 思路\n#### gcd函数\n欧几里得算法，也就是高中数学书上的辗转相除法。他的核心是：`gcd(a,b) == gcd(b,a % b) `,而终止递归的条件就是b（除数）变为了0，这个时候已经返回了a,b的最大公约数。\n\n```js\n//gcd算法\nint gcd(int a,int b) {\n    if(b == 0)\n        return a;\n    return gcd(b,a % b);\n}\n```\n还有个简版：\n\n```js\nlong long gcd(long long a,long long b) {return b == 0 ? a : gcd(b,a % b);}\n```\n#### 注意点\n1. 负数要有括号，为了判断是否为负数，用一个flag保存是否为负数，是de话就要输入括号与负号。\n2. 假分数时的整数部分若为0不输出，但分子分母能整除时只输出整数部分\n3. 分母为0时输出Inf，分子为0时输出0.记住一旦为0要return 直接跳出，不进行接下来的操作。（看了好久\n4. 输入的记住用long long，数据有点大（a1*b1时可能爆掉）\n5. 注意空格\n#### 代码：\ngcd函数寻找最大公约数，workout函数进行格式化输出。\n```js\n//foreverking\n#include <vector>\n#include <cstdio>\n#include <queue>\n#include <algorithm>\n#include <cstring>\n#include <iostream>\n#include <cmath>\nusing namespace std;\n\n//分子和分母全是整型范围内的整数，负号只可能出现在分子前，分母不为 0\nlong long a1,a2,b1,b2;\n\n//gcd,辗转相除求最大公约数\nlong long gcd(long long a,long long b) {\n    //return b == 0 ? a : gcd(b,a % b);\n    if(b == 0)\n        return a;\n    return gcd(b,a % b);\n}\n\n//输出处理过后的数字\nvoid workOut(long long m,long long n) {\n    //判断有0没\n    if(m * n == 0) {\n        if(m == 0) cout << 0;\n        if(n == 0) cout << \"Inf\";\n        return;\n    }\n    //这是一个负数，注意负号要在分子，而且负号有括号\n    bool flag = 0;\n    if((m < 0 && n > 0) || (m > 0 && n < 0))\n        flag = 1;;//是负数则flag为1\n    m = abs(m);\n    n = abs(n);//都取绝对值\n    long long num = m / n;//如果是带分数，那么这是整数部分\n    long long x = gcd(m,n);//最大公约数\n    m /= x;\n    n /= x;//得出约分后的分子分母\n    m = m - num * n;\n    if(flag == 1) cout << \"(-\";//实际负数，输出括号与负号\n    if(num != 0) cout << num;//有整数部分，输出\n    //可以整除，没有分数部分了，是负数就输出括号，不是直接返回了\n    if(m % n== 0){\n        if(flag == 1) cout << ')';\n        return;\n    }\n    if(num != 0) cout << ' ';\n    cout << m << '/' << n;\n    if(flag == 1) cout << ')';\n}\n\n\nint main() {\n    //a1/b1 a2/b2\n    scanf(\"%lld/%lld %lld/%lld\",&a1,&b1,&a2,&b2);\n   \t//加法\n\tworkOut(a1,b1);\n    cout << \" + \";\n    workOut(a2,b2);\n    cout << \" = \";\n    workOut(a1 * b2 + a2 * b1, b1 * b2);\n    cout << endl;\n    //减法\n\tworkOut(a1, b1);\n\tcout << \" - \";\n\tworkOut(a2, b2);\n    cout << \" = \";\n\tworkOut(a1 * b2 - a2 * b1,b1 * b2);\n\tcout << endl;\n\t//乘法\n\tworkOut(a1, b1);\n\tcout << \" * \";\n\tworkOut(a2, b2);\n\tcout << \" = \";\n\tworkOut(a1 * a2,b1 * b2);\n\tcout << endl;\n\t//除法\n\tworkOut(a1,b1);\n    cout << \" / \";\n    workOut(a2,b2);\n    cout << \" = \";\n    workOut(a1 * b2,b1 * a2);\n\tcout << endl;\n\treturn 0;\n}\n```\n有一些语句是可以优化的。\n[题目链接](https://pintia.cn/problem-sets/994805260223102976/problems/994805287624491008)","slug":"PAT乙级1034","published":1,"updated":"2021-05-16T08:37:29.888Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktvk78fb001k1cws6odo6tvi","content":"\n        <h3 id=\"题目\"   >\n          <a href=\"#题目\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h3>\n      <p>本题要求编写程序，计算 2 个有理数的和、差、积、商。（最难的题，往往有最简单的描述</p>\n\n        <h3 id=\"输入格式\"   >\n          <a href=\"#输入格式\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#输入格式\" class=\"headerlink\" title=\"输入格式\"></a>输入格式</h3>\n      <p>输入在一行中按照 a1/b1 a2/b2 的格式给出两个分数形式的有理数，其中分子和分母全是整型范围内的整数，负号只可能出现在分子前，分母不为 0。</p>\n\n        <h3 id=\"输出格式\"   >\n          <a href=\"#输出格式\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#输出格式\" class=\"headerlink\" title=\"输出格式\"></a>输出格式</h3>\n      <p>分别在 4 行中按照 有理数1 运算符 有理数2 = 结果 的格式顺序输出 2 个有理数的和、差、积、商。注意输出的每个有理数必须是该有理数的最简形式 k a/b，其中 k 是整数部分，a/b 是最简分数部分；若为负数，则须加括号；若除法分母为 0，则输出 Inf。题目保证正确的输出中没有超过整型范围的整数。</p>\n\n        <h3 id=\"样例\"   >\n          <a href=\"#样例\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#样例\" class=\"headerlink\" title=\"样例\"></a>样例</h3>\n      <p>输入样例1：</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">2</span>/<span class=\"number\">3</span> -<span class=\"number\">4</span>/<span class=\"number\">2</span></span><br></pre></td></tr></table></div></figure>\n<p>输出样例1：</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">2</span>/<span class=\"number\">3</span> + (-<span class=\"number\">2</span>) = (-<span class=\"number\">1</span> <span class=\"number\">1</span>/<span class=\"number\">3</span>)</span><br><span class=\"line\"><span class=\"number\">2</span>/<span class=\"number\">3</span> - (-<span class=\"number\">2</span>) = <span class=\"number\">2</span> <span class=\"number\">2</span>/<span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"number\">2</span>/<span class=\"number\">3</span> * (-<span class=\"number\">2</span>) = (-<span class=\"number\">1</span> <span class=\"number\">1</span>/<span class=\"number\">3</span>)</span><br><span class=\"line\"><span class=\"number\">2</span>/<span class=\"number\">3</span> / (-<span class=\"number\">2</span>) = (-<span class=\"number\">1</span>/<span class=\"number\">3</span>)</span><br></pre></td></tr></table></div></figure>\n<p>输入样例2：</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">5</span>/<span class=\"number\">3</span> <span class=\"number\">0</span>/<span class=\"number\">6</span></span><br></pre></td></tr></table></div></figure>\n<p>输出样例2：</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span> <span class=\"number\">2</span>/<span class=\"number\">3</span> + <span class=\"number\">0</span> = <span class=\"number\">1</span> <span class=\"number\">2</span>/<span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"number\">1</span> <span class=\"number\">2</span>/<span class=\"number\">3</span> - <span class=\"number\">0</span> = <span class=\"number\">1</span> <span class=\"number\">2</span>/<span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"number\">1</span> <span class=\"number\">2</span>/<span class=\"number\">3</span> * <span class=\"number\">0</span> = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"number\">1</span> <span class=\"number\">2</span>/<span class=\"number\">3</span> / <span class=\"number\">0</span> = Inf</span><br></pre></td></tr></table></div></figure>\n\n        <h3 id=\"思路\"   >\n          <a href=\"#思路\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3>\n      \n        <h4 id=\"gcd函数\"   >\n          <a href=\"#gcd函数\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#gcd函数\" class=\"headerlink\" title=\"gcd函数\"></a>gcd函数</h4>\n      <p>欧几里得算法，也就是高中数学书上的辗转相除法。他的核心是：<code>gcd(a,b) == gcd(b,a % b) </code>,而终止递归的条件就是b（除数）变为了0，这个时候已经返回了a,b的最大公约数。</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//gcd算法</span></span><br><span class=\"line\">int <span class=\"function\"><span class=\"title\">gcd</span>(<span class=\"params\">int a,int b</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(b == <span class=\"number\">0</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> gcd(b,a % b);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>还有个简版：</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">long long <span class=\"function\"><span class=\"title\">gcd</span>(<span class=\"params\">long long a,long long b</span>)</span> &#123;<span class=\"keyword\">return</span> b == <span class=\"number\">0</span> ? a : gcd(b,a % b);&#125;</span><br></pre></td></tr></table></div></figure>\n\n        <h4 id=\"注意点\"   >\n          <a href=\"#注意点\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#注意点\" class=\"headerlink\" title=\"注意点\"></a>注意点</h4>\n      <ol>\n<li>负数要有括号，为了判断是否为负数，用一个flag保存是否为负数，是de话就要输入括号与负号。</li>\n<li>假分数时的整数部分若为0不输出，但分子分母能整除时只输出整数部分</li>\n<li>分母为0时输出Inf，分子为0时输出0.记住一旦为0要return 直接跳出，不进行接下来的操作。（看了好久</li>\n<li>输入的记住用long long，数据有点大（a1*b1时可能爆掉）</li>\n<li>注意空格\n        <h4 id=\"代码：\"   >\n          <a href=\"#代码：\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#代码：\" class=\"headerlink\" title=\"代码：\"></a>代码：</h4>\n      gcd函数寻找最大公约数，workout函数进行格式化输出。<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//foreverking</span></span><br><span class=\"line\">#include &lt;vector&gt;</span><br><span class=\"line\">#include &lt;cstdio&gt;</span><br><span class=\"line\">#include &lt;queue&gt;</span><br><span class=\"line\">#include &lt;algorithm&gt;</span><br><span class=\"line\">#include &lt;cstring&gt;</span><br><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">#include &lt;cmath&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//分子和分母全是整型范围内的整数，负号只可能出现在分子前，分母不为 0</span></span><br><span class=\"line\">long long a1,a2,b1,b2;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//gcd,辗转相除求最大公约数</span></span><br><span class=\"line\">long long <span class=\"function\"><span class=\"title\">gcd</span>(<span class=\"params\">long long a,long long b</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//return b == 0 ? a : gcd(b,a % b);</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(b == <span class=\"number\">0</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> gcd(b,a % b);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//输出处理过后的数字</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"function\"><span class=\"title\">workOut</span>(<span class=\"params\">long long m,long long n</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//判断有0没</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(m * n == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(m == <span class=\"number\">0</span>) cout &lt;&lt; <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(n == <span class=\"number\">0</span>) cout &lt;&lt; <span class=\"string\">&quot;Inf&quot;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//这是一个负数，注意负号要在分子，而且负号有括号</span></span><br><span class=\"line\">    bool flag = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>((m &lt; <span class=\"number\">0</span> &amp;&amp; n &gt; <span class=\"number\">0</span>) || (m &gt; <span class=\"number\">0</span> &amp;&amp; n &lt; <span class=\"number\">0</span>))</span><br><span class=\"line\">        flag = <span class=\"number\">1</span>;;<span class=\"comment\">//是负数则flag为1</span></span><br><span class=\"line\">    m = abs(m);</span><br><span class=\"line\">    n = abs(n);<span class=\"comment\">//都取绝对值</span></span><br><span class=\"line\">    long long num = m / n;<span class=\"comment\">//如果是带分数，那么这是整数部分</span></span><br><span class=\"line\">    long long x = gcd(m,n);<span class=\"comment\">//最大公约数</span></span><br><span class=\"line\">    m /= x;</span><br><span class=\"line\">    n /= x;<span class=\"comment\">//得出约分后的分子分母</span></span><br><span class=\"line\">    m = m - num * n;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(flag == <span class=\"number\">1</span>) cout &lt;&lt; <span class=\"string\">&quot;(-&quot;</span>;<span class=\"comment\">//实际负数，输出括号与负号</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(num != <span class=\"number\">0</span>) cout &lt;&lt; num;<span class=\"comment\">//有整数部分，输出</span></span><br><span class=\"line\">    <span class=\"comment\">//可以整除，没有分数部分了，是负数就输出括号，不是直接返回了</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(m % n== <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(flag == <span class=\"number\">1</span>) cout &lt;&lt; <span class=\"string\">&#x27;)&#x27;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(num != <span class=\"number\">0</span>) cout &lt;&lt; <span class=\"string\">&#x27; &#x27;</span>;</span><br><span class=\"line\">    cout &lt;&lt; m &lt;&lt; <span class=\"string\">&#x27;/&#x27;</span> &lt;&lt; n;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(flag == <span class=\"number\">1</span>) cout &lt;&lt; <span class=\"string\">&#x27;)&#x27;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">int <span class=\"function\"><span class=\"title\">main</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//a1/b1 a2/b2</span></span><br><span class=\"line\">    scanf(<span class=\"string\">&quot;%lld/%lld %lld/%lld&quot;</span>,&amp;a1,&amp;b1,&amp;a2,&amp;b2);</span><br><span class=\"line\">   \t<span class=\"comment\">//加法</span></span><br><span class=\"line\">\tworkOut(a1,b1);</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot; + &quot;</span>;</span><br><span class=\"line\">    workOut(a2,b2);</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot; = &quot;</span>;</span><br><span class=\"line\">    workOut(a1 * b2 + a2 * b1, b1 * b2);</span><br><span class=\"line\">    cout &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"comment\">//减法</span></span><br><span class=\"line\">\tworkOut(a1, b1);</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot; - &quot;</span>;</span><br><span class=\"line\">\tworkOut(a2, b2);</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot; = &quot;</span>;</span><br><span class=\"line\">\tworkOut(a1 * b2 - a2 * b1,b1 * b2);</span><br><span class=\"line\">\tcout &lt;&lt; endl;</span><br><span class=\"line\">\t<span class=\"comment\">//乘法</span></span><br><span class=\"line\">\tworkOut(a1, b1);</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot; * &quot;</span>;</span><br><span class=\"line\">\tworkOut(a2, b2);</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot; = &quot;</span>;</span><br><span class=\"line\">\tworkOut(a1 * a2,b1 * b2);</span><br><span class=\"line\">\tcout &lt;&lt; endl;</span><br><span class=\"line\">\t<span class=\"comment\">//除法</span></span><br><span class=\"line\">\tworkOut(a1,b1);</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot; / &quot;</span>;</span><br><span class=\"line\">    workOut(a2,b2);</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot; = &quot;</span>;</span><br><span class=\"line\">    workOut(a1 * b2,b1 * a2);</span><br><span class=\"line\">\tcout &lt;&lt; endl;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n有一些语句是可以优化的。<br><span class=\"exturl\"><a class=\"exturl__link\"   href=\"https://pintia.cn/problem-sets/994805260223102976/problems/994805287624491008\" >题目链接</a><span class=\"exturl__icon\"><i class=\"fas fa-external-link-alt\"></i></span></span></li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"\n        <h3 id=\"题目\"   >\n          <a href=\"#题目\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h3>\n      <p>本题要求编写程序，计算 2 个有理数的和、差、积、商。（最难的题，往往有最简单的描述</p>\n\n        <h3 id=\"输入格式\"   >\n          <a href=\"#输入格式\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#输入格式\" class=\"headerlink\" title=\"输入格式\"></a>输入格式</h3>\n      <p>输入在一行中按照 a1/b1 a2/b2 的格式给出两个分数形式的有理数，其中分子和分母全是整型范围内的整数，负号只可能出现在分子前，分母不为 0。</p>\n\n        <h3 id=\"输出格式\"   >\n          <a href=\"#输出格式\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#输出格式\" class=\"headerlink\" title=\"输出格式\"></a>输出格式</h3>\n      <p>分别在 4 行中按照 有理数1 运算符 有理数2 = 结果 的格式顺序输出 2 个有理数的和、差、积、商。注意输出的每个有理数必须是该有理数的最简形式 k a/b，其中 k 是整数部分，a/b 是最简分数部分；若为负数，则须加括号；若除法分母为 0，则输出 Inf。题目保证正确的输出中没有超过整型范围的整数。</p>\n\n        <h3 id=\"样例\"   >\n          <a href=\"#样例\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#样例\" class=\"headerlink\" title=\"样例\"></a>样例</h3>\n      <p>输入样例1：</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">2</span>/<span class=\"number\">3</span> -<span class=\"number\">4</span>/<span class=\"number\">2</span></span><br></pre></td></tr></table></div></figure>\n<p>输出样例1：</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">2</span>/<span class=\"number\">3</span> + (-<span class=\"number\">2</span>) = (-<span class=\"number\">1</span> <span class=\"number\">1</span>/<span class=\"number\">3</span>)</span><br><span class=\"line\"><span class=\"number\">2</span>/<span class=\"number\">3</span> - (-<span class=\"number\">2</span>) = <span class=\"number\">2</span> <span class=\"number\">2</span>/<span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"number\">2</span>/<span class=\"number\">3</span> * (-<span class=\"number\">2</span>) = (-<span class=\"number\">1</span> <span class=\"number\">1</span>/<span class=\"number\">3</span>)</span><br><span class=\"line\"><span class=\"number\">2</span>/<span class=\"number\">3</span> / (-<span class=\"number\">2</span>) = (-<span class=\"number\">1</span>/<span class=\"number\">3</span>)</span><br></pre></td></tr></table></div></figure>\n<p>输入样例2：</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">5</span>/<span class=\"number\">3</span> <span class=\"number\">0</span>/<span class=\"number\">6</span></span><br></pre></td></tr></table></div></figure>\n<p>输出样例2：</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span> <span class=\"number\">2</span>/<span class=\"number\">3</span> + <span class=\"number\">0</span> = <span class=\"number\">1</span> <span class=\"number\">2</span>/<span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"number\">1</span> <span class=\"number\">2</span>/<span class=\"number\">3</span> - <span class=\"number\">0</span> = <span class=\"number\">1</span> <span class=\"number\">2</span>/<span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"number\">1</span> <span class=\"number\">2</span>/<span class=\"number\">3</span> * <span class=\"number\">0</span> = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"number\">1</span> <span class=\"number\">2</span>/<span class=\"number\">3</span> / <span class=\"number\">0</span> = Inf</span><br></pre></td></tr></table></div></figure>\n\n        <h3 id=\"思路\"   >\n          <a href=\"#思路\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3>\n      \n        <h4 id=\"gcd函数\"   >\n          <a href=\"#gcd函数\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#gcd函数\" class=\"headerlink\" title=\"gcd函数\"></a>gcd函数</h4>\n      <p>欧几里得算法，也就是高中数学书上的辗转相除法。他的核心是：<code>gcd(a,b) == gcd(b,a % b) </code>,而终止递归的条件就是b（除数）变为了0，这个时候已经返回了a,b的最大公约数。</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//gcd算法</span></span><br><span class=\"line\">int <span class=\"function\"><span class=\"title\">gcd</span>(<span class=\"params\">int a,int b</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(b == <span class=\"number\">0</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> gcd(b,a % b);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>还有个简版：</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">long long <span class=\"function\"><span class=\"title\">gcd</span>(<span class=\"params\">long long a,long long b</span>)</span> &#123;<span class=\"keyword\">return</span> b == <span class=\"number\">0</span> ? a : gcd(b,a % b);&#125;</span><br></pre></td></tr></table></div></figure>\n\n        <h4 id=\"注意点\"   >\n          <a href=\"#注意点\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#注意点\" class=\"headerlink\" title=\"注意点\"></a>注意点</h4>\n      <ol>\n<li>负数要有括号，为了判断是否为负数，用一个flag保存是否为负数，是de话就要输入括号与负号。</li>\n<li>假分数时的整数部分若为0不输出，但分子分母能整除时只输出整数部分</li>\n<li>分母为0时输出Inf，分子为0时输出0.记住一旦为0要return 直接跳出，不进行接下来的操作。（看了好久</li>\n<li>输入的记住用long long，数据有点大（a1*b1时可能爆掉）</li>\n<li>注意空格\n        <h4 id=\"代码：\"   >\n          <a href=\"#代码：\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#代码：\" class=\"headerlink\" title=\"代码：\"></a>代码：</h4>\n      gcd函数寻找最大公约数，workout函数进行格式化输出。<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//foreverking</span></span><br><span class=\"line\">#include &lt;vector&gt;</span><br><span class=\"line\">#include &lt;cstdio&gt;</span><br><span class=\"line\">#include &lt;queue&gt;</span><br><span class=\"line\">#include &lt;algorithm&gt;</span><br><span class=\"line\">#include &lt;cstring&gt;</span><br><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">#include &lt;cmath&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//分子和分母全是整型范围内的整数，负号只可能出现在分子前，分母不为 0</span></span><br><span class=\"line\">long long a1,a2,b1,b2;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//gcd,辗转相除求最大公约数</span></span><br><span class=\"line\">long long <span class=\"function\"><span class=\"title\">gcd</span>(<span class=\"params\">long long a,long long b</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//return b == 0 ? a : gcd(b,a % b);</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(b == <span class=\"number\">0</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> gcd(b,a % b);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//输出处理过后的数字</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"function\"><span class=\"title\">workOut</span>(<span class=\"params\">long long m,long long n</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//判断有0没</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(m * n == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(m == <span class=\"number\">0</span>) cout &lt;&lt; <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(n == <span class=\"number\">0</span>) cout &lt;&lt; <span class=\"string\">&quot;Inf&quot;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//这是一个负数，注意负号要在分子，而且负号有括号</span></span><br><span class=\"line\">    bool flag = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>((m &lt; <span class=\"number\">0</span> &amp;&amp; n &gt; <span class=\"number\">0</span>) || (m &gt; <span class=\"number\">0</span> &amp;&amp; n &lt; <span class=\"number\">0</span>))</span><br><span class=\"line\">        flag = <span class=\"number\">1</span>;;<span class=\"comment\">//是负数则flag为1</span></span><br><span class=\"line\">    m = abs(m);</span><br><span class=\"line\">    n = abs(n);<span class=\"comment\">//都取绝对值</span></span><br><span class=\"line\">    long long num = m / n;<span class=\"comment\">//如果是带分数，那么这是整数部分</span></span><br><span class=\"line\">    long long x = gcd(m,n);<span class=\"comment\">//最大公约数</span></span><br><span class=\"line\">    m /= x;</span><br><span class=\"line\">    n /= x;<span class=\"comment\">//得出约分后的分子分母</span></span><br><span class=\"line\">    m = m - num * n;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(flag == <span class=\"number\">1</span>) cout &lt;&lt; <span class=\"string\">&quot;(-&quot;</span>;<span class=\"comment\">//实际负数，输出括号与负号</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(num != <span class=\"number\">0</span>) cout &lt;&lt; num;<span class=\"comment\">//有整数部分，输出</span></span><br><span class=\"line\">    <span class=\"comment\">//可以整除，没有分数部分了，是负数就输出括号，不是直接返回了</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(m % n== <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(flag == <span class=\"number\">1</span>) cout &lt;&lt; <span class=\"string\">&#x27;)&#x27;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(num != <span class=\"number\">0</span>) cout &lt;&lt; <span class=\"string\">&#x27; &#x27;</span>;</span><br><span class=\"line\">    cout &lt;&lt; m &lt;&lt; <span class=\"string\">&#x27;/&#x27;</span> &lt;&lt; n;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(flag == <span class=\"number\">1</span>) cout &lt;&lt; <span class=\"string\">&#x27;)&#x27;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">int <span class=\"function\"><span class=\"title\">main</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//a1/b1 a2/b2</span></span><br><span class=\"line\">    scanf(<span class=\"string\">&quot;%lld/%lld %lld/%lld&quot;</span>,&amp;a1,&amp;b1,&amp;a2,&amp;b2);</span><br><span class=\"line\">   \t<span class=\"comment\">//加法</span></span><br><span class=\"line\">\tworkOut(a1,b1);</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot; + &quot;</span>;</span><br><span class=\"line\">    workOut(a2,b2);</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot; = &quot;</span>;</span><br><span class=\"line\">    workOut(a1 * b2 + a2 * b1, b1 * b2);</span><br><span class=\"line\">    cout &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"comment\">//减法</span></span><br><span class=\"line\">\tworkOut(a1, b1);</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot; - &quot;</span>;</span><br><span class=\"line\">\tworkOut(a2, b2);</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot; = &quot;</span>;</span><br><span class=\"line\">\tworkOut(a1 * b2 - a2 * b1,b1 * b2);</span><br><span class=\"line\">\tcout &lt;&lt; endl;</span><br><span class=\"line\">\t<span class=\"comment\">//乘法</span></span><br><span class=\"line\">\tworkOut(a1, b1);</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot; * &quot;</span>;</span><br><span class=\"line\">\tworkOut(a2, b2);</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot; = &quot;</span>;</span><br><span class=\"line\">\tworkOut(a1 * a2,b1 * b2);</span><br><span class=\"line\">\tcout &lt;&lt; endl;</span><br><span class=\"line\">\t<span class=\"comment\">//除法</span></span><br><span class=\"line\">\tworkOut(a1,b1);</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot; / &quot;</span>;</span><br><span class=\"line\">    workOut(a2,b2);</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot; = &quot;</span>;</span><br><span class=\"line\">    workOut(a1 * b2,b1 * a2);</span><br><span class=\"line\">\tcout &lt;&lt; endl;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n有一些语句是可以优化的。<br><span class=\"exturl\"><a class=\"exturl__link\"   href=\"https://pintia.cn/problem-sets/994805260223102976/problems/994805287624491008\" >题目链接</a><span class=\"exturl__icon\"><i class=\"fas fa-external-link-alt\"></i></span></span></li>\n</ol>\n"},{"title":"PAT乙级1037","date":"2021-05-18T06:35:29.000Z","_content":"### 题目\n如果你是哈利·波特迷，你会知道魔法世界有它自己的货币系统 —— 就如海格告诉哈利的：“十七个银西可(Sickle)兑一个加隆(Galleon)，二十九个纳特(Knut)兑一个西可，很容易。”现在，给定哈利应付的价钱 P 和他实付的钱 A，你的任务是写一个程序来计算他应该被找的零钱。\n### 输入格式：\n输入在 1 行中分别给出 P 和 A，格式为 Galleon.Sickle.Knut，其间用 1 个空格分隔。这里 Galleon 是 [0, 10^7] 区间内的整数，Sickle 是 [0, 17) 区间内的整数，Knut 是 [0, 29) 区间内的整数。\n\n### 输出格式\n在一行中用与输入同样的格式输出哈利应该被找的零钱。如果他没带够钱，那么输出的应该是负数。\n\n### 思路\n将所有的钱币都转化为最小的特纳进行运算，计算后再转化为` Galleon.Sickle.Knut`的形式。测试点存在哈利给的钱不够的情况，所以要判断一下，的确不够的话需要输出负号，再swap两个钱的值就可以了。\n\n输入格式注意，使用scanf,以\".\"为分界\n\n```js\n//foreverking\n#include <vector>\n#include <cstdio>\n#include <queue>\n#include <algorithm>\n#include <cstring>\n#include <iostream>\n#include <cmath>\nusing namespace std;\n\n\n//十七个银西可(Sickle)兑一个加隆(Galleon)，二十九个纳特(Knut)兑一个西可\nint a,b,c,o,p,q;//abc:应付 opq：实付\n\nint main(){\n    scanf(\"%d.%d.%d %d.%d.%d\",&a, &b, &c, &o, &p, &q);\n    int sum1,sum2;//全部转化为特纳的总数\n    sum2 = a * 17 * 29 + b * 29 + c;\n    sum1 = o * 17 * 29 + p * 29 + q;\n    if(sum1 < sum2){\n        cout << \"-\";\n        swap(sum1,sum2);\n    }\n    int res = sum1 - sum2;\n    int m = res / 493;\n    int n = (res - m * 493) / 29;\n    int t = (res - m * 493- n * 29);\n    cout << m << \".\" << n << \".\" << t << endl;\n}\n```\n[题目链接](https://pintia.cn/problem-sets/994805260223102976/problems/994805284923359232)","source":"_posts/PAT乙级1037.md","raw":"---\ntitle: PAT乙级1037\ndate: 2021-05-18 14:35:29\ntags: \n    - Study\ncategories: \n    - 题解\n    - PAT题解\n---\n### 题目\n如果你是哈利·波特迷，你会知道魔法世界有它自己的货币系统 —— 就如海格告诉哈利的：“十七个银西可(Sickle)兑一个加隆(Galleon)，二十九个纳特(Knut)兑一个西可，很容易。”现在，给定哈利应付的价钱 P 和他实付的钱 A，你的任务是写一个程序来计算他应该被找的零钱。\n### 输入格式：\n输入在 1 行中分别给出 P 和 A，格式为 Galleon.Sickle.Knut，其间用 1 个空格分隔。这里 Galleon 是 [0, 10^7] 区间内的整数，Sickle 是 [0, 17) 区间内的整数，Knut 是 [0, 29) 区间内的整数。\n\n### 输出格式\n在一行中用与输入同样的格式输出哈利应该被找的零钱。如果他没带够钱，那么输出的应该是负数。\n\n### 思路\n将所有的钱币都转化为最小的特纳进行运算，计算后再转化为` Galleon.Sickle.Knut`的形式。测试点存在哈利给的钱不够的情况，所以要判断一下，的确不够的话需要输出负号，再swap两个钱的值就可以了。\n\n输入格式注意，使用scanf,以\".\"为分界\n\n```js\n//foreverking\n#include <vector>\n#include <cstdio>\n#include <queue>\n#include <algorithm>\n#include <cstring>\n#include <iostream>\n#include <cmath>\nusing namespace std;\n\n\n//十七个银西可(Sickle)兑一个加隆(Galleon)，二十九个纳特(Knut)兑一个西可\nint a,b,c,o,p,q;//abc:应付 opq：实付\n\nint main(){\n    scanf(\"%d.%d.%d %d.%d.%d\",&a, &b, &c, &o, &p, &q);\n    int sum1,sum2;//全部转化为特纳的总数\n    sum2 = a * 17 * 29 + b * 29 + c;\n    sum1 = o * 17 * 29 + p * 29 + q;\n    if(sum1 < sum2){\n        cout << \"-\";\n        swap(sum1,sum2);\n    }\n    int res = sum1 - sum2;\n    int m = res / 493;\n    int n = (res - m * 493) / 29;\n    int t = (res - m * 493- n * 29);\n    cout << m << \".\" << n << \".\" << t << endl;\n}\n```\n[题目链接](https://pintia.cn/problem-sets/994805260223102976/problems/994805284923359232)","slug":"PAT乙级1037","published":1,"updated":"2021-05-18T06:36:47.144Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktvk78fc001o1cwshjuc13ji","content":"\n        <h3 id=\"题目\"   >\n          <a href=\"#题目\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h3>\n      <p>如果你是哈利·波特迷，你会知道魔法世界有它自己的货币系统 —— 就如海格告诉哈利的：“十七个银西可(Sickle)兑一个加隆(Galleon)，二十九个纳特(Knut)兑一个西可，很容易。”现在，给定哈利应付的价钱 P 和他实付的钱 A，你的任务是写一个程序来计算他应该被找的零钱。</p>\n\n        <h3 id=\"输入格式：\"   >\n          <a href=\"#输入格式：\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#输入格式：\" class=\"headerlink\" title=\"输入格式：\"></a>输入格式：</h3>\n      <p>输入在 1 行中分别给出 P 和 A，格式为 Galleon.Sickle.Knut，其间用 1 个空格分隔。这里 Galleon 是 [0, 10^7] 区间内的整数，Sickle 是 [0, 17) 区间内的整数，Knut 是 [0, 29) 区间内的整数。</p>\n\n        <h3 id=\"输出格式\"   >\n          <a href=\"#输出格式\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#输出格式\" class=\"headerlink\" title=\"输出格式\"></a>输出格式</h3>\n      <p>在一行中用与输入同样的格式输出哈利应该被找的零钱。如果他没带够钱，那么输出的应该是负数。</p>\n\n        <h3 id=\"思路\"   >\n          <a href=\"#思路\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3>\n      <p>将所有的钱币都转化为最小的特纳进行运算，计算后再转化为<code> Galleon.Sickle.Knut</code>的形式。测试点存在哈利给的钱不够的情况，所以要判断一下，的确不够的话需要输出负号，再swap两个钱的值就可以了。</p>\n<p>输入格式注意，使用scanf,以”.”为分界</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//foreverking</span></span><br><span class=\"line\">#include &lt;vector&gt;</span><br><span class=\"line\">#include &lt;cstdio&gt;</span><br><span class=\"line\">#include &lt;queue&gt;</span><br><span class=\"line\">#include &lt;algorithm&gt;</span><br><span class=\"line\">#include &lt;cstring&gt;</span><br><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">#include &lt;cmath&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//十七个银西可(Sickle)兑一个加隆(Galleon)，二十九个纳特(Knut)兑一个西可</span></span><br><span class=\"line\">int a,b,c,o,p,q;<span class=\"comment\">//abc:应付 opq：实付</span></span><br><span class=\"line\"></span><br><span class=\"line\">int <span class=\"function\"><span class=\"title\">main</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    scanf(<span class=\"string\">&quot;%d.%d.%d %d.%d.%d&quot;</span>,&amp;a, &amp;b, &amp;c, &amp;o, &amp;p, &amp;q);</span><br><span class=\"line\">    int sum1,sum2;<span class=\"comment\">//全部转化为特纳的总数</span></span><br><span class=\"line\">    sum2 = a * <span class=\"number\">17</span> * <span class=\"number\">29</span> + b * <span class=\"number\">29</span> + c;</span><br><span class=\"line\">    sum1 = o * <span class=\"number\">17</span> * <span class=\"number\">29</span> + p * <span class=\"number\">29</span> + q;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(sum1 &lt; sum2)&#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;-&quot;</span>;</span><br><span class=\"line\">        swap(sum1,sum2);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    int res = sum1 - sum2;</span><br><span class=\"line\">    int m = res / <span class=\"number\">493</span>;</span><br><span class=\"line\">    int n = (res - m * <span class=\"number\">493</span>) / <span class=\"number\">29</span>;</span><br><span class=\"line\">    int t = (res - m * <span class=\"number\">493</span>- n * <span class=\"number\">29</span>);</span><br><span class=\"line\">    cout &lt;&lt; m &lt;&lt; <span class=\"string\">&quot;.&quot;</span> &lt;&lt; n &lt;&lt; <span class=\"string\">&quot;.&quot;</span> &lt;&lt; t &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p><span class=\"exturl\"><a class=\"exturl__link\"   href=\"https://pintia.cn/problem-sets/994805260223102976/problems/994805284923359232\" >题目链接</a><span class=\"exturl__icon\"><i class=\"fas fa-external-link-alt\"></i></span></span></p>\n","site":{"data":{}},"excerpt":"","more":"\n        <h3 id=\"题目\"   >\n          <a href=\"#题目\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h3>\n      <p>如果你是哈利·波特迷，你会知道魔法世界有它自己的货币系统 —— 就如海格告诉哈利的：“十七个银西可(Sickle)兑一个加隆(Galleon)，二十九个纳特(Knut)兑一个西可，很容易。”现在，给定哈利应付的价钱 P 和他实付的钱 A，你的任务是写一个程序来计算他应该被找的零钱。</p>\n\n        <h3 id=\"输入格式：\"   >\n          <a href=\"#输入格式：\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#输入格式：\" class=\"headerlink\" title=\"输入格式：\"></a>输入格式：</h3>\n      <p>输入在 1 行中分别给出 P 和 A，格式为 Galleon.Sickle.Knut，其间用 1 个空格分隔。这里 Galleon 是 [0, 10^7] 区间内的整数，Sickle 是 [0, 17) 区间内的整数，Knut 是 [0, 29) 区间内的整数。</p>\n\n        <h3 id=\"输出格式\"   >\n          <a href=\"#输出格式\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#输出格式\" class=\"headerlink\" title=\"输出格式\"></a>输出格式</h3>\n      <p>在一行中用与输入同样的格式输出哈利应该被找的零钱。如果他没带够钱，那么输出的应该是负数。</p>\n\n        <h3 id=\"思路\"   >\n          <a href=\"#思路\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3>\n      <p>将所有的钱币都转化为最小的特纳进行运算，计算后再转化为<code> Galleon.Sickle.Knut</code>的形式。测试点存在哈利给的钱不够的情况，所以要判断一下，的确不够的话需要输出负号，再swap两个钱的值就可以了。</p>\n<p>输入格式注意，使用scanf,以”.”为分界</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//foreverking</span></span><br><span class=\"line\">#include &lt;vector&gt;</span><br><span class=\"line\">#include &lt;cstdio&gt;</span><br><span class=\"line\">#include &lt;queue&gt;</span><br><span class=\"line\">#include &lt;algorithm&gt;</span><br><span class=\"line\">#include &lt;cstring&gt;</span><br><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">#include &lt;cmath&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//十七个银西可(Sickle)兑一个加隆(Galleon)，二十九个纳特(Knut)兑一个西可</span></span><br><span class=\"line\">int a,b,c,o,p,q;<span class=\"comment\">//abc:应付 opq：实付</span></span><br><span class=\"line\"></span><br><span class=\"line\">int <span class=\"function\"><span class=\"title\">main</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    scanf(<span class=\"string\">&quot;%d.%d.%d %d.%d.%d&quot;</span>,&amp;a, &amp;b, &amp;c, &amp;o, &amp;p, &amp;q);</span><br><span class=\"line\">    int sum1,sum2;<span class=\"comment\">//全部转化为特纳的总数</span></span><br><span class=\"line\">    sum2 = a * <span class=\"number\">17</span> * <span class=\"number\">29</span> + b * <span class=\"number\">29</span> + c;</span><br><span class=\"line\">    sum1 = o * <span class=\"number\">17</span> * <span class=\"number\">29</span> + p * <span class=\"number\">29</span> + q;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(sum1 &lt; sum2)&#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;-&quot;</span>;</span><br><span class=\"line\">        swap(sum1,sum2);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    int res = sum1 - sum2;</span><br><span class=\"line\">    int m = res / <span class=\"number\">493</span>;</span><br><span class=\"line\">    int n = (res - m * <span class=\"number\">493</span>) / <span class=\"number\">29</span>;</span><br><span class=\"line\">    int t = (res - m * <span class=\"number\">493</span>- n * <span class=\"number\">29</span>);</span><br><span class=\"line\">    cout &lt;&lt; m &lt;&lt; <span class=\"string\">&quot;.&quot;</span> &lt;&lt; n &lt;&lt; <span class=\"string\">&quot;.&quot;</span> &lt;&lt; t &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p><span class=\"exturl\"><a class=\"exturl__link\"   href=\"https://pintia.cn/problem-sets/994805260223102976/problems/994805284923359232\" >题目链接</a><span class=\"exturl__icon\"><i class=\"fas fa-external-link-alt\"></i></span></span></p>\n"},{"title":"PAT乙级1038","date":"2021-05-19T08:35:21.000Z","_content":"### 题目：\n1038 统计同成绩学生 (20 分)\n本题要求读入 N 名学生的成绩，将获得某一给定分数的学生人数输出。\n### 输入格式：\n输入在第 1 行给出不超过 10^5 的正整数 N，即学生总人数。随后一行给出 N 名学生的百分制整数成绩，中间以空格分隔。最后一行给出要查询的分数个数 K（不超过 N 的正整数），随后是 K 个分数，中间以空格分隔。\n### 输出格式\n在一行中按查询顺序给出得分等于指定分数的学生人数，中间以空格分隔，但行末不得有多余空格。\n### 思路\n这道题是桶排序的思想。\n> 桶排序是所有排序中最简单的排序之一。桶排序重要的是它的思想，而不是具体实现，那么什么是桶排序呢？<br>\n> 百科是这样说的：桶排序的工作的原理是将数组分到有限数量的桶子里。每个桶子再个别排序（有可能再使用别的排序算法或是以递归方式继续使用桶排序进行排序）。桶排序是鸽巢排序的一种归纳结果。当要被排序的数组内的数值是均匀分配的时候，桶排序使用线性时间（Θ（n））。但桶排序并不是 比较排序，他不受到 O(n log n) 下限的影响。<br>\n> 其实就是将待排序的序列分到若干个桶中，每个桶内的元素再进行个别排序。\n这道题就是将相同分数的人都放在一个桶里，而用数组来表示各个桶。\n\n```js\n//foreverking\n#include <vector>\n#include <cstdio>\n#include <queue>\n#include <algorithm>\n#include <cstring>\n#include <iostream>\n#include <cmath>\nusing namespace std;\n\nint n,k;\n\nint main() {\n    cin >> n;\n    vector<int> v(101);\n    for (int i = 0; i < n; i++){\n        /* code */\n        int x;\n        cin >> x;\n        v[x]++;\n    }\n    cin >> k;\n    for(int i = 0; i < k; i++){\n        int temp;\n        cin >> temp;\n        if(i != 0)\n            cout << \" \";\n        cout << v[temp];\n    }\n    cout << endl;\n    return 0;\n}\n```\n[题目链接](https://pintia.cn/problem-sets/994805260223102976/problems/994805284092887040)","source":"_posts/PAT乙级1038.md","raw":"---\ntitle: PAT乙级1038\ndate: 2021-05-19 16:35:21\ntags: \n    - Study\ncategories: \n    - 题解\n    - PAT题解\n---\n### 题目：\n1038 统计同成绩学生 (20 分)\n本题要求读入 N 名学生的成绩，将获得某一给定分数的学生人数输出。\n### 输入格式：\n输入在第 1 行给出不超过 10^5 的正整数 N，即学生总人数。随后一行给出 N 名学生的百分制整数成绩，中间以空格分隔。最后一行给出要查询的分数个数 K（不超过 N 的正整数），随后是 K 个分数，中间以空格分隔。\n### 输出格式\n在一行中按查询顺序给出得分等于指定分数的学生人数，中间以空格分隔，但行末不得有多余空格。\n### 思路\n这道题是桶排序的思想。\n> 桶排序是所有排序中最简单的排序之一。桶排序重要的是它的思想，而不是具体实现，那么什么是桶排序呢？<br>\n> 百科是这样说的：桶排序的工作的原理是将数组分到有限数量的桶子里。每个桶子再个别排序（有可能再使用别的排序算法或是以递归方式继续使用桶排序进行排序）。桶排序是鸽巢排序的一种归纳结果。当要被排序的数组内的数值是均匀分配的时候，桶排序使用线性时间（Θ（n））。但桶排序并不是 比较排序，他不受到 O(n log n) 下限的影响。<br>\n> 其实就是将待排序的序列分到若干个桶中，每个桶内的元素再进行个别排序。\n这道题就是将相同分数的人都放在一个桶里，而用数组来表示各个桶。\n\n```js\n//foreverking\n#include <vector>\n#include <cstdio>\n#include <queue>\n#include <algorithm>\n#include <cstring>\n#include <iostream>\n#include <cmath>\nusing namespace std;\n\nint n,k;\n\nint main() {\n    cin >> n;\n    vector<int> v(101);\n    for (int i = 0; i < n; i++){\n        /* code */\n        int x;\n        cin >> x;\n        v[x]++;\n    }\n    cin >> k;\n    for(int i = 0; i < k; i++){\n        int temp;\n        cin >> temp;\n        if(i != 0)\n            cout << \" \";\n        cout << v[temp];\n    }\n    cout << endl;\n    return 0;\n}\n```\n[题目链接](https://pintia.cn/problem-sets/994805260223102976/problems/994805284092887040)","slug":"PAT乙级1038","published":1,"updated":"2021-05-19T08:35:46.818Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktvk78fd001r1cwsc3ex2u57","content":"\n        <h3 id=\"题目：\"   >\n          <a href=\"#题目：\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#题目：\" class=\"headerlink\" title=\"题目：\"></a>题目：</h3>\n      <p>1038 统计同成绩学生 (20 分)<br>本题要求读入 N 名学生的成绩，将获得某一给定分数的学生人数输出。</p>\n\n        <h3 id=\"输入格式：\"   >\n          <a href=\"#输入格式：\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#输入格式：\" class=\"headerlink\" title=\"输入格式：\"></a>输入格式：</h3>\n      <p>输入在第 1 行给出不超过 10^5 的正整数 N，即学生总人数。随后一行给出 N 名学生的百分制整数成绩，中间以空格分隔。最后一行给出要查询的分数个数 K（不超过 N 的正整数），随后是 K 个分数，中间以空格分隔。</p>\n\n        <h3 id=\"输出格式\"   >\n          <a href=\"#输出格式\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#输出格式\" class=\"headerlink\" title=\"输出格式\"></a>输出格式</h3>\n      <p>在一行中按查询顺序给出得分等于指定分数的学生人数，中间以空格分隔，但行末不得有多余空格。</p>\n\n        <h3 id=\"思路\"   >\n          <a href=\"#思路\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3>\n      <p>这道题是桶排序的思想。</p>\n<blockquote>\n<p>桶排序是所有排序中最简单的排序之一。桶排序重要的是它的思想，而不是具体实现，那么什么是桶排序呢？<br><br>百科是这样说的：桶排序的工作的原理是将数组分到有限数量的桶子里。每个桶子再个别排序（有可能再使用别的排序算法或是以递归方式继续使用桶排序进行排序）。桶排序是鸽巢排序的一种归纳结果。当要被排序的数组内的数值是均匀分配的时候，桶排序使用线性时间（Θ（n））。但桶排序并不是 比较排序，他不受到 O(n log n) 下限的影响。<br><br>其实就是将待排序的序列分到若干个桶中，每个桶内的元素再进行个别排序。<br>这道题就是将相同分数的人都放在一个桶里，而用数组来表示各个桶。</p>\n</blockquote>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//foreverking</span></span><br><span class=\"line\">#include &lt;vector&gt;</span><br><span class=\"line\">#include &lt;cstdio&gt;</span><br><span class=\"line\">#include &lt;queue&gt;</span><br><span class=\"line\">#include &lt;algorithm&gt;</span><br><span class=\"line\">#include &lt;cstring&gt;</span><br><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">#include &lt;cmath&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\"></span><br><span class=\"line\">int n,k;</span><br><span class=\"line\"></span><br><span class=\"line\">int <span class=\"function\"><span class=\"title\">main</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    cin &gt;&gt; n;</span><br><span class=\"line\">    vector&lt;int&gt; v(<span class=\"number\">101</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (int i = <span class=\"number\">0</span>; i &lt; n; i++)&#123;</span><br><span class=\"line\">        <span class=\"comment\">/* code */</span></span><br><span class=\"line\">        int x;</span><br><span class=\"line\">        cin &gt;&gt; x;</span><br><span class=\"line\">        v[x]++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cin &gt;&gt; k;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(int i = <span class=\"number\">0</span>; i &lt; k; i++)&#123;</span><br><span class=\"line\">        int temp;</span><br><span class=\"line\">        cin &gt;&gt; temp;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i != <span class=\"number\">0</span>)</span><br><span class=\"line\">            cout &lt;&lt; <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">        cout &lt;&lt; v[temp];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p><span class=\"exturl\"><a class=\"exturl__link\"   href=\"https://pintia.cn/problem-sets/994805260223102976/problems/994805284092887040\" >题目链接</a><span class=\"exturl__icon\"><i class=\"fas fa-external-link-alt\"></i></span></span></p>\n","site":{"data":{}},"excerpt":"","more":"\n        <h3 id=\"题目：\"   >\n          <a href=\"#题目：\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#题目：\" class=\"headerlink\" title=\"题目：\"></a>题目：</h3>\n      <p>1038 统计同成绩学生 (20 分)<br>本题要求读入 N 名学生的成绩，将获得某一给定分数的学生人数输出。</p>\n\n        <h3 id=\"输入格式：\"   >\n          <a href=\"#输入格式：\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#输入格式：\" class=\"headerlink\" title=\"输入格式：\"></a>输入格式：</h3>\n      <p>输入在第 1 行给出不超过 10^5 的正整数 N，即学生总人数。随后一行给出 N 名学生的百分制整数成绩，中间以空格分隔。最后一行给出要查询的分数个数 K（不超过 N 的正整数），随后是 K 个分数，中间以空格分隔。</p>\n\n        <h3 id=\"输出格式\"   >\n          <a href=\"#输出格式\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#输出格式\" class=\"headerlink\" title=\"输出格式\"></a>输出格式</h3>\n      <p>在一行中按查询顺序给出得分等于指定分数的学生人数，中间以空格分隔，但行末不得有多余空格。</p>\n\n        <h3 id=\"思路\"   >\n          <a href=\"#思路\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3>\n      <p>这道题是桶排序的思想。</p>\n<blockquote>\n<p>桶排序是所有排序中最简单的排序之一。桶排序重要的是它的思想，而不是具体实现，那么什么是桶排序呢？<br><br>百科是这样说的：桶排序的工作的原理是将数组分到有限数量的桶子里。每个桶子再个别排序（有可能再使用别的排序算法或是以递归方式继续使用桶排序进行排序）。桶排序是鸽巢排序的一种归纳结果。当要被排序的数组内的数值是均匀分配的时候，桶排序使用线性时间（Θ（n））。但桶排序并不是 比较排序，他不受到 O(n log n) 下限的影响。<br><br>其实就是将待排序的序列分到若干个桶中，每个桶内的元素再进行个别排序。<br>这道题就是将相同分数的人都放在一个桶里，而用数组来表示各个桶。</p>\n</blockquote>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//foreverking</span></span><br><span class=\"line\">#include &lt;vector&gt;</span><br><span class=\"line\">#include &lt;cstdio&gt;</span><br><span class=\"line\">#include &lt;queue&gt;</span><br><span class=\"line\">#include &lt;algorithm&gt;</span><br><span class=\"line\">#include &lt;cstring&gt;</span><br><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">#include &lt;cmath&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\"></span><br><span class=\"line\">int n,k;</span><br><span class=\"line\"></span><br><span class=\"line\">int <span class=\"function\"><span class=\"title\">main</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    cin &gt;&gt; n;</span><br><span class=\"line\">    vector&lt;int&gt; v(<span class=\"number\">101</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (int i = <span class=\"number\">0</span>; i &lt; n; i++)&#123;</span><br><span class=\"line\">        <span class=\"comment\">/* code */</span></span><br><span class=\"line\">        int x;</span><br><span class=\"line\">        cin &gt;&gt; x;</span><br><span class=\"line\">        v[x]++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cin &gt;&gt; k;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(int i = <span class=\"number\">0</span>; i &lt; k; i++)&#123;</span><br><span class=\"line\">        int temp;</span><br><span class=\"line\">        cin &gt;&gt; temp;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i != <span class=\"number\">0</span>)</span><br><span class=\"line\">            cout &lt;&lt; <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">        cout &lt;&lt; v[temp];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p><span class=\"exturl\"><a class=\"exturl__link\"   href=\"https://pintia.cn/problem-sets/994805260223102976/problems/994805284092887040\" >题目链接</a><span class=\"exturl__icon\"><i class=\"fas fa-external-link-alt\"></i></span></span></p>\n"},{"title":"PAT乙级1039","date":"2021-05-19T10:47:22.000Z","_content":"### 题目\n小红想买些珠子做一串自己喜欢的珠串。卖珠子的摊主有很多串五颜六色的珠串，但是不肯把任何一串拆散了卖。于是小红要你帮忙判断一下，某串珠子里是否包含了全部自己想要的珠子？如果是，那么告诉她有多少多余的珠子；如果不是，那么告诉她缺了多少珠子。\n\n为方便起见，我们用[0-9]、[a-z]、[A-Z]范围内的字符来表示颜色。例如在图中，第3串是小红想做的珠串；那么第1串可以买，因为包含了全部她想要的珠子，还多了8颗不需要的珠子；第2串不能买，因为没有黑色珠子，并且少了一颗红色的珠子。\n\n![image.png](https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d3de215ebdf940ba9695d0216d9e6214~tplv-k3u1fbpfcp-watermark.image)\n### 输入格式\n每个输入包含 1 个测试用例。每个测试用例分别在 2 行中先后给出摊主的珠串和小红想做的珠串，两串都不超过 1000 个珠子。\n### 输出格式\n如果可以买，则在一行中输出 Yes 以及有多少多余的珠子；如果不可以买，则在一行中输出 No 以及缺了多少珠子。其间以 1 个空格分隔。\n### 思路\n差不多还是桶排序的思维，将店家有的和小红想要的各个珠子种类数量分别存在两个数组中。因为用[0-9]、[a-z]、[A-Z]范围内的字符来表示颜色，那么只需要开62位置的数组作为桶便可以装下了。\n[~~数字存在count数组的前十位小写字母存在count数组的11~35位大写字母存在cout数组的36~62位~~]<br>\n然后遍历0~62找一找够还是不够，有一个不够就开始统计差了几个，不然就在最后输出s1,s2的长度差值。\n\n```js\n//foreverking\n#include <vector>\n#include <cstdio>\n#include <queue>\n#include <algorithm>\n#include <cstring>\n#include <iostream>\n#include <cmath>\nusing namespace std;\n//如果是，那么告诉她有多少多余的珠子；如果不是，那么告诉她缺了多少珠子\n\nstring s1,s2;\nint cnt;\nint count1[100],count2[100];//也可以开的很大，这样后面可以全部直接存入，不需 -'0'等操作\n\n//统计各个字符数字出现的次数\nvoid countSize(string s,int count[]){\n    int len = s.size();\n    for(int i = 0;i < len; i++){\n        if(s[i] - '0' >= 0 && s[i] - '9' <= 0)\n\t\t\tcount[s[i] - '0']++;//数字存在count数组的前十位\n\t    else if (s[i] - 'a' >= 0 && s[i] - 'z' <= 0)\n\t\t\tcount[s[i] - 'a' + 10]++;//小写字母存在count数组的11~35位\n\t\telse\n\t\t\tcount[s[i] - 'A' + 36]++;//大写字母存在cout数组的36~62位\n    }\n}\n\nint main() {\n    cin >> s1 >> s2;\n    bool flag = 1;//1代表可以，否则为0\n    countSize(s1,count1);\n    countSize(s2,count2);\n\n    for(int i = 0; i < 62; i++){\n        if(count2[i] != 0 && count2[i] > count1[i]){\n            cnt += count2[i] - count1[i];\n            flag = 0;\n        }\n    }\n    if(!flag){\n        cout << \"No \" << cnt << endl;\n    }\n    else{\n        int len = s1.size() - s2.size();\n        cout << \"Yes \" << len << endl;\n    }\n\n    return 0;\n}\n```\n你觉得这样太麻烦，不想去转化，也可以只开一个很大的数组，至少比Z的编码大，将店家的s1存入，再遍历小红的需求s2，找够还是不够。\n\n```js\n//foreverking\n#include <vector>\n#include <cstdio>\n#include <queue>\n#include <algorithm>\n#include <cstring>\n#include <iostream>\n#include <cmath>\nusing namespace std;\n\n\nstring s1,s2;\nint count1[300];\nint cnt;\n\nint main(){\n    cin >> s1 >> s2;\n    //店家的存入\n    for (int i = 0; i < s1.length(); i++)\n        count1[s1[i]]++;\n    \n    for(int i = 0; i < s2.size(); i++){\n        if(count1[s2[i]] > 0)\n            count1[s2[i]]--;//店家有这个珠子，减去一颗\n        else\n            cnt++;//店家没有，那么统计一下不够的\n    }\n    if(!cnt){\n        int len = s1.size() - s2.size();\n        cout << \"Yes \" << len << endl;\n    }\n    else\n        cout << \"No \" << cnt << endl;\n\n    return 0;\n}\n```\n[题目链接](https://pintia.cn/problem-sets/994805260223102976/problems/994805283241443328)","source":"_posts/PAT乙级1039.md","raw":"---\ntitle: PAT乙级1039\ndate: 2021-05-19 18:47:22\ntags: \n    - Study\ncategories: \n    - 题解\n    - PAT题解\n---\n### 题目\n小红想买些珠子做一串自己喜欢的珠串。卖珠子的摊主有很多串五颜六色的珠串，但是不肯把任何一串拆散了卖。于是小红要你帮忙判断一下，某串珠子里是否包含了全部自己想要的珠子？如果是，那么告诉她有多少多余的珠子；如果不是，那么告诉她缺了多少珠子。\n\n为方便起见，我们用[0-9]、[a-z]、[A-Z]范围内的字符来表示颜色。例如在图中，第3串是小红想做的珠串；那么第1串可以买，因为包含了全部她想要的珠子，还多了8颗不需要的珠子；第2串不能买，因为没有黑色珠子，并且少了一颗红色的珠子。\n\n![image.png](https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d3de215ebdf940ba9695d0216d9e6214~tplv-k3u1fbpfcp-watermark.image)\n### 输入格式\n每个输入包含 1 个测试用例。每个测试用例分别在 2 行中先后给出摊主的珠串和小红想做的珠串，两串都不超过 1000 个珠子。\n### 输出格式\n如果可以买，则在一行中输出 Yes 以及有多少多余的珠子；如果不可以买，则在一行中输出 No 以及缺了多少珠子。其间以 1 个空格分隔。\n### 思路\n差不多还是桶排序的思维，将店家有的和小红想要的各个珠子种类数量分别存在两个数组中。因为用[0-9]、[a-z]、[A-Z]范围内的字符来表示颜色，那么只需要开62位置的数组作为桶便可以装下了。\n[~~数字存在count数组的前十位小写字母存在count数组的11~35位大写字母存在cout数组的36~62位~~]<br>\n然后遍历0~62找一找够还是不够，有一个不够就开始统计差了几个，不然就在最后输出s1,s2的长度差值。\n\n```js\n//foreverking\n#include <vector>\n#include <cstdio>\n#include <queue>\n#include <algorithm>\n#include <cstring>\n#include <iostream>\n#include <cmath>\nusing namespace std;\n//如果是，那么告诉她有多少多余的珠子；如果不是，那么告诉她缺了多少珠子\n\nstring s1,s2;\nint cnt;\nint count1[100],count2[100];//也可以开的很大，这样后面可以全部直接存入，不需 -'0'等操作\n\n//统计各个字符数字出现的次数\nvoid countSize(string s,int count[]){\n    int len = s.size();\n    for(int i = 0;i < len; i++){\n        if(s[i] - '0' >= 0 && s[i] - '9' <= 0)\n\t\t\tcount[s[i] - '0']++;//数字存在count数组的前十位\n\t    else if (s[i] - 'a' >= 0 && s[i] - 'z' <= 0)\n\t\t\tcount[s[i] - 'a' + 10]++;//小写字母存在count数组的11~35位\n\t\telse\n\t\t\tcount[s[i] - 'A' + 36]++;//大写字母存在cout数组的36~62位\n    }\n}\n\nint main() {\n    cin >> s1 >> s2;\n    bool flag = 1;//1代表可以，否则为0\n    countSize(s1,count1);\n    countSize(s2,count2);\n\n    for(int i = 0; i < 62; i++){\n        if(count2[i] != 0 && count2[i] > count1[i]){\n            cnt += count2[i] - count1[i];\n            flag = 0;\n        }\n    }\n    if(!flag){\n        cout << \"No \" << cnt << endl;\n    }\n    else{\n        int len = s1.size() - s2.size();\n        cout << \"Yes \" << len << endl;\n    }\n\n    return 0;\n}\n```\n你觉得这样太麻烦，不想去转化，也可以只开一个很大的数组，至少比Z的编码大，将店家的s1存入，再遍历小红的需求s2，找够还是不够。\n\n```js\n//foreverking\n#include <vector>\n#include <cstdio>\n#include <queue>\n#include <algorithm>\n#include <cstring>\n#include <iostream>\n#include <cmath>\nusing namespace std;\n\n\nstring s1,s2;\nint count1[300];\nint cnt;\n\nint main(){\n    cin >> s1 >> s2;\n    //店家的存入\n    for (int i = 0; i < s1.length(); i++)\n        count1[s1[i]]++;\n    \n    for(int i = 0; i < s2.size(); i++){\n        if(count1[s2[i]] > 0)\n            count1[s2[i]]--;//店家有这个珠子，减去一颗\n        else\n            cnt++;//店家没有，那么统计一下不够的\n    }\n    if(!cnt){\n        int len = s1.size() - s2.size();\n        cout << \"Yes \" << len << endl;\n    }\n    else\n        cout << \"No \" << cnt << endl;\n\n    return 0;\n}\n```\n[题目链接](https://pintia.cn/problem-sets/994805260223102976/problems/994805283241443328)","slug":"PAT乙级1039","published":1,"updated":"2021-05-19T10:49:05.582Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktvk78fe001v1cwshik529sz","content":"\n        <h3 id=\"题目\"   >\n          <a href=\"#题目\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h3>\n      <p>小红想买些珠子做一串自己喜欢的珠串。卖珠子的摊主有很多串五颜六色的珠串，但是不肯把任何一串拆散了卖。于是小红要你帮忙判断一下，某串珠子里是否包含了全部自己想要的珠子？如果是，那么告诉她有多少多余的珠子；如果不是，那么告诉她缺了多少珠子。</p>\n<p>为方便起见，我们用[0-9]、[a-z]、[A-Z]范围内的字符来表示颜色。例如在图中，第3串是小红想做的珠串；那么第1串可以买，因为包含了全部她想要的珠子，还多了8颗不需要的珠子；第2串不能买，因为没有黑色珠子，并且少了一颗红色的珠子。</p>\n<p><img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d3de215ebdf940ba9695d0216d9e6214~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\"></p>\n\n        <h3 id=\"输入格式\"   >\n          <a href=\"#输入格式\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#输入格式\" class=\"headerlink\" title=\"输入格式\"></a>输入格式</h3>\n      <p>每个输入包含 1 个测试用例。每个测试用例分别在 2 行中先后给出摊主的珠串和小红想做的珠串，两串都不超过 1000 个珠子。</p>\n\n        <h3 id=\"输出格式\"   >\n          <a href=\"#输出格式\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#输出格式\" class=\"headerlink\" title=\"输出格式\"></a>输出格式</h3>\n      <p>如果可以买，则在一行中输出 Yes 以及有多少多余的珠子；如果不可以买，则在一行中输出 No 以及缺了多少珠子。其间以 1 个空格分隔。</p>\n\n        <h3 id=\"思路\"   >\n          <a href=\"#思路\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3>\n      <p>差不多还是桶排序的思维，将店家有的和小红想要的各个珠子种类数量分别存在两个数组中。因为用[0-9]、[a-z]、[A-Z]范围内的字符来表示颜色，那么只需要开62位置的数组作为桶便可以装下了。<br>[<del>数字存在count数组的前十位小写字母存在count数组的11<del>35位大写字母存在cout数组的36</del>62位</del>]<br><br>然后遍历0~62找一找够还是不够，有一个不够就开始统计差了几个，不然就在最后输出s1,s2的长度差值。</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//foreverking</span></span><br><span class=\"line\">#include &lt;vector&gt;</span><br><span class=\"line\">#include &lt;cstdio&gt;</span><br><span class=\"line\">#include &lt;queue&gt;</span><br><span class=\"line\">#include &lt;algorithm&gt;</span><br><span class=\"line\">#include &lt;cstring&gt;</span><br><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">#include &lt;cmath&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\"><span class=\"comment\">//如果是，那么告诉她有多少多余的珠子；如果不是，那么告诉她缺了多少珠子</span></span><br><span class=\"line\"></span><br><span class=\"line\">string s1,s2;</span><br><span class=\"line\">int cnt;</span><br><span class=\"line\">int count1[<span class=\"number\">100</span>],count2[<span class=\"number\">100</span>];<span class=\"comment\">//也可以开的很大，这样后面可以全部直接存入，不需 -&#x27;0&#x27;等操作</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//统计各个字符数字出现的次数</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"function\"><span class=\"title\">countSize</span>(<span class=\"params\">string s,int count[]</span>)</span>&#123;</span><br><span class=\"line\">    int len = s.size();</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(int i = <span class=\"number\">0</span>;i &lt; len; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(s[i] - <span class=\"string\">&#x27;0&#x27;</span> &gt;= <span class=\"number\">0</span> &amp;&amp; s[i] - <span class=\"string\">&#x27;9&#x27;</span> &lt;= <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t\tcount[s[i] - <span class=\"string\">&#x27;0&#x27;</span>]++;<span class=\"comment\">//数字存在count数组的前十位</span></span><br><span class=\"line\">\t    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (s[i] - <span class=\"string\">&#x27;a&#x27;</span> &gt;= <span class=\"number\">0</span> &amp;&amp; s[i] - <span class=\"string\">&#x27;z&#x27;</span> &lt;= <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t\tcount[s[i] - <span class=\"string\">&#x27;a&#x27;</span> + <span class=\"number\">10</span>]++;<span class=\"comment\">//小写字母存在count数组的11~35位</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t\tcount[s[i] - <span class=\"string\">&#x27;A&#x27;</span> + <span class=\"number\">36</span>]++;<span class=\"comment\">//大写字母存在cout数组的36~62位</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">int <span class=\"function\"><span class=\"title\">main</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    cin &gt;&gt; s1 &gt;&gt; s2;</span><br><span class=\"line\">    bool flag = <span class=\"number\">1</span>;<span class=\"comment\">//1代表可以，否则为0</span></span><br><span class=\"line\">    countSize(s1,count1);</span><br><span class=\"line\">    countSize(s2,count2);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(int i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">62</span>; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(count2[i] != <span class=\"number\">0</span> &amp;&amp; count2[i] &gt; count1[i])&#123;</span><br><span class=\"line\">            cnt += count2[i] - count1[i];</span><br><span class=\"line\">            flag = <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!flag)&#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;No &quot;</span> &lt;&lt; cnt &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        int len = s1.size() - s2.size();</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;Yes &quot;</span> &lt;&lt; len &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>你觉得这样太麻烦，不想去转化，也可以只开一个很大的数组，至少比Z的编码大，将店家的s1存入，再遍历小红的需求s2，找够还是不够。</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//foreverking</span></span><br><span class=\"line\">#include &lt;vector&gt;</span><br><span class=\"line\">#include &lt;cstdio&gt;</span><br><span class=\"line\">#include &lt;queue&gt;</span><br><span class=\"line\">#include &lt;algorithm&gt;</span><br><span class=\"line\">#include &lt;cstring&gt;</span><br><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">#include &lt;cmath&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">string s1,s2;</span><br><span class=\"line\">int count1[<span class=\"number\">300</span>];</span><br><span class=\"line\">int cnt;</span><br><span class=\"line\"></span><br><span class=\"line\">int <span class=\"function\"><span class=\"title\">main</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    cin &gt;&gt; s1 &gt;&gt; s2;</span><br><span class=\"line\">    <span class=\"comment\">//店家的存入</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (int i = <span class=\"number\">0</span>; i &lt; s1.length(); i++)</span><br><span class=\"line\">        count1[s1[i]]++;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(int i = <span class=\"number\">0</span>; i &lt; s2.size(); i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(count1[s2[i]] &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">            count1[s2[i]]--;<span class=\"comment\">//店家有这个珠子，减去一颗</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            cnt++;<span class=\"comment\">//店家没有，那么统计一下不够的</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!cnt)&#123;</span><br><span class=\"line\">        int len = s1.size() - s2.size();</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;Yes &quot;</span> &lt;&lt; len &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;No &quot;</span> &lt;&lt; cnt &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p><span class=\"exturl\"><a class=\"exturl__link\"   href=\"https://pintia.cn/problem-sets/994805260223102976/problems/994805283241443328\" >题目链接</a><span class=\"exturl__icon\"><i class=\"fas fa-external-link-alt\"></i></span></span></p>\n","site":{"data":{}},"excerpt":"","more":"\n        <h3 id=\"题目\"   >\n          <a href=\"#题目\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h3>\n      <p>小红想买些珠子做一串自己喜欢的珠串。卖珠子的摊主有很多串五颜六色的珠串，但是不肯把任何一串拆散了卖。于是小红要你帮忙判断一下，某串珠子里是否包含了全部自己想要的珠子？如果是，那么告诉她有多少多余的珠子；如果不是，那么告诉她缺了多少珠子。</p>\n<p>为方便起见，我们用[0-9]、[a-z]、[A-Z]范围内的字符来表示颜色。例如在图中，第3串是小红想做的珠串；那么第1串可以买，因为包含了全部她想要的珠子，还多了8颗不需要的珠子；第2串不能买，因为没有黑色珠子，并且少了一颗红色的珠子。</p>\n<p><img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d3de215ebdf940ba9695d0216d9e6214~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\"></p>\n\n        <h3 id=\"输入格式\"   >\n          <a href=\"#输入格式\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#输入格式\" class=\"headerlink\" title=\"输入格式\"></a>输入格式</h3>\n      <p>每个输入包含 1 个测试用例。每个测试用例分别在 2 行中先后给出摊主的珠串和小红想做的珠串，两串都不超过 1000 个珠子。</p>\n\n        <h3 id=\"输出格式\"   >\n          <a href=\"#输出格式\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#输出格式\" class=\"headerlink\" title=\"输出格式\"></a>输出格式</h3>\n      <p>如果可以买，则在一行中输出 Yes 以及有多少多余的珠子；如果不可以买，则在一行中输出 No 以及缺了多少珠子。其间以 1 个空格分隔。</p>\n\n        <h3 id=\"思路\"   >\n          <a href=\"#思路\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3>\n      <p>差不多还是桶排序的思维，将店家有的和小红想要的各个珠子种类数量分别存在两个数组中。因为用[0-9]、[a-z]、[A-Z]范围内的字符来表示颜色，那么只需要开62位置的数组作为桶便可以装下了。<br>[<del>数字存在count数组的前十位小写字母存在count数组的11<del>35位大写字母存在cout数组的36</del>62位</del>]<br><br>然后遍历0~62找一找够还是不够，有一个不够就开始统计差了几个，不然就在最后输出s1,s2的长度差值。</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//foreverking</span></span><br><span class=\"line\">#include &lt;vector&gt;</span><br><span class=\"line\">#include &lt;cstdio&gt;</span><br><span class=\"line\">#include &lt;queue&gt;</span><br><span class=\"line\">#include &lt;algorithm&gt;</span><br><span class=\"line\">#include &lt;cstring&gt;</span><br><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">#include &lt;cmath&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\"><span class=\"comment\">//如果是，那么告诉她有多少多余的珠子；如果不是，那么告诉她缺了多少珠子</span></span><br><span class=\"line\"></span><br><span class=\"line\">string s1,s2;</span><br><span class=\"line\">int cnt;</span><br><span class=\"line\">int count1[<span class=\"number\">100</span>],count2[<span class=\"number\">100</span>];<span class=\"comment\">//也可以开的很大，这样后面可以全部直接存入，不需 -&#x27;0&#x27;等操作</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//统计各个字符数字出现的次数</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"function\"><span class=\"title\">countSize</span>(<span class=\"params\">string s,int count[]</span>)</span>&#123;</span><br><span class=\"line\">    int len = s.size();</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(int i = <span class=\"number\">0</span>;i &lt; len; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(s[i] - <span class=\"string\">&#x27;0&#x27;</span> &gt;= <span class=\"number\">0</span> &amp;&amp; s[i] - <span class=\"string\">&#x27;9&#x27;</span> &lt;= <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t\tcount[s[i] - <span class=\"string\">&#x27;0&#x27;</span>]++;<span class=\"comment\">//数字存在count数组的前十位</span></span><br><span class=\"line\">\t    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (s[i] - <span class=\"string\">&#x27;a&#x27;</span> &gt;= <span class=\"number\">0</span> &amp;&amp; s[i] - <span class=\"string\">&#x27;z&#x27;</span> &lt;= <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t\tcount[s[i] - <span class=\"string\">&#x27;a&#x27;</span> + <span class=\"number\">10</span>]++;<span class=\"comment\">//小写字母存在count数组的11~35位</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t\tcount[s[i] - <span class=\"string\">&#x27;A&#x27;</span> + <span class=\"number\">36</span>]++;<span class=\"comment\">//大写字母存在cout数组的36~62位</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">int <span class=\"function\"><span class=\"title\">main</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    cin &gt;&gt; s1 &gt;&gt; s2;</span><br><span class=\"line\">    bool flag = <span class=\"number\">1</span>;<span class=\"comment\">//1代表可以，否则为0</span></span><br><span class=\"line\">    countSize(s1,count1);</span><br><span class=\"line\">    countSize(s2,count2);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(int i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">62</span>; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(count2[i] != <span class=\"number\">0</span> &amp;&amp; count2[i] &gt; count1[i])&#123;</span><br><span class=\"line\">            cnt += count2[i] - count1[i];</span><br><span class=\"line\">            flag = <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!flag)&#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;No &quot;</span> &lt;&lt; cnt &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        int len = s1.size() - s2.size();</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;Yes &quot;</span> &lt;&lt; len &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>你觉得这样太麻烦，不想去转化，也可以只开一个很大的数组，至少比Z的编码大，将店家的s1存入，再遍历小红的需求s2，找够还是不够。</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//foreverking</span></span><br><span class=\"line\">#include &lt;vector&gt;</span><br><span class=\"line\">#include &lt;cstdio&gt;</span><br><span class=\"line\">#include &lt;queue&gt;</span><br><span class=\"line\">#include &lt;algorithm&gt;</span><br><span class=\"line\">#include &lt;cstring&gt;</span><br><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">#include &lt;cmath&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">string s1,s2;</span><br><span class=\"line\">int count1[<span class=\"number\">300</span>];</span><br><span class=\"line\">int cnt;</span><br><span class=\"line\"></span><br><span class=\"line\">int <span class=\"function\"><span class=\"title\">main</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    cin &gt;&gt; s1 &gt;&gt; s2;</span><br><span class=\"line\">    <span class=\"comment\">//店家的存入</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (int i = <span class=\"number\">0</span>; i &lt; s1.length(); i++)</span><br><span class=\"line\">        count1[s1[i]]++;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(int i = <span class=\"number\">0</span>; i &lt; s2.size(); i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(count1[s2[i]] &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">            count1[s2[i]]--;<span class=\"comment\">//店家有这个珠子，减去一颗</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            cnt++;<span class=\"comment\">//店家没有，那么统计一下不够的</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!cnt)&#123;</span><br><span class=\"line\">        int len = s1.size() - s2.size();</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;Yes &quot;</span> &lt;&lt; len &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;No &quot;</span> &lt;&lt; cnt &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p><span class=\"exturl\"><a class=\"exturl__link\"   href=\"https://pintia.cn/problem-sets/994805260223102976/problems/994805283241443328\" >题目链接</a><span class=\"exturl__icon\"><i class=\"fas fa-external-link-alt\"></i></span></span></p>\n"},{"title":"PAT乙级1040","date":"2021-05-21T11:27:11.000Z","_content":"### 题目\n字符串 APPAPT 中包含了两个单词 PAT，其中第一个 PAT 是第 2 位(P)，第 4 位(A)，第 6 位(T)；第二个 PAT 是第 3 位(P)，第 4 位(A)，第 6 位(T)。\n\n现给定字符串，问一共可以形成多少个 ### PAT？\n### 输入格式\n输入只有一行，包含一个字符串，长度不超过10^5，只包含 P、A、T 三种字母\n### 输出格式\n在一行中输出给定字符串中包含多少个 PAT。由于结果可能比较大，只输出对 1000000007 取余数的结果。\n### 思路\n   思路来自于排列组合，确定中间的A的位置，则PAT的数量是左边的P的适量乘以右边的T的数量。先统计所有T的数量。遍历字符串，找到每一个A，其左边P的数量由计数器确定，其右边T的数量由所有T的数量减去左边的T的数量。\n    \n注意，因为数据过大，每找到一个A的数据，就要进行一次mod。\n\n\n```js\n//foreverking\n#include <vector>\n#include <cstdio>\n#include <queue>\n#include <algorithm>\n#include <cstring>\n#include <iostream>\n#include <cmath>\nusing namespace std;\n\n// 在一行中输出给定字符串中包含多少个 PAT。由于结果可能比较大，只输出对 1000000007 取余数的结果。\n// 记录每个A的前面有多少个P后面有多少个T，答案位两数相乘\nstring s;\nint res;\nint cntP,cntT;\n\nint main(){\n    cin >> s;\n    int len = s.size();\n    for (int i = 0; i < len; i++){\n        /* code */\n        if(s[i] == 'T')\n            cntT++;//记录所有T\n    }\n    // cout << cntT;\n    // cout << cntP;\n    for (int i = 0; i < len; i++){\n        /* code */\n        if(s[i] == 'P'){\n            cntP++;//这个A前面有多少个P\n        \n        }\n        else if(s[i] == 'T')\n            cntT--;//这个A后面有多少个T，所有的减去A前面的\n        else if(s[i] == 'A'){\n            res = (res + (cntP * cntT) % 1000000007) % 1000000007;\n        }\n    }\n    \n    cout << res << endl;\n    return 0;\n}\n```\n[题目链接](https://pintia.cn/problem-sets/994805260223102976/problems/994805282389999616)","source":"_posts/PAT乙级1040.md","raw":"---\ntitle: PAT乙级1040\ndate: 2021-05-21 19:27:11\ntags: \n    - Study\ncategories: \n    - 题解\n    - PAT题解\n---\n### 题目\n字符串 APPAPT 中包含了两个单词 PAT，其中第一个 PAT 是第 2 位(P)，第 4 位(A)，第 6 位(T)；第二个 PAT 是第 3 位(P)，第 4 位(A)，第 6 位(T)。\n\n现给定字符串，问一共可以形成多少个 ### PAT？\n### 输入格式\n输入只有一行，包含一个字符串，长度不超过10^5，只包含 P、A、T 三种字母\n### 输出格式\n在一行中输出给定字符串中包含多少个 PAT。由于结果可能比较大，只输出对 1000000007 取余数的结果。\n### 思路\n   思路来自于排列组合，确定中间的A的位置，则PAT的数量是左边的P的适量乘以右边的T的数量。先统计所有T的数量。遍历字符串，找到每一个A，其左边P的数量由计数器确定，其右边T的数量由所有T的数量减去左边的T的数量。\n    \n注意，因为数据过大，每找到一个A的数据，就要进行一次mod。\n\n\n```js\n//foreverking\n#include <vector>\n#include <cstdio>\n#include <queue>\n#include <algorithm>\n#include <cstring>\n#include <iostream>\n#include <cmath>\nusing namespace std;\n\n// 在一行中输出给定字符串中包含多少个 PAT。由于结果可能比较大，只输出对 1000000007 取余数的结果。\n// 记录每个A的前面有多少个P后面有多少个T，答案位两数相乘\nstring s;\nint res;\nint cntP,cntT;\n\nint main(){\n    cin >> s;\n    int len = s.size();\n    for (int i = 0; i < len; i++){\n        /* code */\n        if(s[i] == 'T')\n            cntT++;//记录所有T\n    }\n    // cout << cntT;\n    // cout << cntP;\n    for (int i = 0; i < len; i++){\n        /* code */\n        if(s[i] == 'P'){\n            cntP++;//这个A前面有多少个P\n        \n        }\n        else if(s[i] == 'T')\n            cntT--;//这个A后面有多少个T，所有的减去A前面的\n        else if(s[i] == 'A'){\n            res = (res + (cntP * cntT) % 1000000007) % 1000000007;\n        }\n    }\n    \n    cout << res << endl;\n    return 0;\n}\n```\n[题目链接](https://pintia.cn/problem-sets/994805260223102976/problems/994805282389999616)","slug":"PAT乙级1040","published":1,"updated":"2021-05-21T11:29:37.641Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktvk78fe001y1cwsg0y71hgf","content":"\n        <h3 id=\"题目\"   >\n          <a href=\"#题目\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h3>\n      <p>字符串 APPAPT 中包含了两个单词 PAT，其中第一个 PAT 是第 2 位(P)，第 4 位(A)，第 6 位(T)；第二个 PAT 是第 3 位(P)，第 4 位(A)，第 6 位(T)。</p>\n<p>现给定字符串，问一共可以形成多少个 ### PAT？</p>\n\n        <h3 id=\"输入格式\"   >\n          <a href=\"#输入格式\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#输入格式\" class=\"headerlink\" title=\"输入格式\"></a>输入格式</h3>\n      <p>输入只有一行，包含一个字符串，长度不超过10^5，只包含 P、A、T 三种字母</p>\n\n        <h3 id=\"输出格式\"   >\n          <a href=\"#输出格式\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#输出格式\" class=\"headerlink\" title=\"输出格式\"></a>输出格式</h3>\n      <p>在一行中输出给定字符串中包含多少个 PAT。由于结果可能比较大，只输出对 1000000007 取余数的结果。</p>\n\n        <h3 id=\"思路\"   >\n          <a href=\"#思路\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3>\n      <p>   思路来自于排列组合，确定中间的A的位置，则PAT的数量是左边的P的适量乘以右边的T的数量。先统计所有T的数量。遍历字符串，找到每一个A，其左边P的数量由计数器确定，其右边T的数量由所有T的数量减去左边的T的数量。</p>\n<p>注意，因为数据过大，每找到一个A的数据，就要进行一次mod。</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//foreverking</span></span><br><span class=\"line\">#include &lt;vector&gt;</span><br><span class=\"line\">#include &lt;cstdio&gt;</span><br><span class=\"line\">#include &lt;queue&gt;</span><br><span class=\"line\">#include &lt;algorithm&gt;</span><br><span class=\"line\">#include &lt;cstring&gt;</span><br><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">#include &lt;cmath&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 在一行中输出给定字符串中包含多少个 PAT。由于结果可能比较大，只输出对 1000000007 取余数的结果。</span></span><br><span class=\"line\"><span class=\"comment\">// 记录每个A的前面有多少个P后面有多少个T，答案位两数相乘</span></span><br><span class=\"line\">string s;</span><br><span class=\"line\">int res;</span><br><span class=\"line\">int cntP,cntT;</span><br><span class=\"line\"></span><br><span class=\"line\">int <span class=\"function\"><span class=\"title\">main</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    cin &gt;&gt; s;</span><br><span class=\"line\">    int len = s.size();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (int i = <span class=\"number\">0</span>; i &lt; len; i++)&#123;</span><br><span class=\"line\">        <span class=\"comment\">/* code */</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(s[i] == <span class=\"string\">&#x27;T&#x27;</span>)</span><br><span class=\"line\">            cntT++;<span class=\"comment\">//记录所有T</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// cout &lt;&lt; cntT;</span></span><br><span class=\"line\">    <span class=\"comment\">// cout &lt;&lt; cntP;</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (int i = <span class=\"number\">0</span>; i &lt; len; i++)&#123;</span><br><span class=\"line\">        <span class=\"comment\">/* code */</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(s[i] == <span class=\"string\">&#x27;P&#x27;</span>)&#123;</span><br><span class=\"line\">            cntP++;<span class=\"comment\">//这个A前面有多少个P</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(s[i] == <span class=\"string\">&#x27;T&#x27;</span>)</span><br><span class=\"line\">            cntT--;<span class=\"comment\">//这个A后面有多少个T，所有的减去A前面的</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(s[i] == <span class=\"string\">&#x27;A&#x27;</span>)&#123;</span><br><span class=\"line\">            res = (res + (cntP * cntT) % <span class=\"number\">1000000007</span>) % <span class=\"number\">1000000007</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    cout &lt;&lt; res &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p><span class=\"exturl\"><a class=\"exturl__link\"   href=\"https://pintia.cn/problem-sets/994805260223102976/problems/994805282389999616\" >题目链接</a><span class=\"exturl__icon\"><i class=\"fas fa-external-link-alt\"></i></span></span></p>\n","site":{"data":{}},"excerpt":"","more":"\n        <h3 id=\"题目\"   >\n          <a href=\"#题目\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h3>\n      <p>字符串 APPAPT 中包含了两个单词 PAT，其中第一个 PAT 是第 2 位(P)，第 4 位(A)，第 6 位(T)；第二个 PAT 是第 3 位(P)，第 4 位(A)，第 6 位(T)。</p>\n<p>现给定字符串，问一共可以形成多少个 ### PAT？</p>\n\n        <h3 id=\"输入格式\"   >\n          <a href=\"#输入格式\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#输入格式\" class=\"headerlink\" title=\"输入格式\"></a>输入格式</h3>\n      <p>输入只有一行，包含一个字符串，长度不超过10^5，只包含 P、A、T 三种字母</p>\n\n        <h3 id=\"输出格式\"   >\n          <a href=\"#输出格式\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#输出格式\" class=\"headerlink\" title=\"输出格式\"></a>输出格式</h3>\n      <p>在一行中输出给定字符串中包含多少个 PAT。由于结果可能比较大，只输出对 1000000007 取余数的结果。</p>\n\n        <h3 id=\"思路\"   >\n          <a href=\"#思路\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3>\n      <p>   思路来自于排列组合，确定中间的A的位置，则PAT的数量是左边的P的适量乘以右边的T的数量。先统计所有T的数量。遍历字符串，找到每一个A，其左边P的数量由计数器确定，其右边T的数量由所有T的数量减去左边的T的数量。</p>\n<p>注意，因为数据过大，每找到一个A的数据，就要进行一次mod。</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//foreverking</span></span><br><span class=\"line\">#include &lt;vector&gt;</span><br><span class=\"line\">#include &lt;cstdio&gt;</span><br><span class=\"line\">#include &lt;queue&gt;</span><br><span class=\"line\">#include &lt;algorithm&gt;</span><br><span class=\"line\">#include &lt;cstring&gt;</span><br><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">#include &lt;cmath&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 在一行中输出给定字符串中包含多少个 PAT。由于结果可能比较大，只输出对 1000000007 取余数的结果。</span></span><br><span class=\"line\"><span class=\"comment\">// 记录每个A的前面有多少个P后面有多少个T，答案位两数相乘</span></span><br><span class=\"line\">string s;</span><br><span class=\"line\">int res;</span><br><span class=\"line\">int cntP,cntT;</span><br><span class=\"line\"></span><br><span class=\"line\">int <span class=\"function\"><span class=\"title\">main</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    cin &gt;&gt; s;</span><br><span class=\"line\">    int len = s.size();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (int i = <span class=\"number\">0</span>; i &lt; len; i++)&#123;</span><br><span class=\"line\">        <span class=\"comment\">/* code */</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(s[i] == <span class=\"string\">&#x27;T&#x27;</span>)</span><br><span class=\"line\">            cntT++;<span class=\"comment\">//记录所有T</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// cout &lt;&lt; cntT;</span></span><br><span class=\"line\">    <span class=\"comment\">// cout &lt;&lt; cntP;</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (int i = <span class=\"number\">0</span>; i &lt; len; i++)&#123;</span><br><span class=\"line\">        <span class=\"comment\">/* code */</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(s[i] == <span class=\"string\">&#x27;P&#x27;</span>)&#123;</span><br><span class=\"line\">            cntP++;<span class=\"comment\">//这个A前面有多少个P</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(s[i] == <span class=\"string\">&#x27;T&#x27;</span>)</span><br><span class=\"line\">            cntT--;<span class=\"comment\">//这个A后面有多少个T，所有的减去A前面的</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(s[i] == <span class=\"string\">&#x27;A&#x27;</span>)&#123;</span><br><span class=\"line\">            res = (res + (cntP * cntT) % <span class=\"number\">1000000007</span>) % <span class=\"number\">1000000007</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    cout &lt;&lt; res &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p><span class=\"exturl\"><a class=\"exturl__link\"   href=\"https://pintia.cn/problem-sets/994805260223102976/problems/994805282389999616\" >题目链接</a><span class=\"exturl__icon\"><i class=\"fas fa-external-link-alt\"></i></span></span></p>\n"},{"title":"PAT乙级1041","date":"2021-05-21T12:04:49.000Z","_content":"### 题目\n每个 PAT 考生在参加考试时都会被分配两个座位号，一个是试机座位，一个是考试座位。正常情况下，考生在入场时先得到试机座位号码，入座进入试机状态后，系统会显示该考生的考试座位号码，考试时考生需要换到考试座位就座。但有些考生迟到了，试机已经结束，他们只能拿着领到的试机座位号码求助于你，从后台查出他们的考试座位号码。\n### 输入格式\n输入第一行给出一个正整数 N（≤1000），随后 N 行，每行给出一个考生的信息：准考证号 试机座位号 考试座位号。其中准考证号由 16 位数字组成，座位从 1 到 N 编号。输入保证每个人的准考证号都不同，并且任何时候都不会把两个人分配到同一个座位上。\n\n考生信息之后，给出一个正整数 M（≤N），随后一行中给出 M 个待查询的试机座位号码，以空格分隔。\n### 输出格式\n对应每个需要查询的试机座位号码，在一行中输出对应考生的准考证号和考试座位号码，中间用 1 个空格分隔。\n### 思路\n完全的暴力，用一个结构体数组去存数据，再遍历一下，输出。\n\n```js\n//foreverking\n#include <vector>\n#include <cstdio>\n#include <queue>\n#include <algorithm>\n#include <cstring>\n#include <iostream>\n#include <cmath>\nusing namespace std;\n\nstruct student{\n    string id;\n    int computerid;\n    int testid;\n};\n\nstudent s[1005];\nint n,m;\n\n\nint main(){\n    cin >> n;\n    for (int i = 0; i < n; i++){\n        /* code */\n        cin >> s[i].id >> s[i].computerid >> s[i].testid;\n    }\n\n    cin >> m;\n    for(int i = 0; i < m; i++){\n        int temp;\n        cin >> temp;\n        for (int j = 0; i < n; j++){\n            /* code */\n            if(s[j].computerid == temp){\n                cout << s[j].id << \" \" << s[j].testid << endl;\n                break;\n            }\n        }\n    }\n\n    return 0;\n}\n```\n然后，你发现不需要输出机号，那么使用机号做下标，这样就不用遍历了，直接查询输出。\n\n```js\n//foreverking\n#include <vector>\n#include <cstdio>\n#include <queue>\n#include <algorithm>\n#include <cstring>\n#include <iostream>\n#include <cmath>\nusing namespace std;\n\nstruct student{\n    string id;\n    int testid;\n};\n\nstudent s[1005];\nint n,m;\n\n\nint main(){\n    cin >> n;\n    for (int i = 0; i < n; i++){\n        /* code */\n        string a;\n        int b,c;\n        cin >> a >> b >> c;\n        s[b].id = a;\n        s[b].testid = c;\n    }\n\n    cin >> m;\n    for(int i = 0; i < m; i++){\n        int temp;\n        cin >> temp;\n        cout << s[temp].id << \" \" << s[temp].testid << endl;\n    }\n\n    return 0;\n}\n```\n最后发现可以不用结构体，只使用string数组存数据就好。\n\n\n[题目链接](https://pintia.cn/problem-sets/994805260223102976/problems/994805281567916032)","source":"_posts/PAT乙级1041.md","raw":"---\ntitle: PAT乙级1041\ndate: 2021-05-21 20:04:49\ntags: \n    - Study\ncategories: \n    - 题解\n    - PAT题解\n---\n### 题目\n每个 PAT 考生在参加考试时都会被分配两个座位号，一个是试机座位，一个是考试座位。正常情况下，考生在入场时先得到试机座位号码，入座进入试机状态后，系统会显示该考生的考试座位号码，考试时考生需要换到考试座位就座。但有些考生迟到了，试机已经结束，他们只能拿着领到的试机座位号码求助于你，从后台查出他们的考试座位号码。\n### 输入格式\n输入第一行给出一个正整数 N（≤1000），随后 N 行，每行给出一个考生的信息：准考证号 试机座位号 考试座位号。其中准考证号由 16 位数字组成，座位从 1 到 N 编号。输入保证每个人的准考证号都不同，并且任何时候都不会把两个人分配到同一个座位上。\n\n考生信息之后，给出一个正整数 M（≤N），随后一行中给出 M 个待查询的试机座位号码，以空格分隔。\n### 输出格式\n对应每个需要查询的试机座位号码，在一行中输出对应考生的准考证号和考试座位号码，中间用 1 个空格分隔。\n### 思路\n完全的暴力，用一个结构体数组去存数据，再遍历一下，输出。\n\n```js\n//foreverking\n#include <vector>\n#include <cstdio>\n#include <queue>\n#include <algorithm>\n#include <cstring>\n#include <iostream>\n#include <cmath>\nusing namespace std;\n\nstruct student{\n    string id;\n    int computerid;\n    int testid;\n};\n\nstudent s[1005];\nint n,m;\n\n\nint main(){\n    cin >> n;\n    for (int i = 0; i < n; i++){\n        /* code */\n        cin >> s[i].id >> s[i].computerid >> s[i].testid;\n    }\n\n    cin >> m;\n    for(int i = 0; i < m; i++){\n        int temp;\n        cin >> temp;\n        for (int j = 0; i < n; j++){\n            /* code */\n            if(s[j].computerid == temp){\n                cout << s[j].id << \" \" << s[j].testid << endl;\n                break;\n            }\n        }\n    }\n\n    return 0;\n}\n```\n然后，你发现不需要输出机号，那么使用机号做下标，这样就不用遍历了，直接查询输出。\n\n```js\n//foreverking\n#include <vector>\n#include <cstdio>\n#include <queue>\n#include <algorithm>\n#include <cstring>\n#include <iostream>\n#include <cmath>\nusing namespace std;\n\nstruct student{\n    string id;\n    int testid;\n};\n\nstudent s[1005];\nint n,m;\n\n\nint main(){\n    cin >> n;\n    for (int i = 0; i < n; i++){\n        /* code */\n        string a;\n        int b,c;\n        cin >> a >> b >> c;\n        s[b].id = a;\n        s[b].testid = c;\n    }\n\n    cin >> m;\n    for(int i = 0; i < m; i++){\n        int temp;\n        cin >> temp;\n        cout << s[temp].id << \" \" << s[temp].testid << endl;\n    }\n\n    return 0;\n}\n```\n最后发现可以不用结构体，只使用string数组存数据就好。\n\n\n[题目链接](https://pintia.cn/problem-sets/994805260223102976/problems/994805281567916032)","slug":"PAT乙级1041","published":1,"updated":"2021-05-21T12:05:03.812Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktvk78ff00221cws98yj18yl","content":"\n        <h3 id=\"题目\"   >\n          <a href=\"#题目\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h3>\n      <p>每个 PAT 考生在参加考试时都会被分配两个座位号，一个是试机座位，一个是考试座位。正常情况下，考生在入场时先得到试机座位号码，入座进入试机状态后，系统会显示该考生的考试座位号码，考试时考生需要换到考试座位就座。但有些考生迟到了，试机已经结束，他们只能拿着领到的试机座位号码求助于你，从后台查出他们的考试座位号码。</p>\n\n        <h3 id=\"输入格式\"   >\n          <a href=\"#输入格式\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#输入格式\" class=\"headerlink\" title=\"输入格式\"></a>输入格式</h3>\n      <p>输入第一行给出一个正整数 N（≤1000），随后 N 行，每行给出一个考生的信息：准考证号 试机座位号 考试座位号。其中准考证号由 16 位数字组成，座位从 1 到 N 编号。输入保证每个人的准考证号都不同，并且任何时候都不会把两个人分配到同一个座位上。</p>\n<p>考生信息之后，给出一个正整数 M（≤N），随后一行中给出 M 个待查询的试机座位号码，以空格分隔。</p>\n\n        <h3 id=\"输出格式\"   >\n          <a href=\"#输出格式\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#输出格式\" class=\"headerlink\" title=\"输出格式\"></a>输出格式</h3>\n      <p>对应每个需要查询的试机座位号码，在一行中输出对应考生的准考证号和考试座位号码，中间用 1 个空格分隔。</p>\n\n        <h3 id=\"思路\"   >\n          <a href=\"#思路\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3>\n      <p>完全的暴力，用一个结构体数组去存数据，再遍历一下，输出。</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//foreverking</span></span><br><span class=\"line\">#include &lt;vector&gt;</span><br><span class=\"line\">#include &lt;cstdio&gt;</span><br><span class=\"line\">#include &lt;queue&gt;</span><br><span class=\"line\">#include &lt;algorithm&gt;</span><br><span class=\"line\">#include &lt;cstring&gt;</span><br><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">#include &lt;cmath&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\"></span><br><span class=\"line\">struct student&#123;</span><br><span class=\"line\">    string id;</span><br><span class=\"line\">    int computerid;</span><br><span class=\"line\">    int testid;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">student s[<span class=\"number\">1005</span>];</span><br><span class=\"line\">int n,m;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">int <span class=\"function\"><span class=\"title\">main</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    cin &gt;&gt; n;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (int i = <span class=\"number\">0</span>; i &lt; n; i++)&#123;</span><br><span class=\"line\">        <span class=\"comment\">/* code */</span></span><br><span class=\"line\">        cin &gt;&gt; s[i].id &gt;&gt; s[i].computerid &gt;&gt; s[i].testid;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    cin &gt;&gt; m;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(int i = <span class=\"number\">0</span>; i &lt; m; i++)&#123;</span><br><span class=\"line\">        int temp;</span><br><span class=\"line\">        cin &gt;&gt; temp;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (int j = <span class=\"number\">0</span>; i &lt; n; j++)&#123;</span><br><span class=\"line\">            <span class=\"comment\">/* code */</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(s[j].computerid == temp)&#123;</span><br><span class=\"line\">                cout &lt;&lt; s[j].id &lt;&lt; <span class=\"string\">&quot; &quot;</span> &lt;&lt; s[j].testid &lt;&lt; endl;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>然后，你发现不需要输出机号，那么使用机号做下标，这样就不用遍历了，直接查询输出。</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//foreverking</span></span><br><span class=\"line\">#include &lt;vector&gt;</span><br><span class=\"line\">#include &lt;cstdio&gt;</span><br><span class=\"line\">#include &lt;queue&gt;</span><br><span class=\"line\">#include &lt;algorithm&gt;</span><br><span class=\"line\">#include &lt;cstring&gt;</span><br><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">#include &lt;cmath&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\"></span><br><span class=\"line\">struct student&#123;</span><br><span class=\"line\">    string id;</span><br><span class=\"line\">    int testid;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">student s[<span class=\"number\">1005</span>];</span><br><span class=\"line\">int n,m;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">int <span class=\"function\"><span class=\"title\">main</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    cin &gt;&gt; n;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (int i = <span class=\"number\">0</span>; i &lt; n; i++)&#123;</span><br><span class=\"line\">        <span class=\"comment\">/* code */</span></span><br><span class=\"line\">        string a;</span><br><span class=\"line\">        int b,c;</span><br><span class=\"line\">        cin &gt;&gt; a &gt;&gt; b &gt;&gt; c;</span><br><span class=\"line\">        s[b].id = a;</span><br><span class=\"line\">        s[b].testid = c;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    cin &gt;&gt; m;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(int i = <span class=\"number\">0</span>; i &lt; m; i++)&#123;</span><br><span class=\"line\">        int temp;</span><br><span class=\"line\">        cin &gt;&gt; temp;</span><br><span class=\"line\">        cout &lt;&lt; s[temp].id &lt;&lt; <span class=\"string\">&quot; &quot;</span> &lt;&lt; s[temp].testid &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>最后发现可以不用结构体，只使用string数组存数据就好。</p>\n<p><span class=\"exturl\"><a class=\"exturl__link\"   href=\"https://pintia.cn/problem-sets/994805260223102976/problems/994805281567916032\" >题目链接</a><span class=\"exturl__icon\"><i class=\"fas fa-external-link-alt\"></i></span></span></p>\n","site":{"data":{}},"excerpt":"","more":"\n        <h3 id=\"题目\"   >\n          <a href=\"#题目\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h3>\n      <p>每个 PAT 考生在参加考试时都会被分配两个座位号，一个是试机座位，一个是考试座位。正常情况下，考生在入场时先得到试机座位号码，入座进入试机状态后，系统会显示该考生的考试座位号码，考试时考生需要换到考试座位就座。但有些考生迟到了，试机已经结束，他们只能拿着领到的试机座位号码求助于你，从后台查出他们的考试座位号码。</p>\n\n        <h3 id=\"输入格式\"   >\n          <a href=\"#输入格式\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#输入格式\" class=\"headerlink\" title=\"输入格式\"></a>输入格式</h3>\n      <p>输入第一行给出一个正整数 N（≤1000），随后 N 行，每行给出一个考生的信息：准考证号 试机座位号 考试座位号。其中准考证号由 16 位数字组成，座位从 1 到 N 编号。输入保证每个人的准考证号都不同，并且任何时候都不会把两个人分配到同一个座位上。</p>\n<p>考生信息之后，给出一个正整数 M（≤N），随后一行中给出 M 个待查询的试机座位号码，以空格分隔。</p>\n\n        <h3 id=\"输出格式\"   >\n          <a href=\"#输出格式\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#输出格式\" class=\"headerlink\" title=\"输出格式\"></a>输出格式</h3>\n      <p>对应每个需要查询的试机座位号码，在一行中输出对应考生的准考证号和考试座位号码，中间用 1 个空格分隔。</p>\n\n        <h3 id=\"思路\"   >\n          <a href=\"#思路\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3>\n      <p>完全的暴力，用一个结构体数组去存数据，再遍历一下，输出。</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//foreverking</span></span><br><span class=\"line\">#include &lt;vector&gt;</span><br><span class=\"line\">#include &lt;cstdio&gt;</span><br><span class=\"line\">#include &lt;queue&gt;</span><br><span class=\"line\">#include &lt;algorithm&gt;</span><br><span class=\"line\">#include &lt;cstring&gt;</span><br><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">#include &lt;cmath&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\"></span><br><span class=\"line\">struct student&#123;</span><br><span class=\"line\">    string id;</span><br><span class=\"line\">    int computerid;</span><br><span class=\"line\">    int testid;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">student s[<span class=\"number\">1005</span>];</span><br><span class=\"line\">int n,m;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">int <span class=\"function\"><span class=\"title\">main</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    cin &gt;&gt; n;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (int i = <span class=\"number\">0</span>; i &lt; n; i++)&#123;</span><br><span class=\"line\">        <span class=\"comment\">/* code */</span></span><br><span class=\"line\">        cin &gt;&gt; s[i].id &gt;&gt; s[i].computerid &gt;&gt; s[i].testid;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    cin &gt;&gt; m;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(int i = <span class=\"number\">0</span>; i &lt; m; i++)&#123;</span><br><span class=\"line\">        int temp;</span><br><span class=\"line\">        cin &gt;&gt; temp;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (int j = <span class=\"number\">0</span>; i &lt; n; j++)&#123;</span><br><span class=\"line\">            <span class=\"comment\">/* code */</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(s[j].computerid == temp)&#123;</span><br><span class=\"line\">                cout &lt;&lt; s[j].id &lt;&lt; <span class=\"string\">&quot; &quot;</span> &lt;&lt; s[j].testid &lt;&lt; endl;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>然后，你发现不需要输出机号，那么使用机号做下标，这样就不用遍历了，直接查询输出。</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//foreverking</span></span><br><span class=\"line\">#include &lt;vector&gt;</span><br><span class=\"line\">#include &lt;cstdio&gt;</span><br><span class=\"line\">#include &lt;queue&gt;</span><br><span class=\"line\">#include &lt;algorithm&gt;</span><br><span class=\"line\">#include &lt;cstring&gt;</span><br><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">#include &lt;cmath&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\"></span><br><span class=\"line\">struct student&#123;</span><br><span class=\"line\">    string id;</span><br><span class=\"line\">    int testid;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">student s[<span class=\"number\">1005</span>];</span><br><span class=\"line\">int n,m;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">int <span class=\"function\"><span class=\"title\">main</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    cin &gt;&gt; n;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (int i = <span class=\"number\">0</span>; i &lt; n; i++)&#123;</span><br><span class=\"line\">        <span class=\"comment\">/* code */</span></span><br><span class=\"line\">        string a;</span><br><span class=\"line\">        int b,c;</span><br><span class=\"line\">        cin &gt;&gt; a &gt;&gt; b &gt;&gt; c;</span><br><span class=\"line\">        s[b].id = a;</span><br><span class=\"line\">        s[b].testid = c;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    cin &gt;&gt; m;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(int i = <span class=\"number\">0</span>; i &lt; m; i++)&#123;</span><br><span class=\"line\">        int temp;</span><br><span class=\"line\">        cin &gt;&gt; temp;</span><br><span class=\"line\">        cout &lt;&lt; s[temp].id &lt;&lt; <span class=\"string\">&quot; &quot;</span> &lt;&lt; s[temp].testid &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>最后发现可以不用结构体，只使用string数组存数据就好。</p>\n<p><span class=\"exturl\"><a class=\"exturl__link\"   href=\"https://pintia.cn/problem-sets/994805260223102976/problems/994805281567916032\" >题目链接</a><span class=\"exturl__icon\"><i class=\"fas fa-external-link-alt\"></i></span></span></p>\n"},{"title":"PAT乙级1042","date":"2021-05-22T01:57:41.000Z","_content":"### 题目\n请编写程序，找出一段给定文字中出现最频繁的那个英文字母。\n### 输入格式\n输入在一行中给出一个长度不超过 1000 的字符串。字符串由 ASCII 码表中任意可见字符及空格组成，至少包含 1 个英文字母，以回车结束（回车不算在内）。\n### 输出格式\n在一行中输出出现频率最高的那个英文字母及其出现次数，其间以空格分隔。如果有并列，则输出按字母序最小的那个字母。统计时不区分大小写，输出小写字母。\n### 思路\n这是一个简单题，字符串每遇到的一个英文字母，那么对应的对应的数组[`word[26]`]位置就加一。注意字母不分大小写，而且输出的是小写。那么需要将所有字母全部转化为小写。还有因为输入有空格，输入就使用getline.\n\n```js\n//foreverking\n#include <vector>\n#include <cstdio>\n#include <queue>\n#include <algorithm>\n#include <cstring>\n#include <iostream>\n#include <cmath>\nusing namespace std;\n\n//统计时不区分大小写，输出小写字母\nstring s;\nint word[26];\nint maxx;\nchar res;\n\nint main(){\n    getline(cin,s);\n    for(int i = 0; i < s.size(); i++)\n        s[i] = tolower(s[i]);//全部转化为小写\n\n    for(int i = 0; i < s.size(); i++){\n        if(s[i] >= 'a' && s[i] <= 'z' )\n            word[s[i] - 'a']++;\n    }\n    for(int i = 0; i < 26; i++){\n        if(word[i] > maxx){\n            maxx =word[i];\n            res = 'a' + i; \n        }       \n    }\n\n    cout << res << \" \" <<  maxx << endl;\n    return 0;\n}\n```\n\n[题目链接](https://pintia.cn/problem-sets/994805260223102976/problems/994805280817135616)","source":"_posts/PAT乙级1042.md","raw":"---\ntitle: PAT乙级1042\ndate: 2021-05-22 09:57:41\ntags: \n    - Study\ncategories: \n    - 题解\n    - PAT题解\n---\n### 题目\n请编写程序，找出一段给定文字中出现最频繁的那个英文字母。\n### 输入格式\n输入在一行中给出一个长度不超过 1000 的字符串。字符串由 ASCII 码表中任意可见字符及空格组成，至少包含 1 个英文字母，以回车结束（回车不算在内）。\n### 输出格式\n在一行中输出出现频率最高的那个英文字母及其出现次数，其间以空格分隔。如果有并列，则输出按字母序最小的那个字母。统计时不区分大小写，输出小写字母。\n### 思路\n这是一个简单题，字符串每遇到的一个英文字母，那么对应的对应的数组[`word[26]`]位置就加一。注意字母不分大小写，而且输出的是小写。那么需要将所有字母全部转化为小写。还有因为输入有空格，输入就使用getline.\n\n```js\n//foreverking\n#include <vector>\n#include <cstdio>\n#include <queue>\n#include <algorithm>\n#include <cstring>\n#include <iostream>\n#include <cmath>\nusing namespace std;\n\n//统计时不区分大小写，输出小写字母\nstring s;\nint word[26];\nint maxx;\nchar res;\n\nint main(){\n    getline(cin,s);\n    for(int i = 0; i < s.size(); i++)\n        s[i] = tolower(s[i]);//全部转化为小写\n\n    for(int i = 0; i < s.size(); i++){\n        if(s[i] >= 'a' && s[i] <= 'z' )\n            word[s[i] - 'a']++;\n    }\n    for(int i = 0; i < 26; i++){\n        if(word[i] > maxx){\n            maxx =word[i];\n            res = 'a' + i; \n        }       \n    }\n\n    cout << res << \" \" <<  maxx << endl;\n    return 0;\n}\n```\n\n[题目链接](https://pintia.cn/problem-sets/994805260223102976/problems/994805280817135616)","slug":"PAT乙级1042","published":1,"updated":"2021-05-22T01:58:00.009Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktvk78fg00251cwsbljhfagt","content":"\n        <h3 id=\"题目\"   >\n          <a href=\"#题目\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h3>\n      <p>请编写程序，找出一段给定文字中出现最频繁的那个英文字母。</p>\n\n        <h3 id=\"输入格式\"   >\n          <a href=\"#输入格式\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#输入格式\" class=\"headerlink\" title=\"输入格式\"></a>输入格式</h3>\n      <p>输入在一行中给出一个长度不超过 1000 的字符串。字符串由 ASCII 码表中任意可见字符及空格组成，至少包含 1 个英文字母，以回车结束（回车不算在内）。</p>\n\n        <h3 id=\"输出格式\"   >\n          <a href=\"#输出格式\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#输出格式\" class=\"headerlink\" title=\"输出格式\"></a>输出格式</h3>\n      <p>在一行中输出出现频率最高的那个英文字母及其出现次数，其间以空格分隔。如果有并列，则输出按字母序最小的那个字母。统计时不区分大小写，输出小写字母。</p>\n\n        <h3 id=\"思路\"   >\n          <a href=\"#思路\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3>\n      <p>这是一个简单题，字符串每遇到的一个英文字母，那么对应的对应的数组[<code>word[26]</code>]位置就加一。注意字母不分大小写，而且输出的是小写。那么需要将所有字母全部转化为小写。还有因为输入有空格，输入就使用getline.</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//foreverking</span></span><br><span class=\"line\">#include &lt;vector&gt;</span><br><span class=\"line\">#include &lt;cstdio&gt;</span><br><span class=\"line\">#include &lt;queue&gt;</span><br><span class=\"line\">#include &lt;algorithm&gt;</span><br><span class=\"line\">#include &lt;cstring&gt;</span><br><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">#include &lt;cmath&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//统计时不区分大小写，输出小写字母</span></span><br><span class=\"line\">string s;</span><br><span class=\"line\">int word[<span class=\"number\">26</span>];</span><br><span class=\"line\">int maxx;</span><br><span class=\"line\">char res;</span><br><span class=\"line\"></span><br><span class=\"line\">int <span class=\"function\"><span class=\"title\">main</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    getline(cin,s);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(int i = <span class=\"number\">0</span>; i &lt; s.size(); i++)</span><br><span class=\"line\">        s[i] = tolower(s[i]);<span class=\"comment\">//全部转化为小写</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(int i = <span class=\"number\">0</span>; i &lt; s.size(); i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(s[i] &gt;= <span class=\"string\">&#x27;a&#x27;</span> &amp;&amp; s[i] &lt;= <span class=\"string\">&#x27;z&#x27;</span> )</span><br><span class=\"line\">            word[s[i] - <span class=\"string\">&#x27;a&#x27;</span>]++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(int i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">26</span>; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(word[i] &gt; maxx)&#123;</span><br><span class=\"line\">            maxx =word[i];</span><br><span class=\"line\">            res = <span class=\"string\">&#x27;a&#x27;</span> + i; </span><br><span class=\"line\">        &#125;       </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    cout &lt;&lt; res &lt;&lt; <span class=\"string\">&quot; &quot;</span> &lt;&lt;  maxx &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p><span class=\"exturl\"><a class=\"exturl__link\"   href=\"https://pintia.cn/problem-sets/994805260223102976/problems/994805280817135616\" >题目链接</a><span class=\"exturl__icon\"><i class=\"fas fa-external-link-alt\"></i></span></span></p>\n","site":{"data":{}},"excerpt":"","more":"\n        <h3 id=\"题目\"   >\n          <a href=\"#题目\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h3>\n      <p>请编写程序，找出一段给定文字中出现最频繁的那个英文字母。</p>\n\n        <h3 id=\"输入格式\"   >\n          <a href=\"#输入格式\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#输入格式\" class=\"headerlink\" title=\"输入格式\"></a>输入格式</h3>\n      <p>输入在一行中给出一个长度不超过 1000 的字符串。字符串由 ASCII 码表中任意可见字符及空格组成，至少包含 1 个英文字母，以回车结束（回车不算在内）。</p>\n\n        <h3 id=\"输出格式\"   >\n          <a href=\"#输出格式\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#输出格式\" class=\"headerlink\" title=\"输出格式\"></a>输出格式</h3>\n      <p>在一行中输出出现频率最高的那个英文字母及其出现次数，其间以空格分隔。如果有并列，则输出按字母序最小的那个字母。统计时不区分大小写，输出小写字母。</p>\n\n        <h3 id=\"思路\"   >\n          <a href=\"#思路\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3>\n      <p>这是一个简单题，字符串每遇到的一个英文字母，那么对应的对应的数组[<code>word[26]</code>]位置就加一。注意字母不分大小写，而且输出的是小写。那么需要将所有字母全部转化为小写。还有因为输入有空格，输入就使用getline.</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//foreverking</span></span><br><span class=\"line\">#include &lt;vector&gt;</span><br><span class=\"line\">#include &lt;cstdio&gt;</span><br><span class=\"line\">#include &lt;queue&gt;</span><br><span class=\"line\">#include &lt;algorithm&gt;</span><br><span class=\"line\">#include &lt;cstring&gt;</span><br><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">#include &lt;cmath&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//统计时不区分大小写，输出小写字母</span></span><br><span class=\"line\">string s;</span><br><span class=\"line\">int word[<span class=\"number\">26</span>];</span><br><span class=\"line\">int maxx;</span><br><span class=\"line\">char res;</span><br><span class=\"line\"></span><br><span class=\"line\">int <span class=\"function\"><span class=\"title\">main</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    getline(cin,s);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(int i = <span class=\"number\">0</span>; i &lt; s.size(); i++)</span><br><span class=\"line\">        s[i] = tolower(s[i]);<span class=\"comment\">//全部转化为小写</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(int i = <span class=\"number\">0</span>; i &lt; s.size(); i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(s[i] &gt;= <span class=\"string\">&#x27;a&#x27;</span> &amp;&amp; s[i] &lt;= <span class=\"string\">&#x27;z&#x27;</span> )</span><br><span class=\"line\">            word[s[i] - <span class=\"string\">&#x27;a&#x27;</span>]++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(int i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">26</span>; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(word[i] &gt; maxx)&#123;</span><br><span class=\"line\">            maxx =word[i];</span><br><span class=\"line\">            res = <span class=\"string\">&#x27;a&#x27;</span> + i; </span><br><span class=\"line\">        &#125;       </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    cout &lt;&lt; res &lt;&lt; <span class=\"string\">&quot; &quot;</span> &lt;&lt;  maxx &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p><span class=\"exturl\"><a class=\"exturl__link\"   href=\"https://pintia.cn/problem-sets/994805260223102976/problems/994805280817135616\" >题目链接</a><span class=\"exturl__icon\"><i class=\"fas fa-external-link-alt\"></i></span></span></p>\n"},{"title":"PAT乙级1044","date":"2021-05-24T14:11:40.000Z","_content":"### 题目\n火星人是以 13 进制计数的：\n\n- 地球人的 0 被火星人称为 tret。\n- 地球人数字 1 到 12 的火星文分别为：jan, feb, mar, apr, may, jun, jly, aug, sep, oct, nov, dec。\n- 火星人将进位以后的 12 个高位数字分别称为：tam, hel, maa, huh, tou, kes, hei, elo, syy, lok, mer, jou。\n例如地球人的数字 29 翻译成火星文就是 hel mar；而火星文 elo nov 对应地球数字 115。为了方便交流，请你编写程序实现地球和火星数字之间的互译\n### 输入格式\n输入第一行给出一个正整数 N（<100），随后 N 行，每行给出一个 [0, 169)区间内的数字 —— 或者是地球文，或者是火星文\n\n### 输出格式\n对应输入的每一行，在一行中输出翻译后的另一种语言的数字。\n### 思路\n有两个前置字符串数组：`string low[13] = {\"tret\", \"jan\", \"feb\", \"mar\", \"apr\", \"may\", \"jun\", \"jly\", \"aug\", \"sep\", \"oct\", \"nov\", \"dec\"}; //0~12.低位的\nstring high[13] = {\" \", \"tam\", \"hel\", \"maa\", \"huh\", \"tou\", \"kes\", \"hei\", \"elo\", \"syy\", \"lok\", \"mer\", \"jou\"};        //高位`\n\n输入你想转化的数字或者火星文[输入个数n后记得geychar()，吞掉那个空格，我傻傻的找bug。老菜了]，如果是数字，就去ChangeOne函数，如果是火星文，就去ChangeTwo函数。\n\n\nChangeOne，先把输入的字符串使用stoi转化为整数num，然后判定，如果num/13不为0（13进制的），那么就有高位，输出对应的high[num / 13]。在看是不是输出空格（有高位，有低位的情况）。最后有低位输出低位。\n**注意，因为0/13为0，所以如果是0就有问题，要进行特判。**\n\nChangeTwo，进行一个分类，输入的是两位火星文一类，一位火星文一类，依靠字符串长度进行区分。一位火星文直接与两个字符串数组遍历对比就行了。两位火星文，就要依据空格区分为两个字符串s1,s2，进行转化。\n\n```js\n//foreverking\n#include <vector>\n#include <cstdio>\n#include <queue>\n#include <algorithm>\n#include <cstring>\n#include <iostream>\n#include <cmath>\n#include <string>\nusing namespace std;\n\nstring low[13] = {\"tret\", \"jan\", \"feb\", \"mar\", \"apr\", \"may\", \"jun\", \"jly\", \"aug\", \"sep\", \"oct\", \"nov\", \"dec\"}; //0~12.低位的\nstring high[13] = {\" \", \"tam\", \"hel\", \"maa\", \"huh\", \"tou\", \"kes\", \"hei\", \"elo\", \"syy\", \"lok\", \"mer\", \"jou\"};        //高位\n\nint n;\nstring s;\n\n//数字转火星,每13进1\nvoid ChangeOne(string s){\n    int num = stoi(s);//转化为数字\n    if (num / 13 != 0)//有高位\n        cout << high[num / 13];\n    if ((num / 13 != 0) && (num % 13 != 0))//有低位，输出空格\n        cout << \" \"; \n    if ((num % 13 != 0) || num == 0)//输出低位的，但是注意是0的情况，0mod13是0，特判啊 \n        cout << low[num % 13];\n}\n\n//火星转数字\nvoid ChangeTwo(string s){\n    // if (s == \"tret\")\n    //     cout << 0;\n    int len = s.size();\n    if (len == 3){//一位火星文\n        for (int i = 0; i < 13; i++){\n            if (low[i] == s){//\n                cout << i;\n                break; //退出\n            }\n            else if (high[i] == s){\n                cout << i * 13;\n                break; //退出\n            }\n        }\n    }\n    else{\n       string s1,s2;\n        int m = 0,k = 0;//做十位，个位\n        for(int j = 0; j < s.size(); j++){\n            if(s[j] != ' ')\n                s1 += s[j];//以空格为分界线区分两个字符串,s1是低位，s2是高位\n            else{\n            s2 = s1;\n            s1 = \"\";    \n            }\n        }\n        for(int i = 0; i < 13; i++){\n            if(s1 == low[i]) m=i;\n            if(s2 == high[i]) k=i;\n        }\n        cout << k * 13 + m;\n    }\n}\n\n\n\nint main(){\n    cin >> n;\n    getchar();\n    for(int i = 0; i < n; i++){\n        //每行给出一个 [0, 169) 区间内的数字 —— 或者是地球文，或者是火星文,火星文有空格，使用getline\n        getline(cin, s);\n        if (s[0] >= '0' && s[0] <= '9')\n            ChangeOne(s);\n        else\n            ChangeTwo(s);\n\n        cout << endl; //换行\n    }\n    return 0;\n}\n```\n然后，发现了ChangeTwoA没必要进行分类。依据空格分隔字符串，如果有空格，就是两位火星文，分割为s1,s2再遍历转化，没有空格,只有s1就够了。\n\n```js\n//foreverking\n#include <vector>\n#include <cstdio>\n#include <queue>\n#include <algorithm>\n#include <cstring>\n#include <iostream>\n#include <cmath>\n#include <string>\nusing namespace std;\n\nstring low[13] = {\"tret\", \"jan\", \"feb\", \"mar\", \"apr\", \"may\", \"jun\", \"jly\", \"aug\", \"sep\", \"oct\", \"nov\", \"dec\"}; //0~12.低位的\nstring high[13] = {\" \", \"tam\", \"hel\", \"maa\", \"huh\", \"tou\", \"kes\", \"hei\", \"elo\", \"syy\", \"lok\", \"mer\", \"jou\"};        //高位\n\nint n;\nstring s;\n\n//数字转火星,每13进1\nvoid ChangeOne(string s){\n    int num = stoi(s);//转化为数字\n    if (num / 13 != 0)//有高位\n        cout << high[num / 13];\n    if ((num / 13 != 0) && (num % 13 != 0))//有低位，输出空格\n        cout << \" \"; \n    if ((num % 13 != 0) || num == 0)//输出低位的，但是注意是0的情况，0mod13是0，特判啊 \n        cout << low[num % 13];\n}\n\n//火星转数字\nvoid ChangeTwo(string s){\n    // if (s == \"tret\")\n    //     cout << 0;\n       string s1,s2;\n        int m = 0,k = 0;\n        for(int j = 0; j < s.size(); j++){\n            if(s[j] != ' ')\n                s1 += s[j];//以空格为分界线区分两个字符串,火星文两位时,s1是低位，s2是高位。火星文是一位时，只有s1\n            else{\n            s2 = s1;\n            s1 = \"\";    \n            }\n        }\n        for(int i = 0; i < 13; i++){//因为可能没有空格，所以s1可能为高位也可能为低位\n            if(s1 == low[i]) m=i;\n            if(s1 == high[i]) k=i;\n            if(s2 == high[i]) k=i;\n        }\n        cout << k * 13 + m;\n    }\n\n\n\nint main(){\n    cin >> n;\n    getchar();\n    for(int i = 0; i < n; i++){\n        //每行给出一个 [0, 169) 区间内的数字 —— 或者是地球文，或者是火星文,火星文有空格，使用getline\n        getline(cin, s);\n        if (s[0] >= '0' && s[0] <= '9')\n            ChangeOne(s);\n        else\n            ChangeTwo(s);\n\n        cout << endl; //换行\n    }\n    return 0;\n}\n```\n[题目链接](https://pintia.cn/problem-sets/994805260223102976/problems/994805279328157696)\n\n","source":"_posts/PAT乙级1044.md","raw":"---\ntitle: PAT乙级1044\ndate: 2021-05-24 22:11:40\ntags: \n    - Study\ncategories: \n    - 题解\n    - PAT题解\n---\n### 题目\n火星人是以 13 进制计数的：\n\n- 地球人的 0 被火星人称为 tret。\n- 地球人数字 1 到 12 的火星文分别为：jan, feb, mar, apr, may, jun, jly, aug, sep, oct, nov, dec。\n- 火星人将进位以后的 12 个高位数字分别称为：tam, hel, maa, huh, tou, kes, hei, elo, syy, lok, mer, jou。\n例如地球人的数字 29 翻译成火星文就是 hel mar；而火星文 elo nov 对应地球数字 115。为了方便交流，请你编写程序实现地球和火星数字之间的互译\n### 输入格式\n输入第一行给出一个正整数 N（<100），随后 N 行，每行给出一个 [0, 169)区间内的数字 —— 或者是地球文，或者是火星文\n\n### 输出格式\n对应输入的每一行，在一行中输出翻译后的另一种语言的数字。\n### 思路\n有两个前置字符串数组：`string low[13] = {\"tret\", \"jan\", \"feb\", \"mar\", \"apr\", \"may\", \"jun\", \"jly\", \"aug\", \"sep\", \"oct\", \"nov\", \"dec\"}; //0~12.低位的\nstring high[13] = {\" \", \"tam\", \"hel\", \"maa\", \"huh\", \"tou\", \"kes\", \"hei\", \"elo\", \"syy\", \"lok\", \"mer\", \"jou\"};        //高位`\n\n输入你想转化的数字或者火星文[输入个数n后记得geychar()，吞掉那个空格，我傻傻的找bug。老菜了]，如果是数字，就去ChangeOne函数，如果是火星文，就去ChangeTwo函数。\n\n\nChangeOne，先把输入的字符串使用stoi转化为整数num，然后判定，如果num/13不为0（13进制的），那么就有高位，输出对应的high[num / 13]。在看是不是输出空格（有高位，有低位的情况）。最后有低位输出低位。\n**注意，因为0/13为0，所以如果是0就有问题，要进行特判。**\n\nChangeTwo，进行一个分类，输入的是两位火星文一类，一位火星文一类，依靠字符串长度进行区分。一位火星文直接与两个字符串数组遍历对比就行了。两位火星文，就要依据空格区分为两个字符串s1,s2，进行转化。\n\n```js\n//foreverking\n#include <vector>\n#include <cstdio>\n#include <queue>\n#include <algorithm>\n#include <cstring>\n#include <iostream>\n#include <cmath>\n#include <string>\nusing namespace std;\n\nstring low[13] = {\"tret\", \"jan\", \"feb\", \"mar\", \"apr\", \"may\", \"jun\", \"jly\", \"aug\", \"sep\", \"oct\", \"nov\", \"dec\"}; //0~12.低位的\nstring high[13] = {\" \", \"tam\", \"hel\", \"maa\", \"huh\", \"tou\", \"kes\", \"hei\", \"elo\", \"syy\", \"lok\", \"mer\", \"jou\"};        //高位\n\nint n;\nstring s;\n\n//数字转火星,每13进1\nvoid ChangeOne(string s){\n    int num = stoi(s);//转化为数字\n    if (num / 13 != 0)//有高位\n        cout << high[num / 13];\n    if ((num / 13 != 0) && (num % 13 != 0))//有低位，输出空格\n        cout << \" \"; \n    if ((num % 13 != 0) || num == 0)//输出低位的，但是注意是0的情况，0mod13是0，特判啊 \n        cout << low[num % 13];\n}\n\n//火星转数字\nvoid ChangeTwo(string s){\n    // if (s == \"tret\")\n    //     cout << 0;\n    int len = s.size();\n    if (len == 3){//一位火星文\n        for (int i = 0; i < 13; i++){\n            if (low[i] == s){//\n                cout << i;\n                break; //退出\n            }\n            else if (high[i] == s){\n                cout << i * 13;\n                break; //退出\n            }\n        }\n    }\n    else{\n       string s1,s2;\n        int m = 0,k = 0;//做十位，个位\n        for(int j = 0; j < s.size(); j++){\n            if(s[j] != ' ')\n                s1 += s[j];//以空格为分界线区分两个字符串,s1是低位，s2是高位\n            else{\n            s2 = s1;\n            s1 = \"\";    \n            }\n        }\n        for(int i = 0; i < 13; i++){\n            if(s1 == low[i]) m=i;\n            if(s2 == high[i]) k=i;\n        }\n        cout << k * 13 + m;\n    }\n}\n\n\n\nint main(){\n    cin >> n;\n    getchar();\n    for(int i = 0; i < n; i++){\n        //每行给出一个 [0, 169) 区间内的数字 —— 或者是地球文，或者是火星文,火星文有空格，使用getline\n        getline(cin, s);\n        if (s[0] >= '0' && s[0] <= '9')\n            ChangeOne(s);\n        else\n            ChangeTwo(s);\n\n        cout << endl; //换行\n    }\n    return 0;\n}\n```\n然后，发现了ChangeTwoA没必要进行分类。依据空格分隔字符串，如果有空格，就是两位火星文，分割为s1,s2再遍历转化，没有空格,只有s1就够了。\n\n```js\n//foreverking\n#include <vector>\n#include <cstdio>\n#include <queue>\n#include <algorithm>\n#include <cstring>\n#include <iostream>\n#include <cmath>\n#include <string>\nusing namespace std;\n\nstring low[13] = {\"tret\", \"jan\", \"feb\", \"mar\", \"apr\", \"may\", \"jun\", \"jly\", \"aug\", \"sep\", \"oct\", \"nov\", \"dec\"}; //0~12.低位的\nstring high[13] = {\" \", \"tam\", \"hel\", \"maa\", \"huh\", \"tou\", \"kes\", \"hei\", \"elo\", \"syy\", \"lok\", \"mer\", \"jou\"};        //高位\n\nint n;\nstring s;\n\n//数字转火星,每13进1\nvoid ChangeOne(string s){\n    int num = stoi(s);//转化为数字\n    if (num / 13 != 0)//有高位\n        cout << high[num / 13];\n    if ((num / 13 != 0) && (num % 13 != 0))//有低位，输出空格\n        cout << \" \"; \n    if ((num % 13 != 0) || num == 0)//输出低位的，但是注意是0的情况，0mod13是0，特判啊 \n        cout << low[num % 13];\n}\n\n//火星转数字\nvoid ChangeTwo(string s){\n    // if (s == \"tret\")\n    //     cout << 0;\n       string s1,s2;\n        int m = 0,k = 0;\n        for(int j = 0; j < s.size(); j++){\n            if(s[j] != ' ')\n                s1 += s[j];//以空格为分界线区分两个字符串,火星文两位时,s1是低位，s2是高位。火星文是一位时，只有s1\n            else{\n            s2 = s1;\n            s1 = \"\";    \n            }\n        }\n        for(int i = 0; i < 13; i++){//因为可能没有空格，所以s1可能为高位也可能为低位\n            if(s1 == low[i]) m=i;\n            if(s1 == high[i]) k=i;\n            if(s2 == high[i]) k=i;\n        }\n        cout << k * 13 + m;\n    }\n\n\n\nint main(){\n    cin >> n;\n    getchar();\n    for(int i = 0; i < n; i++){\n        //每行给出一个 [0, 169) 区间内的数字 —— 或者是地球文，或者是火星文,火星文有空格，使用getline\n        getline(cin, s);\n        if (s[0] >= '0' && s[0] <= '9')\n            ChangeOne(s);\n        else\n            ChangeTwo(s);\n\n        cout << endl; //换行\n    }\n    return 0;\n}\n```\n[题目链接](https://pintia.cn/problem-sets/994805260223102976/problems/994805279328157696)\n\n","slug":"PAT乙级1044","published":1,"updated":"2021-05-24T14:31:51.273Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktvk78fh00291cws4ccz4x0p","content":"\n        <h3 id=\"题目\"   >\n          <a href=\"#题目\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h3>\n      <p>火星人是以 13 进制计数的：</p>\n<ul>\n<li>地球人的 0 被火星人称为 tret。</li>\n<li>地球人数字 1 到 12 的火星文分别为：jan, feb, mar, apr, may, jun, jly, aug, sep, oct, nov, dec。</li>\n<li>火星人将进位以后的 12 个高位数字分别称为：tam, hel, maa, huh, tou, kes, hei, elo, syy, lok, mer, jou。<br>例如地球人的数字 29 翻译成火星文就是 hel mar；而火星文 elo nov 对应地球数字 115。为了方便交流，请你编写程序实现地球和火星数字之间的互译\n        <h3 id=\"输入格式\"   >\n          <a href=\"#输入格式\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#输入格式\" class=\"headerlink\" title=\"输入格式\"></a>输入格式</h3>\n      输入第一行给出一个正整数 N（&lt;100），随后 N 行，每行给出一个 [0, 169)区间内的数字 —— 或者是地球文，或者是火星文</li>\n</ul>\n\n        <h3 id=\"输出格式\"   >\n          <a href=\"#输出格式\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#输出格式\" class=\"headerlink\" title=\"输出格式\"></a>输出格式</h3>\n      <p>对应输入的每一行，在一行中输出翻译后的另一种语言的数字。</p>\n\n        <h3 id=\"思路\"   >\n          <a href=\"#思路\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3>\n      <p>有两个前置字符串数组：<code>string low[13] = &#123;&quot;tret&quot;, &quot;jan&quot;, &quot;feb&quot;, &quot;mar&quot;, &quot;apr&quot;, &quot;may&quot;, &quot;jun&quot;, &quot;jly&quot;, &quot;aug&quot;, &quot;sep&quot;, &quot;oct&quot;, &quot;nov&quot;, &quot;dec&quot;&#125;; //0~12.低位的 string high[13] = &#123;&quot; &quot;, &quot;tam&quot;, &quot;hel&quot;, &quot;maa&quot;, &quot;huh&quot;, &quot;tou&quot;, &quot;kes&quot;, &quot;hei&quot;, &quot;elo&quot;, &quot;syy&quot;, &quot;lok&quot;, &quot;mer&quot;, &quot;jou&quot;&#125;;        //高位</code></p>\n<p>输入你想转化的数字或者火星文[输入个数n后记得geychar()，吞掉那个空格，我傻傻的找bug。老菜了]，如果是数字，就去ChangeOne函数，如果是火星文，就去ChangeTwo函数。</p>\n<p>ChangeOne，先把输入的字符串使用stoi转化为整数num，然后判定，如果num/13不为0（13进制的），那么就有高位，输出对应的high[num / 13]。在看是不是输出空格（有高位，有低位的情况）。最后有低位输出低位。<br><strong>注意，因为0/13为0，所以如果是0就有问题，要进行特判。</strong></p>\n<p>ChangeTwo，进行一个分类，输入的是两位火星文一类，一位火星文一类，依靠字符串长度进行区分。一位火星文直接与两个字符串数组遍历对比就行了。两位火星文，就要依据空格区分为两个字符串s1,s2，进行转化。</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//foreverking</span></span><br><span class=\"line\">#include &lt;vector&gt;</span><br><span class=\"line\">#include &lt;cstdio&gt;</span><br><span class=\"line\">#include &lt;queue&gt;</span><br><span class=\"line\">#include &lt;algorithm&gt;</span><br><span class=\"line\">#include &lt;cstring&gt;</span><br><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">#include &lt;cmath&gt;</span><br><span class=\"line\">#include &lt;string&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\"></span><br><span class=\"line\">string low[<span class=\"number\">13</span>] = &#123;<span class=\"string\">&quot;tret&quot;</span>, <span class=\"string\">&quot;jan&quot;</span>, <span class=\"string\">&quot;feb&quot;</span>, <span class=\"string\">&quot;mar&quot;</span>, <span class=\"string\">&quot;apr&quot;</span>, <span class=\"string\">&quot;may&quot;</span>, <span class=\"string\">&quot;jun&quot;</span>, <span class=\"string\">&quot;jly&quot;</span>, <span class=\"string\">&quot;aug&quot;</span>, <span class=\"string\">&quot;sep&quot;</span>, <span class=\"string\">&quot;oct&quot;</span>, <span class=\"string\">&quot;nov&quot;</span>, <span class=\"string\">&quot;dec&quot;</span>&#125;; <span class=\"comment\">//0~12.低位的</span></span><br><span class=\"line\">string high[<span class=\"number\">13</span>] = &#123;<span class=\"string\">&quot; &quot;</span>, <span class=\"string\">&quot;tam&quot;</span>, <span class=\"string\">&quot;hel&quot;</span>, <span class=\"string\">&quot;maa&quot;</span>, <span class=\"string\">&quot;huh&quot;</span>, <span class=\"string\">&quot;tou&quot;</span>, <span class=\"string\">&quot;kes&quot;</span>, <span class=\"string\">&quot;hei&quot;</span>, <span class=\"string\">&quot;elo&quot;</span>, <span class=\"string\">&quot;syy&quot;</span>, <span class=\"string\">&quot;lok&quot;</span>, <span class=\"string\">&quot;mer&quot;</span>, <span class=\"string\">&quot;jou&quot;</span>&#125;;        <span class=\"comment\">//高位</span></span><br><span class=\"line\"></span><br><span class=\"line\">int n;</span><br><span class=\"line\">string s;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//数字转火星,每13进1</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"function\"><span class=\"title\">ChangeOne</span>(<span class=\"params\">string s</span>)</span>&#123;</span><br><span class=\"line\">    int num = stoi(s);<span class=\"comment\">//转化为数字</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (num / <span class=\"number\">13</span> != <span class=\"number\">0</span>)<span class=\"comment\">//有高位</span></span><br><span class=\"line\">        cout &lt;&lt; high[num / <span class=\"number\">13</span>];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((num / <span class=\"number\">13</span> != <span class=\"number\">0</span>) &amp;&amp; (num % <span class=\"number\">13</span> != <span class=\"number\">0</span>))<span class=\"comment\">//有低位，输出空格</span></span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot; &quot;</span>; </span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((num % <span class=\"number\">13</span> != <span class=\"number\">0</span>) || num == <span class=\"number\">0</span>)<span class=\"comment\">//输出低位的，但是注意是0的情况，0mod13是0，特判啊 </span></span><br><span class=\"line\">        cout &lt;&lt; low[num % <span class=\"number\">13</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//火星转数字</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"function\"><span class=\"title\">ChangeTwo</span>(<span class=\"params\">string s</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// if (s == &quot;tret&quot;)</span></span><br><span class=\"line\">    <span class=\"comment\">//     cout &lt;&lt; 0;</span></span><br><span class=\"line\">    int len = s.size();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (len == <span class=\"number\">3</span>)&#123;<span class=\"comment\">//一位火星文</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (int i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">13</span>; i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (low[i] == s)&#123;<span class=\"comment\">//</span></span><br><span class=\"line\">                cout &lt;&lt; i;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>; <span class=\"comment\">//退出</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (high[i] == s)&#123;</span><br><span class=\"line\">                cout &lt;&lt; i * <span class=\"number\">13</span>;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>; <span class=\"comment\">//退出</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">       string s1,s2;</span><br><span class=\"line\">        int m = <span class=\"number\">0</span>,k = <span class=\"number\">0</span>;<span class=\"comment\">//做十位，个位</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(int j = <span class=\"number\">0</span>; j &lt; s.size(); j++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(s[j] != <span class=\"string\">&#x27; &#x27;</span>)</span><br><span class=\"line\">                s1 += s[j];<span class=\"comment\">//以空格为分界线区分两个字符串,s1是低位，s2是高位</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            s2 = s1;</span><br><span class=\"line\">            s1 = <span class=\"string\">&quot;&quot;</span>;    </span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(int i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">13</span>; i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(s1 == low[i]) m=i;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(s2 == high[i]) k=i;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        cout &lt;&lt; k * <span class=\"number\">13</span> + m;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">int <span class=\"function\"><span class=\"title\">main</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    cin &gt;&gt; n;</span><br><span class=\"line\">    getchar();</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(int i = <span class=\"number\">0</span>; i &lt; n; i++)&#123;</span><br><span class=\"line\">        <span class=\"comment\">//每行给出一个 [0, 169) 区间内的数字 —— 或者是地球文，或者是火星文,火星文有空格，使用getline</span></span><br><span class=\"line\">        getline(cin, s);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (s[<span class=\"number\">0</span>] &gt;= <span class=\"string\">&#x27;0&#x27;</span> &amp;&amp; s[<span class=\"number\">0</span>] &lt;= <span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">            ChangeOne(s);</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            ChangeTwo(s);</span><br><span class=\"line\"></span><br><span class=\"line\">        cout &lt;&lt; endl; <span class=\"comment\">//换行</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>然后，发现了ChangeTwoA没必要进行分类。依据空格分隔字符串，如果有空格，就是两位火星文，分割为s1,s2再遍历转化，没有空格,只有s1就够了。</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//foreverking</span></span><br><span class=\"line\">#include &lt;vector&gt;</span><br><span class=\"line\">#include &lt;cstdio&gt;</span><br><span class=\"line\">#include &lt;queue&gt;</span><br><span class=\"line\">#include &lt;algorithm&gt;</span><br><span class=\"line\">#include &lt;cstring&gt;</span><br><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">#include &lt;cmath&gt;</span><br><span class=\"line\">#include &lt;string&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\"></span><br><span class=\"line\">string low[<span class=\"number\">13</span>] = &#123;<span class=\"string\">&quot;tret&quot;</span>, <span class=\"string\">&quot;jan&quot;</span>, <span class=\"string\">&quot;feb&quot;</span>, <span class=\"string\">&quot;mar&quot;</span>, <span class=\"string\">&quot;apr&quot;</span>, <span class=\"string\">&quot;may&quot;</span>, <span class=\"string\">&quot;jun&quot;</span>, <span class=\"string\">&quot;jly&quot;</span>, <span class=\"string\">&quot;aug&quot;</span>, <span class=\"string\">&quot;sep&quot;</span>, <span class=\"string\">&quot;oct&quot;</span>, <span class=\"string\">&quot;nov&quot;</span>, <span class=\"string\">&quot;dec&quot;</span>&#125;; <span class=\"comment\">//0~12.低位的</span></span><br><span class=\"line\">string high[<span class=\"number\">13</span>] = &#123;<span class=\"string\">&quot; &quot;</span>, <span class=\"string\">&quot;tam&quot;</span>, <span class=\"string\">&quot;hel&quot;</span>, <span class=\"string\">&quot;maa&quot;</span>, <span class=\"string\">&quot;huh&quot;</span>, <span class=\"string\">&quot;tou&quot;</span>, <span class=\"string\">&quot;kes&quot;</span>, <span class=\"string\">&quot;hei&quot;</span>, <span class=\"string\">&quot;elo&quot;</span>, <span class=\"string\">&quot;syy&quot;</span>, <span class=\"string\">&quot;lok&quot;</span>, <span class=\"string\">&quot;mer&quot;</span>, <span class=\"string\">&quot;jou&quot;</span>&#125;;        <span class=\"comment\">//高位</span></span><br><span class=\"line\"></span><br><span class=\"line\">int n;</span><br><span class=\"line\">string s;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//数字转火星,每13进1</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"function\"><span class=\"title\">ChangeOne</span>(<span class=\"params\">string s</span>)</span>&#123;</span><br><span class=\"line\">    int num = stoi(s);<span class=\"comment\">//转化为数字</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (num / <span class=\"number\">13</span> != <span class=\"number\">0</span>)<span class=\"comment\">//有高位</span></span><br><span class=\"line\">        cout &lt;&lt; high[num / <span class=\"number\">13</span>];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((num / <span class=\"number\">13</span> != <span class=\"number\">0</span>) &amp;&amp; (num % <span class=\"number\">13</span> != <span class=\"number\">0</span>))<span class=\"comment\">//有低位，输出空格</span></span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot; &quot;</span>; </span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((num % <span class=\"number\">13</span> != <span class=\"number\">0</span>) || num == <span class=\"number\">0</span>)<span class=\"comment\">//输出低位的，但是注意是0的情况，0mod13是0，特判啊 </span></span><br><span class=\"line\">        cout &lt;&lt; low[num % <span class=\"number\">13</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//火星转数字</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"function\"><span class=\"title\">ChangeTwo</span>(<span class=\"params\">string s</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// if (s == &quot;tret&quot;)</span></span><br><span class=\"line\">    <span class=\"comment\">//     cout &lt;&lt; 0;</span></span><br><span class=\"line\">       string s1,s2;</span><br><span class=\"line\">        int m = <span class=\"number\">0</span>,k = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(int j = <span class=\"number\">0</span>; j &lt; s.size(); j++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(s[j] != <span class=\"string\">&#x27; &#x27;</span>)</span><br><span class=\"line\">                s1 += s[j];<span class=\"comment\">//以空格为分界线区分两个字符串,火星文两位时,s1是低位，s2是高位。火星文是一位时，只有s1</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            s2 = s1;</span><br><span class=\"line\">            s1 = <span class=\"string\">&quot;&quot;</span>;    </span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(int i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">13</span>; i++)&#123;<span class=\"comment\">//因为可能没有空格，所以s1可能为高位也可能为低位</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(s1 == low[i]) m=i;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(s1 == high[i]) k=i;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(s2 == high[i]) k=i;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        cout &lt;&lt; k * <span class=\"number\">13</span> + m;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">int <span class=\"function\"><span class=\"title\">main</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    cin &gt;&gt; n;</span><br><span class=\"line\">    getchar();</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(int i = <span class=\"number\">0</span>; i &lt; n; i++)&#123;</span><br><span class=\"line\">        <span class=\"comment\">//每行给出一个 [0, 169) 区间内的数字 —— 或者是地球文，或者是火星文,火星文有空格，使用getline</span></span><br><span class=\"line\">        getline(cin, s);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (s[<span class=\"number\">0</span>] &gt;= <span class=\"string\">&#x27;0&#x27;</span> &amp;&amp; s[<span class=\"number\">0</span>] &lt;= <span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">            ChangeOne(s);</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            ChangeTwo(s);</span><br><span class=\"line\"></span><br><span class=\"line\">        cout &lt;&lt; endl; <span class=\"comment\">//换行</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p><span class=\"exturl\"><a class=\"exturl__link\"   href=\"https://pintia.cn/problem-sets/994805260223102976/problems/994805279328157696\" >题目链接</a><span class=\"exturl__icon\"><i class=\"fas fa-external-link-alt\"></i></span></span></p>\n","site":{"data":{}},"excerpt":"","more":"\n        <h3 id=\"题目\"   >\n          <a href=\"#题目\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h3>\n      <p>火星人是以 13 进制计数的：</p>\n<ul>\n<li>地球人的 0 被火星人称为 tret。</li>\n<li>地球人数字 1 到 12 的火星文分别为：jan, feb, mar, apr, may, jun, jly, aug, sep, oct, nov, dec。</li>\n<li>火星人将进位以后的 12 个高位数字分别称为：tam, hel, maa, huh, tou, kes, hei, elo, syy, lok, mer, jou。<br>例如地球人的数字 29 翻译成火星文就是 hel mar；而火星文 elo nov 对应地球数字 115。为了方便交流，请你编写程序实现地球和火星数字之间的互译\n        <h3 id=\"输入格式\"   >\n          <a href=\"#输入格式\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#输入格式\" class=\"headerlink\" title=\"输入格式\"></a>输入格式</h3>\n      输入第一行给出一个正整数 N（&lt;100），随后 N 行，每行给出一个 [0, 169)区间内的数字 —— 或者是地球文，或者是火星文</li>\n</ul>\n\n        <h3 id=\"输出格式\"   >\n          <a href=\"#输出格式\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#输出格式\" class=\"headerlink\" title=\"输出格式\"></a>输出格式</h3>\n      <p>对应输入的每一行，在一行中输出翻译后的另一种语言的数字。</p>\n\n        <h3 id=\"思路\"   >\n          <a href=\"#思路\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3>\n      <p>有两个前置字符串数组：<code>string low[13] = &#123;&quot;tret&quot;, &quot;jan&quot;, &quot;feb&quot;, &quot;mar&quot;, &quot;apr&quot;, &quot;may&quot;, &quot;jun&quot;, &quot;jly&quot;, &quot;aug&quot;, &quot;sep&quot;, &quot;oct&quot;, &quot;nov&quot;, &quot;dec&quot;&#125;; //0~12.低位的 string high[13] = &#123;&quot; &quot;, &quot;tam&quot;, &quot;hel&quot;, &quot;maa&quot;, &quot;huh&quot;, &quot;tou&quot;, &quot;kes&quot;, &quot;hei&quot;, &quot;elo&quot;, &quot;syy&quot;, &quot;lok&quot;, &quot;mer&quot;, &quot;jou&quot;&#125;;        //高位</code></p>\n<p>输入你想转化的数字或者火星文[输入个数n后记得geychar()，吞掉那个空格，我傻傻的找bug。老菜了]，如果是数字，就去ChangeOne函数，如果是火星文，就去ChangeTwo函数。</p>\n<p>ChangeOne，先把输入的字符串使用stoi转化为整数num，然后判定，如果num/13不为0（13进制的），那么就有高位，输出对应的high[num / 13]。在看是不是输出空格（有高位，有低位的情况）。最后有低位输出低位。<br><strong>注意，因为0/13为0，所以如果是0就有问题，要进行特判。</strong></p>\n<p>ChangeTwo，进行一个分类，输入的是两位火星文一类，一位火星文一类，依靠字符串长度进行区分。一位火星文直接与两个字符串数组遍历对比就行了。两位火星文，就要依据空格区分为两个字符串s1,s2，进行转化。</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//foreverking</span></span><br><span class=\"line\">#include &lt;vector&gt;</span><br><span class=\"line\">#include &lt;cstdio&gt;</span><br><span class=\"line\">#include &lt;queue&gt;</span><br><span class=\"line\">#include &lt;algorithm&gt;</span><br><span class=\"line\">#include &lt;cstring&gt;</span><br><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">#include &lt;cmath&gt;</span><br><span class=\"line\">#include &lt;string&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\"></span><br><span class=\"line\">string low[<span class=\"number\">13</span>] = &#123;<span class=\"string\">&quot;tret&quot;</span>, <span class=\"string\">&quot;jan&quot;</span>, <span class=\"string\">&quot;feb&quot;</span>, <span class=\"string\">&quot;mar&quot;</span>, <span class=\"string\">&quot;apr&quot;</span>, <span class=\"string\">&quot;may&quot;</span>, <span class=\"string\">&quot;jun&quot;</span>, <span class=\"string\">&quot;jly&quot;</span>, <span class=\"string\">&quot;aug&quot;</span>, <span class=\"string\">&quot;sep&quot;</span>, <span class=\"string\">&quot;oct&quot;</span>, <span class=\"string\">&quot;nov&quot;</span>, <span class=\"string\">&quot;dec&quot;</span>&#125;; <span class=\"comment\">//0~12.低位的</span></span><br><span class=\"line\">string high[<span class=\"number\">13</span>] = &#123;<span class=\"string\">&quot; &quot;</span>, <span class=\"string\">&quot;tam&quot;</span>, <span class=\"string\">&quot;hel&quot;</span>, <span class=\"string\">&quot;maa&quot;</span>, <span class=\"string\">&quot;huh&quot;</span>, <span class=\"string\">&quot;tou&quot;</span>, <span class=\"string\">&quot;kes&quot;</span>, <span class=\"string\">&quot;hei&quot;</span>, <span class=\"string\">&quot;elo&quot;</span>, <span class=\"string\">&quot;syy&quot;</span>, <span class=\"string\">&quot;lok&quot;</span>, <span class=\"string\">&quot;mer&quot;</span>, <span class=\"string\">&quot;jou&quot;</span>&#125;;        <span class=\"comment\">//高位</span></span><br><span class=\"line\"></span><br><span class=\"line\">int n;</span><br><span class=\"line\">string s;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//数字转火星,每13进1</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"function\"><span class=\"title\">ChangeOne</span>(<span class=\"params\">string s</span>)</span>&#123;</span><br><span class=\"line\">    int num = stoi(s);<span class=\"comment\">//转化为数字</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (num / <span class=\"number\">13</span> != <span class=\"number\">0</span>)<span class=\"comment\">//有高位</span></span><br><span class=\"line\">        cout &lt;&lt; high[num / <span class=\"number\">13</span>];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((num / <span class=\"number\">13</span> != <span class=\"number\">0</span>) &amp;&amp; (num % <span class=\"number\">13</span> != <span class=\"number\">0</span>))<span class=\"comment\">//有低位，输出空格</span></span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot; &quot;</span>; </span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((num % <span class=\"number\">13</span> != <span class=\"number\">0</span>) || num == <span class=\"number\">0</span>)<span class=\"comment\">//输出低位的，但是注意是0的情况，0mod13是0，特判啊 </span></span><br><span class=\"line\">        cout &lt;&lt; low[num % <span class=\"number\">13</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//火星转数字</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"function\"><span class=\"title\">ChangeTwo</span>(<span class=\"params\">string s</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// if (s == &quot;tret&quot;)</span></span><br><span class=\"line\">    <span class=\"comment\">//     cout &lt;&lt; 0;</span></span><br><span class=\"line\">    int len = s.size();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (len == <span class=\"number\">3</span>)&#123;<span class=\"comment\">//一位火星文</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (int i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">13</span>; i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (low[i] == s)&#123;<span class=\"comment\">//</span></span><br><span class=\"line\">                cout &lt;&lt; i;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>; <span class=\"comment\">//退出</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (high[i] == s)&#123;</span><br><span class=\"line\">                cout &lt;&lt; i * <span class=\"number\">13</span>;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>; <span class=\"comment\">//退出</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">       string s1,s2;</span><br><span class=\"line\">        int m = <span class=\"number\">0</span>,k = <span class=\"number\">0</span>;<span class=\"comment\">//做十位，个位</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(int j = <span class=\"number\">0</span>; j &lt; s.size(); j++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(s[j] != <span class=\"string\">&#x27; &#x27;</span>)</span><br><span class=\"line\">                s1 += s[j];<span class=\"comment\">//以空格为分界线区分两个字符串,s1是低位，s2是高位</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            s2 = s1;</span><br><span class=\"line\">            s1 = <span class=\"string\">&quot;&quot;</span>;    </span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(int i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">13</span>; i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(s1 == low[i]) m=i;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(s2 == high[i]) k=i;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        cout &lt;&lt; k * <span class=\"number\">13</span> + m;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">int <span class=\"function\"><span class=\"title\">main</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    cin &gt;&gt; n;</span><br><span class=\"line\">    getchar();</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(int i = <span class=\"number\">0</span>; i &lt; n; i++)&#123;</span><br><span class=\"line\">        <span class=\"comment\">//每行给出一个 [0, 169) 区间内的数字 —— 或者是地球文，或者是火星文,火星文有空格，使用getline</span></span><br><span class=\"line\">        getline(cin, s);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (s[<span class=\"number\">0</span>] &gt;= <span class=\"string\">&#x27;0&#x27;</span> &amp;&amp; s[<span class=\"number\">0</span>] &lt;= <span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">            ChangeOne(s);</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            ChangeTwo(s);</span><br><span class=\"line\"></span><br><span class=\"line\">        cout &lt;&lt; endl; <span class=\"comment\">//换行</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>然后，发现了ChangeTwoA没必要进行分类。依据空格分隔字符串，如果有空格，就是两位火星文，分割为s1,s2再遍历转化，没有空格,只有s1就够了。</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//foreverking</span></span><br><span class=\"line\">#include &lt;vector&gt;</span><br><span class=\"line\">#include &lt;cstdio&gt;</span><br><span class=\"line\">#include &lt;queue&gt;</span><br><span class=\"line\">#include &lt;algorithm&gt;</span><br><span class=\"line\">#include &lt;cstring&gt;</span><br><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">#include &lt;cmath&gt;</span><br><span class=\"line\">#include &lt;string&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\"></span><br><span class=\"line\">string low[<span class=\"number\">13</span>] = &#123;<span class=\"string\">&quot;tret&quot;</span>, <span class=\"string\">&quot;jan&quot;</span>, <span class=\"string\">&quot;feb&quot;</span>, <span class=\"string\">&quot;mar&quot;</span>, <span class=\"string\">&quot;apr&quot;</span>, <span class=\"string\">&quot;may&quot;</span>, <span class=\"string\">&quot;jun&quot;</span>, <span class=\"string\">&quot;jly&quot;</span>, <span class=\"string\">&quot;aug&quot;</span>, <span class=\"string\">&quot;sep&quot;</span>, <span class=\"string\">&quot;oct&quot;</span>, <span class=\"string\">&quot;nov&quot;</span>, <span class=\"string\">&quot;dec&quot;</span>&#125;; <span class=\"comment\">//0~12.低位的</span></span><br><span class=\"line\">string high[<span class=\"number\">13</span>] = &#123;<span class=\"string\">&quot; &quot;</span>, <span class=\"string\">&quot;tam&quot;</span>, <span class=\"string\">&quot;hel&quot;</span>, <span class=\"string\">&quot;maa&quot;</span>, <span class=\"string\">&quot;huh&quot;</span>, <span class=\"string\">&quot;tou&quot;</span>, <span class=\"string\">&quot;kes&quot;</span>, <span class=\"string\">&quot;hei&quot;</span>, <span class=\"string\">&quot;elo&quot;</span>, <span class=\"string\">&quot;syy&quot;</span>, <span class=\"string\">&quot;lok&quot;</span>, <span class=\"string\">&quot;mer&quot;</span>, <span class=\"string\">&quot;jou&quot;</span>&#125;;        <span class=\"comment\">//高位</span></span><br><span class=\"line\"></span><br><span class=\"line\">int n;</span><br><span class=\"line\">string s;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//数字转火星,每13进1</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"function\"><span class=\"title\">ChangeOne</span>(<span class=\"params\">string s</span>)</span>&#123;</span><br><span class=\"line\">    int num = stoi(s);<span class=\"comment\">//转化为数字</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (num / <span class=\"number\">13</span> != <span class=\"number\">0</span>)<span class=\"comment\">//有高位</span></span><br><span class=\"line\">        cout &lt;&lt; high[num / <span class=\"number\">13</span>];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((num / <span class=\"number\">13</span> != <span class=\"number\">0</span>) &amp;&amp; (num % <span class=\"number\">13</span> != <span class=\"number\">0</span>))<span class=\"comment\">//有低位，输出空格</span></span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot; &quot;</span>; </span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((num % <span class=\"number\">13</span> != <span class=\"number\">0</span>) || num == <span class=\"number\">0</span>)<span class=\"comment\">//输出低位的，但是注意是0的情况，0mod13是0，特判啊 </span></span><br><span class=\"line\">        cout &lt;&lt; low[num % <span class=\"number\">13</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//火星转数字</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"function\"><span class=\"title\">ChangeTwo</span>(<span class=\"params\">string s</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// if (s == &quot;tret&quot;)</span></span><br><span class=\"line\">    <span class=\"comment\">//     cout &lt;&lt; 0;</span></span><br><span class=\"line\">       string s1,s2;</span><br><span class=\"line\">        int m = <span class=\"number\">0</span>,k = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(int j = <span class=\"number\">0</span>; j &lt; s.size(); j++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(s[j] != <span class=\"string\">&#x27; &#x27;</span>)</span><br><span class=\"line\">                s1 += s[j];<span class=\"comment\">//以空格为分界线区分两个字符串,火星文两位时,s1是低位，s2是高位。火星文是一位时，只有s1</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            s2 = s1;</span><br><span class=\"line\">            s1 = <span class=\"string\">&quot;&quot;</span>;    </span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(int i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">13</span>; i++)&#123;<span class=\"comment\">//因为可能没有空格，所以s1可能为高位也可能为低位</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(s1 == low[i]) m=i;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(s1 == high[i]) k=i;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(s2 == high[i]) k=i;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        cout &lt;&lt; k * <span class=\"number\">13</span> + m;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">int <span class=\"function\"><span class=\"title\">main</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    cin &gt;&gt; n;</span><br><span class=\"line\">    getchar();</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(int i = <span class=\"number\">0</span>; i &lt; n; i++)&#123;</span><br><span class=\"line\">        <span class=\"comment\">//每行给出一个 [0, 169) 区间内的数字 —— 或者是地球文，或者是火星文,火星文有空格，使用getline</span></span><br><span class=\"line\">        getline(cin, s);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (s[<span class=\"number\">0</span>] &gt;= <span class=\"string\">&#x27;0&#x27;</span> &amp;&amp; s[<span class=\"number\">0</span>] &lt;= <span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">            ChangeOne(s);</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            ChangeTwo(s);</span><br><span class=\"line\"></span><br><span class=\"line\">        cout &lt;&lt; endl; <span class=\"comment\">//换行</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p><span class=\"exturl\"><a class=\"exturl__link\"   href=\"https://pintia.cn/problem-sets/994805260223102976/problems/994805279328157696\" >题目链接</a><span class=\"exturl__icon\"><i class=\"fas fa-external-link-alt\"></i></span></span></p>\n"},{"title":"PAT乙级1045","date":"2021-05-26T05:08:18.000Z","_content":"### 题目\n著名的快速排序算法里有一个经典的划分过程：我们通常采用某种方法取一个元素作为主元，通过交换，把比主元小的元素放到它的左边，比主元大的元素放到它的右边。 给定划分后的 N 个互不相同的正整数的排列，请问有多少个元素可能是划分前选取的主元？\n\n例如给定 N=5, 排列是1、3、2、4、5。则：\n\n- 1 的左边没有元素，右边的元素都比它大，所以它可能是主元；\n- 尽管 3 的左边元素都比它小，但其右边的 2 比它小，所以它不能是主元；\n- 尽管 2 的右边元素都比它大，但其左边的 3 比它大，所以它不能是主元；\n- 类似原因，4 和 5 都可能是主元。\n因此，有 3 个元素可能是主元。\n### 输入格式\n输入在第 1 行中给出一个正整数 N（≤10^5）； 第 2 行是空格分隔的 N 个不同的正整数，每个数不超过 10^9。\n### 输出格式\n在第 1 行中输出有可能是主元的元素个数；在第 2 行中按递增顺序输出这些元素，其间以 1 个空格分隔，行首尾不得有多余空格。\n### 思路\n作为一个粗人，一开始想的肯定是暴力，对每一位数字遍历其左右，看是否有不满足条件的。写的很快，也很不荣幸的超时了。\n\n```js\n//foreverking\n#include <vector>\n#include <cstdio>\n#include <queue>\n#include <algorithm>\n#include <cstring>\n#include <iostream>\n#include <cmath>\nusing namespace std;\n\nint n,cnt;\nvector<int> s;\nvector<int> s1;\n\nvoid check(int x,int j){\n    int flag = 1;\n    for(int i = 0; i < j; i ++){\n        if(s[i] > x){\n            flag = 0;\n            break;\n        }\n    }\n    for(int i = n - 1; i > j; i--){\n        if(s[i] < x){\n            flag = 0;\n            break;\n        }\n    }\n    if(flag){\n        s1.push_back(x);\n        cnt++;\n    }\n}\n\nint main(){\n    cin >> n;\n    for(int i = 0; i < n; i++){\n        int a;\n        cin >> a;\n        s.push_back(a);\n    }\n    for(int i = 0; i < n; i++){\n        check(s[i],i);\n    }\n    cout << cnt << endl;\n    for(int i = 0; i < cnt; i++){\n        if(i != 0)\n            cout << \" \";\n        cout << s1[i];\n    }\n    cout << endl;\n    return 0;\n}\n```\n那么着手优化，既然遍历左右会超时，那只要第i个数字大于i左边最大的数字，小于i右边最小的数字，就一定可以作主元。既然要比左边的所有数都要大那就等价于大于左边数的最大值，比右边所有数都小那就是要小于右边所有数的最小值。那么我们可以从左往右遍历一遍，找到每一位数它前面数的最大值；再从右往左遍历一遍，找到每一位数它后面数的最小值。需要注意的是第一个数的左边数的最大值可以认为是0，最后一个数的右边数的最小值可以认为是无穷大，因为需要他们恒满足条件。\n\n细节，思路注释里都有：\n\n```js\n//foreverking\n#include <vector>\n#include <cstdio>\n#include <queue>\n#include <algorithm>\n#include <cstring>\n#include <iostream>\n#include <cmath>\nusing namespace std;\n\nint n, cnt;\nint a,b;\n\nint main(){\n    cin >> n;\n    vector<int> num; //输入的数据\n    vector<int> res; //满足条件的数据\n    vector<int> maxx; //从左往右，每一位左边数据的最大值\n    vector<int> minn; //从右往左，每一位数据右边的最小值\n\n    for (int i = 0; i < n; i++){\n        int x;\n        cin >> x;\n        num.push_back(x); //vector存储所有数据\n    }\n\n    a = num[0];                //最小值初始化\n    b = num[n - 1];            //最大值初始化\n    maxx.push_back(0);          //第一个数据左边最小值设为0\n    minn.push_back(1000000001); //最后一个数据右边最大值为10^9\n\n    for (int i = 0; i < n - 1; i++){ //寻找每一位左边最大值，注意到第n-1个数结束，因为第n个数不会是任何数的左边\n        if (num[i] > a)\n            a = num[i];//存遍历到当前最大的数字\n        maxx.push_back(a);//将第i个数字左边最大的数字压入\n    }\n\n    for (int i = n - 1; i > 0; i--){ //寻找每一位右边最小值，注意到1结束，因为0不会是任何数的右边\n        if (num[i] < b)\n            b = num[i];//存遍历到当前最小的数字\n        minn.push_back(b);//将第i个数字右边最小的数字压入\n    }\n\n    for (int i = 0; i < n; i++){\n        if (num[i] > maxx[i] && num[i] < minn[n - 1 - i]){ //主元满足的条件，比左边最大值大，比右边最小值小\n            res.push_back(num[i]);\n            cnt++;\n        }\n    }\n\n    cout << cnt << endl;\n    //sort(res.begin(), res.end());不用进行排序，实际上若满足主元的条件，其必然是递增的\n    // if (cnt){\n    //     for (int i = 0; i < cnt - 1; i++)\n    //         cout << res[i] << \" \";\n    //     cout << res[cnt - 1];\n    // }\n    // //0个主元的时候单独考虑，需要输出一行空格,虽然我一般都会输出这个换行，意外的没有被坑到\n    //cout << endl;\n    for (int i = 0; i < cnt; i++){\n        if(i != 0)\n            cout << \" \";\n        cout << res[i];\n    }\n    cout << endl;\n\n    return 0;\n}\n```\n也可以看看柳婼版本的代码，永远是很简便\n> 分析：对原序列sort排序，逐个⽐较，当当前元素没有变化并且它左边的所有值的最⼤值都⽐它⼩的\n> 时候就可以认为它⼀定是主元（很容易证明正确性的，毕竟⽆论如何当前这个数要满⾜左边都⽐他⼤\n> 右边都⽐他⼩，那它的排名【当前数在序列中处在第⼏个】⼀定不会变）～\n```js\n//foreverking\n#include <vector>\n#include <cstdio>\n#include <queue>\n#include <algorithm>\n#include <cstring>\n#include <iostream>\n#include <cmath>\nusing namespace std;\n\nint v[100001];\n\nint main(){\n    int n, max = 0, cnt = 0;\n    cin >> n;\n    vector<int> a(n), b(n);\n    for (int i = 0; i < n; i++){\n        cin >> a[i];\n        b[i] = a[i];//b是a的副本\n    }\n    sort(a.begin(), a.end());//对a[]排序\n    for (int i = 0; i < n; i++){\n        if (a[i] == b[i] && b[i] > max)\n            v[cnt++] = b[i];\n        if (b[i] > max)\n            max = b[i];//max为数字左边的最大数字\n    }\n    cout << cnt << endl;\n    for (int i = 0; i < cnt; i++){\n        if (i != 0)\n            cout << \" \";\n        cout << v[i];\n    }\n    cout << endl;\n    return 0;\n}\n```\n[题目链接](https://pintia.cn/problem-sets/994805260223102976/problems/994805278589960192)","source":"_posts/PAT乙级1045.md","raw":"---\ntitle: PAT乙级1045\ndate: 2021-05-26 13:08:18\ntags: \n    - Study\ncategories: \n    - 题解\n    - PAT题解\n---\n### 题目\n著名的快速排序算法里有一个经典的划分过程：我们通常采用某种方法取一个元素作为主元，通过交换，把比主元小的元素放到它的左边，比主元大的元素放到它的右边。 给定划分后的 N 个互不相同的正整数的排列，请问有多少个元素可能是划分前选取的主元？\n\n例如给定 N=5, 排列是1、3、2、4、5。则：\n\n- 1 的左边没有元素，右边的元素都比它大，所以它可能是主元；\n- 尽管 3 的左边元素都比它小，但其右边的 2 比它小，所以它不能是主元；\n- 尽管 2 的右边元素都比它大，但其左边的 3 比它大，所以它不能是主元；\n- 类似原因，4 和 5 都可能是主元。\n因此，有 3 个元素可能是主元。\n### 输入格式\n输入在第 1 行中给出一个正整数 N（≤10^5）； 第 2 行是空格分隔的 N 个不同的正整数，每个数不超过 10^9。\n### 输出格式\n在第 1 行中输出有可能是主元的元素个数；在第 2 行中按递增顺序输出这些元素，其间以 1 个空格分隔，行首尾不得有多余空格。\n### 思路\n作为一个粗人，一开始想的肯定是暴力，对每一位数字遍历其左右，看是否有不满足条件的。写的很快，也很不荣幸的超时了。\n\n```js\n//foreverking\n#include <vector>\n#include <cstdio>\n#include <queue>\n#include <algorithm>\n#include <cstring>\n#include <iostream>\n#include <cmath>\nusing namespace std;\n\nint n,cnt;\nvector<int> s;\nvector<int> s1;\n\nvoid check(int x,int j){\n    int flag = 1;\n    for(int i = 0; i < j; i ++){\n        if(s[i] > x){\n            flag = 0;\n            break;\n        }\n    }\n    for(int i = n - 1; i > j; i--){\n        if(s[i] < x){\n            flag = 0;\n            break;\n        }\n    }\n    if(flag){\n        s1.push_back(x);\n        cnt++;\n    }\n}\n\nint main(){\n    cin >> n;\n    for(int i = 0; i < n; i++){\n        int a;\n        cin >> a;\n        s.push_back(a);\n    }\n    for(int i = 0; i < n; i++){\n        check(s[i],i);\n    }\n    cout << cnt << endl;\n    for(int i = 0; i < cnt; i++){\n        if(i != 0)\n            cout << \" \";\n        cout << s1[i];\n    }\n    cout << endl;\n    return 0;\n}\n```\n那么着手优化，既然遍历左右会超时，那只要第i个数字大于i左边最大的数字，小于i右边最小的数字，就一定可以作主元。既然要比左边的所有数都要大那就等价于大于左边数的最大值，比右边所有数都小那就是要小于右边所有数的最小值。那么我们可以从左往右遍历一遍，找到每一位数它前面数的最大值；再从右往左遍历一遍，找到每一位数它后面数的最小值。需要注意的是第一个数的左边数的最大值可以认为是0，最后一个数的右边数的最小值可以认为是无穷大，因为需要他们恒满足条件。\n\n细节，思路注释里都有：\n\n```js\n//foreverking\n#include <vector>\n#include <cstdio>\n#include <queue>\n#include <algorithm>\n#include <cstring>\n#include <iostream>\n#include <cmath>\nusing namespace std;\n\nint n, cnt;\nint a,b;\n\nint main(){\n    cin >> n;\n    vector<int> num; //输入的数据\n    vector<int> res; //满足条件的数据\n    vector<int> maxx; //从左往右，每一位左边数据的最大值\n    vector<int> minn; //从右往左，每一位数据右边的最小值\n\n    for (int i = 0; i < n; i++){\n        int x;\n        cin >> x;\n        num.push_back(x); //vector存储所有数据\n    }\n\n    a = num[0];                //最小值初始化\n    b = num[n - 1];            //最大值初始化\n    maxx.push_back(0);          //第一个数据左边最小值设为0\n    minn.push_back(1000000001); //最后一个数据右边最大值为10^9\n\n    for (int i = 0; i < n - 1; i++){ //寻找每一位左边最大值，注意到第n-1个数结束，因为第n个数不会是任何数的左边\n        if (num[i] > a)\n            a = num[i];//存遍历到当前最大的数字\n        maxx.push_back(a);//将第i个数字左边最大的数字压入\n    }\n\n    for (int i = n - 1; i > 0; i--){ //寻找每一位右边最小值，注意到1结束，因为0不会是任何数的右边\n        if (num[i] < b)\n            b = num[i];//存遍历到当前最小的数字\n        minn.push_back(b);//将第i个数字右边最小的数字压入\n    }\n\n    for (int i = 0; i < n; i++){\n        if (num[i] > maxx[i] && num[i] < minn[n - 1 - i]){ //主元满足的条件，比左边最大值大，比右边最小值小\n            res.push_back(num[i]);\n            cnt++;\n        }\n    }\n\n    cout << cnt << endl;\n    //sort(res.begin(), res.end());不用进行排序，实际上若满足主元的条件，其必然是递增的\n    // if (cnt){\n    //     for (int i = 0; i < cnt - 1; i++)\n    //         cout << res[i] << \" \";\n    //     cout << res[cnt - 1];\n    // }\n    // //0个主元的时候单独考虑，需要输出一行空格,虽然我一般都会输出这个换行，意外的没有被坑到\n    //cout << endl;\n    for (int i = 0; i < cnt; i++){\n        if(i != 0)\n            cout << \" \";\n        cout << res[i];\n    }\n    cout << endl;\n\n    return 0;\n}\n```\n也可以看看柳婼版本的代码，永远是很简便\n> 分析：对原序列sort排序，逐个⽐较，当当前元素没有变化并且它左边的所有值的最⼤值都⽐它⼩的\n> 时候就可以认为它⼀定是主元（很容易证明正确性的，毕竟⽆论如何当前这个数要满⾜左边都⽐他⼤\n> 右边都⽐他⼩，那它的排名【当前数在序列中处在第⼏个】⼀定不会变）～\n```js\n//foreverking\n#include <vector>\n#include <cstdio>\n#include <queue>\n#include <algorithm>\n#include <cstring>\n#include <iostream>\n#include <cmath>\nusing namespace std;\n\nint v[100001];\n\nint main(){\n    int n, max = 0, cnt = 0;\n    cin >> n;\n    vector<int> a(n), b(n);\n    for (int i = 0; i < n; i++){\n        cin >> a[i];\n        b[i] = a[i];//b是a的副本\n    }\n    sort(a.begin(), a.end());//对a[]排序\n    for (int i = 0; i < n; i++){\n        if (a[i] == b[i] && b[i] > max)\n            v[cnt++] = b[i];\n        if (b[i] > max)\n            max = b[i];//max为数字左边的最大数字\n    }\n    cout << cnt << endl;\n    for (int i = 0; i < cnt; i++){\n        if (i != 0)\n            cout << \" \";\n        cout << v[i];\n    }\n    cout << endl;\n    return 0;\n}\n```\n[题目链接](https://pintia.cn/problem-sets/994805260223102976/problems/994805278589960192)","slug":"PAT乙级1045","published":1,"updated":"2021-06-02T08:05:04.485Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktvk78fi002c1cws7pp4h3ao","content":"\n        <h3 id=\"题目\"   >\n          <a href=\"#题目\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h3>\n      <p>著名的快速排序算法里有一个经典的划分过程：我们通常采用某种方法取一个元素作为主元，通过交换，把比主元小的元素放到它的左边，比主元大的元素放到它的右边。 给定划分后的 N 个互不相同的正整数的排列，请问有多少个元素可能是划分前选取的主元？</p>\n<p>例如给定 N=5, 排列是1、3、2、4、5。则：</p>\n<ul>\n<li>1 的左边没有元素，右边的元素都比它大，所以它可能是主元；</li>\n<li>尽管 3 的左边元素都比它小，但其右边的 2 比它小，所以它不能是主元；</li>\n<li>尽管 2 的右边元素都比它大，但其左边的 3 比它大，所以它不能是主元；</li>\n<li>类似原因，4 和 5 都可能是主元。<br>因此，有 3 个元素可能是主元。\n        <h3 id=\"输入格式\"   >\n          <a href=\"#输入格式\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#输入格式\" class=\"headerlink\" title=\"输入格式\"></a>输入格式</h3>\n      输入在第 1 行中给出一个正整数 N（≤10^5）； 第 2 行是空格分隔的 N 个不同的正整数，每个数不超过 10^9。\n        <h3 id=\"输出格式\"   >\n          <a href=\"#输出格式\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#输出格式\" class=\"headerlink\" title=\"输出格式\"></a>输出格式</h3>\n      在第 1 行中输出有可能是主元的元素个数；在第 2 行中按递增顺序输出这些元素，其间以 1 个空格分隔，行首尾不得有多余空格。\n        <h3 id=\"思路\"   >\n          <a href=\"#思路\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3>\n      作为一个粗人，一开始想的肯定是暴力，对每一位数字遍历其左右，看是否有不满足条件的。写的很快，也很不荣幸的超时了。</li>\n</ul>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//foreverking</span></span><br><span class=\"line\">#include &lt;vector&gt;</span><br><span class=\"line\">#include &lt;cstdio&gt;</span><br><span class=\"line\">#include &lt;queue&gt;</span><br><span class=\"line\">#include &lt;algorithm&gt;</span><br><span class=\"line\">#include &lt;cstring&gt;</span><br><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">#include &lt;cmath&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\"></span><br><span class=\"line\">int n,cnt;</span><br><span class=\"line\">vector&lt;int&gt; s;</span><br><span class=\"line\">vector&lt;int&gt; s1;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"function\"><span class=\"title\">check</span>(<span class=\"params\">int x,int j</span>)</span>&#123;</span><br><span class=\"line\">    int flag = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(int i = <span class=\"number\">0</span>; i &lt; j; i ++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(s[i] &gt; x)&#123;</span><br><span class=\"line\">            flag = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(int i = n - <span class=\"number\">1</span>; i &gt; j; i--)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(s[i] &lt; x)&#123;</span><br><span class=\"line\">            flag = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(flag)&#123;</span><br><span class=\"line\">        s1.push_back(x);</span><br><span class=\"line\">        cnt++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">int <span class=\"function\"><span class=\"title\">main</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    cin &gt;&gt; n;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(int i = <span class=\"number\">0</span>; i &lt; n; i++)&#123;</span><br><span class=\"line\">        int a;</span><br><span class=\"line\">        cin &gt;&gt; a;</span><br><span class=\"line\">        s.push_back(a);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(int i = <span class=\"number\">0</span>; i &lt; n; i++)&#123;</span><br><span class=\"line\">        check(s[i],i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; cnt &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(int i = <span class=\"number\">0</span>; i &lt; cnt; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i != <span class=\"number\">0</span>)</span><br><span class=\"line\">            cout &lt;&lt; <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">        cout &lt;&lt; s1[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>那么着手优化，既然遍历左右会超时，那只要第i个数字大于i左边最大的数字，小于i右边最小的数字，就一定可以作主元。既然要比左边的所有数都要大那就等价于大于左边数的最大值，比右边所有数都小那就是要小于右边所有数的最小值。那么我们可以从左往右遍历一遍，找到每一位数它前面数的最大值；再从右往左遍历一遍，找到每一位数它后面数的最小值。需要注意的是第一个数的左边数的最大值可以认为是0，最后一个数的右边数的最小值可以认为是无穷大，因为需要他们恒满足条件。</p>\n<p>细节，思路注释里都有：</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//foreverking</span></span><br><span class=\"line\">#include &lt;vector&gt;</span><br><span class=\"line\">#include &lt;cstdio&gt;</span><br><span class=\"line\">#include &lt;queue&gt;</span><br><span class=\"line\">#include &lt;algorithm&gt;</span><br><span class=\"line\">#include &lt;cstring&gt;</span><br><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">#include &lt;cmath&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\"></span><br><span class=\"line\">int n, cnt;</span><br><span class=\"line\">int a,b;</span><br><span class=\"line\"></span><br><span class=\"line\">int <span class=\"function\"><span class=\"title\">main</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    cin &gt;&gt; n;</span><br><span class=\"line\">    vector&lt;int&gt; num; <span class=\"comment\">//输入的数据</span></span><br><span class=\"line\">    vector&lt;int&gt; res; <span class=\"comment\">//满足条件的数据</span></span><br><span class=\"line\">    vector&lt;int&gt; maxx; <span class=\"comment\">//从左往右，每一位左边数据的最大值</span></span><br><span class=\"line\">    vector&lt;int&gt; minn; <span class=\"comment\">//从右往左，每一位数据右边的最小值</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (int i = <span class=\"number\">0</span>; i &lt; n; i++)&#123;</span><br><span class=\"line\">        int x;</span><br><span class=\"line\">        cin &gt;&gt; x;</span><br><span class=\"line\">        num.push_back(x); <span class=\"comment\">//vector存储所有数据</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    a = num[<span class=\"number\">0</span>];                <span class=\"comment\">//最小值初始化</span></span><br><span class=\"line\">    b = num[n - <span class=\"number\">1</span>];            <span class=\"comment\">//最大值初始化</span></span><br><span class=\"line\">    maxx.push_back(<span class=\"number\">0</span>);          <span class=\"comment\">//第一个数据左边最小值设为0</span></span><br><span class=\"line\">    minn.push_back(<span class=\"number\">1000000001</span>); <span class=\"comment\">//最后一个数据右边最大值为10^9</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (int i = <span class=\"number\">0</span>; i &lt; n - <span class=\"number\">1</span>; i++)&#123; <span class=\"comment\">//寻找每一位左边最大值，注意到第n-1个数结束，因为第n个数不会是任何数的左边</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (num[i] &gt; a)</span><br><span class=\"line\">            a = num[i];<span class=\"comment\">//存遍历到当前最大的数字</span></span><br><span class=\"line\">        maxx.push_back(a);<span class=\"comment\">//将第i个数字左边最大的数字压入</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (int i = n - <span class=\"number\">1</span>; i &gt; <span class=\"number\">0</span>; i--)&#123; <span class=\"comment\">//寻找每一位右边最小值，注意到1结束，因为0不会是任何数的右边</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (num[i] &lt; b)</span><br><span class=\"line\">            b = num[i];<span class=\"comment\">//存遍历到当前最小的数字</span></span><br><span class=\"line\">        minn.push_back(b);<span class=\"comment\">//将第i个数字右边最小的数字压入</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (int i = <span class=\"number\">0</span>; i &lt; n; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (num[i] &gt; maxx[i] &amp;&amp; num[i] &lt; minn[n - <span class=\"number\">1</span> - i])&#123; <span class=\"comment\">//主元满足的条件，比左边最大值大，比右边最小值小</span></span><br><span class=\"line\">            res.push_back(num[i]);</span><br><span class=\"line\">            cnt++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    cout &lt;&lt; cnt &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"comment\">//sort(res.begin(), res.end());不用进行排序，实际上若满足主元的条件，其必然是递增的</span></span><br><span class=\"line\">    <span class=\"comment\">// if (cnt)&#123;</span></span><br><span class=\"line\">    <span class=\"comment\">//     for (int i = 0; i &lt; cnt - 1; i++)</span></span><br><span class=\"line\">    <span class=\"comment\">//         cout &lt;&lt; res[i] &lt;&lt; &quot; &quot;;</span></span><br><span class=\"line\">    <span class=\"comment\">//     cout &lt;&lt; res[cnt - 1];</span></span><br><span class=\"line\">    <span class=\"comment\">// &#125;</span></span><br><span class=\"line\">    <span class=\"comment\">// //0个主元的时候单独考虑，需要输出一行空格,虽然我一般都会输出这个换行，意外的没有被坑到</span></span><br><span class=\"line\">    <span class=\"comment\">//cout &lt;&lt; endl;</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (int i = <span class=\"number\">0</span>; i &lt; cnt; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i != <span class=\"number\">0</span>)</span><br><span class=\"line\">            cout &lt;&lt; <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">        cout &lt;&lt; res[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>也可以看看柳婼版本的代码，永远是很简便</p>\n<blockquote>\n<p>分析：对原序列sort排序，逐个⽐较，当当前元素没有变化并且它左边的所有值的最⼤值都⽐它⼩的<br>时候就可以认为它⼀定是主元（很容易证明正确性的，毕竟⽆论如何当前这个数要满⾜左边都⽐他⼤<br>右边都⽐他⼩，那它的排名【当前数在序列中处在第⼏个】⼀定不会变）～</p>\n</blockquote>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//foreverking</span></span><br><span class=\"line\">#include &lt;vector&gt;</span><br><span class=\"line\">#include &lt;cstdio&gt;</span><br><span class=\"line\">#include &lt;queue&gt;</span><br><span class=\"line\">#include &lt;algorithm&gt;</span><br><span class=\"line\">#include &lt;cstring&gt;</span><br><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">#include &lt;cmath&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\"></span><br><span class=\"line\">int v[<span class=\"number\">100001</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">int <span class=\"function\"><span class=\"title\">main</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    int n, max = <span class=\"number\">0</span>, cnt = <span class=\"number\">0</span>;</span><br><span class=\"line\">    cin &gt;&gt; n;</span><br><span class=\"line\">    vector&lt;int&gt; a(n), b(n);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (int i = <span class=\"number\">0</span>; i &lt; n; i++)&#123;</span><br><span class=\"line\">        cin &gt;&gt; a[i];</span><br><span class=\"line\">        b[i] = a[i];<span class=\"comment\">//b是a的副本</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    sort(a.begin(), a.end());<span class=\"comment\">//对a[]排序</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (int i = <span class=\"number\">0</span>; i &lt; n; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (a[i] == b[i] &amp;&amp; b[i] &gt; max)</span><br><span class=\"line\">            v[cnt++] = b[i];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (b[i] &gt; max)</span><br><span class=\"line\">            max = b[i];<span class=\"comment\">//max为数字左边的最大数字</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; cnt &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (int i = <span class=\"number\">0</span>; i &lt; cnt; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i != <span class=\"number\">0</span>)</span><br><span class=\"line\">            cout &lt;&lt; <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">        cout &lt;&lt; v[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p><span class=\"exturl\"><a class=\"exturl__link\"   href=\"https://pintia.cn/problem-sets/994805260223102976/problems/994805278589960192\" >题目链接</a><span class=\"exturl__icon\"><i class=\"fas fa-external-link-alt\"></i></span></span></p>\n","site":{"data":{}},"excerpt":"","more":"\n        <h3 id=\"题目\"   >\n          <a href=\"#题目\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h3>\n      <p>著名的快速排序算法里有一个经典的划分过程：我们通常采用某种方法取一个元素作为主元，通过交换，把比主元小的元素放到它的左边，比主元大的元素放到它的右边。 给定划分后的 N 个互不相同的正整数的排列，请问有多少个元素可能是划分前选取的主元？</p>\n<p>例如给定 N=5, 排列是1、3、2、4、5。则：</p>\n<ul>\n<li>1 的左边没有元素，右边的元素都比它大，所以它可能是主元；</li>\n<li>尽管 3 的左边元素都比它小，但其右边的 2 比它小，所以它不能是主元；</li>\n<li>尽管 2 的右边元素都比它大，但其左边的 3 比它大，所以它不能是主元；</li>\n<li>类似原因，4 和 5 都可能是主元。<br>因此，有 3 个元素可能是主元。\n        <h3 id=\"输入格式\"   >\n          <a href=\"#输入格式\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#输入格式\" class=\"headerlink\" title=\"输入格式\"></a>输入格式</h3>\n      输入在第 1 行中给出一个正整数 N（≤10^5）； 第 2 行是空格分隔的 N 个不同的正整数，每个数不超过 10^9。\n        <h3 id=\"输出格式\"   >\n          <a href=\"#输出格式\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#输出格式\" class=\"headerlink\" title=\"输出格式\"></a>输出格式</h3>\n      在第 1 行中输出有可能是主元的元素个数；在第 2 行中按递增顺序输出这些元素，其间以 1 个空格分隔，行首尾不得有多余空格。\n        <h3 id=\"思路\"   >\n          <a href=\"#思路\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3>\n      作为一个粗人，一开始想的肯定是暴力，对每一位数字遍历其左右，看是否有不满足条件的。写的很快，也很不荣幸的超时了。</li>\n</ul>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//foreverking</span></span><br><span class=\"line\">#include &lt;vector&gt;</span><br><span class=\"line\">#include &lt;cstdio&gt;</span><br><span class=\"line\">#include &lt;queue&gt;</span><br><span class=\"line\">#include &lt;algorithm&gt;</span><br><span class=\"line\">#include &lt;cstring&gt;</span><br><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">#include &lt;cmath&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\"></span><br><span class=\"line\">int n,cnt;</span><br><span class=\"line\">vector&lt;int&gt; s;</span><br><span class=\"line\">vector&lt;int&gt; s1;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"function\"><span class=\"title\">check</span>(<span class=\"params\">int x,int j</span>)</span>&#123;</span><br><span class=\"line\">    int flag = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(int i = <span class=\"number\">0</span>; i &lt; j; i ++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(s[i] &gt; x)&#123;</span><br><span class=\"line\">            flag = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(int i = n - <span class=\"number\">1</span>; i &gt; j; i--)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(s[i] &lt; x)&#123;</span><br><span class=\"line\">            flag = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(flag)&#123;</span><br><span class=\"line\">        s1.push_back(x);</span><br><span class=\"line\">        cnt++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">int <span class=\"function\"><span class=\"title\">main</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    cin &gt;&gt; n;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(int i = <span class=\"number\">0</span>; i &lt; n; i++)&#123;</span><br><span class=\"line\">        int a;</span><br><span class=\"line\">        cin &gt;&gt; a;</span><br><span class=\"line\">        s.push_back(a);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(int i = <span class=\"number\">0</span>; i &lt; n; i++)&#123;</span><br><span class=\"line\">        check(s[i],i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; cnt &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(int i = <span class=\"number\">0</span>; i &lt; cnt; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i != <span class=\"number\">0</span>)</span><br><span class=\"line\">            cout &lt;&lt; <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">        cout &lt;&lt; s1[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>那么着手优化，既然遍历左右会超时，那只要第i个数字大于i左边最大的数字，小于i右边最小的数字，就一定可以作主元。既然要比左边的所有数都要大那就等价于大于左边数的最大值，比右边所有数都小那就是要小于右边所有数的最小值。那么我们可以从左往右遍历一遍，找到每一位数它前面数的最大值；再从右往左遍历一遍，找到每一位数它后面数的最小值。需要注意的是第一个数的左边数的最大值可以认为是0，最后一个数的右边数的最小值可以认为是无穷大，因为需要他们恒满足条件。</p>\n<p>细节，思路注释里都有：</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//foreverking</span></span><br><span class=\"line\">#include &lt;vector&gt;</span><br><span class=\"line\">#include &lt;cstdio&gt;</span><br><span class=\"line\">#include &lt;queue&gt;</span><br><span class=\"line\">#include &lt;algorithm&gt;</span><br><span class=\"line\">#include &lt;cstring&gt;</span><br><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">#include &lt;cmath&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\"></span><br><span class=\"line\">int n, cnt;</span><br><span class=\"line\">int a,b;</span><br><span class=\"line\"></span><br><span class=\"line\">int <span class=\"function\"><span class=\"title\">main</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    cin &gt;&gt; n;</span><br><span class=\"line\">    vector&lt;int&gt; num; <span class=\"comment\">//输入的数据</span></span><br><span class=\"line\">    vector&lt;int&gt; res; <span class=\"comment\">//满足条件的数据</span></span><br><span class=\"line\">    vector&lt;int&gt; maxx; <span class=\"comment\">//从左往右，每一位左边数据的最大值</span></span><br><span class=\"line\">    vector&lt;int&gt; minn; <span class=\"comment\">//从右往左，每一位数据右边的最小值</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (int i = <span class=\"number\">0</span>; i &lt; n; i++)&#123;</span><br><span class=\"line\">        int x;</span><br><span class=\"line\">        cin &gt;&gt; x;</span><br><span class=\"line\">        num.push_back(x); <span class=\"comment\">//vector存储所有数据</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    a = num[<span class=\"number\">0</span>];                <span class=\"comment\">//最小值初始化</span></span><br><span class=\"line\">    b = num[n - <span class=\"number\">1</span>];            <span class=\"comment\">//最大值初始化</span></span><br><span class=\"line\">    maxx.push_back(<span class=\"number\">0</span>);          <span class=\"comment\">//第一个数据左边最小值设为0</span></span><br><span class=\"line\">    minn.push_back(<span class=\"number\">1000000001</span>); <span class=\"comment\">//最后一个数据右边最大值为10^9</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (int i = <span class=\"number\">0</span>; i &lt; n - <span class=\"number\">1</span>; i++)&#123; <span class=\"comment\">//寻找每一位左边最大值，注意到第n-1个数结束，因为第n个数不会是任何数的左边</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (num[i] &gt; a)</span><br><span class=\"line\">            a = num[i];<span class=\"comment\">//存遍历到当前最大的数字</span></span><br><span class=\"line\">        maxx.push_back(a);<span class=\"comment\">//将第i个数字左边最大的数字压入</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (int i = n - <span class=\"number\">1</span>; i &gt; <span class=\"number\">0</span>; i--)&#123; <span class=\"comment\">//寻找每一位右边最小值，注意到1结束，因为0不会是任何数的右边</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (num[i] &lt; b)</span><br><span class=\"line\">            b = num[i];<span class=\"comment\">//存遍历到当前最小的数字</span></span><br><span class=\"line\">        minn.push_back(b);<span class=\"comment\">//将第i个数字右边最小的数字压入</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (int i = <span class=\"number\">0</span>; i &lt; n; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (num[i] &gt; maxx[i] &amp;&amp; num[i] &lt; minn[n - <span class=\"number\">1</span> - i])&#123; <span class=\"comment\">//主元满足的条件，比左边最大值大，比右边最小值小</span></span><br><span class=\"line\">            res.push_back(num[i]);</span><br><span class=\"line\">            cnt++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    cout &lt;&lt; cnt &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"comment\">//sort(res.begin(), res.end());不用进行排序，实际上若满足主元的条件，其必然是递增的</span></span><br><span class=\"line\">    <span class=\"comment\">// if (cnt)&#123;</span></span><br><span class=\"line\">    <span class=\"comment\">//     for (int i = 0; i &lt; cnt - 1; i++)</span></span><br><span class=\"line\">    <span class=\"comment\">//         cout &lt;&lt; res[i] &lt;&lt; &quot; &quot;;</span></span><br><span class=\"line\">    <span class=\"comment\">//     cout &lt;&lt; res[cnt - 1];</span></span><br><span class=\"line\">    <span class=\"comment\">// &#125;</span></span><br><span class=\"line\">    <span class=\"comment\">// //0个主元的时候单独考虑，需要输出一行空格,虽然我一般都会输出这个换行，意外的没有被坑到</span></span><br><span class=\"line\">    <span class=\"comment\">//cout &lt;&lt; endl;</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (int i = <span class=\"number\">0</span>; i &lt; cnt; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i != <span class=\"number\">0</span>)</span><br><span class=\"line\">            cout &lt;&lt; <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">        cout &lt;&lt; res[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>也可以看看柳婼版本的代码，永远是很简便</p>\n<blockquote>\n<p>分析：对原序列sort排序，逐个⽐较，当当前元素没有变化并且它左边的所有值的最⼤值都⽐它⼩的<br>时候就可以认为它⼀定是主元（很容易证明正确性的，毕竟⽆论如何当前这个数要满⾜左边都⽐他⼤<br>右边都⽐他⼩，那它的排名【当前数在序列中处在第⼏个】⼀定不会变）～</p>\n</blockquote>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//foreverking</span></span><br><span class=\"line\">#include &lt;vector&gt;</span><br><span class=\"line\">#include &lt;cstdio&gt;</span><br><span class=\"line\">#include &lt;queue&gt;</span><br><span class=\"line\">#include &lt;algorithm&gt;</span><br><span class=\"line\">#include &lt;cstring&gt;</span><br><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">#include &lt;cmath&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\"></span><br><span class=\"line\">int v[<span class=\"number\">100001</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">int <span class=\"function\"><span class=\"title\">main</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    int n, max = <span class=\"number\">0</span>, cnt = <span class=\"number\">0</span>;</span><br><span class=\"line\">    cin &gt;&gt; n;</span><br><span class=\"line\">    vector&lt;int&gt; a(n), b(n);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (int i = <span class=\"number\">0</span>; i &lt; n; i++)&#123;</span><br><span class=\"line\">        cin &gt;&gt; a[i];</span><br><span class=\"line\">        b[i] = a[i];<span class=\"comment\">//b是a的副本</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    sort(a.begin(), a.end());<span class=\"comment\">//对a[]排序</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (int i = <span class=\"number\">0</span>; i &lt; n; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (a[i] == b[i] &amp;&amp; b[i] &gt; max)</span><br><span class=\"line\">            v[cnt++] = b[i];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (b[i] &gt; max)</span><br><span class=\"line\">            max = b[i];<span class=\"comment\">//max为数字左边的最大数字</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; cnt &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (int i = <span class=\"number\">0</span>; i &lt; cnt; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i != <span class=\"number\">0</span>)</span><br><span class=\"line\">            cout &lt;&lt; <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">        cout &lt;&lt; v[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p><span class=\"exturl\"><a class=\"exturl__link\"   href=\"https://pintia.cn/problem-sets/994805260223102976/problems/994805278589960192\" >题目链接</a><span class=\"exturl__icon\"><i class=\"fas fa-external-link-alt\"></i></span></span></p>\n"},{"title":"PAT乙级1047","date":"2021-05-28T04:31:00.000Z","_content":"### 题目\n编程团体赛的规则为：每个参赛队由若干队员组成；所有队员独立比赛；参赛队的成绩为所有队员的成绩和；成绩最高的队获胜。\n\n现给定所有队员的比赛成绩，请你编写程序找出冠军队。\n### 输入格式\n输入第一行给出一个正整数 N（≤10^4），即所有参赛队员总数。随后 N 行，每行给出一位队员的成绩，格式为：队伍编号-队员编号 成绩，其中队伍编号为 1 到 1000 的正整数，队员编号为 1 到 10 的正整数，成绩为 0 到 100 的整数。\n### 输出格式\n在一行中输出冠军队的编号和总成绩，其间以一个空格分隔。注意：题目保证冠军队是唯一的。\n### 思路\n想到了使用map，每次输入更新一下键的值。因为map会按键从小到大排序，所以最后要遍历一下map找到最大值，再输出。\n\n```js\n//foreverking\n#include <vector>\n#include <map>\n#include <cstdio>\n#include <queue>\n#include <algorithm>\n#include <cstring>\n#include <iostream>\n#include <cmath>\nusing namespace std;\n\nint n;\nint idteam,idpresomn,score;\n\n\nint main(){\n    int maxxid = 0,maxxscore = 0;\n    map<int,int> v;\n    cin >> n;\n    for(int i = 0; i < n; i++){\n        scanf(\"%d-%d %d\",&idteam,&idpresomn,&score);\n        //printf(\"%d-%d %d\",idteam,idpresomn,score);\n        v[idteam] += score;\n    }\n    //cout << v.begin()->first << \" \" << v.begin()->second << endl;\n    cout << \"~~~~~~~~~~~~~~~~~~~~\" << endl;\n    for (auto it = v.begin(); it != v.end(); it++) {\n        if(maxxscore < it->second){\n            maxxscore = it->second;\n            maxxid = it->first;\n        }\n    }\n    cout << maxxid << \" \" << maxxscore << endl;\n    return 0;\n}\n```\n[题目链接](https://pintia.cn/problem-sets/994805260223102976/problems/994805277163896832)","source":"_posts/PAT乙级1047.md","raw":"---\ntitle: PAT乙级1047\ndate: 2021-05-28 12:31:00\ntags: \n    - Study\ncategories: \n    - 题解\n    - PAT题解\n---\n### 题目\n编程团体赛的规则为：每个参赛队由若干队员组成；所有队员独立比赛；参赛队的成绩为所有队员的成绩和；成绩最高的队获胜。\n\n现给定所有队员的比赛成绩，请你编写程序找出冠军队。\n### 输入格式\n输入第一行给出一个正整数 N（≤10^4），即所有参赛队员总数。随后 N 行，每行给出一位队员的成绩，格式为：队伍编号-队员编号 成绩，其中队伍编号为 1 到 1000 的正整数，队员编号为 1 到 10 的正整数，成绩为 0 到 100 的整数。\n### 输出格式\n在一行中输出冠军队的编号和总成绩，其间以一个空格分隔。注意：题目保证冠军队是唯一的。\n### 思路\n想到了使用map，每次输入更新一下键的值。因为map会按键从小到大排序，所以最后要遍历一下map找到最大值，再输出。\n\n```js\n//foreverking\n#include <vector>\n#include <map>\n#include <cstdio>\n#include <queue>\n#include <algorithm>\n#include <cstring>\n#include <iostream>\n#include <cmath>\nusing namespace std;\n\nint n;\nint idteam,idpresomn,score;\n\n\nint main(){\n    int maxxid = 0,maxxscore = 0;\n    map<int,int> v;\n    cin >> n;\n    for(int i = 0; i < n; i++){\n        scanf(\"%d-%d %d\",&idteam,&idpresomn,&score);\n        //printf(\"%d-%d %d\",idteam,idpresomn,score);\n        v[idteam] += score;\n    }\n    //cout << v.begin()->first << \" \" << v.begin()->second << endl;\n    cout << \"~~~~~~~~~~~~~~~~~~~~\" << endl;\n    for (auto it = v.begin(); it != v.end(); it++) {\n        if(maxxscore < it->second){\n            maxxscore = it->second;\n            maxxid = it->first;\n        }\n    }\n    cout << maxxid << \" \" << maxxscore << endl;\n    return 0;\n}\n```\n[题目链接](https://pintia.cn/problem-sets/994805260223102976/problems/994805277163896832)","slug":"PAT乙级1047","published":1,"updated":"2021-05-28T04:31:38.634Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktvk78fj002g1cws8xn49jqi","content":"\n        <h3 id=\"题目\"   >\n          <a href=\"#题目\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h3>\n      <p>编程团体赛的规则为：每个参赛队由若干队员组成；所有队员独立比赛；参赛队的成绩为所有队员的成绩和；成绩最高的队获胜。</p>\n<p>现给定所有队员的比赛成绩，请你编写程序找出冠军队。</p>\n\n        <h3 id=\"输入格式\"   >\n          <a href=\"#输入格式\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#输入格式\" class=\"headerlink\" title=\"输入格式\"></a>输入格式</h3>\n      <p>输入第一行给出一个正整数 N（≤10^4），即所有参赛队员总数。随后 N 行，每行给出一位队员的成绩，格式为：队伍编号-队员编号 成绩，其中队伍编号为 1 到 1000 的正整数，队员编号为 1 到 10 的正整数，成绩为 0 到 100 的整数。</p>\n\n        <h3 id=\"输出格式\"   >\n          <a href=\"#输出格式\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#输出格式\" class=\"headerlink\" title=\"输出格式\"></a>输出格式</h3>\n      <p>在一行中输出冠军队的编号和总成绩，其间以一个空格分隔。注意：题目保证冠军队是唯一的。</p>\n\n        <h3 id=\"思路\"   >\n          <a href=\"#思路\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3>\n      <p>想到了使用map，每次输入更新一下键的值。因为map会按键从小到大排序，所以最后要遍历一下map找到最大值，再输出。</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//foreverking</span></span><br><span class=\"line\">#include &lt;vector&gt;</span><br><span class=\"line\">#include &lt;map&gt;</span><br><span class=\"line\">#include &lt;cstdio&gt;</span><br><span class=\"line\">#include &lt;queue&gt;</span><br><span class=\"line\">#include &lt;algorithm&gt;</span><br><span class=\"line\">#include &lt;cstring&gt;</span><br><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">#include &lt;cmath&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\"></span><br><span class=\"line\">int n;</span><br><span class=\"line\">int idteam,idpresomn,score;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">int <span class=\"function\"><span class=\"title\">main</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    int maxxid = <span class=\"number\">0</span>,maxxscore = <span class=\"number\">0</span>;</span><br><span class=\"line\">    map&lt;int,int&gt; v;</span><br><span class=\"line\">    cin &gt;&gt; n;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(int i = <span class=\"number\">0</span>; i &lt; n; i++)&#123;</span><br><span class=\"line\">        scanf(<span class=\"string\">&quot;%d-%d %d&quot;</span>,&amp;idteam,&amp;idpresomn,&amp;score);</span><br><span class=\"line\">        <span class=\"comment\">//printf(&quot;%d-%d %d&quot;,idteam,idpresomn,score);</span></span><br><span class=\"line\">        v[idteam] += score;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//cout &lt;&lt; v.begin()-&gt;first &lt;&lt; &quot; &quot; &lt;&lt; v.begin()-&gt;second &lt;&lt; endl;</span></span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;~~~~~~~~~~~~~~~~~~~~&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (auto it = v.begin(); it != v.end(); it++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(maxxscore &lt; it-&gt;second)&#123;</span><br><span class=\"line\">            maxxscore = it-&gt;second;</span><br><span class=\"line\">            maxxid = it-&gt;first;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; maxxid &lt;&lt; <span class=\"string\">&quot; &quot;</span> &lt;&lt; maxxscore &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p><span class=\"exturl\"><a class=\"exturl__link\"   href=\"https://pintia.cn/problem-sets/994805260223102976/problems/994805277163896832\" >题目链接</a><span class=\"exturl__icon\"><i class=\"fas fa-external-link-alt\"></i></span></span></p>\n","site":{"data":{}},"excerpt":"","more":"\n        <h3 id=\"题目\"   >\n          <a href=\"#题目\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h3>\n      <p>编程团体赛的规则为：每个参赛队由若干队员组成；所有队员独立比赛；参赛队的成绩为所有队员的成绩和；成绩最高的队获胜。</p>\n<p>现给定所有队员的比赛成绩，请你编写程序找出冠军队。</p>\n\n        <h3 id=\"输入格式\"   >\n          <a href=\"#输入格式\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#输入格式\" class=\"headerlink\" title=\"输入格式\"></a>输入格式</h3>\n      <p>输入第一行给出一个正整数 N（≤10^4），即所有参赛队员总数。随后 N 行，每行给出一位队员的成绩，格式为：队伍编号-队员编号 成绩，其中队伍编号为 1 到 1000 的正整数，队员编号为 1 到 10 的正整数，成绩为 0 到 100 的整数。</p>\n\n        <h3 id=\"输出格式\"   >\n          <a href=\"#输出格式\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#输出格式\" class=\"headerlink\" title=\"输出格式\"></a>输出格式</h3>\n      <p>在一行中输出冠军队的编号和总成绩，其间以一个空格分隔。注意：题目保证冠军队是唯一的。</p>\n\n        <h3 id=\"思路\"   >\n          <a href=\"#思路\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3>\n      <p>想到了使用map，每次输入更新一下键的值。因为map会按键从小到大排序，所以最后要遍历一下map找到最大值，再输出。</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//foreverking</span></span><br><span class=\"line\">#include &lt;vector&gt;</span><br><span class=\"line\">#include &lt;map&gt;</span><br><span class=\"line\">#include &lt;cstdio&gt;</span><br><span class=\"line\">#include &lt;queue&gt;</span><br><span class=\"line\">#include &lt;algorithm&gt;</span><br><span class=\"line\">#include &lt;cstring&gt;</span><br><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">#include &lt;cmath&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\"></span><br><span class=\"line\">int n;</span><br><span class=\"line\">int idteam,idpresomn,score;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">int <span class=\"function\"><span class=\"title\">main</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    int maxxid = <span class=\"number\">0</span>,maxxscore = <span class=\"number\">0</span>;</span><br><span class=\"line\">    map&lt;int,int&gt; v;</span><br><span class=\"line\">    cin &gt;&gt; n;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(int i = <span class=\"number\">0</span>; i &lt; n; i++)&#123;</span><br><span class=\"line\">        scanf(<span class=\"string\">&quot;%d-%d %d&quot;</span>,&amp;idteam,&amp;idpresomn,&amp;score);</span><br><span class=\"line\">        <span class=\"comment\">//printf(&quot;%d-%d %d&quot;,idteam,idpresomn,score);</span></span><br><span class=\"line\">        v[idteam] += score;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//cout &lt;&lt; v.begin()-&gt;first &lt;&lt; &quot; &quot; &lt;&lt; v.begin()-&gt;second &lt;&lt; endl;</span></span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;~~~~~~~~~~~~~~~~~~~~&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (auto it = v.begin(); it != v.end(); it++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(maxxscore &lt; it-&gt;second)&#123;</span><br><span class=\"line\">            maxxscore = it-&gt;second;</span><br><span class=\"line\">            maxxid = it-&gt;first;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; maxxid &lt;&lt; <span class=\"string\">&quot; &quot;</span> &lt;&lt; maxxscore &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p><span class=\"exturl\"><a class=\"exturl__link\"   href=\"https://pintia.cn/problem-sets/994805260223102976/problems/994805277163896832\" >题目链接</a><span class=\"exturl__icon\"><i class=\"fas fa-external-link-alt\"></i></span></span></p>\n"},{"title":"PAT乙级1048","date":"2021-05-28T12:02:59.000Z","_content":"### 题目\n本题要求实现一种数字加密方法。首先固定一个加密用正整数 A，对任一正整数 B，将其每 1 位数字与 A 的对应位置上的数字进行以下运算：对奇数位，对应位的数字相加后对 13 取余——这里用 J 代表 10、Q 代表 11、K 代表 12；对偶数位，用 B 的数字减去 A 的数字，若结果为负数，则再加 10。这里令个位为第 1 位。\n### 输入格式\n输入在一行中依次给出 A 和 B，均为不超过 100 位的正整数，其间以空格分隔。\n### 输出格式\n在一行中输出加密后的结果。\n### 思路\n这道题需要对字符串操作比较熟悉。首先需要一个字符串s：`string s = {\"0123456789JQK\"};`，用他来为输出的答案字符串res添砖加瓦。通过遍历对奇数偶数位的字符分别处理，注意，因为遍历第一位是从0开始的，所以奇偶其实是反过来的。  \n因为题目条件：$这里令个位为第 1 位。$，所以要对输入的字符串a,b反过来处理，从而输出res的时候也要反转一下才能输出。从样例可以看出，a,b的位数不一定相同，所以我们要对位数少的进行补足处理，补0.\n\n```js\n//foreverking\n#include <vector>\n#include <cstdio>\n#include <queue>\n#include <algorithm>\n#include <cstring>\n#include <iostream>\n#include <cmath>\nusing namespace std;\n\n/*\nJ 代表 10、Q 代表 11、K 代表 12\n对奇数位，对应位的数字相加后对 13 取余\n用 B 的数字减去 A 的数字，若结果为负数，则再加 10\n*/\n\nstring a,b;//100位用string存\nstring s = {\"0123456789JQK\"};\nstring res;\nchar ch;\n\nint main(){\n    cin >> a >> b;\n    //以个位为第一位，用reverse转置\n    int lenb = b .size(),lena = a.size();//根据样例，a,b位数对不上，需要补足0\n    reverse(a.begin(),a.end());\n    reverse(b.begin(),b.end());\n    if (lena > lenb)\n        b.append(lena - lenb, '0');\n    // else\n    //     a.append(lenb - lena, '0');\n    for(int i = 0; i < a.size(); i++){\n        int temp;\n        if(i % 2 == 0)//奇数\n            temp = (a[i] - '0' + b[i] - '0') % 13;\n        else{//偶数\n            temp = b[i] - a[i];\n            if(temp < 0)\n                temp += 10;\n        }\n        res += s[temp];\n    }\n    // for (int i = res.length() - 1; i >= 0; i--)\n    //     cout << res[i];\n    reverse(res.begin(),res.end());\n    cout << res << endl;\n    return 0;\n}\n//3695Q8118\n//1234567 368782971\n```\n[题目链接](https://pintia.cn/problem-sets/994805260223102976/problems/994805276438282240)","source":"_posts/PAT乙级1048.md","raw":"---\ntitle: PAT乙级1048\ndate: 2021-05-28 20:02:59\ntags: \n    - Study\ncategories: \n    - 题解\n    - PAT题解\n---\n### 题目\n本题要求实现一种数字加密方法。首先固定一个加密用正整数 A，对任一正整数 B，将其每 1 位数字与 A 的对应位置上的数字进行以下运算：对奇数位，对应位的数字相加后对 13 取余——这里用 J 代表 10、Q 代表 11、K 代表 12；对偶数位，用 B 的数字减去 A 的数字，若结果为负数，则再加 10。这里令个位为第 1 位。\n### 输入格式\n输入在一行中依次给出 A 和 B，均为不超过 100 位的正整数，其间以空格分隔。\n### 输出格式\n在一行中输出加密后的结果。\n### 思路\n这道题需要对字符串操作比较熟悉。首先需要一个字符串s：`string s = {\"0123456789JQK\"};`，用他来为输出的答案字符串res添砖加瓦。通过遍历对奇数偶数位的字符分别处理，注意，因为遍历第一位是从0开始的，所以奇偶其实是反过来的。  \n因为题目条件：$这里令个位为第 1 位。$，所以要对输入的字符串a,b反过来处理，从而输出res的时候也要反转一下才能输出。从样例可以看出，a,b的位数不一定相同，所以我们要对位数少的进行补足处理，补0.\n\n```js\n//foreverking\n#include <vector>\n#include <cstdio>\n#include <queue>\n#include <algorithm>\n#include <cstring>\n#include <iostream>\n#include <cmath>\nusing namespace std;\n\n/*\nJ 代表 10、Q 代表 11、K 代表 12\n对奇数位，对应位的数字相加后对 13 取余\n用 B 的数字减去 A 的数字，若结果为负数，则再加 10\n*/\n\nstring a,b;//100位用string存\nstring s = {\"0123456789JQK\"};\nstring res;\nchar ch;\n\nint main(){\n    cin >> a >> b;\n    //以个位为第一位，用reverse转置\n    int lenb = b .size(),lena = a.size();//根据样例，a,b位数对不上，需要补足0\n    reverse(a.begin(),a.end());\n    reverse(b.begin(),b.end());\n    if (lena > lenb)\n        b.append(lena - lenb, '0');\n    // else\n    //     a.append(lenb - lena, '0');\n    for(int i = 0; i < a.size(); i++){\n        int temp;\n        if(i % 2 == 0)//奇数\n            temp = (a[i] - '0' + b[i] - '0') % 13;\n        else{//偶数\n            temp = b[i] - a[i];\n            if(temp < 0)\n                temp += 10;\n        }\n        res += s[temp];\n    }\n    // for (int i = res.length() - 1; i >= 0; i--)\n    //     cout << res[i];\n    reverse(res.begin(),res.end());\n    cout << res << endl;\n    return 0;\n}\n//3695Q8118\n//1234567 368782971\n```\n[题目链接](https://pintia.cn/problem-sets/994805260223102976/problems/994805276438282240)","slug":"PAT乙级1048","published":1,"updated":"2021-05-28T12:04:00.023Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktvk78fl002j1cwsex646lzx","content":"\n        <h3 id=\"题目\"   >\n          <a href=\"#题目\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h3>\n      <p>本题要求实现一种数字加密方法。首先固定一个加密用正整数 A，对任一正整数 B，将其每 1 位数字与 A 的对应位置上的数字进行以下运算：对奇数位，对应位的数字相加后对 13 取余——这里用 J 代表 10、Q 代表 11、K 代表 12；对偶数位，用 B 的数字减去 A 的数字，若结果为负数，则再加 10。这里令个位为第 1 位。</p>\n\n        <h3 id=\"输入格式\"   >\n          <a href=\"#输入格式\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#输入格式\" class=\"headerlink\" title=\"输入格式\"></a>输入格式</h3>\n      <p>输入在一行中依次给出 A 和 B，均为不超过 100 位的正整数，其间以空格分隔。</p>\n\n        <h3 id=\"输出格式\"   >\n          <a href=\"#输出格式\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#输出格式\" class=\"headerlink\" title=\"输出格式\"></a>输出格式</h3>\n      <p>在一行中输出加密后的结果。</p>\n\n        <h3 id=\"思路\"   >\n          <a href=\"#思路\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3>\n      <p>这道题需要对字符串操作比较熟悉。首先需要一个字符串s：<code>string s = &#123;&quot;0123456789JQK&quot;&#125;;</code>，用他来为输出的答案字符串res添砖加瓦。通过遍历对奇数偶数位的字符分别处理，注意，因为遍历第一位是从0开始的，所以奇偶其实是反过来的。<br>因为题目条件：$这里令个位为第 1 位。$，所以要对输入的字符串a,b反过来处理，从而输出res的时候也要反转一下才能输出。从样例可以看出，a,b的位数不一定相同，所以我们要对位数少的进行补足处理，补0.</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//foreverking</span></span><br><span class=\"line\">#include &lt;vector&gt;</span><br><span class=\"line\">#include &lt;cstdio&gt;</span><br><span class=\"line\">#include &lt;queue&gt;</span><br><span class=\"line\">#include &lt;algorithm&gt;</span><br><span class=\"line\">#include &lt;cstring&gt;</span><br><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">#include &lt;cmath&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">J 代表 10、Q 代表 11、K 代表 12</span></span><br><span class=\"line\"><span class=\"comment\">对奇数位，对应位的数字相加后对 13 取余</span></span><br><span class=\"line\"><span class=\"comment\">用 B 的数字减去 A 的数字，若结果为负数，则再加 10</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\">string a,b;<span class=\"comment\">//100位用string存</span></span><br><span class=\"line\">string s = &#123;<span class=\"string\">&quot;0123456789JQK&quot;</span>&#125;;</span><br><span class=\"line\">string res;</span><br><span class=\"line\">char ch;</span><br><span class=\"line\"></span><br><span class=\"line\">int <span class=\"function\"><span class=\"title\">main</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    cin &gt;&gt; a &gt;&gt; b;</span><br><span class=\"line\">    <span class=\"comment\">//以个位为第一位，用reverse转置</span></span><br><span class=\"line\">    int lenb = b .size(),lena = a.size();<span class=\"comment\">//根据样例，a,b位数对不上，需要补足0</span></span><br><span class=\"line\">    reverse(a.begin(),a.end());</span><br><span class=\"line\">    reverse(b.begin(),b.end());</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (lena &gt; lenb)</span><br><span class=\"line\">        b.append(lena - lenb, <span class=\"string\">&#x27;0&#x27;</span>);</span><br><span class=\"line\">    <span class=\"comment\">// else</span></span><br><span class=\"line\">    <span class=\"comment\">//     a.append(lenb - lena, &#x27;0&#x27;);</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(int i = <span class=\"number\">0</span>; i &lt; a.size(); i++)&#123;</span><br><span class=\"line\">        int temp;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i % <span class=\"number\">2</span> == <span class=\"number\">0</span>)<span class=\"comment\">//奇数</span></span><br><span class=\"line\">            temp = (a[i] - <span class=\"string\">&#x27;0&#x27;</span> + b[i] - <span class=\"string\">&#x27;0&#x27;</span>) % <span class=\"number\">13</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span>&#123;<span class=\"comment\">//偶数</span></span><br><span class=\"line\">            temp = b[i] - a[i];</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(temp &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">                temp += <span class=\"number\">10</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        res += s[temp];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// for (int i = res.length() - 1; i &gt;= 0; i--)</span></span><br><span class=\"line\">    <span class=\"comment\">//     cout &lt;&lt; res[i];</span></span><br><span class=\"line\">    reverse(res.begin(),res.end());</span><br><span class=\"line\">    cout &lt;&lt; res &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//3695Q8118</span></span><br><span class=\"line\"><span class=\"comment\">//1234567 368782971</span></span><br></pre></td></tr></table></div></figure>\n<p><span class=\"exturl\"><a class=\"exturl__link\"   href=\"https://pintia.cn/problem-sets/994805260223102976/problems/994805276438282240\" >题目链接</a><span class=\"exturl__icon\"><i class=\"fas fa-external-link-alt\"></i></span></span></p>\n","site":{"data":{}},"excerpt":"","more":"\n        <h3 id=\"题目\"   >\n          <a href=\"#题目\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h3>\n      <p>本题要求实现一种数字加密方法。首先固定一个加密用正整数 A，对任一正整数 B，将其每 1 位数字与 A 的对应位置上的数字进行以下运算：对奇数位，对应位的数字相加后对 13 取余——这里用 J 代表 10、Q 代表 11、K 代表 12；对偶数位，用 B 的数字减去 A 的数字，若结果为负数，则再加 10。这里令个位为第 1 位。</p>\n\n        <h3 id=\"输入格式\"   >\n          <a href=\"#输入格式\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#输入格式\" class=\"headerlink\" title=\"输入格式\"></a>输入格式</h3>\n      <p>输入在一行中依次给出 A 和 B，均为不超过 100 位的正整数，其间以空格分隔。</p>\n\n        <h3 id=\"输出格式\"   >\n          <a href=\"#输出格式\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#输出格式\" class=\"headerlink\" title=\"输出格式\"></a>输出格式</h3>\n      <p>在一行中输出加密后的结果。</p>\n\n        <h3 id=\"思路\"   >\n          <a href=\"#思路\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3>\n      <p>这道题需要对字符串操作比较熟悉。首先需要一个字符串s：<code>string s = &#123;&quot;0123456789JQK&quot;&#125;;</code>，用他来为输出的答案字符串res添砖加瓦。通过遍历对奇数偶数位的字符分别处理，注意，因为遍历第一位是从0开始的，所以奇偶其实是反过来的。<br>因为题目条件：$这里令个位为第 1 位。$，所以要对输入的字符串a,b反过来处理，从而输出res的时候也要反转一下才能输出。从样例可以看出，a,b的位数不一定相同，所以我们要对位数少的进行补足处理，补0.</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//foreverking</span></span><br><span class=\"line\">#include &lt;vector&gt;</span><br><span class=\"line\">#include &lt;cstdio&gt;</span><br><span class=\"line\">#include &lt;queue&gt;</span><br><span class=\"line\">#include &lt;algorithm&gt;</span><br><span class=\"line\">#include &lt;cstring&gt;</span><br><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">#include &lt;cmath&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">J 代表 10、Q 代表 11、K 代表 12</span></span><br><span class=\"line\"><span class=\"comment\">对奇数位，对应位的数字相加后对 13 取余</span></span><br><span class=\"line\"><span class=\"comment\">用 B 的数字减去 A 的数字，若结果为负数，则再加 10</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\">string a,b;<span class=\"comment\">//100位用string存</span></span><br><span class=\"line\">string s = &#123;<span class=\"string\">&quot;0123456789JQK&quot;</span>&#125;;</span><br><span class=\"line\">string res;</span><br><span class=\"line\">char ch;</span><br><span class=\"line\"></span><br><span class=\"line\">int <span class=\"function\"><span class=\"title\">main</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    cin &gt;&gt; a &gt;&gt; b;</span><br><span class=\"line\">    <span class=\"comment\">//以个位为第一位，用reverse转置</span></span><br><span class=\"line\">    int lenb = b .size(),lena = a.size();<span class=\"comment\">//根据样例，a,b位数对不上，需要补足0</span></span><br><span class=\"line\">    reverse(a.begin(),a.end());</span><br><span class=\"line\">    reverse(b.begin(),b.end());</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (lena &gt; lenb)</span><br><span class=\"line\">        b.append(lena - lenb, <span class=\"string\">&#x27;0&#x27;</span>);</span><br><span class=\"line\">    <span class=\"comment\">// else</span></span><br><span class=\"line\">    <span class=\"comment\">//     a.append(lenb - lena, &#x27;0&#x27;);</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(int i = <span class=\"number\">0</span>; i &lt; a.size(); i++)&#123;</span><br><span class=\"line\">        int temp;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i % <span class=\"number\">2</span> == <span class=\"number\">0</span>)<span class=\"comment\">//奇数</span></span><br><span class=\"line\">            temp = (a[i] - <span class=\"string\">&#x27;0&#x27;</span> + b[i] - <span class=\"string\">&#x27;0&#x27;</span>) % <span class=\"number\">13</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span>&#123;<span class=\"comment\">//偶数</span></span><br><span class=\"line\">            temp = b[i] - a[i];</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(temp &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">                temp += <span class=\"number\">10</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        res += s[temp];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// for (int i = res.length() - 1; i &gt;= 0; i--)</span></span><br><span class=\"line\">    <span class=\"comment\">//     cout &lt;&lt; res[i];</span></span><br><span class=\"line\">    reverse(res.begin(),res.end());</span><br><span class=\"line\">    cout &lt;&lt; res &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//3695Q8118</span></span><br><span class=\"line\"><span class=\"comment\">//1234567 368782971</span></span><br></pre></td></tr></table></div></figure>\n<p><span class=\"exturl\"><a class=\"exturl__link\"   href=\"https://pintia.cn/problem-sets/994805260223102976/problems/994805276438282240\" >题目链接</a><span class=\"exturl__icon\"><i class=\"fas fa-external-link-alt\"></i></span></span></p>\n"},{"title":"PAT甲级1001","date":"2021-06-02T08:00:39.000Z","_content":"### 题目\nCalculate a+b and output the sum in standard format -- that is, the digits must be separated into groups of three by commas (unless there are less than four digits).\n### 输入格式\nEach input file contains one test case. Each case contains a pair of integers a and b where −10^6≤a,b≤10^6. The numbers are separated by a space.\n### 输出格式\nFor each test case, you should output the sum of a and b in one line. The sum must be written in the standard format.\n### 翻译\n简略的翻译为计算A+B的和，然后以每三位加⼀个”,”的格式输出.\n### 思路\n看着好像很简单，我也非常轻松的写出了首版代码，非常快的，就是部分正确：\n\n```js\n//foreverking\n#include <vector>\n#include <cstdio>\n#include <queue>\n#include <algorithm>\n#include <cstring>\n#include <iostream>\n#include <cmath>\n#include <stack>\nusing namespace std;\n\nint a, b, cnt;\nstring s;\n\nint main() {\n    cin >> a >> b;\n    int c = a + b;\n    if(c < 0){\n        cout << '-';\n        c = abs(c);//绝对值\n    }\n    s = to_string(c);//转化为string s\n    int len = s.size();\n    for(int i = 0; i < len; i++){\n        cout << s[i];\n        cnt++;\n        if(cnt == 3 && (i + 1) != len && i != len){\n            cout << ',';\n            cnt = 0;\n        }\n    }\n    cout << endl;\n    return 0;\n}\n```\n区分正负，负数先输出'-'.正数不做处理。而后转化为string,每隔三个字符就输出一个','。注意如果是最后一个字符，不输出。让人悲伤的是，他错了，看了一下午，原来他是从后往前数三个添一个','，那么思路就要转化了。  \n\n既然开头的负号，结尾是否输出','都让人为难，而且你知道','是从后找，那就倒着处理字符串。那么你看，先进后出，这不就是栈嘛，基本思路还是一样的，只是用栈去实现。\n\n```js\n//foreverking\n#include <vector>\n#include <cstdio>\n#include <queue>\n#include <algorithm>\n#include <cstring>\n#include <iostream>\n#include <cmath>\n#include <stack>\nusing namespace std;\n//栈,从尾部处理，再从头部出栈\nint a, b, cnt = 0;\n\nint main() {\n    int result;\n    stack<char> outcome;\n    cin >> a >> b;\n    result = a + b;\n    int c = abs(result);\n    while (c > 0) {\n        outcome.push('0' + c % 10);//进栈，转为char\n        c /= 10;\n        cnt++;//计数器，满三归零\n        if (cnt == 3 && c > 0) {\n            outcome.push(',');\n            cnt = 0;//归零\n        }\n    }\n    if(result < 0)\n        cout << '-';\n    else if (result == 0)\n        cout << '0';\n        \n    while (!outcome.empty()) {\n        cout << outcome.top();//输出\n        outcome.pop();//出栈\n    }\n    cout << endl;\n    return 0;\n}\n```\n其实你也可以reevrse这个string再处理，或者直接从尾巴往头数，不过用栈绝对是个好主意。\n\n[题目链接](https://pintia.cn/problem-sets/994805342720868352/problems/994805528788582400)","source":"_posts/PAT甲级1001.md","raw":"---\ntitle: PAT甲级1001\ndate: 2021-06-02 16:00:39\ntags: \n    - Study\n    - 栈\ncategories: \n    - 题解\n    - PAT题解\n---\n### 题目\nCalculate a+b and output the sum in standard format -- that is, the digits must be separated into groups of three by commas (unless there are less than four digits).\n### 输入格式\nEach input file contains one test case. Each case contains a pair of integers a and b where −10^6≤a,b≤10^6. The numbers are separated by a space.\n### 输出格式\nFor each test case, you should output the sum of a and b in one line. The sum must be written in the standard format.\n### 翻译\n简略的翻译为计算A+B的和，然后以每三位加⼀个”,”的格式输出.\n### 思路\n看着好像很简单，我也非常轻松的写出了首版代码，非常快的，就是部分正确：\n\n```js\n//foreverking\n#include <vector>\n#include <cstdio>\n#include <queue>\n#include <algorithm>\n#include <cstring>\n#include <iostream>\n#include <cmath>\n#include <stack>\nusing namespace std;\n\nint a, b, cnt;\nstring s;\n\nint main() {\n    cin >> a >> b;\n    int c = a + b;\n    if(c < 0){\n        cout << '-';\n        c = abs(c);//绝对值\n    }\n    s = to_string(c);//转化为string s\n    int len = s.size();\n    for(int i = 0; i < len; i++){\n        cout << s[i];\n        cnt++;\n        if(cnt == 3 && (i + 1) != len && i != len){\n            cout << ',';\n            cnt = 0;\n        }\n    }\n    cout << endl;\n    return 0;\n}\n```\n区分正负，负数先输出'-'.正数不做处理。而后转化为string,每隔三个字符就输出一个','。注意如果是最后一个字符，不输出。让人悲伤的是，他错了，看了一下午，原来他是从后往前数三个添一个','，那么思路就要转化了。  \n\n既然开头的负号，结尾是否输出','都让人为难，而且你知道','是从后找，那就倒着处理字符串。那么你看，先进后出，这不就是栈嘛，基本思路还是一样的，只是用栈去实现。\n\n```js\n//foreverking\n#include <vector>\n#include <cstdio>\n#include <queue>\n#include <algorithm>\n#include <cstring>\n#include <iostream>\n#include <cmath>\n#include <stack>\nusing namespace std;\n//栈,从尾部处理，再从头部出栈\nint a, b, cnt = 0;\n\nint main() {\n    int result;\n    stack<char> outcome;\n    cin >> a >> b;\n    result = a + b;\n    int c = abs(result);\n    while (c > 0) {\n        outcome.push('0' + c % 10);//进栈，转为char\n        c /= 10;\n        cnt++;//计数器，满三归零\n        if (cnt == 3 && c > 0) {\n            outcome.push(',');\n            cnt = 0;//归零\n        }\n    }\n    if(result < 0)\n        cout << '-';\n    else if (result == 0)\n        cout << '0';\n        \n    while (!outcome.empty()) {\n        cout << outcome.top();//输出\n        outcome.pop();//出栈\n    }\n    cout << endl;\n    return 0;\n}\n```\n其实你也可以reevrse这个string再处理，或者直接从尾巴往头数，不过用栈绝对是个好主意。\n\n[题目链接](https://pintia.cn/problem-sets/994805342720868352/problems/994805528788582400)","slug":"PAT甲级1001","published":1,"updated":"2021-06-02T08:05:39.183Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktvk78fm002n1cws34j2ch1o","content":"\n        <h3 id=\"题目\"   >\n          <a href=\"#题目\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h3>\n      <p>Calculate a+b and output the sum in standard format – that is, the digits must be separated into groups of three by commas (unless there are less than four digits).</p>\n\n        <h3 id=\"输入格式\"   >\n          <a href=\"#输入格式\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#输入格式\" class=\"headerlink\" title=\"输入格式\"></a>输入格式</h3>\n      <p>Each input file contains one test case. Each case contains a pair of integers a and b where −10^6≤a,b≤10^6. The numbers are separated by a space.</p>\n\n        <h3 id=\"输出格式\"   >\n          <a href=\"#输出格式\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#输出格式\" class=\"headerlink\" title=\"输出格式\"></a>输出格式</h3>\n      <p>For each test case, you should output the sum of a and b in one line. The sum must be written in the standard format.</p>\n\n        <h3 id=\"翻译\"   >\n          <a href=\"#翻译\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#翻译\" class=\"headerlink\" title=\"翻译\"></a>翻译</h3>\n      <p>简略的翻译为计算A+B的和，然后以每三位加⼀个”,”的格式输出.</p>\n\n        <h3 id=\"思路\"   >\n          <a href=\"#思路\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3>\n      <p>看着好像很简单，我也非常轻松的写出了首版代码，非常快的，就是部分正确：</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//foreverking</span></span><br><span class=\"line\">#include &lt;vector&gt;</span><br><span class=\"line\">#include &lt;cstdio&gt;</span><br><span class=\"line\">#include &lt;queue&gt;</span><br><span class=\"line\">#include &lt;algorithm&gt;</span><br><span class=\"line\">#include &lt;cstring&gt;</span><br><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">#include &lt;cmath&gt;</span><br><span class=\"line\">#include &lt;stack&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\"></span><br><span class=\"line\">int a, b, cnt;</span><br><span class=\"line\">string s;</span><br><span class=\"line\"></span><br><span class=\"line\">int <span class=\"function\"><span class=\"title\">main</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    cin &gt;&gt; a &gt;&gt; b;</span><br><span class=\"line\">    int c = a + b;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(c &lt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&#x27;-&#x27;</span>;</span><br><span class=\"line\">        c = abs(c);<span class=\"comment\">//绝对值</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    s = to_string(c);<span class=\"comment\">//转化为string s</span></span><br><span class=\"line\">    int len = s.size();</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(int i = <span class=\"number\">0</span>; i &lt; len; i++)&#123;</span><br><span class=\"line\">        cout &lt;&lt; s[i];</span><br><span class=\"line\">        cnt++;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(cnt == <span class=\"number\">3</span> &amp;&amp; (i + <span class=\"number\">1</span>) != len &amp;&amp; i != len)&#123;</span><br><span class=\"line\">            cout &lt;&lt; <span class=\"string\">&#x27;,&#x27;</span>;</span><br><span class=\"line\">            cnt = <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>区分正负，负数先输出’-‘.正数不做处理。而后转化为string,每隔三个字符就输出一个’,’。注意如果是最后一个字符，不输出。让人悲伤的是，他错了，看了一下午，原来他是从后往前数三个添一个’,’，那么思路就要转化了。  </p>\n<p>既然开头的负号，结尾是否输出’,’都让人为难，而且你知道’,’是从后找，那就倒着处理字符串。那么你看，先进后出，这不就是栈嘛，基本思路还是一样的，只是用栈去实现。</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//foreverking</span></span><br><span class=\"line\">#include &lt;vector&gt;</span><br><span class=\"line\">#include &lt;cstdio&gt;</span><br><span class=\"line\">#include &lt;queue&gt;</span><br><span class=\"line\">#include &lt;algorithm&gt;</span><br><span class=\"line\">#include &lt;cstring&gt;</span><br><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">#include &lt;cmath&gt;</span><br><span class=\"line\">#include &lt;stack&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\"><span class=\"comment\">//栈,从尾部处理，再从头部出栈</span></span><br><span class=\"line\">int a, b, cnt = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">int <span class=\"function\"><span class=\"title\">main</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    int result;</span><br><span class=\"line\">    stack&lt;char&gt; outcome;</span><br><span class=\"line\">    cin &gt;&gt; a &gt;&gt; b;</span><br><span class=\"line\">    result = a + b;</span><br><span class=\"line\">    int c = abs(result);</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (c &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        outcome.push(<span class=\"string\">&#x27;0&#x27;</span> + c % <span class=\"number\">10</span>);<span class=\"comment\">//进栈，转为char</span></span><br><span class=\"line\">        c /= <span class=\"number\">10</span>;</span><br><span class=\"line\">        cnt++;<span class=\"comment\">//计数器，满三归零</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (cnt == <span class=\"number\">3</span> &amp;&amp; c &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            outcome.push(<span class=\"string\">&#x27;,&#x27;</span>);</span><br><span class=\"line\">            cnt = <span class=\"number\">0</span>;<span class=\"comment\">//归零</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(result &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&#x27;-&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (result == <span class=\"number\">0</span>)</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"keyword\">while</span> (!outcome.empty()) &#123;</span><br><span class=\"line\">        cout &lt;&lt; outcome.top();<span class=\"comment\">//输出</span></span><br><span class=\"line\">        outcome.pop();<span class=\"comment\">//出栈</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>其实你也可以reevrse这个string再处理，或者直接从尾巴往头数，不过用栈绝对是个好主意。</p>\n<p><span class=\"exturl\"><a class=\"exturl__link\"   href=\"https://pintia.cn/problem-sets/994805342720868352/problems/994805528788582400\" >题目链接</a><span class=\"exturl__icon\"><i class=\"fas fa-external-link-alt\"></i></span></span></p>\n","site":{"data":{}},"excerpt":"","more":"\n        <h3 id=\"题目\"   >\n          <a href=\"#题目\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h3>\n      <p>Calculate a+b and output the sum in standard format – that is, the digits must be separated into groups of three by commas (unless there are less than four digits).</p>\n\n        <h3 id=\"输入格式\"   >\n          <a href=\"#输入格式\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#输入格式\" class=\"headerlink\" title=\"输入格式\"></a>输入格式</h3>\n      <p>Each input file contains one test case. Each case contains a pair of integers a and b where −10^6≤a,b≤10^6. The numbers are separated by a space.</p>\n\n        <h3 id=\"输出格式\"   >\n          <a href=\"#输出格式\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#输出格式\" class=\"headerlink\" title=\"输出格式\"></a>输出格式</h3>\n      <p>For each test case, you should output the sum of a and b in one line. The sum must be written in the standard format.</p>\n\n        <h3 id=\"翻译\"   >\n          <a href=\"#翻译\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#翻译\" class=\"headerlink\" title=\"翻译\"></a>翻译</h3>\n      <p>简略的翻译为计算A+B的和，然后以每三位加⼀个”,”的格式输出.</p>\n\n        <h3 id=\"思路\"   >\n          <a href=\"#思路\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3>\n      <p>看着好像很简单，我也非常轻松的写出了首版代码，非常快的，就是部分正确：</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//foreverking</span></span><br><span class=\"line\">#include &lt;vector&gt;</span><br><span class=\"line\">#include &lt;cstdio&gt;</span><br><span class=\"line\">#include &lt;queue&gt;</span><br><span class=\"line\">#include &lt;algorithm&gt;</span><br><span class=\"line\">#include &lt;cstring&gt;</span><br><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">#include &lt;cmath&gt;</span><br><span class=\"line\">#include &lt;stack&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\"></span><br><span class=\"line\">int a, b, cnt;</span><br><span class=\"line\">string s;</span><br><span class=\"line\"></span><br><span class=\"line\">int <span class=\"function\"><span class=\"title\">main</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    cin &gt;&gt; a &gt;&gt; b;</span><br><span class=\"line\">    int c = a + b;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(c &lt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&#x27;-&#x27;</span>;</span><br><span class=\"line\">        c = abs(c);<span class=\"comment\">//绝对值</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    s = to_string(c);<span class=\"comment\">//转化为string s</span></span><br><span class=\"line\">    int len = s.size();</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(int i = <span class=\"number\">0</span>; i &lt; len; i++)&#123;</span><br><span class=\"line\">        cout &lt;&lt; s[i];</span><br><span class=\"line\">        cnt++;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(cnt == <span class=\"number\">3</span> &amp;&amp; (i + <span class=\"number\">1</span>) != len &amp;&amp; i != len)&#123;</span><br><span class=\"line\">            cout &lt;&lt; <span class=\"string\">&#x27;,&#x27;</span>;</span><br><span class=\"line\">            cnt = <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>区分正负，负数先输出’-‘.正数不做处理。而后转化为string,每隔三个字符就输出一个’,’。注意如果是最后一个字符，不输出。让人悲伤的是，他错了，看了一下午，原来他是从后往前数三个添一个’,’，那么思路就要转化了。  </p>\n<p>既然开头的负号，结尾是否输出’,’都让人为难，而且你知道’,’是从后找，那就倒着处理字符串。那么你看，先进后出，这不就是栈嘛，基本思路还是一样的，只是用栈去实现。</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//foreverking</span></span><br><span class=\"line\">#include &lt;vector&gt;</span><br><span class=\"line\">#include &lt;cstdio&gt;</span><br><span class=\"line\">#include &lt;queue&gt;</span><br><span class=\"line\">#include &lt;algorithm&gt;</span><br><span class=\"line\">#include &lt;cstring&gt;</span><br><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">#include &lt;cmath&gt;</span><br><span class=\"line\">#include &lt;stack&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\"><span class=\"comment\">//栈,从尾部处理，再从头部出栈</span></span><br><span class=\"line\">int a, b, cnt = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">int <span class=\"function\"><span class=\"title\">main</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    int result;</span><br><span class=\"line\">    stack&lt;char&gt; outcome;</span><br><span class=\"line\">    cin &gt;&gt; a &gt;&gt; b;</span><br><span class=\"line\">    result = a + b;</span><br><span class=\"line\">    int c = abs(result);</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (c &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        outcome.push(<span class=\"string\">&#x27;0&#x27;</span> + c % <span class=\"number\">10</span>);<span class=\"comment\">//进栈，转为char</span></span><br><span class=\"line\">        c /= <span class=\"number\">10</span>;</span><br><span class=\"line\">        cnt++;<span class=\"comment\">//计数器，满三归零</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (cnt == <span class=\"number\">3</span> &amp;&amp; c &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            outcome.push(<span class=\"string\">&#x27;,&#x27;</span>);</span><br><span class=\"line\">            cnt = <span class=\"number\">0</span>;<span class=\"comment\">//归零</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(result &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&#x27;-&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (result == <span class=\"number\">0</span>)</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"keyword\">while</span> (!outcome.empty()) &#123;</span><br><span class=\"line\">        cout &lt;&lt; outcome.top();<span class=\"comment\">//输出</span></span><br><span class=\"line\">        outcome.pop();<span class=\"comment\">//出栈</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>其实你也可以reevrse这个string再处理，或者直接从尾巴往头数，不过用栈绝对是个好主意。</p>\n<p><span class=\"exturl\"><a class=\"exturl__link\"   href=\"https://pintia.cn/problem-sets/994805342720868352/problems/994805528788582400\" >题目链接</a><span class=\"exturl__icon\"><i class=\"fas fa-external-link-alt\"></i></span></span></p>\n"},{"title":"PAT甲级1002","date":"2021-08-01T13:48:54.000Z","_content":"### 题目\nThis time, you are supposed to find A+B where A and B are two polynomials.\n### 输入\nEach input file contains one test case. Each case occupies 2 lines, and each line contains the information of a polynomial:  K N1 aN1 N2 aN2 ... NK aNK  \nwhere K is the number of nonzero terms in the polynomial, Ni and aNi (i=1,2,⋯,K) are the exponents and coefficients, respectively. It is given that1≤K≤10，0≤NK<⋯<N2<N1≤1000.\n### 输出\nFor each test case you should output the sum of A and B in one line, with the same format as the input. Notice that there must be NO extra space at the end of each line. Please be accurate to 1 decimal place.\n### 思路\n这就是多项式的加法，需要一个长度为1000以上的数组储存多项式，也就是最后需要输出的。你的输入用一个scanff函数来实现，使用两次分别输入两个多项式，此外scanff还有多项式相加的功能。然后就是数出数组中不为0的元素个数，这就是多项式的项数，最后输出\n\n\n```js\n//foreverking\n#include <vector>\n#include <cstdio>\n#include <queue>\n#include <algorithm>\n#include <cstring>\n#include <iostream>\n#include <cmath>\nusing namespace std;\n\ndouble ans[1001];\nint m,n;\ndouble num;\n\nvoid scanff(){\n    cin >> n;//重复使用n，输入第二组\n    for (int i = 0; i < n; i++){\n        /* code */\n        cin >> m >> num;//m是多项式第一项的指数，num是系数\n        ans[m] += num;\n    }\n}\n\nint main(){\n    \n    scanff();\n    scanff();\n    int cnt = 0;//计数器\n    for(int i = 0; i < 1001; i++){\n        //遍历\n        if(ans[i] != 0)\n            cnt++;//项数\n        }\n\n    cout << cnt;\n    for(int i = 1000; i >= 0; i--){\n        if(ans[i] != 0)\n           printf(\" %d %.1lf\",i,ans[i]);\n    }\n    return 0;\n}\n```\n[题目链接](https://pintia.cn/problem-sets/994805342720868352/problems/994805526272000000)","source":"_posts/PAT甲级1002.md","raw":"---\ntitle: PAT甲级1002\ndate: 2021-08-01 21:48:54\ntags: \n    - Study\ncategories: \n    - 题解\n    - PAT题解\n---\n### 题目\nThis time, you are supposed to find A+B where A and B are two polynomials.\n### 输入\nEach input file contains one test case. Each case occupies 2 lines, and each line contains the information of a polynomial:  K N1 aN1 N2 aN2 ... NK aNK  \nwhere K is the number of nonzero terms in the polynomial, Ni and aNi (i=1,2,⋯,K) are the exponents and coefficients, respectively. It is given that1≤K≤10，0≤NK<⋯<N2<N1≤1000.\n### 输出\nFor each test case you should output the sum of A and B in one line, with the same format as the input. Notice that there must be NO extra space at the end of each line. Please be accurate to 1 decimal place.\n### 思路\n这就是多项式的加法，需要一个长度为1000以上的数组储存多项式，也就是最后需要输出的。你的输入用一个scanff函数来实现，使用两次分别输入两个多项式，此外scanff还有多项式相加的功能。然后就是数出数组中不为0的元素个数，这就是多项式的项数，最后输出\n\n\n```js\n//foreverking\n#include <vector>\n#include <cstdio>\n#include <queue>\n#include <algorithm>\n#include <cstring>\n#include <iostream>\n#include <cmath>\nusing namespace std;\n\ndouble ans[1001];\nint m,n;\ndouble num;\n\nvoid scanff(){\n    cin >> n;//重复使用n，输入第二组\n    for (int i = 0; i < n; i++){\n        /* code */\n        cin >> m >> num;//m是多项式第一项的指数，num是系数\n        ans[m] += num;\n    }\n}\n\nint main(){\n    \n    scanff();\n    scanff();\n    int cnt = 0;//计数器\n    for(int i = 0; i < 1001; i++){\n        //遍历\n        if(ans[i] != 0)\n            cnt++;//项数\n        }\n\n    cout << cnt;\n    for(int i = 1000; i >= 0; i--){\n        if(ans[i] != 0)\n           printf(\" %d %.1lf\",i,ans[i]);\n    }\n    return 0;\n}\n```\n[题目链接](https://pintia.cn/problem-sets/994805342720868352/problems/994805526272000000)","slug":"PAT甲级1002","published":1,"updated":"2021-08-01T13:49:51.273Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktvk78fr002q1cws6aj2h5ry","content":"\n        <h3 id=\"题目\"   >\n          <a href=\"#题目\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h3>\n      <p>This time, you are supposed to find A+B where A and B are two polynomials.</p>\n\n        <h3 id=\"输入\"   >\n          <a href=\"#输入\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#输入\" class=\"headerlink\" title=\"输入\"></a>输入</h3>\n      <p>Each input file contains one test case. Each case occupies 2 lines, and each line contains the information of a polynomial:  K N1 aN1 N2 aN2 … NK aNK<br>where K is the number of nonzero terms in the polynomial, Ni and aNi (i=1,2,⋯,K) are the exponents and coefficients, respectively. It is given that1≤K≤10，0≤NK&lt;⋯&lt;N2&lt;N1≤1000.</p>\n\n        <h3 id=\"输出\"   >\n          <a href=\"#输出\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#输出\" class=\"headerlink\" title=\"输出\"></a>输出</h3>\n      <p>For each test case you should output the sum of A and B in one line, with the same format as the input. Notice that there must be NO extra space at the end of each line. Please be accurate to 1 decimal place.</p>\n\n        <h3 id=\"思路\"   >\n          <a href=\"#思路\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3>\n      <p>这就是多项式的加法，需要一个长度为1000以上的数组储存多项式，也就是最后需要输出的。你的输入用一个scanff函数来实现，使用两次分别输入两个多项式，此外scanff还有多项式相加的功能。然后就是数出数组中不为0的元素个数，这就是多项式的项数，最后输出</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//foreverking</span></span><br><span class=\"line\">#include &lt;vector&gt;</span><br><span class=\"line\">#include &lt;cstdio&gt;</span><br><span class=\"line\">#include &lt;queue&gt;</span><br><span class=\"line\">#include &lt;algorithm&gt;</span><br><span class=\"line\">#include &lt;cstring&gt;</span><br><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">#include &lt;cmath&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\"></span><br><span class=\"line\">double ans[<span class=\"number\">1001</span>];</span><br><span class=\"line\">int m,n;</span><br><span class=\"line\">double num;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"function\"><span class=\"title\">scanff</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    cin &gt;&gt; n;<span class=\"comment\">//重复使用n，输入第二组</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (int i = <span class=\"number\">0</span>; i &lt; n; i++)&#123;</span><br><span class=\"line\">        <span class=\"comment\">/* code */</span></span><br><span class=\"line\">        cin &gt;&gt; m &gt;&gt; num;<span class=\"comment\">//m是多项式第一项的指数，num是系数</span></span><br><span class=\"line\">        ans[m] += num;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">int <span class=\"function\"><span class=\"title\">main</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    scanff();</span><br><span class=\"line\">    scanff();</span><br><span class=\"line\">    int cnt = <span class=\"number\">0</span>;<span class=\"comment\">//计数器</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(int i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">1001</span>; i++)&#123;</span><br><span class=\"line\">        <span class=\"comment\">//遍历</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(ans[i] != <span class=\"number\">0</span>)</span><br><span class=\"line\">            cnt++;<span class=\"comment\">//项数</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    cout &lt;&lt; cnt;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(int i = <span class=\"number\">1000</span>; i &gt;= <span class=\"number\">0</span>; i--)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(ans[i] != <span class=\"number\">0</span>)</span><br><span class=\"line\">           printf(<span class=\"string\">&quot; %d %.1lf&quot;</span>,i,ans[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p><span class=\"exturl\"><a class=\"exturl__link\"   href=\"https://pintia.cn/problem-sets/994805342720868352/problems/994805526272000000\" >题目链接</a><span class=\"exturl__icon\"><i class=\"fas fa-external-link-alt\"></i></span></span></p>\n","site":{"data":{}},"excerpt":"","more":"\n        <h3 id=\"题目\"   >\n          <a href=\"#题目\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h3>\n      <p>This time, you are supposed to find A+B where A and B are two polynomials.</p>\n\n        <h3 id=\"输入\"   >\n          <a href=\"#输入\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#输入\" class=\"headerlink\" title=\"输入\"></a>输入</h3>\n      <p>Each input file contains one test case. Each case occupies 2 lines, and each line contains the information of a polynomial:  K N1 aN1 N2 aN2 … NK aNK<br>where K is the number of nonzero terms in the polynomial, Ni and aNi (i=1,2,⋯,K) are the exponents and coefficients, respectively. It is given that1≤K≤10，0≤NK&lt;⋯&lt;N2&lt;N1≤1000.</p>\n\n        <h3 id=\"输出\"   >\n          <a href=\"#输出\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#输出\" class=\"headerlink\" title=\"输出\"></a>输出</h3>\n      <p>For each test case you should output the sum of A and B in one line, with the same format as the input. Notice that there must be NO extra space at the end of each line. Please be accurate to 1 decimal place.</p>\n\n        <h3 id=\"思路\"   >\n          <a href=\"#思路\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3>\n      <p>这就是多项式的加法，需要一个长度为1000以上的数组储存多项式，也就是最后需要输出的。你的输入用一个scanff函数来实现，使用两次分别输入两个多项式，此外scanff还有多项式相加的功能。然后就是数出数组中不为0的元素个数，这就是多项式的项数，最后输出</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//foreverking</span></span><br><span class=\"line\">#include &lt;vector&gt;</span><br><span class=\"line\">#include &lt;cstdio&gt;</span><br><span class=\"line\">#include &lt;queue&gt;</span><br><span class=\"line\">#include &lt;algorithm&gt;</span><br><span class=\"line\">#include &lt;cstring&gt;</span><br><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">#include &lt;cmath&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\"></span><br><span class=\"line\">double ans[<span class=\"number\">1001</span>];</span><br><span class=\"line\">int m,n;</span><br><span class=\"line\">double num;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"function\"><span class=\"title\">scanff</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    cin &gt;&gt; n;<span class=\"comment\">//重复使用n，输入第二组</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (int i = <span class=\"number\">0</span>; i &lt; n; i++)&#123;</span><br><span class=\"line\">        <span class=\"comment\">/* code */</span></span><br><span class=\"line\">        cin &gt;&gt; m &gt;&gt; num;<span class=\"comment\">//m是多项式第一项的指数，num是系数</span></span><br><span class=\"line\">        ans[m] += num;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">int <span class=\"function\"><span class=\"title\">main</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    scanff();</span><br><span class=\"line\">    scanff();</span><br><span class=\"line\">    int cnt = <span class=\"number\">0</span>;<span class=\"comment\">//计数器</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(int i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">1001</span>; i++)&#123;</span><br><span class=\"line\">        <span class=\"comment\">//遍历</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(ans[i] != <span class=\"number\">0</span>)</span><br><span class=\"line\">            cnt++;<span class=\"comment\">//项数</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    cout &lt;&lt; cnt;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(int i = <span class=\"number\">1000</span>; i &gt;= <span class=\"number\">0</span>; i--)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(ans[i] != <span class=\"number\">0</span>)</span><br><span class=\"line\">           printf(<span class=\"string\">&quot; %d %.1lf&quot;</span>,i,ans[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p><span class=\"exturl\"><a class=\"exturl__link\"   href=\"https://pintia.cn/problem-sets/994805342720868352/problems/994805526272000000\" >题目链接</a><span class=\"exturl__icon\"><i class=\"fas fa-external-link-alt\"></i></span></span></p>\n"},{"title":"pat乙级1028","date":"2021-05-10T03:58:18.000Z","_content":"\n![image.png](https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/43c6c4cdf9354f6d8dd6fd076e0a34e3~tplv-k3u1fbpfcp-watermark.image)\n用一个结构体数组去存数据。让人开心的是他输入的数据全部的一个格式的，也就是说可以直接使用`<>=`来比较日期四位大小，是否合法。你或许会想到使用一些函数，比如compare()，但是直接使用`<>=`其实他是按照字典序大小来比较的。\n\n```js\n//foreverking\n#include <vector>\n#include <cstdio>\n#include <queue>\n#include <algorithm>\n#include <cstring>\n#include <iostream>\n#include <cmath>\nusing namespace std;\n\nconst int N = 1E5;\n\nstruct person\n{\n    /* data */\n    string name;\n    string date; //生日\n};\n\nstring maxname, minname;\nstring maxbirth = \"1814/09/06\", minbirth = \"2014/09/06\";\nint cnt;\n\nint main()\n{\n    int n;\n    cin >> n;\n    person s[n];\n    for (int i = 0; i < n; i++)\n    {\n        // person l;\n        // cin >> l.name >> l.date;\n        // s[i] = l;\n        //代码\n        cin >> s[i].name >> s[i].date;\n    }\n    \n    for (int i = 0; i < n; i++)\n    {\n        /* code */\n        if (s[i].date >= \"1814/09/06\" && s[i].date <= \"2014/09/06\")\n        {\n            cnt++;\n\n            if (s[i].date >= maxbirth)\n            {\n                maxbirth = s[i].date;\n                maxname = s[i].name;\n            }\n            if (s[i].date <= minbirth)\n            {\n                minbirth = s[i].date;\n                minname = s[i].name;\n            }\n        }\n    }\n    cout << cnt;\n    if (cnt != 0)\n        cout << \" \" << minname << \" \" << maxname;\n    cout << endl;\n    return 0;\n}\n```\n当然你也可以不用结构体，直接用两个字符串name,date来存数据，每次覆盖掉就行。\n\n```js\n#include <iostream>\nusing namespace std;\nint main()\n{\n    int n, cnt = 0;\n    cin >> n;\n    string name, date, maxname, minname, maxbirth = \"1814/09/06\", minbirth = \"2014/09/06\";\n    for (int i = 0; i < n; i++)\n    {\n        cin >> name >> date;\n        if (date >= \"1814/09/06\" && birth <= \"2014/09/06\")\n        {\n            cnt++;\n            if (date >= maxbirth)\n            {\n                maxbirth = date`;\n                maxname = name;\n            }\n            if (date <= minbirth)\n            {\n                minbirth = date;\n                minname = name;\n            }\n        }\n    }\n    cout << cnt;\n    if (cnt != 0)\n        cout << \" \" << minname << \" \" << maxname;\n    return 0;\n}\n```\n除此之外，你甚至可以用int来存数据，就是过程比较麻烦而已。\n[题目链接](https://pintia.cn/problem-sets/994805260223102976/problems/994805293282607104)\n","source":"_posts/pat乙级1028.md","raw":"---\ntitle: pat乙级1028\ndate: 2021-05-10 11:58:18\ntags: \n    - Study\ncategories: \n    - 题解\n    - PAT题解\n---\n\n![image.png](https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/43c6c4cdf9354f6d8dd6fd076e0a34e3~tplv-k3u1fbpfcp-watermark.image)\n用一个结构体数组去存数据。让人开心的是他输入的数据全部的一个格式的，也就是说可以直接使用`<>=`来比较日期四位大小，是否合法。你或许会想到使用一些函数，比如compare()，但是直接使用`<>=`其实他是按照字典序大小来比较的。\n\n```js\n//foreverking\n#include <vector>\n#include <cstdio>\n#include <queue>\n#include <algorithm>\n#include <cstring>\n#include <iostream>\n#include <cmath>\nusing namespace std;\n\nconst int N = 1E5;\n\nstruct person\n{\n    /* data */\n    string name;\n    string date; //生日\n};\n\nstring maxname, minname;\nstring maxbirth = \"1814/09/06\", minbirth = \"2014/09/06\";\nint cnt;\n\nint main()\n{\n    int n;\n    cin >> n;\n    person s[n];\n    for (int i = 0; i < n; i++)\n    {\n        // person l;\n        // cin >> l.name >> l.date;\n        // s[i] = l;\n        //代码\n        cin >> s[i].name >> s[i].date;\n    }\n    \n    for (int i = 0; i < n; i++)\n    {\n        /* code */\n        if (s[i].date >= \"1814/09/06\" && s[i].date <= \"2014/09/06\")\n        {\n            cnt++;\n\n            if (s[i].date >= maxbirth)\n            {\n                maxbirth = s[i].date;\n                maxname = s[i].name;\n            }\n            if (s[i].date <= minbirth)\n            {\n                minbirth = s[i].date;\n                minname = s[i].name;\n            }\n        }\n    }\n    cout << cnt;\n    if (cnt != 0)\n        cout << \" \" << minname << \" \" << maxname;\n    cout << endl;\n    return 0;\n}\n```\n当然你也可以不用结构体，直接用两个字符串name,date来存数据，每次覆盖掉就行。\n\n```js\n#include <iostream>\nusing namespace std;\nint main()\n{\n    int n, cnt = 0;\n    cin >> n;\n    string name, date, maxname, minname, maxbirth = \"1814/09/06\", minbirth = \"2014/09/06\";\n    for (int i = 0; i < n; i++)\n    {\n        cin >> name >> date;\n        if (date >= \"1814/09/06\" && birth <= \"2014/09/06\")\n        {\n            cnt++;\n            if (date >= maxbirth)\n            {\n                maxbirth = date`;\n                maxname = name;\n            }\n            if (date <= minbirth)\n            {\n                minbirth = date;\n                minname = name;\n            }\n        }\n    }\n    cout << cnt;\n    if (cnt != 0)\n        cout << \" \" << minname << \" \" << maxname;\n    return 0;\n}\n```\n除此之外，你甚至可以用int来存数据，就是过程比较麻烦而已。\n[题目链接](https://pintia.cn/problem-sets/994805260223102976/problems/994805293282607104)\n","slug":"pat乙级1028","published":1,"updated":"2021-05-10T13:04:30.939Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktvk78ft002v1cws5cbt09le","content":"<p><img src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/43c6c4cdf9354f6d8dd6fd076e0a34e3~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\"><br>用一个结构体数组去存数据。让人开心的是他输入的数据全部的一个格式的，也就是说可以直接使用<code>&lt;&gt;=</code>来比较日期四位大小，是否合法。你或许会想到使用一些函数，比如compare()，但是直接使用<code>&lt;&gt;=</code>其实他是按照字典序大小来比较的。</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//foreverking</span></span><br><span class=\"line\">#include &lt;vector&gt;</span><br><span class=\"line\">#include &lt;cstdio&gt;</span><br><span class=\"line\">#include &lt;queue&gt;</span><br><span class=\"line\">#include &lt;algorithm&gt;</span><br><span class=\"line\">#include &lt;cstring&gt;</span><br><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">#include &lt;cmath&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> int N = <span class=\"number\">1E5</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">struct person</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">/* data */</span></span><br><span class=\"line\">    string name;</span><br><span class=\"line\">    string date; <span class=\"comment\">//生日</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">string maxname, minname;</span><br><span class=\"line\">string maxbirth = <span class=\"string\">&quot;1814/09/06&quot;</span>, minbirth = <span class=\"string\">&quot;2014/09/06&quot;</span>;</span><br><span class=\"line\">int cnt;</span><br><span class=\"line\"></span><br><span class=\"line\">int main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    int n;</span><br><span class=\"line\">    cin &gt;&gt; n;</span><br><span class=\"line\">    person s[n];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (int i = <span class=\"number\">0</span>; i &lt; n; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// person l;</span></span><br><span class=\"line\">        <span class=\"comment\">// cin &gt;&gt; l.name &gt;&gt; l.date;</span></span><br><span class=\"line\">        <span class=\"comment\">// s[i] = l;</span></span><br><span class=\"line\">        <span class=\"comment\">//代码</span></span><br><span class=\"line\">        cin &gt;&gt; s[i].name &gt;&gt; s[i].date;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span> (int i = <span class=\"number\">0</span>; i &lt; n; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">/* code */</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (s[i].date &gt;= <span class=\"string\">&quot;1814/09/06&quot;</span> &amp;&amp; s[i].date &lt;= <span class=\"string\">&quot;2014/09/06&quot;</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            cnt++;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (s[i].date &gt;= maxbirth)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                maxbirth = s[i].date;</span><br><span class=\"line\">                maxname = s[i].name;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (s[i].date &lt;= minbirth)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                minbirth = s[i].date;</span><br><span class=\"line\">                minname = s[i].name;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; cnt;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (cnt != <span class=\"number\">0</span>)</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot; &quot;</span> &lt;&lt; minname &lt;&lt; <span class=\"string\">&quot; &quot;</span> &lt;&lt; maxname;</span><br><span class=\"line\">    cout &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>当然你也可以不用结构体，直接用两个字符串name,date来存数据，每次覆盖掉就行。</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\">int main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    int n, cnt = <span class=\"number\">0</span>;</span><br><span class=\"line\">    cin &gt;&gt; n;</span><br><span class=\"line\">    string name, date, maxname, minname, maxbirth = <span class=\"string\">&quot;1814/09/06&quot;</span>, minbirth = <span class=\"string\">&quot;2014/09/06&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (int i = <span class=\"number\">0</span>; i &lt; n; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cin &gt;&gt; name &gt;&gt; date;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (date &gt;= <span class=\"string\">&quot;1814/09/06&quot;</span> &amp;&amp; birth &lt;= <span class=\"string\">&quot;2014/09/06&quot;</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            cnt++;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (date &gt;= maxbirth)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                maxbirth = date<span class=\"string\">`;</span></span><br><span class=\"line\"><span class=\"string\">                maxname = name;</span></span><br><span class=\"line\"><span class=\"string\">            &#125;</span></span><br><span class=\"line\"><span class=\"string\">            if (date &lt;= minbirth)</span></span><br><span class=\"line\"><span class=\"string\">            &#123;</span></span><br><span class=\"line\"><span class=\"string\">                minbirth = date;</span></span><br><span class=\"line\"><span class=\"string\">                minname = name;</span></span><br><span class=\"line\"><span class=\"string\">            &#125;</span></span><br><span class=\"line\"><span class=\"string\">        &#125;</span></span><br><span class=\"line\"><span class=\"string\">    &#125;</span></span><br><span class=\"line\"><span class=\"string\">    cout &lt;&lt; cnt;</span></span><br><span class=\"line\"><span class=\"string\">    if (cnt != 0)</span></span><br><span class=\"line\"><span class=\"string\">        cout &lt;&lt; &quot; &quot; &lt;&lt; minname &lt;&lt; &quot; &quot; &lt;&lt; maxname;</span></span><br><span class=\"line\"><span class=\"string\">    return 0;</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br></pre></td></tr></table></div></figure>\n<p>除此之外，你甚至可以用int来存数据，就是过程比较麻烦而已。<br><span class=\"exturl\"><a class=\"exturl__link\"   href=\"https://pintia.cn/problem-sets/994805260223102976/problems/994805293282607104\" >题目链接</a><span class=\"exturl__icon\"><i class=\"fas fa-external-link-alt\"></i></span></span></p>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/43c6c4cdf9354f6d8dd6fd076e0a34e3~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\"><br>用一个结构体数组去存数据。让人开心的是他输入的数据全部的一个格式的，也就是说可以直接使用<code>&lt;&gt;=</code>来比较日期四位大小，是否合法。你或许会想到使用一些函数，比如compare()，但是直接使用<code>&lt;&gt;=</code>其实他是按照字典序大小来比较的。</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//foreverking</span></span><br><span class=\"line\">#include &lt;vector&gt;</span><br><span class=\"line\">#include &lt;cstdio&gt;</span><br><span class=\"line\">#include &lt;queue&gt;</span><br><span class=\"line\">#include &lt;algorithm&gt;</span><br><span class=\"line\">#include &lt;cstring&gt;</span><br><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">#include &lt;cmath&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> int N = <span class=\"number\">1E5</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">struct person</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">/* data */</span></span><br><span class=\"line\">    string name;</span><br><span class=\"line\">    string date; <span class=\"comment\">//生日</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">string maxname, minname;</span><br><span class=\"line\">string maxbirth = <span class=\"string\">&quot;1814/09/06&quot;</span>, minbirth = <span class=\"string\">&quot;2014/09/06&quot;</span>;</span><br><span class=\"line\">int cnt;</span><br><span class=\"line\"></span><br><span class=\"line\">int main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    int n;</span><br><span class=\"line\">    cin &gt;&gt; n;</span><br><span class=\"line\">    person s[n];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (int i = <span class=\"number\">0</span>; i &lt; n; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// person l;</span></span><br><span class=\"line\">        <span class=\"comment\">// cin &gt;&gt; l.name &gt;&gt; l.date;</span></span><br><span class=\"line\">        <span class=\"comment\">// s[i] = l;</span></span><br><span class=\"line\">        <span class=\"comment\">//代码</span></span><br><span class=\"line\">        cin &gt;&gt; s[i].name &gt;&gt; s[i].date;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span> (int i = <span class=\"number\">0</span>; i &lt; n; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">/* code */</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (s[i].date &gt;= <span class=\"string\">&quot;1814/09/06&quot;</span> &amp;&amp; s[i].date &lt;= <span class=\"string\">&quot;2014/09/06&quot;</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            cnt++;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (s[i].date &gt;= maxbirth)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                maxbirth = s[i].date;</span><br><span class=\"line\">                maxname = s[i].name;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (s[i].date &lt;= minbirth)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                minbirth = s[i].date;</span><br><span class=\"line\">                minname = s[i].name;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; cnt;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (cnt != <span class=\"number\">0</span>)</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot; &quot;</span> &lt;&lt; minname &lt;&lt; <span class=\"string\">&quot; &quot;</span> &lt;&lt; maxname;</span><br><span class=\"line\">    cout &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>当然你也可以不用结构体，直接用两个字符串name,date来存数据，每次覆盖掉就行。</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\">int main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    int n, cnt = <span class=\"number\">0</span>;</span><br><span class=\"line\">    cin &gt;&gt; n;</span><br><span class=\"line\">    string name, date, maxname, minname, maxbirth = <span class=\"string\">&quot;1814/09/06&quot;</span>, minbirth = <span class=\"string\">&quot;2014/09/06&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (int i = <span class=\"number\">0</span>; i &lt; n; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cin &gt;&gt; name &gt;&gt; date;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (date &gt;= <span class=\"string\">&quot;1814/09/06&quot;</span> &amp;&amp; birth &lt;= <span class=\"string\">&quot;2014/09/06&quot;</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            cnt++;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (date &gt;= maxbirth)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                maxbirth = date<span class=\"string\">`;</span></span><br><span class=\"line\"><span class=\"string\">                maxname = name;</span></span><br><span class=\"line\"><span class=\"string\">            &#125;</span></span><br><span class=\"line\"><span class=\"string\">            if (date &lt;= minbirth)</span></span><br><span class=\"line\"><span class=\"string\">            &#123;</span></span><br><span class=\"line\"><span class=\"string\">                minbirth = date;</span></span><br><span class=\"line\"><span class=\"string\">                minname = name;</span></span><br><span class=\"line\"><span class=\"string\">            &#125;</span></span><br><span class=\"line\"><span class=\"string\">        &#125;</span></span><br><span class=\"line\"><span class=\"string\">    &#125;</span></span><br><span class=\"line\"><span class=\"string\">    cout &lt;&lt; cnt;</span></span><br><span class=\"line\"><span class=\"string\">    if (cnt != 0)</span></span><br><span class=\"line\"><span class=\"string\">        cout &lt;&lt; &quot; &quot; &lt;&lt; minname &lt;&lt; &quot; &quot; &lt;&lt; maxname;</span></span><br><span class=\"line\"><span class=\"string\">    return 0;</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br></pre></td></tr></table></div></figure>\n<p>除此之外，你甚至可以用int来存数据，就是过程比较麻烦而已。<br><span class=\"exturl\"><a class=\"exturl__link\"   href=\"https://pintia.cn/problem-sets/994805260223102976/problems/994805293282607104\" >题目链接</a><span class=\"exturl__icon\"><i class=\"fas fa-external-link-alt\"></i></span></span></p>\n"},{"title":"单链表","date":"2021-05-10T12:56:45.000Z","_content":"### 链式储存结构\n结点在存储器中的位置时任意的，即逻辑上相邻的数据元素在物理上不一定相邻，所以链式又被称为**非顺序映像**或**链式映像**。\n\n用一组物理位置任意的存储单元来存放线性表的数据元素。这组存储单元可以时连续的，也可以时不连续的，甚至时零散分布在内存的任意位置上。即链表中元素的逻辑次序和物理次序不一定相同。\n> 单链表由头指针唯一确定，因此单链表可以用头指针的名字命名\n\n\n1. 结点：数据元素的储存映像。由数据域和指针域两部分组成。\n2. n个结点由**指针链**组成一个链表。\n### 线性表的链式表现\n- 结点只有一个指针域的链表，称为但来年表或线性来年表（就是本文的主角\n> 结点由两个指针域的链表，称为双链表；首位相接的链表称为循环链表。以后再说。\n\n\n![image.png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e90ba34559b8417988a5a3160c5548fc~tplv-k3u1fbpfcp-watermark.image)\n头指针： 是指向链表中第一个结点的指针\n首元结点: 是指链表中存储第一个数据元素a1的结点\n头节点： 是在来年表的首元结点之前附设的一个结点（头结点可以储存链表长度或其他信息，方便链表操作。也可以没有头结点）\n\n#### 头结点\n关于头结点，我们来看看头结点的好处：\n1. 便于首元结点的处理\n\n    <!--more-->首元结点的地址保存在头结点的指针域中，所以在链表的第一个位置上的操作和其他位置一致，无需特殊操作。（首元结点不再由头指针指向\n\n2. 便于空表和非空表的用以处理\n\n    <!--more-->无论链表是否为空表，头指针都是指向头结点的非空指针，因此空表和非空表处理统一。\n   \n而你知道头结点也有自己的数据域，其可以为空，也可以放线性表长度等附加信息，但此结点不计入链表长度值\n另外无头结点时，头指针为空表示空表。有头结点时，当头结点的指针域为空时表示空表。[头指针指向头节点，即存储头街的的地址]\n。\n\n#### 链表（链式储存）的特点\n- 就是前面说的，结点在储存器中的位置是任意的，。即链表中元素的逻辑次序和物理次序不一定相同\n- 访问时只能通过头指针进入链表，并通过每个结点的指针域依次炒向后顺序扫描其余结点（顺序存取法）。\n### 单链表的定义和表示\n一张图表示：\n![image.png](https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a5fccbfda8244eaab5dbc545d3603a10~tplv-k3u1fbpfcp-watermark.image)\n#### 存储结构\n定义结构体\n```js\n//将结构类型重命名为node,*LinkList\ntypedef struct node{//声明结点和指向结点的指针的类型\n        ElemType data;//数据域\n        struct node *next;//指针域\n        }node,*LinkList;//LinkList是指向结构体node的指针类型，让书写更简单（node *L / LinkList L）\n```\n> 那么定义是这样的：![image.png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a38c4b6186f04bbbb8cb464b9f13a5c9~tplv-k3u1fbpfcp-watermark.image)这样是自己定义链表头指针，当然你也可以在初始化是返回一个头指针（链表）\n\n#### 函数\n![image.png](https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3b8d08fe804f4c048cf4f249d40b294f~tplv-k3u1fbpfcp-watermark.image)\n> Status InitList(LinkList &L/*node *L LinkList *L*/);\n> bool ListEmpty(LinkList L);\n> bool DestroyList(LinkList &L);\n> bool ClearList(LinkList &L);\n> int ListLength(LinkList L);\n> Status GetElem(LinkList L,int i,ElemType &e);\n> node *LocateElem_one(LinkList L,ElemType e);\n> int LocateElem_two(LinkList L,ElemType e);\n> Status ListInsert(LinkList &L,int i,ElemType e);\n> Status ListDelete_one(LinkList &L,int i,ElemType &e);\n> Status ListDelete_two(LinkList &L,ElemType x,ElemType &e);\n> void CreateListHead(LinkList &L,int n);\n> void CreateListRear(LinkList &L,int n);\n> void ListTravel(LinkList L);\n\n初始化链表（构造一个空的单链表\n\n```js\n/*\n * 1.生成新结点作为头结点，用头指针L指向头结点\n * 2.将头结点的的指针域置空\n */\nStatus InitList(Linklist &L/*node *L*/){\n    L = (LinkList) malloc(sizeof(node));\n    //L = new node;___c++\n    if(L == NULL) { //判断是否有足够的内存空间\n        printf(\"申请内存空间失败\\n\");\n        return false;\n    }\n    L->next = NULL;\n    return true;\n}\n```\n或者将链表作为返回值\n\n```js\nLinkList InitList() {\n    LinkList L;\n    L = (LinkList)malloc(sizeof(Node));   //申请结点空间\n    if(L == NULL) { //判断是否有足够的内存空间\n        printf(\"申请内存空间失败\\n\");\n        exit(0);\n    }\n    L->next = NULL;                  //将next设置为NULL,初始长度为0的单链表\n \treturn L;\n}\n```\n判断链表为空\n\n```js\n//判空\nbool ListEmpty(LinkList L){//若为空表，则返回1，否则返回0\n    if(L->next)\n        return 0;\n    else\n        return 1;\n}\n```\n销毁链表\n\n```js\n//链表的销毁（销毁后链表不存在,头指针头结点都不存在了\n//从头指针开始，依次释放所有结点（头结点也被删除\nbool DestroyList(LinkList &L){\n    LinkList p;//node *p\n    while(L){//L非空\n        p = L;\n        L = L->next;\n        free(p);\n        //delete p;\n    }\n    return true;\n}\n```\n清空链表\n```js\n//清空链表（链表仍存在，但是无元素，成为空链表\nbool ClearList(LinkList &L){\n    LinkList p,q;//node *p,*q\n    //p：存放当前需要删除的结点 q：用来存放p的下一个结点\n    p = L->next;//保护头指针，P现在是首元结点\n    while(p){//非空,没到表尾\n        q = p->next;\n        free(p);//delete p\n        p = q;\n    }\n    L->next = NULL;\n    return true;\n}\n```\n求单链表的表长\n\n```js\n//求链表的表长\nint ListLength(LinkList L){\n    LinkList  p;//node *p\n    p = L->next;//p指向首元结点（第一个结点\n    int len = 0;\n    //遍历链表，统计结点数\n    while (p){//非空\n        len++;\n        p = p->next;\n    }\n    return len;\n}\n```\n链表的取值\n\n```js\n//取单链表中对饿第i个元素的内容\n//从链表头指针开始，顺着链域next逐个结点往下搜索，直至搜索到第i个结点\nStatus GetElem(LinkList L,int i,ElemType &e) {\n    if(i < 1 && i > ListLength(L))\n        return false;\n    LinkList p = L->next;\n    int cnt = 1;\n    while (p && cnt < i){//向后扫描，直到p指向第i个元素或者p为空\n        p = p->next;\n        cnt++;\n    }\n    if(!p || cnt > i)\n        return false;\n\n    e = p->data;\n    return true;\n}\n```\n链表的查找，分为返回地址和序号两种\n\n```js\n//返回地址\nnode *LocateElem_one(LinkList L,ElemType e){\n    LinkList p = L->next;//指向首元结点\n    while (p && p->data != e)p = p->next;\n    //所有结点都看完了还没找到p为空\n    return p;//找到返回L中值为e的元素的地址，查找啊hi白返回NULL\n}\n```\n\n```js\nint LocateElem_two(LinkList L,ElemType e){\n    LinkList p = L->next;\n    int cnt = 1;\n    while(p && p->data != e){\n        p = p->next;\n        cnt++;\n    }\n    if(p)//p不为空，表示找到了\n        return cnt;\n    else\n        return false;\n}\n```\n插入结点\n\n![image.png](https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d14cc8bb4d4a42c5ac2252f28f787379~tplv-k3u1fbpfcp-watermark.image)\n\n```js\n//插入\n/*\n * 1.首先找到Ai-1的储存位置p\n * 2.生成一个数据域为e的新结点S\n * 3.插入新的结点【1.新阶段的指针域指向Ai 2,结点Ai-1的指针域指向相信结点】\n */\n//第i个元素前插入元素e\nStatus ListInsert(LinkList &L,int i,ElemType e){\n    LinkList p = L;//头结点\n    int cnt = 0;\n    //寻找第i-1个位置,p指向i-1\n    while(p && cnt < i - 1){\n        p = p->next;\n        cnt++;\n    }\n    if(!p || cnt > i - 1)\n        return false;//插入位置非法【i大于表长，i小于1\n\n    LinkList s = (LinkList) malloc(sizeof(node));//新的结点\n    //s = new node;\n    s->data = e;//存入数据\n    //插入\n    s->next = p->next;\n    p->next = s;\n}\n```\n删除结点\n\n![image.png](https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6ab5ff4df09e41509b17a38dc3ef7820~tplv-k3u1fbpfcp-watermark.image)\n首先是删除某个序号的结点\n\n```js\n//删除结点\n/*\n * 1.首先找到Ai-1的储存位置p,保存要删除的a值\n * 2.令p->next指向Ai+1\n * 3.释放Ai的空间\n * 4.e返回被删除的值a\n */\n//^删除某个序号的\nStatus ListDelete_one(LinkList &L,int i,ElemType &e){\n    LinkList p = L;//头结点\n    int cnt = 0;\n    //寻找第i个元素，并令p指向其前驱（p指向i-1\n    while(p->next && cnt < i - 1){\n        p = p->next;\n        cnt++;\n    }\n    //删除位置不合法\n    if(!(p->next) || cnt > i - 1)\n            return false;\n    LinkList q = p->next;//存第i个结点\n    p->next = q->next;//Ai-1的指针域指向Ai+1\n    e = q->data;//保存删除的数据域\n    free(q);\n    //delete q;\n    return true;\n}\n```\n然后还有删除某个具体数据域的结点\n\n```js\n//^删除某个数据域的结点\n\n\nStatus ListDelete_two(LinkList &L,ElemType x,ElemType &e){\n    LinkList p,pre;//pre为前驱结点，p为查找的结点。\n    p = L->next;//首元结点\n    while(p && p->data != x){//查找值为x的元素\n        pre = p;\n        p = p->next;\n    }\n    pre->next = p->next;//删除操作，将其前驱next指向其后继。\n    e = p->data;//被删除的数据域保存\n    free(p);\n}\n```\n建立单链表\n\n这里都默认为经过初始化\n\n头插法（注释掉的是返回头指针的写法，尾插法一样\n\n```js\n/*头插法\n * 1.从一个空链表开始，重复读入数据\n * 2.生成新结点，将读入的数据存放到数据域中\n * 3.从最后一个结点开始，依次将个节点插入到链表的前端\n */\n//传入一个头结点（经过初始化的链表），也可以自己new一个（未经过初始化）\nvoid CreateListHead(LinkList &L,int n){//插入n个结点\n    //新的头结点\n    L= (LinkList) malloc(sizeof(node));//没经过初始化\n    // s = new node;\n    L->next = NULL;//头结点指针域置空\n    for(int i = 0; i < n; i++){\n        LinkList p = (LinkList) malloc(sizeof(node));\n        //p = new node;\n        cin >> p->data;//输入数据域\n        //scanf(&p->data);\n        //插入到表头\n        p->next = L->next;\n        L->next = p;\n    }\n}\n\n/*\n LinkedList CreateLinkedListHead(int n)//头插法{\n\tNode *L;\n\tL = (Node *)malloc(sizeof(Node));\n\tL->next = NULL;\n\tprintf(\"输入元素：\");\n\tfor (int i = 0; i<n; i++)\n\t{\n\t\tNode *p; //要插入的结点\n\t\tp = (Node *)malloc(sizeof(Node));\n\t\tcin >> p->data;//输入数据域\n\t\tp->next = L->next;\n\t\tL->next = p;\n\t}\n\treturn L;\n}\n */\n```\n尾插法：\n\n```js\n//尾插法\n/*\n * 1.从一个空表开始，将新结点逐个插入到链表的尾部，尾指针r指向来年表的尾结点\n * 2.初始化时，r与L同指向头结点。没读入一个数据元素则申请一个新的结点，将新结点插入到为节点后，r指向新的结点\n */\nvoid CreateListRear(LinkList &L,int n){\n    L= (LinkList) malloc(sizeof(node));//没经过初始化\n    L->next = NULL;\n    LinkList r = L;//尾指针，先指向头结点\n    for(int i = 0; i < n; i++){\n        LinkList p = (LinkList) malloc(sizeof(node));\n        //插入到表尾\n        cin >> p->data;\n        p->next = NULL;\n        r->next = p;\n        r = p;//r指向新的尾结点\n    }\n}\n/*\n LinkedList CreateLinkedListTail(int n)//尾插法\n{\n\tNode *L;\n\tL = (Node *)malloc(sizeof(Node));\n\tL->next = NULL;\n\tNode *r;\n\tr = L;\n\twhile (n--)\n\t{\n\t\tNode *p;\n\t\tp = (Node *)malloc(sizeof(Node));\n\t\tcin >> p->data;//输入数据域\n\t\tr->next = p;\n\t\tr = p;//之后的循环遇到r就是等同于p r->next就是p->next\n\t}\n\tr->next = NULL;\n\treturn L;\n}\n\n*/\n```\n链表操作：\n有序表的合并：\n\n```js\nvoid MergeLinkList(LinkList &La,LinkList &Lb,LinkList &Lc){\n    LinkList pa = La->next;\n    LinkList pb = Lb->next;//首元结点\n    LinkList pc = Lc = La;//将La的头结点作为Lc的头结点\n    while (pa && pb){//都不为空表\n        if(pa->data <= pb->data){\n            pc->next = pa;//此时La的元素接到Lc后面\n            //后移\n            pc = pa;\n            pa = pa->next;\n        }\n        else{\n            pc->next = pb;//此时Lb的元素接到Lc后面\n            //后移\n            pc = pb;\n            pb = pb->next;\n        }\n        \n        //        if(pa)\n//            pc->next = pa;\n//        else\n//            pc->next = pb;\n        pc->next = pa ? pa : pb;//如果La空l。那么Lb未空，把Lb剩下的接到Lc中\n        free(Lb);\n        //Lc,La指向同一节点\n    }\n}\n```\n","source":"_posts/单链表.md","raw":"---\ntitle: 单链表\ndate: 2021-05-10 20:56:45\ntags: \n    - Study\n    - 链表\ncategories: \n    - 数据结构\n    - 链表\n---\n### 链式储存结构\n结点在存储器中的位置时任意的，即逻辑上相邻的数据元素在物理上不一定相邻，所以链式又被称为**非顺序映像**或**链式映像**。\n\n用一组物理位置任意的存储单元来存放线性表的数据元素。这组存储单元可以时连续的，也可以时不连续的，甚至时零散分布在内存的任意位置上。即链表中元素的逻辑次序和物理次序不一定相同。\n> 单链表由头指针唯一确定，因此单链表可以用头指针的名字命名\n\n\n1. 结点：数据元素的储存映像。由数据域和指针域两部分组成。\n2. n个结点由**指针链**组成一个链表。\n### 线性表的链式表现\n- 结点只有一个指针域的链表，称为但来年表或线性来年表（就是本文的主角\n> 结点由两个指针域的链表，称为双链表；首位相接的链表称为循环链表。以后再说。\n\n\n![image.png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e90ba34559b8417988a5a3160c5548fc~tplv-k3u1fbpfcp-watermark.image)\n头指针： 是指向链表中第一个结点的指针\n首元结点: 是指链表中存储第一个数据元素a1的结点\n头节点： 是在来年表的首元结点之前附设的一个结点（头结点可以储存链表长度或其他信息，方便链表操作。也可以没有头结点）\n\n#### 头结点\n关于头结点，我们来看看头结点的好处：\n1. 便于首元结点的处理\n\n    <!--more-->首元结点的地址保存在头结点的指针域中，所以在链表的第一个位置上的操作和其他位置一致，无需特殊操作。（首元结点不再由头指针指向\n\n2. 便于空表和非空表的用以处理\n\n    <!--more-->无论链表是否为空表，头指针都是指向头结点的非空指针，因此空表和非空表处理统一。\n   \n而你知道头结点也有自己的数据域，其可以为空，也可以放线性表长度等附加信息，但此结点不计入链表长度值\n另外无头结点时，头指针为空表示空表。有头结点时，当头结点的指针域为空时表示空表。[头指针指向头节点，即存储头街的的地址]\n。\n\n#### 链表（链式储存）的特点\n- 就是前面说的，结点在储存器中的位置是任意的，。即链表中元素的逻辑次序和物理次序不一定相同\n- 访问时只能通过头指针进入链表，并通过每个结点的指针域依次炒向后顺序扫描其余结点（顺序存取法）。\n### 单链表的定义和表示\n一张图表示：\n![image.png](https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a5fccbfda8244eaab5dbc545d3603a10~tplv-k3u1fbpfcp-watermark.image)\n#### 存储结构\n定义结构体\n```js\n//将结构类型重命名为node,*LinkList\ntypedef struct node{//声明结点和指向结点的指针的类型\n        ElemType data;//数据域\n        struct node *next;//指针域\n        }node,*LinkList;//LinkList是指向结构体node的指针类型，让书写更简单（node *L / LinkList L）\n```\n> 那么定义是这样的：![image.png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a38c4b6186f04bbbb8cb464b9f13a5c9~tplv-k3u1fbpfcp-watermark.image)这样是自己定义链表头指针，当然你也可以在初始化是返回一个头指针（链表）\n\n#### 函数\n![image.png](https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3b8d08fe804f4c048cf4f249d40b294f~tplv-k3u1fbpfcp-watermark.image)\n> Status InitList(LinkList &L/*node *L LinkList *L*/);\n> bool ListEmpty(LinkList L);\n> bool DestroyList(LinkList &L);\n> bool ClearList(LinkList &L);\n> int ListLength(LinkList L);\n> Status GetElem(LinkList L,int i,ElemType &e);\n> node *LocateElem_one(LinkList L,ElemType e);\n> int LocateElem_two(LinkList L,ElemType e);\n> Status ListInsert(LinkList &L,int i,ElemType e);\n> Status ListDelete_one(LinkList &L,int i,ElemType &e);\n> Status ListDelete_two(LinkList &L,ElemType x,ElemType &e);\n> void CreateListHead(LinkList &L,int n);\n> void CreateListRear(LinkList &L,int n);\n> void ListTravel(LinkList L);\n\n初始化链表（构造一个空的单链表\n\n```js\n/*\n * 1.生成新结点作为头结点，用头指针L指向头结点\n * 2.将头结点的的指针域置空\n */\nStatus InitList(Linklist &L/*node *L*/){\n    L = (LinkList) malloc(sizeof(node));\n    //L = new node;___c++\n    if(L == NULL) { //判断是否有足够的内存空间\n        printf(\"申请内存空间失败\\n\");\n        return false;\n    }\n    L->next = NULL;\n    return true;\n}\n```\n或者将链表作为返回值\n\n```js\nLinkList InitList() {\n    LinkList L;\n    L = (LinkList)malloc(sizeof(Node));   //申请结点空间\n    if(L == NULL) { //判断是否有足够的内存空间\n        printf(\"申请内存空间失败\\n\");\n        exit(0);\n    }\n    L->next = NULL;                  //将next设置为NULL,初始长度为0的单链表\n \treturn L;\n}\n```\n判断链表为空\n\n```js\n//判空\nbool ListEmpty(LinkList L){//若为空表，则返回1，否则返回0\n    if(L->next)\n        return 0;\n    else\n        return 1;\n}\n```\n销毁链表\n\n```js\n//链表的销毁（销毁后链表不存在,头指针头结点都不存在了\n//从头指针开始，依次释放所有结点（头结点也被删除\nbool DestroyList(LinkList &L){\n    LinkList p;//node *p\n    while(L){//L非空\n        p = L;\n        L = L->next;\n        free(p);\n        //delete p;\n    }\n    return true;\n}\n```\n清空链表\n```js\n//清空链表（链表仍存在，但是无元素，成为空链表\nbool ClearList(LinkList &L){\n    LinkList p,q;//node *p,*q\n    //p：存放当前需要删除的结点 q：用来存放p的下一个结点\n    p = L->next;//保护头指针，P现在是首元结点\n    while(p){//非空,没到表尾\n        q = p->next;\n        free(p);//delete p\n        p = q;\n    }\n    L->next = NULL;\n    return true;\n}\n```\n求单链表的表长\n\n```js\n//求链表的表长\nint ListLength(LinkList L){\n    LinkList  p;//node *p\n    p = L->next;//p指向首元结点（第一个结点\n    int len = 0;\n    //遍历链表，统计结点数\n    while (p){//非空\n        len++;\n        p = p->next;\n    }\n    return len;\n}\n```\n链表的取值\n\n```js\n//取单链表中对饿第i个元素的内容\n//从链表头指针开始，顺着链域next逐个结点往下搜索，直至搜索到第i个结点\nStatus GetElem(LinkList L,int i,ElemType &e) {\n    if(i < 1 && i > ListLength(L))\n        return false;\n    LinkList p = L->next;\n    int cnt = 1;\n    while (p && cnt < i){//向后扫描，直到p指向第i个元素或者p为空\n        p = p->next;\n        cnt++;\n    }\n    if(!p || cnt > i)\n        return false;\n\n    e = p->data;\n    return true;\n}\n```\n链表的查找，分为返回地址和序号两种\n\n```js\n//返回地址\nnode *LocateElem_one(LinkList L,ElemType e){\n    LinkList p = L->next;//指向首元结点\n    while (p && p->data != e)p = p->next;\n    //所有结点都看完了还没找到p为空\n    return p;//找到返回L中值为e的元素的地址，查找啊hi白返回NULL\n}\n```\n\n```js\nint LocateElem_two(LinkList L,ElemType e){\n    LinkList p = L->next;\n    int cnt = 1;\n    while(p && p->data != e){\n        p = p->next;\n        cnt++;\n    }\n    if(p)//p不为空，表示找到了\n        return cnt;\n    else\n        return false;\n}\n```\n插入结点\n\n![image.png](https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d14cc8bb4d4a42c5ac2252f28f787379~tplv-k3u1fbpfcp-watermark.image)\n\n```js\n//插入\n/*\n * 1.首先找到Ai-1的储存位置p\n * 2.生成一个数据域为e的新结点S\n * 3.插入新的结点【1.新阶段的指针域指向Ai 2,结点Ai-1的指针域指向相信结点】\n */\n//第i个元素前插入元素e\nStatus ListInsert(LinkList &L,int i,ElemType e){\n    LinkList p = L;//头结点\n    int cnt = 0;\n    //寻找第i-1个位置,p指向i-1\n    while(p && cnt < i - 1){\n        p = p->next;\n        cnt++;\n    }\n    if(!p || cnt > i - 1)\n        return false;//插入位置非法【i大于表长，i小于1\n\n    LinkList s = (LinkList) malloc(sizeof(node));//新的结点\n    //s = new node;\n    s->data = e;//存入数据\n    //插入\n    s->next = p->next;\n    p->next = s;\n}\n```\n删除结点\n\n![image.png](https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6ab5ff4df09e41509b17a38dc3ef7820~tplv-k3u1fbpfcp-watermark.image)\n首先是删除某个序号的结点\n\n```js\n//删除结点\n/*\n * 1.首先找到Ai-1的储存位置p,保存要删除的a值\n * 2.令p->next指向Ai+1\n * 3.释放Ai的空间\n * 4.e返回被删除的值a\n */\n//^删除某个序号的\nStatus ListDelete_one(LinkList &L,int i,ElemType &e){\n    LinkList p = L;//头结点\n    int cnt = 0;\n    //寻找第i个元素，并令p指向其前驱（p指向i-1\n    while(p->next && cnt < i - 1){\n        p = p->next;\n        cnt++;\n    }\n    //删除位置不合法\n    if(!(p->next) || cnt > i - 1)\n            return false;\n    LinkList q = p->next;//存第i个结点\n    p->next = q->next;//Ai-1的指针域指向Ai+1\n    e = q->data;//保存删除的数据域\n    free(q);\n    //delete q;\n    return true;\n}\n```\n然后还有删除某个具体数据域的结点\n\n```js\n//^删除某个数据域的结点\n\n\nStatus ListDelete_two(LinkList &L,ElemType x,ElemType &e){\n    LinkList p,pre;//pre为前驱结点，p为查找的结点。\n    p = L->next;//首元结点\n    while(p && p->data != x){//查找值为x的元素\n        pre = p;\n        p = p->next;\n    }\n    pre->next = p->next;//删除操作，将其前驱next指向其后继。\n    e = p->data;//被删除的数据域保存\n    free(p);\n}\n```\n建立单链表\n\n这里都默认为经过初始化\n\n头插法（注释掉的是返回头指针的写法，尾插法一样\n\n```js\n/*头插法\n * 1.从一个空链表开始，重复读入数据\n * 2.生成新结点，将读入的数据存放到数据域中\n * 3.从最后一个结点开始，依次将个节点插入到链表的前端\n */\n//传入一个头结点（经过初始化的链表），也可以自己new一个（未经过初始化）\nvoid CreateListHead(LinkList &L,int n){//插入n个结点\n    //新的头结点\n    L= (LinkList) malloc(sizeof(node));//没经过初始化\n    // s = new node;\n    L->next = NULL;//头结点指针域置空\n    for(int i = 0; i < n; i++){\n        LinkList p = (LinkList) malloc(sizeof(node));\n        //p = new node;\n        cin >> p->data;//输入数据域\n        //scanf(&p->data);\n        //插入到表头\n        p->next = L->next;\n        L->next = p;\n    }\n}\n\n/*\n LinkedList CreateLinkedListHead(int n)//头插法{\n\tNode *L;\n\tL = (Node *)malloc(sizeof(Node));\n\tL->next = NULL;\n\tprintf(\"输入元素：\");\n\tfor (int i = 0; i<n; i++)\n\t{\n\t\tNode *p; //要插入的结点\n\t\tp = (Node *)malloc(sizeof(Node));\n\t\tcin >> p->data;//输入数据域\n\t\tp->next = L->next;\n\t\tL->next = p;\n\t}\n\treturn L;\n}\n */\n```\n尾插法：\n\n```js\n//尾插法\n/*\n * 1.从一个空表开始，将新结点逐个插入到链表的尾部，尾指针r指向来年表的尾结点\n * 2.初始化时，r与L同指向头结点。没读入一个数据元素则申请一个新的结点，将新结点插入到为节点后，r指向新的结点\n */\nvoid CreateListRear(LinkList &L,int n){\n    L= (LinkList) malloc(sizeof(node));//没经过初始化\n    L->next = NULL;\n    LinkList r = L;//尾指针，先指向头结点\n    for(int i = 0; i < n; i++){\n        LinkList p = (LinkList) malloc(sizeof(node));\n        //插入到表尾\n        cin >> p->data;\n        p->next = NULL;\n        r->next = p;\n        r = p;//r指向新的尾结点\n    }\n}\n/*\n LinkedList CreateLinkedListTail(int n)//尾插法\n{\n\tNode *L;\n\tL = (Node *)malloc(sizeof(Node));\n\tL->next = NULL;\n\tNode *r;\n\tr = L;\n\twhile (n--)\n\t{\n\t\tNode *p;\n\t\tp = (Node *)malloc(sizeof(Node));\n\t\tcin >> p->data;//输入数据域\n\t\tr->next = p;\n\t\tr = p;//之后的循环遇到r就是等同于p r->next就是p->next\n\t}\n\tr->next = NULL;\n\treturn L;\n}\n\n*/\n```\n链表操作：\n有序表的合并：\n\n```js\nvoid MergeLinkList(LinkList &La,LinkList &Lb,LinkList &Lc){\n    LinkList pa = La->next;\n    LinkList pb = Lb->next;//首元结点\n    LinkList pc = Lc = La;//将La的头结点作为Lc的头结点\n    while (pa && pb){//都不为空表\n        if(pa->data <= pb->data){\n            pc->next = pa;//此时La的元素接到Lc后面\n            //后移\n            pc = pa;\n            pa = pa->next;\n        }\n        else{\n            pc->next = pb;//此时Lb的元素接到Lc后面\n            //后移\n            pc = pb;\n            pb = pb->next;\n        }\n        \n        //        if(pa)\n//            pc->next = pa;\n//        else\n//            pc->next = pb;\n        pc->next = pa ? pa : pb;//如果La空l。那么Lb未空，把Lb剩下的接到Lc中\n        free(Lb);\n        //Lc,La指向同一节点\n    }\n}\n```\n","slug":"单链表","published":1,"updated":"2021-11-07T10:43:52.072Z","_id":"cktvk78fu002y1cws5et084xy","comments":1,"layout":"post","photos":[],"link":"","content":"\n        <h3 id=\"链式储存结构\"   >\n          <a href=\"#链式储存结构\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#链式储存结构\" class=\"headerlink\" title=\"链式储存结构\"></a>链式储存结构</h3>\n      <p>结点在存储器中的位置时任意的，即逻辑上相邻的数据元素在物理上不一定相邻，所以链式又被称为<strong>非顺序映像</strong>或<strong>链式映像</strong>。</p>\n<p>用一组物理位置任意的存储单元来存放线性表的数据元素。这组存储单元可以时连续的，也可以时不连续的，甚至时零散分布在内存的任意位置上。即链表中元素的逻辑次序和物理次序不一定相同。</p>\n<blockquote>\n<p>单链表由头指针唯一确定，因此单链表可以用头指针的名字命名</p>\n</blockquote>\n<ol>\n<li>结点：数据元素的储存映像。由数据域和指针域两部分组成。</li>\n<li>n个结点由<strong>指针链</strong>组成一个链表。\n        <h3 id=\"线性表的链式表现\"   >\n          <a href=\"#线性表的链式表现\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#线性表的链式表现\" class=\"headerlink\" title=\"线性表的链式表现\"></a>线性表的链式表现</h3>\n      </li>\n</ol>\n<ul>\n<li>结点只有一个指针域的链表，称为但来年表或线性来年表（就是本文的主角<blockquote>\n<p>结点由两个指针域的链表，称为双链表；首位相接的链表称为循环链表。以后再说。</p>\n</blockquote>\n</li>\n</ul>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e90ba34559b8417988a5a3160c5548fc~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\"><br>头指针： 是指向链表中第一个结点的指针<br>首元结点: 是指链表中存储第一个数据元素a1的结点<br>头节点： 是在来年表的首元结点之前附设的一个结点（头结点可以储存链表长度或其他信息，方便链表操作。也可以没有头结点）</p>\n\n        <h4 id=\"头结点\"   >\n          <a href=\"#头结点\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#头结点\" class=\"headerlink\" title=\"头结点\"></a>头结点</h4>\n      <p>关于头结点，我们来看看头结点的好处：</p>\n<ol>\n<li><p>便于首元结点的处理</p>\n <span id=\"more\"></span>首元结点的地址保存在头结点的指针域中，所以在链表的第一个位置上的操作和其他位置一致，无需特殊操作。（首元结点不再由头指针指向</li>\n<li><p>便于空表和非空表的用以处理</p>\n <!--more-->无论链表是否为空表，头指针都是指向头结点的非空指针，因此空表和非空表处理统一。</li>\n</ol>\n<p>而你知道头结点也有自己的数据域，其可以为空，也可以放线性表长度等附加信息，但此结点不计入链表长度值<br>另外无头结点时，头指针为空表示空表。有头结点时，当头结点的指针域为空时表示空表。[头指针指向头节点，即存储头街的的地址]<br>。</p>\n\n        <h4 id=\"链表（链式储存）的特点\"   >\n          <a href=\"#链表（链式储存）的特点\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#链表（链式储存）的特点\" class=\"headerlink\" title=\"链表（链式储存）的特点\"></a>链表（链式储存）的特点</h4>\n      <ul>\n<li>就是前面说的，结点在储存器中的位置是任意的，。即链表中元素的逻辑次序和物理次序不一定相同</li>\n<li>访问时只能通过头指针进入链表，并通过每个结点的指针域依次炒向后顺序扫描其余结点（顺序存取法）。\n        <h3 id=\"单链表的定义和表示\"   >\n          <a href=\"#单链表的定义和表示\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#单链表的定义和表示\" class=\"headerlink\" title=\"单链表的定义和表示\"></a>单链表的定义和表示</h3>\n      一张图表示：<br><img src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a5fccbfda8244eaab5dbc545d3603a10~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\">\n        <h4 id=\"存储结构\"   >\n          <a href=\"#存储结构\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#存储结构\" class=\"headerlink\" title=\"存储结构\"></a>存储结构</h4>\n      定义结构体<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//将结构类型重命名为node,*LinkList</span></span><br><span class=\"line\">typedef struct node&#123;<span class=\"comment\">//声明结点和指向结点的指针的类型</span></span><br><span class=\"line\">        ElemType data;<span class=\"comment\">//数据域</span></span><br><span class=\"line\">        struct node *next;<span class=\"comment\">//指针域</span></span><br><span class=\"line\">        &#125;node,*LinkList;<span class=\"comment\">//LinkList是指向结构体node的指针类型，让书写更简单（node *L / LinkList L）</span></span><br></pre></td></tr></table></div></figure>\n<blockquote>\n<p>那么定义是这样的：<img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a38c4b6186f04bbbb8cb464b9f13a5c9~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\">这样是自己定义链表头指针，当然你也可以在初始化是返回一个头指针（链表）</p>\n</blockquote>\n</li>\n</ul>\n\n        <h4 id=\"函数\"   >\n          <a href=\"#函数\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h4>\n      <p><img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3b8d08fe804f4c048cf4f249d40b294f~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\"></p>\n<blockquote>\n<p>Status InitList(LinkList &amp;L/*node *L LinkList <em>L</em>/);<br>bool ListEmpty(LinkList L);<br>bool DestroyList(LinkList &amp;L);<br>bool ClearList(LinkList &amp;L);<br>int ListLength(LinkList L);<br>Status GetElem(LinkList L,int i,ElemType &amp;e);<br>node *LocateElem_one(LinkList L,ElemType e);<br>int LocateElem_two(LinkList L,ElemType e);<br>Status ListInsert(LinkList &amp;L,int i,ElemType e);<br>Status ListDelete_one(LinkList &amp;L,int i,ElemType &amp;e);<br>Status ListDelete_two(LinkList &amp;L,ElemType x,ElemType &amp;e);<br>void CreateListHead(LinkList &amp;L,int n);<br>void CreateListRear(LinkList &amp;L,int n);<br>void ListTravel(LinkList L);</p>\n</blockquote>\n<p>初始化链表（构造一个空的单链表</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * 1.生成新结点作为头结点，用头指针L指向头结点</span></span><br><span class=\"line\"><span class=\"comment\"> * 2.将头结点的的指针域置空</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">Status <span class=\"function\"><span class=\"title\">InitList</span>(<span class=\"params\">Linklist &amp;L<span class=\"comment\">/*node *L*/</span></span>)</span>&#123;</span><br><span class=\"line\">    L = (LinkList) malloc(sizeof(node));</span><br><span class=\"line\">    <span class=\"comment\">//L = new node;___c++</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(L == NULL) &#123; <span class=\"comment\">//判断是否有足够的内存空间</span></span><br><span class=\"line\">        printf(<span class=\"string\">&quot;申请内存空间失败\\n&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    L-&gt;next = NULL;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>或者将链表作为返回值</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LinkList <span class=\"function\"><span class=\"title\">InitList</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    LinkList L;</span><br><span class=\"line\">    L = (LinkList)malloc(sizeof(Node));   <span class=\"comment\">//申请结点空间</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(L == NULL) &#123; <span class=\"comment\">//判断是否有足够的内存空间</span></span><br><span class=\"line\">        printf(<span class=\"string\">&quot;申请内存空间失败\\n&quot;</span>);</span><br><span class=\"line\">        exit(<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    L-&gt;next = NULL;                  <span class=\"comment\">//将next设置为NULL,初始长度为0的单链表</span></span><br><span class=\"line\"> \t<span class=\"keyword\">return</span> L;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>判断链表为空</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//判空</span></span><br><span class=\"line\">bool <span class=\"function\"><span class=\"title\">ListEmpty</span>(<span class=\"params\">LinkList L</span>)</span>&#123;<span class=\"comment\">//若为空表，则返回1，否则返回0</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(L-&gt;next)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>销毁链表</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//链表的销毁（销毁后链表不存在,头指针头结点都不存在了</span></span><br><span class=\"line\"><span class=\"comment\">//从头指针开始，依次释放所有结点（头结点也被删除</span></span><br><span class=\"line\">bool <span class=\"function\"><span class=\"title\">DestroyList</span>(<span class=\"params\">LinkList &amp;L</span>)</span>&#123;</span><br><span class=\"line\">    LinkList p;<span class=\"comment\">//node *p</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(L)&#123;<span class=\"comment\">//L非空</span></span><br><span class=\"line\">        p = L;</span><br><span class=\"line\">        L = L-&gt;next;</span><br><span class=\"line\">        free(p);</span><br><span class=\"line\">        <span class=\"comment\">//delete p;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>清空链表</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//清空链表（链表仍存在，但是无元素，成为空链表</span></span><br><span class=\"line\">bool <span class=\"function\"><span class=\"title\">ClearList</span>(<span class=\"params\">LinkList &amp;L</span>)</span>&#123;</span><br><span class=\"line\">    LinkList p,q;<span class=\"comment\">//node *p,*q</span></span><br><span class=\"line\">    <span class=\"comment\">//p：存放当前需要删除的结点 q：用来存放p的下一个结点</span></span><br><span class=\"line\">    p = L-&gt;next;<span class=\"comment\">//保护头指针，P现在是首元结点</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(p)&#123;<span class=\"comment\">//非空,没到表尾</span></span><br><span class=\"line\">        q = p-&gt;next;</span><br><span class=\"line\">        free(p);<span class=\"comment\">//delete p</span></span><br><span class=\"line\">        p = q;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    L-&gt;next = NULL;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>求单链表的表长</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//求链表的表长</span></span><br><span class=\"line\">int <span class=\"function\"><span class=\"title\">ListLength</span>(<span class=\"params\">LinkList L</span>)</span>&#123;</span><br><span class=\"line\">    LinkList  p;<span class=\"comment\">//node *p</span></span><br><span class=\"line\">    p = L-&gt;next;<span class=\"comment\">//p指向首元结点（第一个结点</span></span><br><span class=\"line\">    int len = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"comment\">//遍历链表，统计结点数</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (p)&#123;<span class=\"comment\">//非空</span></span><br><span class=\"line\">        len++;</span><br><span class=\"line\">        p = p-&gt;next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> len;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>链表的取值</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//取单链表中对饿第i个元素的内容</span></span><br><span class=\"line\"><span class=\"comment\">//从链表头指针开始，顺着链域next逐个结点往下搜索，直至搜索到第i个结点</span></span><br><span class=\"line\">Status <span class=\"function\"><span class=\"title\">GetElem</span>(<span class=\"params\">LinkList L,int i,ElemType &amp;e</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(i &lt; <span class=\"number\">1</span> &amp;&amp; i &gt; ListLength(L))</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    LinkList p = L-&gt;next;</span><br><span class=\"line\">    int cnt = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (p &amp;&amp; cnt &lt; i)&#123;<span class=\"comment\">//向后扫描，直到p指向第i个元素或者p为空</span></span><br><span class=\"line\">        p = p-&gt;next;</span><br><span class=\"line\">        cnt++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!p || cnt &gt; i)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    e = p-&gt;data;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>链表的查找，分为返回地址和序号两种</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//返回地址</span></span><br><span class=\"line\">node *<span class=\"function\"><span class=\"title\">LocateElem_one</span>(<span class=\"params\">LinkList L,ElemType e</span>)</span>&#123;</span><br><span class=\"line\">    LinkList p = L-&gt;next;<span class=\"comment\">//指向首元结点</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (p &amp;&amp; p-&gt;data != e)p = p-&gt;next;</span><br><span class=\"line\">    <span class=\"comment\">//所有结点都看完了还没找到p为空</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> p;<span class=\"comment\">//找到返回L中值为e的元素的地址，查找啊hi白返回NULL</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int <span class=\"function\"><span class=\"title\">LocateElem_two</span>(<span class=\"params\">LinkList L,ElemType e</span>)</span>&#123;</span><br><span class=\"line\">    LinkList p = L-&gt;next;</span><br><span class=\"line\">    int cnt = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(p &amp;&amp; p-&gt;data != e)&#123;</span><br><span class=\"line\">        p = p-&gt;next;</span><br><span class=\"line\">        cnt++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(p)<span class=\"comment\">//p不为空，表示找到了</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> cnt;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>插入结点</p>\n<p><img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d14cc8bb4d4a42c5ac2252f28f787379~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\"></p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//插入</span></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * 1.首先找到Ai-1的储存位置p</span></span><br><span class=\"line\"><span class=\"comment\"> * 2.生成一个数据域为e的新结点S</span></span><br><span class=\"line\"><span class=\"comment\"> * 3.插入新的结点【1.新阶段的指针域指向Ai 2,结点Ai-1的指针域指向相信结点】</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">//第i个元素前插入元素e</span></span><br><span class=\"line\">Status <span class=\"function\"><span class=\"title\">ListInsert</span>(<span class=\"params\">LinkList &amp;L,int i,ElemType e</span>)</span>&#123;</span><br><span class=\"line\">    LinkList p = L;<span class=\"comment\">//头结点</span></span><br><span class=\"line\">    int cnt = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"comment\">//寻找第i-1个位置,p指向i-1</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(p &amp;&amp; cnt &lt; i - <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">        p = p-&gt;next;</span><br><span class=\"line\">        cnt++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!p || cnt &gt; i - <span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;<span class=\"comment\">//插入位置非法【i大于表长，i小于1</span></span><br><span class=\"line\"></span><br><span class=\"line\">    LinkList s = (LinkList) malloc(sizeof(node));<span class=\"comment\">//新的结点</span></span><br><span class=\"line\">    <span class=\"comment\">//s = new node;</span></span><br><span class=\"line\">    s-&gt;data = e;<span class=\"comment\">//存入数据</span></span><br><span class=\"line\">    <span class=\"comment\">//插入</span></span><br><span class=\"line\">    s-&gt;next = p-&gt;next;</span><br><span class=\"line\">    p-&gt;next = s;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>删除结点</p>\n<p><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6ab5ff4df09e41509b17a38dc3ef7820~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\"><br>首先是删除某个序号的结点</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//删除结点</span></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * 1.首先找到Ai-1的储存位置p,保存要删除的a值</span></span><br><span class=\"line\"><span class=\"comment\"> * 2.令p-&gt;next指向Ai+1</span></span><br><span class=\"line\"><span class=\"comment\"> * 3.释放Ai的空间</span></span><br><span class=\"line\"><span class=\"comment\"> * 4.e返回被删除的值a</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">//^删除某个序号的</span></span><br><span class=\"line\">Status <span class=\"function\"><span class=\"title\">ListDelete_one</span>(<span class=\"params\">LinkList &amp;L,int i,ElemType &amp;e</span>)</span>&#123;</span><br><span class=\"line\">    LinkList p = L;<span class=\"comment\">//头结点</span></span><br><span class=\"line\">    int cnt = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"comment\">//寻找第i个元素，并令p指向其前驱（p指向i-1</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(p-&gt;next &amp;&amp; cnt &lt; i - <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">        p = p-&gt;next;</span><br><span class=\"line\">        cnt++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//删除位置不合法</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!(p-&gt;next) || cnt &gt; i - <span class=\"number\">1</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    LinkList q = p-&gt;next;<span class=\"comment\">//存第i个结点</span></span><br><span class=\"line\">    p-&gt;next = q-&gt;next;<span class=\"comment\">//Ai-1的指针域指向Ai+1</span></span><br><span class=\"line\">    e = q-&gt;data;<span class=\"comment\">//保存删除的数据域</span></span><br><span class=\"line\">    free(q);</span><br><span class=\"line\">    <span class=\"comment\">//delete q;</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>然后还有删除某个具体数据域的结点</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//^删除某个数据域的结点</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">Status <span class=\"function\"><span class=\"title\">ListDelete_two</span>(<span class=\"params\">LinkList &amp;L,ElemType x,ElemType &amp;e</span>)</span>&#123;</span><br><span class=\"line\">    LinkList p,pre;<span class=\"comment\">//pre为前驱结点，p为查找的结点。</span></span><br><span class=\"line\">    p = L-&gt;next;<span class=\"comment\">//首元结点</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(p &amp;&amp; p-&gt;data != x)&#123;<span class=\"comment\">//查找值为x的元素</span></span><br><span class=\"line\">        pre = p;</span><br><span class=\"line\">        p = p-&gt;next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    pre-&gt;next = p-&gt;next;<span class=\"comment\">//删除操作，将其前驱next指向其后继。</span></span><br><span class=\"line\">    e = p-&gt;data;<span class=\"comment\">//被删除的数据域保存</span></span><br><span class=\"line\">    free(p);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>建立单链表</p>\n<p>这里都默认为经过初始化</p>\n<p>头插法（注释掉的是返回头指针的写法，尾插法一样</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*头插法</span></span><br><span class=\"line\"><span class=\"comment\"> * 1.从一个空链表开始，重复读入数据</span></span><br><span class=\"line\"><span class=\"comment\"> * 2.生成新结点，将读入的数据存放到数据域中</span></span><br><span class=\"line\"><span class=\"comment\"> * 3.从最后一个结点开始，依次将个节点插入到链表的前端</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">//传入一个头结点（经过初始化的链表），也可以自己new一个（未经过初始化）</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"function\"><span class=\"title\">CreateListHead</span>(<span class=\"params\">LinkList &amp;L,int n</span>)</span>&#123;<span class=\"comment\">//插入n个结点</span></span><br><span class=\"line\">    <span class=\"comment\">//新的头结点</span></span><br><span class=\"line\">    L= (LinkList) malloc(sizeof(node));<span class=\"comment\">//没经过初始化</span></span><br><span class=\"line\">    <span class=\"comment\">// s = new node;</span></span><br><span class=\"line\">    L-&gt;next = NULL;<span class=\"comment\">//头结点指针域置空</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(int i = <span class=\"number\">0</span>; i &lt; n; i++)&#123;</span><br><span class=\"line\">        LinkList p = (LinkList) malloc(sizeof(node));</span><br><span class=\"line\">        <span class=\"comment\">//p = new node;</span></span><br><span class=\"line\">        cin &gt;&gt; p-&gt;data;<span class=\"comment\">//输入数据域</span></span><br><span class=\"line\">        <span class=\"comment\">//scanf(&amp;p-&gt;data);</span></span><br><span class=\"line\">        <span class=\"comment\">//插入到表头</span></span><br><span class=\"line\">        p-&gt;next = L-&gt;next;</span><br><span class=\"line\">        L-&gt;next = p;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> LinkedList CreateLinkedListHead(int n)//头插法&#123;</span></span><br><span class=\"line\"><span class=\"comment\">\tNode *L;</span></span><br><span class=\"line\"><span class=\"comment\">\tL = (Node *)malloc(sizeof(Node));</span></span><br><span class=\"line\"><span class=\"comment\">\tL-&gt;next = NULL;</span></span><br><span class=\"line\"><span class=\"comment\">\tprintf(&quot;输入元素：&quot;);</span></span><br><span class=\"line\"><span class=\"comment\">\tfor (int i = 0; i&lt;n; i++)</span></span><br><span class=\"line\"><span class=\"comment\">\t&#123;</span></span><br><span class=\"line\"><span class=\"comment\">\t\tNode *p; //要插入的结点</span></span><br><span class=\"line\"><span class=\"comment\">\t\tp = (Node *)malloc(sizeof(Node));</span></span><br><span class=\"line\"><span class=\"comment\">\t\tcin &gt;&gt; p-&gt;data;//输入数据域</span></span><br><span class=\"line\"><span class=\"comment\">\t\tp-&gt;next = L-&gt;next;</span></span><br><span class=\"line\"><span class=\"comment\">\t\tL-&gt;next = p;</span></span><br><span class=\"line\"><span class=\"comment\">\t&#125;</span></span><br><span class=\"line\"><span class=\"comment\">\treturn L;</span></span><br><span class=\"line\"><span class=\"comment\">&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br></pre></td></tr></table></div></figure>\n<p>尾插法：</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//尾插法</span></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * 1.从一个空表开始，将新结点逐个插入到链表的尾部，尾指针r指向来年表的尾结点</span></span><br><span class=\"line\"><span class=\"comment\"> * 2.初始化时，r与L同指向头结点。没读入一个数据元素则申请一个新的结点，将新结点插入到为节点后，r指向新的结点</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"function\"><span class=\"title\">CreateListRear</span>(<span class=\"params\">LinkList &amp;L,int n</span>)</span>&#123;</span><br><span class=\"line\">    L= (LinkList) malloc(sizeof(node));<span class=\"comment\">//没经过初始化</span></span><br><span class=\"line\">    L-&gt;next = NULL;</span><br><span class=\"line\">    LinkList r = L;<span class=\"comment\">//尾指针，先指向头结点</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(int i = <span class=\"number\">0</span>; i &lt; n; i++)&#123;</span><br><span class=\"line\">        LinkList p = (LinkList) malloc(sizeof(node));</span><br><span class=\"line\">        <span class=\"comment\">//插入到表尾</span></span><br><span class=\"line\">        cin &gt;&gt; p-&gt;data;</span><br><span class=\"line\">        p-&gt;next = NULL;</span><br><span class=\"line\">        r-&gt;next = p;</span><br><span class=\"line\">        r = p;<span class=\"comment\">//r指向新的尾结点</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> LinkedList CreateLinkedListTail(int n)//尾插法</span></span><br><span class=\"line\"><span class=\"comment\">&#123;</span></span><br><span class=\"line\"><span class=\"comment\">\tNode *L;</span></span><br><span class=\"line\"><span class=\"comment\">\tL = (Node *)malloc(sizeof(Node));</span></span><br><span class=\"line\"><span class=\"comment\">\tL-&gt;next = NULL;</span></span><br><span class=\"line\"><span class=\"comment\">\tNode *r;</span></span><br><span class=\"line\"><span class=\"comment\">\tr = L;</span></span><br><span class=\"line\"><span class=\"comment\">\twhile (n--)</span></span><br><span class=\"line\"><span class=\"comment\">\t&#123;</span></span><br><span class=\"line\"><span class=\"comment\">\t\tNode *p;</span></span><br><span class=\"line\"><span class=\"comment\">\t\tp = (Node *)malloc(sizeof(Node));</span></span><br><span class=\"line\"><span class=\"comment\">\t\tcin &gt;&gt; p-&gt;data;//输入数据域</span></span><br><span class=\"line\"><span class=\"comment\">\t\tr-&gt;next = p;</span></span><br><span class=\"line\"><span class=\"comment\">\t\tr = p;//之后的循环遇到r就是等同于p r-&gt;next就是p-&gt;next</span></span><br><span class=\"line\"><span class=\"comment\">\t&#125;</span></span><br><span class=\"line\"><span class=\"comment\">\tr-&gt;next = NULL;</span></span><br><span class=\"line\"><span class=\"comment\">\treturn L;</span></span><br><span class=\"line\"><span class=\"comment\">&#125;</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></div></figure>\n<p>链表操作：<br>有序表的合并：</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"function\"><span class=\"title\">MergeLinkList</span>(<span class=\"params\">LinkList &amp;La,LinkList &amp;Lb,LinkList &amp;Lc</span>)</span>&#123;</span><br><span class=\"line\">    LinkList pa = La-&gt;next;</span><br><span class=\"line\">    LinkList pb = Lb-&gt;next;<span class=\"comment\">//首元结点</span></span><br><span class=\"line\">    LinkList pc = Lc = La;<span class=\"comment\">//将La的头结点作为Lc的头结点</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (pa &amp;&amp; pb)&#123;<span class=\"comment\">//都不为空表</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(pa-&gt;data &lt;= pb-&gt;data)&#123;</span><br><span class=\"line\">            pc-&gt;next = pa;<span class=\"comment\">//此时La的元素接到Lc后面</span></span><br><span class=\"line\">            <span class=\"comment\">//后移</span></span><br><span class=\"line\">            pc = pa;</span><br><span class=\"line\">            pa = pa-&gt;next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            pc-&gt;next = pb;<span class=\"comment\">//此时Lb的元素接到Lc后面</span></span><br><span class=\"line\">            <span class=\"comment\">//后移</span></span><br><span class=\"line\">            pc = pb;</span><br><span class=\"line\">            pb = pb-&gt;next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">//        if(pa)</span></span><br><span class=\"line\"><span class=\"comment\">//            pc-&gt;next = pa;</span></span><br><span class=\"line\"><span class=\"comment\">//        else</span></span><br><span class=\"line\"><span class=\"comment\">//            pc-&gt;next = pb;</span></span><br><span class=\"line\">        pc-&gt;next = pa ? pa : pb;<span class=\"comment\">//如果La空l。那么Lb未空，把Lb剩下的接到Lc中</span></span><br><span class=\"line\">        free(Lb);</span><br><span class=\"line\">        <span class=\"comment\">//Lc,La指向同一节点</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n","site":{"data":{}},"excerpt":"<h3 id=\"链式储存结构\"   >\n          <a href=\"#链式储存结构\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#链式储存结构\" class=\"headerlink\" title=\"链式储存结构\"></a>链式储存结构</h3>\n      <p>结点在存储器中的位置时任意的，即逻辑上相邻的数据元素在物理上不一定相邻，所以链式又被称为<strong>非顺序映像</strong>或<strong>链式映像</strong>。</p>\n<p>用一组物理位置任意的存储单元来存放线性表的数据元素。这组存储单元可以时连续的，也可以时不连续的，甚至时零散分布在内存的任意位置上。即链表中元素的逻辑次序和物理次序不一定相同。</p>\n<blockquote>\n<p>单链表由头指针唯一确定，因此单链表可以用头指针的名字命名</p>\n</blockquote>\n<ol>\n<li>结点：数据元素的储存映像。由数据域和指针域两部分组成。</li>\n<li>n个结点由<strong>指针链</strong>组成一个链表。\n        <h3 id=\"线性表的链式表现\"   >\n          <a href=\"#线性表的链式表现\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#线性表的链式表现\" class=\"headerlink\" title=\"线性表的链式表现\"></a>线性表的链式表现</h3>\n      </li>\n</ol>\n<ul>\n<li>结点只有一个指针域的链表，称为但来年表或线性来年表（就是本文的主角<blockquote>\n<p>结点由两个指针域的链表，称为双链表；首位相接的链表称为循环链表。以后再说。</p>\n</blockquote>\n</li>\n</ul>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e90ba34559b8417988a5a3160c5548fc~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\"><br>头指针： 是指向链表中第一个结点的指针<br>首元结点: 是指链表中存储第一个数据元素a1的结点<br>头节点： 是在来年表的首元结点之前附设的一个结点（头结点可以储存链表长度或其他信息，方便链表操作。也可以没有头结点）</p>\n\n        <h4 id=\"头结点\"   >\n          <a href=\"#头结点\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#头结点\" class=\"headerlink\" title=\"头结点\"></a>头结点</h4>\n      <p>关于头结点，我们来看看头结点的好处：</p>\n<ol>\n<li><p>便于首元结点的处理</p>","more":"首元结点的地址保存在头结点的指针域中，所以在链表的第一个位置上的操作和其他位置一致，无需特殊操作。（首元结点不再由头指针指向</li>\n<li><p>便于空表和非空表的用以处理</p>\n <!--more-->无论链表是否为空表，头指针都是指向头结点的非空指针，因此空表和非空表处理统一。</li>\n</ol>\n<p>而你知道头结点也有自己的数据域，其可以为空，也可以放线性表长度等附加信息，但此结点不计入链表长度值<br>另外无头结点时，头指针为空表示空表。有头结点时，当头结点的指针域为空时表示空表。[头指针指向头节点，即存储头街的的地址]<br>。</p>\n\n        <h4 id=\"链表（链式储存）的特点\"   >\n          <a href=\"#链表（链式储存）的特点\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#链表（链式储存）的特点\" class=\"headerlink\" title=\"链表（链式储存）的特点\"></a>链表（链式储存）的特点</h4>\n      <ul>\n<li>就是前面说的，结点在储存器中的位置是任意的，。即链表中元素的逻辑次序和物理次序不一定相同</li>\n<li>访问时只能通过头指针进入链表，并通过每个结点的指针域依次炒向后顺序扫描其余结点（顺序存取法）。\n        <h3 id=\"单链表的定义和表示\"   >\n          <a href=\"#单链表的定义和表示\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#单链表的定义和表示\" class=\"headerlink\" title=\"单链表的定义和表示\"></a>单链表的定义和表示</h3>\n      一张图表示：<br><img src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a5fccbfda8244eaab5dbc545d3603a10~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\">\n        <h4 id=\"存储结构\"   >\n          <a href=\"#存储结构\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#存储结构\" class=\"headerlink\" title=\"存储结构\"></a>存储结构</h4>\n      定义结构体<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//将结构类型重命名为node,*LinkList</span></span><br><span class=\"line\">typedef struct node&#123;<span class=\"comment\">//声明结点和指向结点的指针的类型</span></span><br><span class=\"line\">        ElemType data;<span class=\"comment\">//数据域</span></span><br><span class=\"line\">        struct node *next;<span class=\"comment\">//指针域</span></span><br><span class=\"line\">        &#125;node,*LinkList;<span class=\"comment\">//LinkList是指向结构体node的指针类型，让书写更简单（node *L / LinkList L）</span></span><br></pre></td></tr></table></div></figure>\n<blockquote>\n<p>那么定义是这样的：<img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a38c4b6186f04bbbb8cb464b9f13a5c9~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\">这样是自己定义链表头指针，当然你也可以在初始化是返回一个头指针（链表）</p>\n</blockquote>\n</li>\n</ul>\n\n        <h4 id=\"函数\"   >\n          <a href=\"#函数\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h4>\n      <p><img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3b8d08fe804f4c048cf4f249d40b294f~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\"></p>\n<blockquote>\n<p>Status InitList(LinkList &amp;L/*node *L LinkList <em>L</em>/);<br>bool ListEmpty(LinkList L);<br>bool DestroyList(LinkList &amp;L);<br>bool ClearList(LinkList &amp;L);<br>int ListLength(LinkList L);<br>Status GetElem(LinkList L,int i,ElemType &amp;e);<br>node *LocateElem_one(LinkList L,ElemType e);<br>int LocateElem_two(LinkList L,ElemType e);<br>Status ListInsert(LinkList &amp;L,int i,ElemType e);<br>Status ListDelete_one(LinkList &amp;L,int i,ElemType &amp;e);<br>Status ListDelete_two(LinkList &amp;L,ElemType x,ElemType &amp;e);<br>void CreateListHead(LinkList &amp;L,int n);<br>void CreateListRear(LinkList &amp;L,int n);<br>void ListTravel(LinkList L);</p>\n</blockquote>\n<p>初始化链表（构造一个空的单链表</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * 1.生成新结点作为头结点，用头指针L指向头结点</span></span><br><span class=\"line\"><span class=\"comment\"> * 2.将头结点的的指针域置空</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">Status <span class=\"function\"><span class=\"title\">InitList</span>(<span class=\"params\">Linklist &amp;L<span class=\"comment\">/*node *L*/</span></span>)</span>&#123;</span><br><span class=\"line\">    L = (LinkList) malloc(sizeof(node));</span><br><span class=\"line\">    <span class=\"comment\">//L = new node;___c++</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(L == NULL) &#123; <span class=\"comment\">//判断是否有足够的内存空间</span></span><br><span class=\"line\">        printf(<span class=\"string\">&quot;申请内存空间失败\\n&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    L-&gt;next = NULL;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>或者将链表作为返回值</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LinkList <span class=\"function\"><span class=\"title\">InitList</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    LinkList L;</span><br><span class=\"line\">    L = (LinkList)malloc(sizeof(Node));   <span class=\"comment\">//申请结点空间</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(L == NULL) &#123; <span class=\"comment\">//判断是否有足够的内存空间</span></span><br><span class=\"line\">        printf(<span class=\"string\">&quot;申请内存空间失败\\n&quot;</span>);</span><br><span class=\"line\">        exit(<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    L-&gt;next = NULL;                  <span class=\"comment\">//将next设置为NULL,初始长度为0的单链表</span></span><br><span class=\"line\"> \t<span class=\"keyword\">return</span> L;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>判断链表为空</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//判空</span></span><br><span class=\"line\">bool <span class=\"function\"><span class=\"title\">ListEmpty</span>(<span class=\"params\">LinkList L</span>)</span>&#123;<span class=\"comment\">//若为空表，则返回1，否则返回0</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(L-&gt;next)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>销毁链表</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//链表的销毁（销毁后链表不存在,头指针头结点都不存在了</span></span><br><span class=\"line\"><span class=\"comment\">//从头指针开始，依次释放所有结点（头结点也被删除</span></span><br><span class=\"line\">bool <span class=\"function\"><span class=\"title\">DestroyList</span>(<span class=\"params\">LinkList &amp;L</span>)</span>&#123;</span><br><span class=\"line\">    LinkList p;<span class=\"comment\">//node *p</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(L)&#123;<span class=\"comment\">//L非空</span></span><br><span class=\"line\">        p = L;</span><br><span class=\"line\">        L = L-&gt;next;</span><br><span class=\"line\">        free(p);</span><br><span class=\"line\">        <span class=\"comment\">//delete p;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>清空链表</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//清空链表（链表仍存在，但是无元素，成为空链表</span></span><br><span class=\"line\">bool <span class=\"function\"><span class=\"title\">ClearList</span>(<span class=\"params\">LinkList &amp;L</span>)</span>&#123;</span><br><span class=\"line\">    LinkList p,q;<span class=\"comment\">//node *p,*q</span></span><br><span class=\"line\">    <span class=\"comment\">//p：存放当前需要删除的结点 q：用来存放p的下一个结点</span></span><br><span class=\"line\">    p = L-&gt;next;<span class=\"comment\">//保护头指针，P现在是首元结点</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(p)&#123;<span class=\"comment\">//非空,没到表尾</span></span><br><span class=\"line\">        q = p-&gt;next;</span><br><span class=\"line\">        free(p);<span class=\"comment\">//delete p</span></span><br><span class=\"line\">        p = q;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    L-&gt;next = NULL;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>求单链表的表长</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//求链表的表长</span></span><br><span class=\"line\">int <span class=\"function\"><span class=\"title\">ListLength</span>(<span class=\"params\">LinkList L</span>)</span>&#123;</span><br><span class=\"line\">    LinkList  p;<span class=\"comment\">//node *p</span></span><br><span class=\"line\">    p = L-&gt;next;<span class=\"comment\">//p指向首元结点（第一个结点</span></span><br><span class=\"line\">    int len = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"comment\">//遍历链表，统计结点数</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (p)&#123;<span class=\"comment\">//非空</span></span><br><span class=\"line\">        len++;</span><br><span class=\"line\">        p = p-&gt;next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> len;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>链表的取值</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//取单链表中对饿第i个元素的内容</span></span><br><span class=\"line\"><span class=\"comment\">//从链表头指针开始，顺着链域next逐个结点往下搜索，直至搜索到第i个结点</span></span><br><span class=\"line\">Status <span class=\"function\"><span class=\"title\">GetElem</span>(<span class=\"params\">LinkList L,int i,ElemType &amp;e</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(i &lt; <span class=\"number\">1</span> &amp;&amp; i &gt; ListLength(L))</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    LinkList p = L-&gt;next;</span><br><span class=\"line\">    int cnt = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (p &amp;&amp; cnt &lt; i)&#123;<span class=\"comment\">//向后扫描，直到p指向第i个元素或者p为空</span></span><br><span class=\"line\">        p = p-&gt;next;</span><br><span class=\"line\">        cnt++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!p || cnt &gt; i)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    e = p-&gt;data;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>链表的查找，分为返回地址和序号两种</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//返回地址</span></span><br><span class=\"line\">node *<span class=\"function\"><span class=\"title\">LocateElem_one</span>(<span class=\"params\">LinkList L,ElemType e</span>)</span>&#123;</span><br><span class=\"line\">    LinkList p = L-&gt;next;<span class=\"comment\">//指向首元结点</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (p &amp;&amp; p-&gt;data != e)p = p-&gt;next;</span><br><span class=\"line\">    <span class=\"comment\">//所有结点都看完了还没找到p为空</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> p;<span class=\"comment\">//找到返回L中值为e的元素的地址，查找啊hi白返回NULL</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int <span class=\"function\"><span class=\"title\">LocateElem_two</span>(<span class=\"params\">LinkList L,ElemType e</span>)</span>&#123;</span><br><span class=\"line\">    LinkList p = L-&gt;next;</span><br><span class=\"line\">    int cnt = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(p &amp;&amp; p-&gt;data != e)&#123;</span><br><span class=\"line\">        p = p-&gt;next;</span><br><span class=\"line\">        cnt++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(p)<span class=\"comment\">//p不为空，表示找到了</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> cnt;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>插入结点</p>\n<p><img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d14cc8bb4d4a42c5ac2252f28f787379~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\"></p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//插入</span></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * 1.首先找到Ai-1的储存位置p</span></span><br><span class=\"line\"><span class=\"comment\"> * 2.生成一个数据域为e的新结点S</span></span><br><span class=\"line\"><span class=\"comment\"> * 3.插入新的结点【1.新阶段的指针域指向Ai 2,结点Ai-1的指针域指向相信结点】</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">//第i个元素前插入元素e</span></span><br><span class=\"line\">Status <span class=\"function\"><span class=\"title\">ListInsert</span>(<span class=\"params\">LinkList &amp;L,int i,ElemType e</span>)</span>&#123;</span><br><span class=\"line\">    LinkList p = L;<span class=\"comment\">//头结点</span></span><br><span class=\"line\">    int cnt = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"comment\">//寻找第i-1个位置,p指向i-1</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(p &amp;&amp; cnt &lt; i - <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">        p = p-&gt;next;</span><br><span class=\"line\">        cnt++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!p || cnt &gt; i - <span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;<span class=\"comment\">//插入位置非法【i大于表长，i小于1</span></span><br><span class=\"line\"></span><br><span class=\"line\">    LinkList s = (LinkList) malloc(sizeof(node));<span class=\"comment\">//新的结点</span></span><br><span class=\"line\">    <span class=\"comment\">//s = new node;</span></span><br><span class=\"line\">    s-&gt;data = e;<span class=\"comment\">//存入数据</span></span><br><span class=\"line\">    <span class=\"comment\">//插入</span></span><br><span class=\"line\">    s-&gt;next = p-&gt;next;</span><br><span class=\"line\">    p-&gt;next = s;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>删除结点</p>\n<p><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6ab5ff4df09e41509b17a38dc3ef7820~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\"><br>首先是删除某个序号的结点</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//删除结点</span></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * 1.首先找到Ai-1的储存位置p,保存要删除的a值</span></span><br><span class=\"line\"><span class=\"comment\"> * 2.令p-&gt;next指向Ai+1</span></span><br><span class=\"line\"><span class=\"comment\"> * 3.释放Ai的空间</span></span><br><span class=\"line\"><span class=\"comment\"> * 4.e返回被删除的值a</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">//^删除某个序号的</span></span><br><span class=\"line\">Status <span class=\"function\"><span class=\"title\">ListDelete_one</span>(<span class=\"params\">LinkList &amp;L,int i,ElemType &amp;e</span>)</span>&#123;</span><br><span class=\"line\">    LinkList p = L;<span class=\"comment\">//头结点</span></span><br><span class=\"line\">    int cnt = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"comment\">//寻找第i个元素，并令p指向其前驱（p指向i-1</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(p-&gt;next &amp;&amp; cnt &lt; i - <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">        p = p-&gt;next;</span><br><span class=\"line\">        cnt++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//删除位置不合法</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!(p-&gt;next) || cnt &gt; i - <span class=\"number\">1</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    LinkList q = p-&gt;next;<span class=\"comment\">//存第i个结点</span></span><br><span class=\"line\">    p-&gt;next = q-&gt;next;<span class=\"comment\">//Ai-1的指针域指向Ai+1</span></span><br><span class=\"line\">    e = q-&gt;data;<span class=\"comment\">//保存删除的数据域</span></span><br><span class=\"line\">    free(q);</span><br><span class=\"line\">    <span class=\"comment\">//delete q;</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>然后还有删除某个具体数据域的结点</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//^删除某个数据域的结点</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">Status <span class=\"function\"><span class=\"title\">ListDelete_two</span>(<span class=\"params\">LinkList &amp;L,ElemType x,ElemType &amp;e</span>)</span>&#123;</span><br><span class=\"line\">    LinkList p,pre;<span class=\"comment\">//pre为前驱结点，p为查找的结点。</span></span><br><span class=\"line\">    p = L-&gt;next;<span class=\"comment\">//首元结点</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(p &amp;&amp; p-&gt;data != x)&#123;<span class=\"comment\">//查找值为x的元素</span></span><br><span class=\"line\">        pre = p;</span><br><span class=\"line\">        p = p-&gt;next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    pre-&gt;next = p-&gt;next;<span class=\"comment\">//删除操作，将其前驱next指向其后继。</span></span><br><span class=\"line\">    e = p-&gt;data;<span class=\"comment\">//被删除的数据域保存</span></span><br><span class=\"line\">    free(p);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>建立单链表</p>\n<p>这里都默认为经过初始化</p>\n<p>头插法（注释掉的是返回头指针的写法，尾插法一样</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*头插法</span></span><br><span class=\"line\"><span class=\"comment\"> * 1.从一个空链表开始，重复读入数据</span></span><br><span class=\"line\"><span class=\"comment\"> * 2.生成新结点，将读入的数据存放到数据域中</span></span><br><span class=\"line\"><span class=\"comment\"> * 3.从最后一个结点开始，依次将个节点插入到链表的前端</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">//传入一个头结点（经过初始化的链表），也可以自己new一个（未经过初始化）</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"function\"><span class=\"title\">CreateListHead</span>(<span class=\"params\">LinkList &amp;L,int n</span>)</span>&#123;<span class=\"comment\">//插入n个结点</span></span><br><span class=\"line\">    <span class=\"comment\">//新的头结点</span></span><br><span class=\"line\">    L= (LinkList) malloc(sizeof(node));<span class=\"comment\">//没经过初始化</span></span><br><span class=\"line\">    <span class=\"comment\">// s = new node;</span></span><br><span class=\"line\">    L-&gt;next = NULL;<span class=\"comment\">//头结点指针域置空</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(int i = <span class=\"number\">0</span>; i &lt; n; i++)&#123;</span><br><span class=\"line\">        LinkList p = (LinkList) malloc(sizeof(node));</span><br><span class=\"line\">        <span class=\"comment\">//p = new node;</span></span><br><span class=\"line\">        cin &gt;&gt; p-&gt;data;<span class=\"comment\">//输入数据域</span></span><br><span class=\"line\">        <span class=\"comment\">//scanf(&amp;p-&gt;data);</span></span><br><span class=\"line\">        <span class=\"comment\">//插入到表头</span></span><br><span class=\"line\">        p-&gt;next = L-&gt;next;</span><br><span class=\"line\">        L-&gt;next = p;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> LinkedList CreateLinkedListHead(int n)//头插法&#123;</span></span><br><span class=\"line\"><span class=\"comment\">\tNode *L;</span></span><br><span class=\"line\"><span class=\"comment\">\tL = (Node *)malloc(sizeof(Node));</span></span><br><span class=\"line\"><span class=\"comment\">\tL-&gt;next = NULL;</span></span><br><span class=\"line\"><span class=\"comment\">\tprintf(&quot;输入元素：&quot;);</span></span><br><span class=\"line\"><span class=\"comment\">\tfor (int i = 0; i&lt;n; i++)</span></span><br><span class=\"line\"><span class=\"comment\">\t&#123;</span></span><br><span class=\"line\"><span class=\"comment\">\t\tNode *p; //要插入的结点</span></span><br><span class=\"line\"><span class=\"comment\">\t\tp = (Node *)malloc(sizeof(Node));</span></span><br><span class=\"line\"><span class=\"comment\">\t\tcin &gt;&gt; p-&gt;data;//输入数据域</span></span><br><span class=\"line\"><span class=\"comment\">\t\tp-&gt;next = L-&gt;next;</span></span><br><span class=\"line\"><span class=\"comment\">\t\tL-&gt;next = p;</span></span><br><span class=\"line\"><span class=\"comment\">\t&#125;</span></span><br><span class=\"line\"><span class=\"comment\">\treturn L;</span></span><br><span class=\"line\"><span class=\"comment\">&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br></pre></td></tr></table></div></figure>\n<p>尾插法：</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//尾插法</span></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * 1.从一个空表开始，将新结点逐个插入到链表的尾部，尾指针r指向来年表的尾结点</span></span><br><span class=\"line\"><span class=\"comment\"> * 2.初始化时，r与L同指向头结点。没读入一个数据元素则申请一个新的结点，将新结点插入到为节点后，r指向新的结点</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"function\"><span class=\"title\">CreateListRear</span>(<span class=\"params\">LinkList &amp;L,int n</span>)</span>&#123;</span><br><span class=\"line\">    L= (LinkList) malloc(sizeof(node));<span class=\"comment\">//没经过初始化</span></span><br><span class=\"line\">    L-&gt;next = NULL;</span><br><span class=\"line\">    LinkList r = L;<span class=\"comment\">//尾指针，先指向头结点</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(int i = <span class=\"number\">0</span>; i &lt; n; i++)&#123;</span><br><span class=\"line\">        LinkList p = (LinkList) malloc(sizeof(node));</span><br><span class=\"line\">        <span class=\"comment\">//插入到表尾</span></span><br><span class=\"line\">        cin &gt;&gt; p-&gt;data;</span><br><span class=\"line\">        p-&gt;next = NULL;</span><br><span class=\"line\">        r-&gt;next = p;</span><br><span class=\"line\">        r = p;<span class=\"comment\">//r指向新的尾结点</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> LinkedList CreateLinkedListTail(int n)//尾插法</span></span><br><span class=\"line\"><span class=\"comment\">&#123;</span></span><br><span class=\"line\"><span class=\"comment\">\tNode *L;</span></span><br><span class=\"line\"><span class=\"comment\">\tL = (Node *)malloc(sizeof(Node));</span></span><br><span class=\"line\"><span class=\"comment\">\tL-&gt;next = NULL;</span></span><br><span class=\"line\"><span class=\"comment\">\tNode *r;</span></span><br><span class=\"line\"><span class=\"comment\">\tr = L;</span></span><br><span class=\"line\"><span class=\"comment\">\twhile (n--)</span></span><br><span class=\"line\"><span class=\"comment\">\t&#123;</span></span><br><span class=\"line\"><span class=\"comment\">\t\tNode *p;</span></span><br><span class=\"line\"><span class=\"comment\">\t\tp = (Node *)malloc(sizeof(Node));</span></span><br><span class=\"line\"><span class=\"comment\">\t\tcin &gt;&gt; p-&gt;data;//输入数据域</span></span><br><span class=\"line\"><span class=\"comment\">\t\tr-&gt;next = p;</span></span><br><span class=\"line\"><span class=\"comment\">\t\tr = p;//之后的循环遇到r就是等同于p r-&gt;next就是p-&gt;next</span></span><br><span class=\"line\"><span class=\"comment\">\t&#125;</span></span><br><span class=\"line\"><span class=\"comment\">\tr-&gt;next = NULL;</span></span><br><span class=\"line\"><span class=\"comment\">\treturn L;</span></span><br><span class=\"line\"><span class=\"comment\">&#125;</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></div></figure>\n<p>链表操作：<br>有序表的合并：</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"function\"><span class=\"title\">MergeLinkList</span>(<span class=\"params\">LinkList &amp;La,LinkList &amp;Lb,LinkList &amp;Lc</span>)</span>&#123;</span><br><span class=\"line\">    LinkList pa = La-&gt;next;</span><br><span class=\"line\">    LinkList pb = Lb-&gt;next;<span class=\"comment\">//首元结点</span></span><br><span class=\"line\">    LinkList pc = Lc = La;<span class=\"comment\">//将La的头结点作为Lc的头结点</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (pa &amp;&amp; pb)&#123;<span class=\"comment\">//都不为空表</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(pa-&gt;data &lt;= pb-&gt;data)&#123;</span><br><span class=\"line\">            pc-&gt;next = pa;<span class=\"comment\">//此时La的元素接到Lc后面</span></span><br><span class=\"line\">            <span class=\"comment\">//后移</span></span><br><span class=\"line\">            pc = pa;</span><br><span class=\"line\">            pa = pa-&gt;next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            pc-&gt;next = pb;<span class=\"comment\">//此时Lb的元素接到Lc后面</span></span><br><span class=\"line\">            <span class=\"comment\">//后移</span></span><br><span class=\"line\">            pc = pb;</span><br><span class=\"line\">            pb = pb-&gt;next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">//        if(pa)</span></span><br><span class=\"line\"><span class=\"comment\">//            pc-&gt;next = pa;</span></span><br><span class=\"line\"><span class=\"comment\">//        else</span></span><br><span class=\"line\"><span class=\"comment\">//            pc-&gt;next = pb;</span></span><br><span class=\"line\">        pc-&gt;next = pa ? pa : pb;<span class=\"comment\">//如果La空l。那么Lb未空，把Lb剩下的接到Lc中</span></span><br><span class=\"line\">        free(Lb);</span><br><span class=\"line\">        <span class=\"comment\">//Lc,La指向同一节点</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>"},{"title":"循环链表与双向链表","date":"2021-05-15T07:52:55.000Z","_content":"## 循环链表\n循环链表是一种头尾相接的链表，表中的最后一个结点的指针域指向头结点，整个链表形成一个环。\n\n示意图：\n![image.png](https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/78a516072daa457f97c21306b0c59dc1~tplv-k3u1fbpfcp-watermark.image)\n\n这样的有点是可以从表中任一结点出发均可找到其他结点。而循环链表由于没有NULL指针，所以涉及遍历操作时，其终止条件就不再像**非循环链表**那样判断p或p->next是否为空，而是判断他们是否是头指针。\n\n就像这样：\n![image.png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0b2bbd8e2f5b439fa308c6a9320cf827~tplv-k3u1fbpfcp-watermark.image)\n\n为了操作方便，一般需要一个尾指针，指向最后一个结点。（表的操作通常是在首位位置上进行） \n\n来看一下有尾指针的例子，两个循环链表的合并：\n![image.png](https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/330120042fc64ae4a733d626508fd5b7~tplv-k3u1fbpfcp-watermark.image)\n代码：\n\n```js\n//合并链表\n//几乎与单链表相同\nLinkList ConnectList(Linklist Ta,LinkList Tb){\n    LinkList p = Ta->next;//p存表（Ta）头结点\n    Ta->next = Tb->next->next;//Tb的表头连接Ta表尾\n    //delete Tb->next;\n    free(Tb->next);//释放Tb表的头结点\n    Tb->next = p;//修改指针，Tb的表尾结点指向p(Ta的首元)\n    return Tb;\n}\n```\n## 双向链表\n单链表中的结点只包含指向后继结点的指针，从而无法快速访问前驱结点（他就在你前面你却要绕一个圈才能找到他,甚至重新从头结点出发寻找）。对于较长的链表或者频繁进行删除插入等操作的链表来说，处理的速度很慢。为了比卖你这个问题，我们重新定义来年表，使链表中的每个结点有两个指针域，一个指向前驱(prior)，一个指向后继(next)。这种链表被称为双向链表。\n\n![image.png](https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c805b7bef8fb4945abd28685e2f406d6~tplv-k3u1fbpfcp-watermark.image)\n\n同样的，你也可以设置为双向循环链表：\n- 让头结点的前驱指针指向链表的最后一个结点\n- 让最后一个结点的后继指针指向头指针\n\n![image.png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/337c061c157747a3b9f5373735f4d4fb~tplv-k3u1fbpfcp-watermark.image)\n#### 双向链表的实现\n双向的结构：\n```js\ntypedef struct DuNode {\n    Elemtype data;//\n    struct DuNode *prior,*next;//两个指针域\n}DuNode，*DuLinkList;\n```\n关于双向链表的成员函数，比如：ListLength,GetElem等，因仅仅涉及一个方向的指针，故他们算法与单链表相同。但在插入删除时，需要修改两个方向的指针，两者操作的时间复杂度均为O(n).\n\n**插入**：\n```js\n//在带头结点的双向循环链表L中的第i个位置之前插入元素e\nvoid DuListInsert(DuLinkList &L,int i,ElemType e) {\n    DuLinkList p;//第i个结点\n    //if(!(p = DuGetElem(L,i))) return false;//可以直接使用查找函数查找第i个元素的位置，也可以这样\n    p = L;//头结点\n    int cnt = 0;\n    while(p && cnt < i){\n        p = p->next;\n        cnt++;\n    }\n    if(!p || cnt > i)\n        return false;\n    DuLinkList s = (DuLinkList)malloc(DuNode);\n    //DuLinkList s = new DuNode\n    s->data = e;//输入数据域\n    s->prior= p->prior;//将新结点的前驱指向i-1位置结点\n    p->prior->next = s;//将i-1位置上的结点后继指针指向s\n    s->next = p;//将新结点的后继指针指向第i个结点\n    p->prior = s;//将第i个结点的前驱结点指向新结点\n    return true;\n    \n}\n```\n其他位置的插入与此大同小异\n**删除**\n\n```js\nvoid DuLinkList(DuLinkList &L, int i,ElemType &e) {\n      DuLinkList p;//第i个结点\n     //if(!(p = DuGetElem(L,i))) return false;//同样的可以使用查找函数找到第i个位置\n    p = L;//头结点\n    int cnt = 0;\n    while(p && cnt < i){\n        p = p->next;\n        cnt++;\n    }\n    if(!p || cnt > i)\n        return false;\n    \n   e = p->data;\n   p->prior->next = p->next;//将第i-1位置的后继指针指向第i+1个结点\n   p->next->prior = p->next;//将第i+1个位置的前驱结点指向第i-1个结点\n   free(p);\n   return true;\n}\n```\n## 比较\n\n![image.png](https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/59be1702bca54767869ee3e4173cc1df~tplv-k3u1fbpfcp-watermark.image)\n\n![image.png](https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/61e8a361263a43a0894e25099748ee8a~tplv-k3u1fbpfcp-watermark.image)\n\n\n具体的选用看具体需求。当然表的使用还需多做题啊。","source":"_posts/循环链表与双向链表.md","raw":"---\ntitle: 循环链表与双向链表\ndate: 2021-05-15 15:52:55\ntags: \n    - Study\n    - 链表\ncategories: \n    - 数据结构\n    - 链表\n---\n## 循环链表\n循环链表是一种头尾相接的链表，表中的最后一个结点的指针域指向头结点，整个链表形成一个环。\n\n示意图：\n![image.png](https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/78a516072daa457f97c21306b0c59dc1~tplv-k3u1fbpfcp-watermark.image)\n\n这样的有点是可以从表中任一结点出发均可找到其他结点。而循环链表由于没有NULL指针，所以涉及遍历操作时，其终止条件就不再像**非循环链表**那样判断p或p->next是否为空，而是判断他们是否是头指针。\n\n就像这样：\n![image.png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0b2bbd8e2f5b439fa308c6a9320cf827~tplv-k3u1fbpfcp-watermark.image)\n\n为了操作方便，一般需要一个尾指针，指向最后一个结点。（表的操作通常是在首位位置上进行） \n\n来看一下有尾指针的例子，两个循环链表的合并：\n![image.png](https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/330120042fc64ae4a733d626508fd5b7~tplv-k3u1fbpfcp-watermark.image)\n代码：\n\n```js\n//合并链表\n//几乎与单链表相同\nLinkList ConnectList(Linklist Ta,LinkList Tb){\n    LinkList p = Ta->next;//p存表（Ta）头结点\n    Ta->next = Tb->next->next;//Tb的表头连接Ta表尾\n    //delete Tb->next;\n    free(Tb->next);//释放Tb表的头结点\n    Tb->next = p;//修改指针，Tb的表尾结点指向p(Ta的首元)\n    return Tb;\n}\n```\n## 双向链表\n单链表中的结点只包含指向后继结点的指针，从而无法快速访问前驱结点（他就在你前面你却要绕一个圈才能找到他,甚至重新从头结点出发寻找）。对于较长的链表或者频繁进行删除插入等操作的链表来说，处理的速度很慢。为了比卖你这个问题，我们重新定义来年表，使链表中的每个结点有两个指针域，一个指向前驱(prior)，一个指向后继(next)。这种链表被称为双向链表。\n\n![image.png](https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c805b7bef8fb4945abd28685e2f406d6~tplv-k3u1fbpfcp-watermark.image)\n\n同样的，你也可以设置为双向循环链表：\n- 让头结点的前驱指针指向链表的最后一个结点\n- 让最后一个结点的后继指针指向头指针\n\n![image.png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/337c061c157747a3b9f5373735f4d4fb~tplv-k3u1fbpfcp-watermark.image)\n#### 双向链表的实现\n双向的结构：\n```js\ntypedef struct DuNode {\n    Elemtype data;//\n    struct DuNode *prior,*next;//两个指针域\n}DuNode，*DuLinkList;\n```\n关于双向链表的成员函数，比如：ListLength,GetElem等，因仅仅涉及一个方向的指针，故他们算法与单链表相同。但在插入删除时，需要修改两个方向的指针，两者操作的时间复杂度均为O(n).\n\n**插入**：\n```js\n//在带头结点的双向循环链表L中的第i个位置之前插入元素e\nvoid DuListInsert(DuLinkList &L,int i,ElemType e) {\n    DuLinkList p;//第i个结点\n    //if(!(p = DuGetElem(L,i))) return false;//可以直接使用查找函数查找第i个元素的位置，也可以这样\n    p = L;//头结点\n    int cnt = 0;\n    while(p && cnt < i){\n        p = p->next;\n        cnt++;\n    }\n    if(!p || cnt > i)\n        return false;\n    DuLinkList s = (DuLinkList)malloc(DuNode);\n    //DuLinkList s = new DuNode\n    s->data = e;//输入数据域\n    s->prior= p->prior;//将新结点的前驱指向i-1位置结点\n    p->prior->next = s;//将i-1位置上的结点后继指针指向s\n    s->next = p;//将新结点的后继指针指向第i个结点\n    p->prior = s;//将第i个结点的前驱结点指向新结点\n    return true;\n    \n}\n```\n其他位置的插入与此大同小异\n**删除**\n\n```js\nvoid DuLinkList(DuLinkList &L, int i,ElemType &e) {\n      DuLinkList p;//第i个结点\n     //if(!(p = DuGetElem(L,i))) return false;//同样的可以使用查找函数找到第i个位置\n    p = L;//头结点\n    int cnt = 0;\n    while(p && cnt < i){\n        p = p->next;\n        cnt++;\n    }\n    if(!p || cnt > i)\n        return false;\n    \n   e = p->data;\n   p->prior->next = p->next;//将第i-1位置的后继指针指向第i+1个结点\n   p->next->prior = p->next;//将第i+1个位置的前驱结点指向第i-1个结点\n   free(p);\n   return true;\n}\n```\n## 比较\n\n![image.png](https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/59be1702bca54767869ee3e4173cc1df~tplv-k3u1fbpfcp-watermark.image)\n\n![image.png](https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/61e8a361263a43a0894e25099748ee8a~tplv-k3u1fbpfcp-watermark.image)\n\n\n具体的选用看具体需求。当然表的使用还需多做题啊。","slug":"循环链表与双向链表","published":1,"updated":"2021-11-07T10:43:23.851Z","_id":"cktvk78fv00321cwsd2e36f57","comments":1,"layout":"post","photos":[],"link":"","content":"\n        <h2 id=\"循环链表\"   >\n          <a href=\"#循环链表\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#循环链表\" class=\"headerlink\" title=\"循环链表\"></a>循环链表</h2>\n      <p>循环链表是一种头尾相接的链表，表中的最后一个结点的指针域指向头结点，整个链表形成一个环。</p>\n<p>示意图：<br><img src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/78a516072daa457f97c21306b0c59dc1~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\"></p>\n<p>这样的有点是可以从表中任一结点出发均可找到其他结点。而循环链表由于没有NULL指针，所以涉及遍历操作时，其终止条件就不再像<strong>非循环链表</strong>那样判断p或p-&gt;next是否为空，而是判断他们是否是头指针。</p>\n<p>就像这样：<br><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0b2bbd8e2f5b439fa308c6a9320cf827~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\"></p>\n<p>为了操作方便，一般需要一个尾指针，指向最后一个结点。（表的操作通常是在首位位置上进行） </p>\n<p>来看一下有尾指针的例子，两个循环链表的合并：<br><img src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/330120042fc64ae4a733d626508fd5b7~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\"><br>代码：</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//合并链表</span></span><br><span class=\"line\"><span class=\"comment\">//几乎与单链表相同</span></span><br><span class=\"line\">LinkList <span class=\"function\"><span class=\"title\">ConnectList</span>(<span class=\"params\">Linklist Ta,LinkList Tb</span>)</span>&#123;</span><br><span class=\"line\">    LinkList p = Ta-&gt;next;<span class=\"comment\">//p存表（Ta）头结点</span></span><br><span class=\"line\">    Ta-&gt;next = Tb-&gt;next-&gt;next;<span class=\"comment\">//Tb的表头连接Ta表尾</span></span><br><span class=\"line\">    <span class=\"comment\">//delete Tb-&gt;next;</span></span><br><span class=\"line\">    free(Tb-&gt;next);<span class=\"comment\">//释放Tb表的头结点</span></span><br><span class=\"line\">    Tb-&gt;next = p;<span class=\"comment\">//修改指针，Tb的表尾结点指向p(Ta的首元)</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> Tb;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n        <h2 id=\"双向链表\"   >\n          <a href=\"#双向链表\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#双向链表\" class=\"headerlink\" title=\"双向链表\"></a>双向链表</h2>\n      <p>单链表中的结点只包含指向后继结点的指针，从而无法快速访问前驱结点（他就在你前面你却要绕一个圈才能找到他,甚至重新从头结点出发寻找）。对于较长的链表或者频繁进行删除插入等操作的链表来说，处理的速度很慢。为了比卖你这个问题，我们重新定义来年表，使链表中的每个结点有两个指针域，一个指向前驱(prior)，一个指向后继(next)。这种链表被称为双向链表。</p>\n<p><img src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c805b7bef8fb4945abd28685e2f406d6~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\"></p>\n<p>同样的，你也可以设置为双向循环链表：</p>\n<ul>\n<li>让头结点的前驱指针指向链表的最后一个结点</li>\n<li>让最后一个结点的后继指针指向头指针</li>\n</ul>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/337c061c157747a3b9f5373735f4d4fb~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\"></p>\n\n        <h4 id=\"双向链表的实现\"   >\n          <a href=\"#双向链表的实现\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#双向链表的实现\" class=\"headerlink\" title=\"双向链表的实现\"></a>双向链表的实现</h4>\n      <p>双向的结构：</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">typedef struct DuNode &#123;</span><br><span class=\"line\">    Elemtype data;<span class=\"comment\">//</span></span><br><span class=\"line\">    struct DuNode *prior,*next;<span class=\"comment\">//两个指针域</span></span><br><span class=\"line\">&#125;DuNode，*DuLinkList;</span><br></pre></td></tr></table></div></figure>\n<p>关于双向链表的成员函数，比如：ListLength,GetElem等，因仅仅涉及一个方向的指针，故他们算法与单链表相同。但在插入删除时，需要修改两个方向的指针，两者操作的时间复杂度均为O(n).</p>\n<p><strong>插入</strong>：</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//在带头结点的双向循环链表L中的第i个位置之前插入元素e</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"function\"><span class=\"title\">DuListInsert</span>(<span class=\"params\">DuLinkList &amp;L,int i,ElemType e</span>)</span> &#123;</span><br><span class=\"line\">    DuLinkList p;<span class=\"comment\">//第i个结点</span></span><br><span class=\"line\">    <span class=\"comment\">//if(!(p = DuGetElem(L,i))) return false;//可以直接使用查找函数查找第i个元素的位置，也可以这样</span></span><br><span class=\"line\">    p = L;<span class=\"comment\">//头结点</span></span><br><span class=\"line\">    int cnt = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(p &amp;&amp; cnt &lt; i)&#123;</span><br><span class=\"line\">        p = p-&gt;next;</span><br><span class=\"line\">        cnt++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!p || cnt &gt; i)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    DuLinkList s = (DuLinkList)malloc(DuNode);</span><br><span class=\"line\">    <span class=\"comment\">//DuLinkList s = new DuNode</span></span><br><span class=\"line\">    s-&gt;data = e;<span class=\"comment\">//输入数据域</span></span><br><span class=\"line\">    s-&gt;prior= p-&gt;prior;<span class=\"comment\">//将新结点的前驱指向i-1位置结点</span></span><br><span class=\"line\">    p-&gt;prior-&gt;next = s;<span class=\"comment\">//将i-1位置上的结点后继指针指向s</span></span><br><span class=\"line\">    s-&gt;next = p;<span class=\"comment\">//将新结点的后继指针指向第i个结点</span></span><br><span class=\"line\">    p-&gt;prior = s;<span class=\"comment\">//将第i个结点的前驱结点指向新结点</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>其他位置的插入与此大同小异<br><strong>删除</strong></p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"function\"><span class=\"title\">DuLinkList</span>(<span class=\"params\">DuLinkList &amp;L, int i,ElemType &amp;e</span>)</span> &#123;</span><br><span class=\"line\">      DuLinkList p;<span class=\"comment\">//第i个结点</span></span><br><span class=\"line\">     <span class=\"comment\">//if(!(p = DuGetElem(L,i))) return false;//同样的可以使用查找函数找到第i个位置</span></span><br><span class=\"line\">    p = L;<span class=\"comment\">//头结点</span></span><br><span class=\"line\">    int cnt = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(p &amp;&amp; cnt &lt; i)&#123;</span><br><span class=\"line\">        p = p-&gt;next;</span><br><span class=\"line\">        cnt++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!p || cnt &gt; i)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">   e = p-&gt;data;</span><br><span class=\"line\">   p-&gt;prior-&gt;next = p-&gt;next;<span class=\"comment\">//将第i-1位置的后继指针指向第i+1个结点</span></span><br><span class=\"line\">   p-&gt;next-&gt;prior = p-&gt;next;<span class=\"comment\">//将第i+1个位置的前驱结点指向第i-1个结点</span></span><br><span class=\"line\">   free(p);</span><br><span class=\"line\">   <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n        <h2 id=\"比较\"   >\n          <a href=\"#比较\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#比较\" class=\"headerlink\" title=\"比较\"></a>比较</h2>\n      <p><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/59be1702bca54767869ee3e4173cc1df~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\"></p>\n<p><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/61e8a361263a43a0894e25099748ee8a~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\"></p>\n<p>具体的选用看具体需求。当然表的使用还需多做题啊。</p>\n","site":{"data":{}},"excerpt":"","more":"\n        <h2 id=\"循环链表\"   >\n          <a href=\"#循环链表\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#循环链表\" class=\"headerlink\" title=\"循环链表\"></a>循环链表</h2>\n      <p>循环链表是一种头尾相接的链表，表中的最后一个结点的指针域指向头结点，整个链表形成一个环。</p>\n<p>示意图：<br><img src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/78a516072daa457f97c21306b0c59dc1~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\"></p>\n<p>这样的有点是可以从表中任一结点出发均可找到其他结点。而循环链表由于没有NULL指针，所以涉及遍历操作时，其终止条件就不再像<strong>非循环链表</strong>那样判断p或p-&gt;next是否为空，而是判断他们是否是头指针。</p>\n<p>就像这样：<br><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0b2bbd8e2f5b439fa308c6a9320cf827~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\"></p>\n<p>为了操作方便，一般需要一个尾指针，指向最后一个结点。（表的操作通常是在首位位置上进行） </p>\n<p>来看一下有尾指针的例子，两个循环链表的合并：<br><img src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/330120042fc64ae4a733d626508fd5b7~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\"><br>代码：</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//合并链表</span></span><br><span class=\"line\"><span class=\"comment\">//几乎与单链表相同</span></span><br><span class=\"line\">LinkList <span class=\"function\"><span class=\"title\">ConnectList</span>(<span class=\"params\">Linklist Ta,LinkList Tb</span>)</span>&#123;</span><br><span class=\"line\">    LinkList p = Ta-&gt;next;<span class=\"comment\">//p存表（Ta）头结点</span></span><br><span class=\"line\">    Ta-&gt;next = Tb-&gt;next-&gt;next;<span class=\"comment\">//Tb的表头连接Ta表尾</span></span><br><span class=\"line\">    <span class=\"comment\">//delete Tb-&gt;next;</span></span><br><span class=\"line\">    free(Tb-&gt;next);<span class=\"comment\">//释放Tb表的头结点</span></span><br><span class=\"line\">    Tb-&gt;next = p;<span class=\"comment\">//修改指针，Tb的表尾结点指向p(Ta的首元)</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> Tb;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n        <h2 id=\"双向链表\"   >\n          <a href=\"#双向链表\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#双向链表\" class=\"headerlink\" title=\"双向链表\"></a>双向链表</h2>\n      <p>单链表中的结点只包含指向后继结点的指针，从而无法快速访问前驱结点（他就在你前面你却要绕一个圈才能找到他,甚至重新从头结点出发寻找）。对于较长的链表或者频繁进行删除插入等操作的链表来说，处理的速度很慢。为了比卖你这个问题，我们重新定义来年表，使链表中的每个结点有两个指针域，一个指向前驱(prior)，一个指向后继(next)。这种链表被称为双向链表。</p>\n<p><img src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c805b7bef8fb4945abd28685e2f406d6~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\"></p>\n<p>同样的，你也可以设置为双向循环链表：</p>\n<ul>\n<li>让头结点的前驱指针指向链表的最后一个结点</li>\n<li>让最后一个结点的后继指针指向头指针</li>\n</ul>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/337c061c157747a3b9f5373735f4d4fb~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\"></p>\n\n        <h4 id=\"双向链表的实现\"   >\n          <a href=\"#双向链表的实现\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#双向链表的实现\" class=\"headerlink\" title=\"双向链表的实现\"></a>双向链表的实现</h4>\n      <p>双向的结构：</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">typedef struct DuNode &#123;</span><br><span class=\"line\">    Elemtype data;<span class=\"comment\">//</span></span><br><span class=\"line\">    struct DuNode *prior,*next;<span class=\"comment\">//两个指针域</span></span><br><span class=\"line\">&#125;DuNode，*DuLinkList;</span><br></pre></td></tr></table></div></figure>\n<p>关于双向链表的成员函数，比如：ListLength,GetElem等，因仅仅涉及一个方向的指针，故他们算法与单链表相同。但在插入删除时，需要修改两个方向的指针，两者操作的时间复杂度均为O(n).</p>\n<p><strong>插入</strong>：</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//在带头结点的双向循环链表L中的第i个位置之前插入元素e</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"function\"><span class=\"title\">DuListInsert</span>(<span class=\"params\">DuLinkList &amp;L,int i,ElemType e</span>)</span> &#123;</span><br><span class=\"line\">    DuLinkList p;<span class=\"comment\">//第i个结点</span></span><br><span class=\"line\">    <span class=\"comment\">//if(!(p = DuGetElem(L,i))) return false;//可以直接使用查找函数查找第i个元素的位置，也可以这样</span></span><br><span class=\"line\">    p = L;<span class=\"comment\">//头结点</span></span><br><span class=\"line\">    int cnt = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(p &amp;&amp; cnt &lt; i)&#123;</span><br><span class=\"line\">        p = p-&gt;next;</span><br><span class=\"line\">        cnt++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!p || cnt &gt; i)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    DuLinkList s = (DuLinkList)malloc(DuNode);</span><br><span class=\"line\">    <span class=\"comment\">//DuLinkList s = new DuNode</span></span><br><span class=\"line\">    s-&gt;data = e;<span class=\"comment\">//输入数据域</span></span><br><span class=\"line\">    s-&gt;prior= p-&gt;prior;<span class=\"comment\">//将新结点的前驱指向i-1位置结点</span></span><br><span class=\"line\">    p-&gt;prior-&gt;next = s;<span class=\"comment\">//将i-1位置上的结点后继指针指向s</span></span><br><span class=\"line\">    s-&gt;next = p;<span class=\"comment\">//将新结点的后继指针指向第i个结点</span></span><br><span class=\"line\">    p-&gt;prior = s;<span class=\"comment\">//将第i个结点的前驱结点指向新结点</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>其他位置的插入与此大同小异<br><strong>删除</strong></p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"function\"><span class=\"title\">DuLinkList</span>(<span class=\"params\">DuLinkList &amp;L, int i,ElemType &amp;e</span>)</span> &#123;</span><br><span class=\"line\">      DuLinkList p;<span class=\"comment\">//第i个结点</span></span><br><span class=\"line\">     <span class=\"comment\">//if(!(p = DuGetElem(L,i))) return false;//同样的可以使用查找函数找到第i个位置</span></span><br><span class=\"line\">    p = L;<span class=\"comment\">//头结点</span></span><br><span class=\"line\">    int cnt = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(p &amp;&amp; cnt &lt; i)&#123;</span><br><span class=\"line\">        p = p-&gt;next;</span><br><span class=\"line\">        cnt++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!p || cnt &gt; i)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">   e = p-&gt;data;</span><br><span class=\"line\">   p-&gt;prior-&gt;next = p-&gt;next;<span class=\"comment\">//将第i-1位置的后继指针指向第i+1个结点</span></span><br><span class=\"line\">   p-&gt;next-&gt;prior = p-&gt;next;<span class=\"comment\">//将第i+1个位置的前驱结点指向第i-1个结点</span></span><br><span class=\"line\">   free(p);</span><br><span class=\"line\">   <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n        <h2 id=\"比较\"   >\n          <a href=\"#比较\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#比较\" class=\"headerlink\" title=\"比较\"></a>比较</h2>\n      <p><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/59be1702bca54767869ee3e4173cc1df~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\"></p>\n<p><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/61e8a361263a43a0894e25099748ee8a~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\"></p>\n<p>具体的选用看具体需求。当然表的使用还需多做题啊。</p>\n"},{"title":"快速排序与归并排序","date":"2021-09-22T13:35:05.000Z","_content":"# 快速排序\n## 主要思想\n基于分治思想，平均时间复杂度都是𝞗(nlogn)，快排的性能受初始数列的分布影响较大，最坏情况下时间复杂度达到𝞗(n^2)，空间复杂度达到𝞗(n)（所以他是不太稳定的）\n> 采用分治思想  \n> 1.确定分界点：\n> x = a[l]  \n> x = a[r]   \n> q = a[(l + r) / 2]  (分界点取哪一个都行)  \n> 2.调整范围：   \n> 左边<=x \n> 右边>x   \n> 3.递归处理左边和右边\n\n![kuaipai.jpg](https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/610483102e67487cb78dfd630b001040~tplv-k3u1fbpfcp-watermark.image?)\n## 模板\n\n```js\nvoid quick_sort(int q[],int l,int r){\n    if(l >= r) return;//区间没有数或只有一个数\n    int x = q[l],i = l - 1,j = r + 1;\n    //int x = q[r];\n    while(i < j){\n        do i++; while(p[i] < x);\n        do j--; while(p[j] > x);\n        if(i < j) swap(q[i],q[j]);//若双指针都找到了不满足条件的数字且话没有相遇，就交换\n    }\n\n    quick_sort(q,l,j);\n    //quick_sort(q,l,i - 1);\n    quick_sort(q,j + 1,r);\n    //quick_sort(q,i,r);\n}\n```\n关于边界：  \n边界问题在于一开始选择的边界x，如果是 `x = q[l];`那么递归时的代码只能写为\n`quick_sort(q,l,j);quick_sort(q,j + 1,r);`而边界选择的是`int x = q[r];`递归代码就是 `quick_sort(q,l,i - 1);quick_sort(q,i,r);`。而`x =( q[l + r >> 1];`则选择哪一个皆可。\n原因就是边界问题，会产生无限循环的情况。例如，当边界选择 `x = q[l];`，而排序的数组只有[1.2]时，递归一次就会出现i = j = 0的情况，下一次递归就会出现(0,-1)(0,1)其中第一个第一个递归范围无效，第二个与前一个循环一致，会陷入无限循环。\n\nps:pivot可以在左边也可以在右边\n## 例子\n给定你一个长度为 nn 的整数数列。\n\n请你使用快速排序对这个数列按照从小到大进行排序。\n\n并将排好序的数列按顺序输出。\n\n#### 输入格式\n\n输入共两行，第一行包含整数 nn。\n\n第二行包含 nn 个整数（所有整数均在 1∼1091∼109 范围内），表示整个数列。\n\n#### 输出格式\n\n输出共一行，包含 nn 个整数，表示排好序的数列。\n\n#### 数据范围\n\n1≤n≤1000001≤n≤100000\n\n#### 输入样例：\n\n```\n5\n3 1 2 4 5\n```\n\n#### 输出样例：\n\n```\n1 2 3 4 5\n```\n\n\n```js\n//foreverking\n#include <vector>\n#include <cstdio>\n#include <queue>\n#include <algorithm>\n#include <cstring>\n#include <iostream>\n#include <cmath>\nusing namespace std;\n\nconst int N = 1000010;\n\nint n;\nint q[N];\n\n//快排\nvoid quick_sort(int q[],int l,int r){\n    if(l >= r) return;//区间没有数或只有一个数\n    //int x = q[l],i = l - 1,j = r + 1;\n    int x = q[l + r>> 1],i = l - 1,j = r + 1;\n    //int x = q[r];\n    while(i < j){\n        do i++; while(q[i] < x);\n        do j--; while(q[j] > x);\n        if(i < j){\n            int num = q[i];\n            q[i] = q[j];\n            q[j] = num;\n        }\n    }\n\n    quick_sort(q,l,j);\n    //quick_sort(q,l,i - 1);\n    quick_sort(q,j + 1,r);\n    //quick_sort(q,i,r);\n}\n\nint main(){\n    scanf(\"%d\",&n);\n    for (int i = 0; i < n; i++){\n        /* code */\n        scanf(\"%d\",&q[i]);\n    }\n    quick_sort(q,0,n - 1);\n    for(int i = 0; i < n; i++){\n        //代码\n        printf(\"%d \",q[i]);\n        }\n\n    return 0;\n}\n```\n# 归并排序\n## 主要思想\n同样采用分治的思想，平均时间复杂度都是𝞗(nlogn)\n>1. 确定分界点 ：mid = (l + r) / 2\n>2. 递归处理左右两段\n>3. 归并[合二为一]（双指针算法，指针表示剩余部分中最小元素的位置）————————>有序链表合并\n   \n排序算法的稳定：原序列相同值在排序后位置不发生改变即可称为稳定\n\n![guibing,jpg.gif](https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/758d23eaa41f4159824a5398061c544b~tplv-k3u1fbpfcp-watermark.image?)\n## 模板\n\n```js\n//归并排序\nvoid merge_sort(int q[],int l,int r){\n    if(l >= r) return;//此时区间以无法排序（只有一个或没有数\n    int mid = l + r >> 1;//区间中点\n\n    merge_sort(q,l,mid),merge_sort(q,mid + 1,r);//递归左边与右边，递归后就都有序了\n\n    //左右边都有序后归并\n    //有序链表的合并（并且两表一样长\n    int k = 0,i = l,j = mid + 1;//i,j分别是左右边的起点\n    while(i <= mid && j <= r){\n        if(q[i] < q[j]) tep[k++] = q[i++];\n        else tep[k++] = q[j++];\n    }\n    while(i <= mid) tep[k++] = q[i++];//检查左右两边那边剩下，已经排序好就依次插入\n    while(j <= mid) tep[k++] = q[j++];\n\n    for(i = l,j = 0; i <= r; i++, j++) q[i] = tep[j];//有序序列存回q序列\n}\n```\nps:在归并步骤时，如果碰到相同元素的插入，每次都选择第1段（左边）的元素插入，则能使归并算法稳定。\n\n\n## 例子\n给定你一个长度为 nn 的整数数列。\n\n请你使用归并排序对这个数列按照从小到大进行排序。\n\n并将排好序的数列按顺序输出。\n\n#### 输入格式\n\n输入共两行，第一行包含整数 nn。\n\n第二行包含 nn 个整数（所有整数均在 1∼1091∼109 范围内），表示整个数列。\n\n#### 输出格式\n\n输出共一行，包含 nn 个整数，表示排好序的数列。\n\n#### 数据范围\n\n1≤n≤1000001≤n≤100000\n\n#### 输入样例：\n\n```\n5\n3 1 2 4 5\n```\n\n#### 输出样例：\n\n```\n1 2 3 4 5\n```\n\n```js\n//foreverking\n#include <vector>\n#include <cstdio>\n#include <queue>\n#include <algorithm>\n#include <cstring>\n#include <iostream>\n#include <cmath>\nusing namespace std;\n\nconst int N = 10001000; \n\nint q[N],tep[N];\nint n;\n\nvoid merge_sort(int q[],int l,int r){\n    if(l >= r) return;\n    int mid = (l + r) >> 1;\n\n    merge_sort(q,l,mid),merge_sort(q,mid + 1,r);//递归左右\n\n    int k = 0,i = l,j = mid + 1;\n    while(i <= mid && j <= r){\n        if(q[i] <= q[j]) tep[k++] = q[i++];\n        else tep[k++] = q[j++];\n    }\n    while(i <= mid) tep[k++] = q[i++];\n    while(j <= r) tep[k++] = q[j++];\n\n    for(int i = l,j = 0;i <= r;i++,j++) q[i] = tep[j];\n}\n\nint main(){\n    scanf(\"%d\",&n);\n    for(int i = 0; i < n; i++){\n        scanf(\"%d\",&q[i]);\n    }\n    merge_sort(q,0,n - 1);\n    for(int i = 0; i < n; i++){\n        //代码\n        printf(\"%d \",q[i]);\n        }\n    return 0;\n}\n\n\n\n```\n两个排序就是这样，还有更多排序以后再说吧。\n","source":"_posts/排序.md","raw":"---\ntitle: 快速排序与归并排序\ndate: 2021-09-22 21:35:05\ntags: \n    - Study\n    - 排序\ncategories: \n    - 算法\n    - 排序\n---\n# 快速排序\n## 主要思想\n基于分治思想，平均时间复杂度都是𝞗(nlogn)，快排的性能受初始数列的分布影响较大，最坏情况下时间复杂度达到𝞗(n^2)，空间复杂度达到𝞗(n)（所以他是不太稳定的）\n> 采用分治思想  \n> 1.确定分界点：\n> x = a[l]  \n> x = a[r]   \n> q = a[(l + r) / 2]  (分界点取哪一个都行)  \n> 2.调整范围：   \n> 左边<=x \n> 右边>x   \n> 3.递归处理左边和右边\n\n![kuaipai.jpg](https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/610483102e67487cb78dfd630b001040~tplv-k3u1fbpfcp-watermark.image?)\n## 模板\n\n```js\nvoid quick_sort(int q[],int l,int r){\n    if(l >= r) return;//区间没有数或只有一个数\n    int x = q[l],i = l - 1,j = r + 1;\n    //int x = q[r];\n    while(i < j){\n        do i++; while(p[i] < x);\n        do j--; while(p[j] > x);\n        if(i < j) swap(q[i],q[j]);//若双指针都找到了不满足条件的数字且话没有相遇，就交换\n    }\n\n    quick_sort(q,l,j);\n    //quick_sort(q,l,i - 1);\n    quick_sort(q,j + 1,r);\n    //quick_sort(q,i,r);\n}\n```\n关于边界：  \n边界问题在于一开始选择的边界x，如果是 `x = q[l];`那么递归时的代码只能写为\n`quick_sort(q,l,j);quick_sort(q,j + 1,r);`而边界选择的是`int x = q[r];`递归代码就是 `quick_sort(q,l,i - 1);quick_sort(q,i,r);`。而`x =( q[l + r >> 1];`则选择哪一个皆可。\n原因就是边界问题，会产生无限循环的情况。例如，当边界选择 `x = q[l];`，而排序的数组只有[1.2]时，递归一次就会出现i = j = 0的情况，下一次递归就会出现(0,-1)(0,1)其中第一个第一个递归范围无效，第二个与前一个循环一致，会陷入无限循环。\n\nps:pivot可以在左边也可以在右边\n## 例子\n给定你一个长度为 nn 的整数数列。\n\n请你使用快速排序对这个数列按照从小到大进行排序。\n\n并将排好序的数列按顺序输出。\n\n#### 输入格式\n\n输入共两行，第一行包含整数 nn。\n\n第二行包含 nn 个整数（所有整数均在 1∼1091∼109 范围内），表示整个数列。\n\n#### 输出格式\n\n输出共一行，包含 nn 个整数，表示排好序的数列。\n\n#### 数据范围\n\n1≤n≤1000001≤n≤100000\n\n#### 输入样例：\n\n```\n5\n3 1 2 4 5\n```\n\n#### 输出样例：\n\n```\n1 2 3 4 5\n```\n\n\n```js\n//foreverking\n#include <vector>\n#include <cstdio>\n#include <queue>\n#include <algorithm>\n#include <cstring>\n#include <iostream>\n#include <cmath>\nusing namespace std;\n\nconst int N = 1000010;\n\nint n;\nint q[N];\n\n//快排\nvoid quick_sort(int q[],int l,int r){\n    if(l >= r) return;//区间没有数或只有一个数\n    //int x = q[l],i = l - 1,j = r + 1;\n    int x = q[l + r>> 1],i = l - 1,j = r + 1;\n    //int x = q[r];\n    while(i < j){\n        do i++; while(q[i] < x);\n        do j--; while(q[j] > x);\n        if(i < j){\n            int num = q[i];\n            q[i] = q[j];\n            q[j] = num;\n        }\n    }\n\n    quick_sort(q,l,j);\n    //quick_sort(q,l,i - 1);\n    quick_sort(q,j + 1,r);\n    //quick_sort(q,i,r);\n}\n\nint main(){\n    scanf(\"%d\",&n);\n    for (int i = 0; i < n; i++){\n        /* code */\n        scanf(\"%d\",&q[i]);\n    }\n    quick_sort(q,0,n - 1);\n    for(int i = 0; i < n; i++){\n        //代码\n        printf(\"%d \",q[i]);\n        }\n\n    return 0;\n}\n```\n# 归并排序\n## 主要思想\n同样采用分治的思想，平均时间复杂度都是𝞗(nlogn)\n>1. 确定分界点 ：mid = (l + r) / 2\n>2. 递归处理左右两段\n>3. 归并[合二为一]（双指针算法，指针表示剩余部分中最小元素的位置）————————>有序链表合并\n   \n排序算法的稳定：原序列相同值在排序后位置不发生改变即可称为稳定\n\n![guibing,jpg.gif](https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/758d23eaa41f4159824a5398061c544b~tplv-k3u1fbpfcp-watermark.image?)\n## 模板\n\n```js\n//归并排序\nvoid merge_sort(int q[],int l,int r){\n    if(l >= r) return;//此时区间以无法排序（只有一个或没有数\n    int mid = l + r >> 1;//区间中点\n\n    merge_sort(q,l,mid),merge_sort(q,mid + 1,r);//递归左边与右边，递归后就都有序了\n\n    //左右边都有序后归并\n    //有序链表的合并（并且两表一样长\n    int k = 0,i = l,j = mid + 1;//i,j分别是左右边的起点\n    while(i <= mid && j <= r){\n        if(q[i] < q[j]) tep[k++] = q[i++];\n        else tep[k++] = q[j++];\n    }\n    while(i <= mid) tep[k++] = q[i++];//检查左右两边那边剩下，已经排序好就依次插入\n    while(j <= mid) tep[k++] = q[j++];\n\n    for(i = l,j = 0; i <= r; i++, j++) q[i] = tep[j];//有序序列存回q序列\n}\n```\nps:在归并步骤时，如果碰到相同元素的插入，每次都选择第1段（左边）的元素插入，则能使归并算法稳定。\n\n\n## 例子\n给定你一个长度为 nn 的整数数列。\n\n请你使用归并排序对这个数列按照从小到大进行排序。\n\n并将排好序的数列按顺序输出。\n\n#### 输入格式\n\n输入共两行，第一行包含整数 nn。\n\n第二行包含 nn 个整数（所有整数均在 1∼1091∼109 范围内），表示整个数列。\n\n#### 输出格式\n\n输出共一行，包含 nn 个整数，表示排好序的数列。\n\n#### 数据范围\n\n1≤n≤1000001≤n≤100000\n\n#### 输入样例：\n\n```\n5\n3 1 2 4 5\n```\n\n#### 输出样例：\n\n```\n1 2 3 4 5\n```\n\n```js\n//foreverking\n#include <vector>\n#include <cstdio>\n#include <queue>\n#include <algorithm>\n#include <cstring>\n#include <iostream>\n#include <cmath>\nusing namespace std;\n\nconst int N = 10001000; \n\nint q[N],tep[N];\nint n;\n\nvoid merge_sort(int q[],int l,int r){\n    if(l >= r) return;\n    int mid = (l + r) >> 1;\n\n    merge_sort(q,l,mid),merge_sort(q,mid + 1,r);//递归左右\n\n    int k = 0,i = l,j = mid + 1;\n    while(i <= mid && j <= r){\n        if(q[i] <= q[j]) tep[k++] = q[i++];\n        else tep[k++] = q[j++];\n    }\n    while(i <= mid) tep[k++] = q[i++];\n    while(j <= r) tep[k++] = q[j++];\n\n    for(int i = l,j = 0;i <= r;i++,j++) q[i] = tep[j];\n}\n\nint main(){\n    scanf(\"%d\",&n);\n    for(int i = 0; i < n; i++){\n        scanf(\"%d\",&q[i]);\n    }\n    merge_sort(q,0,n - 1);\n    for(int i = 0; i < n; i++){\n        //代码\n        printf(\"%d \",q[i]);\n        }\n    return 0;\n}\n\n\n\n```\n两个排序就是这样，还有更多排序以后再说吧。\n","slug":"排序","published":1,"updated":"2021-10-04T07:11:56.232Z","_id":"cktvk78fw00361cwsbmlo4t6x","comments":1,"layout":"post","photos":[],"link":"","content":"\n        <h1 id=\"快速排序\"   >\n          <a href=\"#快速排序\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#快速排序\" class=\"headerlink\" title=\"快速排序\"></a>快速排序</h1>\n      \n        <h2 id=\"主要思想\"   >\n          <a href=\"#主要思想\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#主要思想\" class=\"headerlink\" title=\"主要思想\"></a>主要思想</h2>\n      <p>基于分治思想，平均时间复杂度都是𝞗(nlogn)，快排的性能受初始数列的分布影响较大，最坏情况下时间复杂度达到𝞗(n^2)，空间复杂度达到𝞗(n)（所以他是不太稳定的）</p>\n<blockquote>\n<p>采用分治思想<br>1.确定分界点：<br>x = a[l]<br>x = a[r]<br>q = a[(l + r) / 2]  (分界点取哪一个都行)<br>2.调整范围：<br>左边&lt;=x<br>右边&gt;x<br>3.递归处理左边和右边</p>\n</blockquote>\n<p><img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/610483102e67487cb78dfd630b001040~tplv-k3u1fbpfcp-watermark.image\" alt=\"kuaipai.jpg\"></p>\n\n        <h2 id=\"模板\"   >\n          <a href=\"#模板\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#模板\" class=\"headerlink\" title=\"模板\"></a>模板</h2>\n      <figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"function\"><span class=\"title\">quick_sort</span>(<span class=\"params\">int q[],int l,int r</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(l &gt;= r) <span class=\"keyword\">return</span>;<span class=\"comment\">//区间没有数或只有一个数</span></span><br><span class=\"line\">    int x = q[l],i = l - <span class=\"number\">1</span>,j = r + <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"comment\">//int x = q[r];</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(i &lt; j)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">do</span> i++; <span class=\"keyword\">while</span>(p[i] &lt; x);</span><br><span class=\"line\">        <span class=\"keyword\">do</span> j--; <span class=\"keyword\">while</span>(p[j] &gt; x);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i &lt; j) swap(q[i],q[j]);<span class=\"comment\">//若双指针都找到了不满足条件的数字且话没有相遇，就交换</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    quick_sort(q,l,j);</span><br><span class=\"line\">    <span class=\"comment\">//quick_sort(q,l,i - 1);</span></span><br><span class=\"line\">    quick_sort(q,j + <span class=\"number\">1</span>,r);</span><br><span class=\"line\">    <span class=\"comment\">//quick_sort(q,i,r);</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>关于边界：<br>边界问题在于一开始选择的边界x，如果是 <code>x = q[l];</code>那么递归时的代码只能写为<br><code>quick_sort(q,l,j);quick_sort(q,j + 1,r);</code>而边界选择的是<code>int x = q[r];</code>递归代码就是 <code>quick_sort(q,l,i - 1);quick_sort(q,i,r);</code>。而<code>x =( q[l + r &gt;&gt; 1];</code>则选择哪一个皆可。<br>原因就是边界问题，会产生无限循环的情况。例如，当边界选择 <code>x = q[l];</code>，而排序的数组只有[1.2]时，递归一次就会出现i = j = 0的情况，下一次递归就会出现(0,-1)(0,1)其中第一个第一个递归范围无效，第二个与前一个循环一致，会陷入无限循环。</p>\n<p>ps:pivot可以在左边也可以在右边</p>\n\n        <h2 id=\"例子\"   >\n          <a href=\"#例子\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#例子\" class=\"headerlink\" title=\"例子\"></a>例子</h2>\n      <p>给定你一个长度为 nn 的整数数列。</p>\n<p>请你使用快速排序对这个数列按照从小到大进行排序。</p>\n<p>并将排好序的数列按顺序输出。</p>\n\n        <h4 id=\"输入格式\"   >\n          <a href=\"#输入格式\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#输入格式\" class=\"headerlink\" title=\"输入格式\"></a>输入格式</h4>\n      <p>输入共两行，第一行包含整数 nn。</p>\n<p>第二行包含 nn 个整数（所有整数均在 1∼1091∼109 范围内），表示整个数列。</p>\n\n        <h4 id=\"输出格式\"   >\n          <a href=\"#输出格式\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#输出格式\" class=\"headerlink\" title=\"输出格式\"></a>输出格式</h4>\n      <p>输出共一行，包含 nn 个整数，表示排好序的数列。</p>\n\n        <h4 id=\"数据范围\"   >\n          <a href=\"#数据范围\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#数据范围\" class=\"headerlink\" title=\"数据范围\"></a>数据范围</h4>\n      <p>1≤n≤1000001≤n≤100000</p>\n\n        <h4 id=\"输入样例：\"   >\n          <a href=\"#输入样例：\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#输入样例：\" class=\"headerlink\" title=\"输入样例：\"></a>输入样例：</h4>\n      <figure class=\"highlight plain\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">5</span><br><span class=\"line\">3 1 2 4 5</span><br></pre></td></tr></table></div></figure>\n\n\n        <h4 id=\"输出样例：\"   >\n          <a href=\"#输出样例：\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#输出样例：\" class=\"headerlink\" title=\"输出样例：\"></a>输出样例：</h4>\n      <figure class=\"highlight plain\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 2 3 4 5</span><br></pre></td></tr></table></div></figure>\n\n\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//foreverking</span></span><br><span class=\"line\">#include &lt;vector&gt;</span><br><span class=\"line\">#include &lt;cstdio&gt;</span><br><span class=\"line\">#include &lt;queue&gt;</span><br><span class=\"line\">#include &lt;algorithm&gt;</span><br><span class=\"line\">#include &lt;cstring&gt;</span><br><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">#include &lt;cmath&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> int N = <span class=\"number\">1000010</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">int n;</span><br><span class=\"line\">int q[N];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//快排</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"function\"><span class=\"title\">quick_sort</span>(<span class=\"params\">int q[],int l,int r</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(l &gt;= r) <span class=\"keyword\">return</span>;<span class=\"comment\">//区间没有数或只有一个数</span></span><br><span class=\"line\">    <span class=\"comment\">//int x = q[l],i = l - 1,j = r + 1;</span></span><br><span class=\"line\">    int x = q[l + r&gt;&gt; <span class=\"number\">1</span>],i = l - <span class=\"number\">1</span>,j = r + <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"comment\">//int x = q[r];</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(i &lt; j)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">do</span> i++; <span class=\"keyword\">while</span>(q[i] &lt; x);</span><br><span class=\"line\">        <span class=\"keyword\">do</span> j--; <span class=\"keyword\">while</span>(q[j] &gt; x);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i &lt; j)&#123;</span><br><span class=\"line\">            int num = q[i];</span><br><span class=\"line\">            q[i] = q[j];</span><br><span class=\"line\">            q[j] = num;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    quick_sort(q,l,j);</span><br><span class=\"line\">    <span class=\"comment\">//quick_sort(q,l,i - 1);</span></span><br><span class=\"line\">    quick_sort(q,j + <span class=\"number\">1</span>,r);</span><br><span class=\"line\">    <span class=\"comment\">//quick_sort(q,i,r);</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">int <span class=\"function\"><span class=\"title\">main</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    scanf(<span class=\"string\">&quot;%d&quot;</span>,&amp;n);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (int i = <span class=\"number\">0</span>; i &lt; n; i++)&#123;</span><br><span class=\"line\">        <span class=\"comment\">/* code */</span></span><br><span class=\"line\">        scanf(<span class=\"string\">&quot;%d&quot;</span>,&amp;q[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    quick_sort(q,<span class=\"number\">0</span>,n - <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(int i = <span class=\"number\">0</span>; i &lt; n; i++)&#123;</span><br><span class=\"line\">        <span class=\"comment\">//代码</span></span><br><span class=\"line\">        printf(<span class=\"string\">&quot;%d &quot;</span>,q[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n        <h1 id=\"归并排序\"   >\n          <a href=\"#归并排序\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#归并排序\" class=\"headerlink\" title=\"归并排序\"></a>归并排序</h1>\n      \n        <h2 id=\"主要思想-1\"   >\n          <a href=\"#主要思想-1\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#主要思想-1\" class=\"headerlink\" title=\"主要思想\"></a>主要思想</h2>\n      <p>同样采用分治的思想，平均时间复杂度都是𝞗(nlogn)</p>\n<blockquote>\n<ol>\n<li>确定分界点 ：mid = (l + r) / 2</li>\n<li>递归处理左右两段</li>\n<li>归并[合二为一]（双指针算法，指针表示剩余部分中最小元素的位置）————————&gt;有序链表合并</li>\n</ol>\n</blockquote>\n<p>排序算法的稳定：原序列相同值在排序后位置不发生改变即可称为稳定</p>\n<p><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/758d23eaa41f4159824a5398061c544b~tplv-k3u1fbpfcp-watermark.image\" alt=\"guibing,jpg.gif\"></p>\n\n        <h2 id=\"模板-1\"   >\n          <a href=\"#模板-1\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#模板-1\" class=\"headerlink\" title=\"模板\"></a>模板</h2>\n      <figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//归并排序</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"function\"><span class=\"title\">merge_sort</span>(<span class=\"params\">int q[],int l,int r</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(l &gt;= r) <span class=\"keyword\">return</span>;<span class=\"comment\">//此时区间以无法排序（只有一个或没有数</span></span><br><span class=\"line\">    int mid = l + r &gt;&gt; <span class=\"number\">1</span>;<span class=\"comment\">//区间中点</span></span><br><span class=\"line\"></span><br><span class=\"line\">    merge_sort(q,l,mid),merge_sort(q,mid + <span class=\"number\">1</span>,r);<span class=\"comment\">//递归左边与右边，递归后就都有序了</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//左右边都有序后归并</span></span><br><span class=\"line\">    <span class=\"comment\">//有序链表的合并（并且两表一样长</span></span><br><span class=\"line\">    int k = <span class=\"number\">0</span>,i = l,j = mid + <span class=\"number\">1</span>;<span class=\"comment\">//i,j分别是左右边的起点</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(i &lt;= mid &amp;&amp; j &lt;= r)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(q[i] &lt; q[j]) tep[k++] = q[i++];</span><br><span class=\"line\">        <span class=\"keyword\">else</span> tep[k++] = q[j++];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(i &lt;= mid) tep[k++] = q[i++];<span class=\"comment\">//检查左右两边那边剩下，已经排序好就依次插入</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(j &lt;= mid) tep[k++] = q[j++];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(i = l,j = <span class=\"number\">0</span>; i &lt;= r; i++, j++) q[i] = tep[j];<span class=\"comment\">//有序序列存回q序列</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>ps:在归并步骤时，如果碰到相同元素的插入，每次都选择第1段（左边）的元素插入，则能使归并算法稳定。</p>\n\n        <h2 id=\"例子-1\"   >\n          <a href=\"#例子-1\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#例子-1\" class=\"headerlink\" title=\"例子\"></a>例子</h2>\n      <p>给定你一个长度为 nn 的整数数列。</p>\n<p>请你使用归并排序对这个数列按照从小到大进行排序。</p>\n<p>并将排好序的数列按顺序输出。</p>\n\n        <h4 id=\"输入格式-1\"   >\n          <a href=\"#输入格式-1\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#输入格式-1\" class=\"headerlink\" title=\"输入格式\"></a>输入格式</h4>\n      <p>输入共两行，第一行包含整数 nn。</p>\n<p>第二行包含 nn 个整数（所有整数均在 1∼1091∼109 范围内），表示整个数列。</p>\n\n        <h4 id=\"输出格式-1\"   >\n          <a href=\"#输出格式-1\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#输出格式-1\" class=\"headerlink\" title=\"输出格式\"></a>输出格式</h4>\n      <p>输出共一行，包含 nn 个整数，表示排好序的数列。</p>\n\n        <h4 id=\"数据范围-1\"   >\n          <a href=\"#数据范围-1\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#数据范围-1\" class=\"headerlink\" title=\"数据范围\"></a>数据范围</h4>\n      <p>1≤n≤1000001≤n≤100000</p>\n\n        <h4 id=\"输入样例：-1\"   >\n          <a href=\"#输入样例：-1\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#输入样例：-1\" class=\"headerlink\" title=\"输入样例：\"></a>输入样例：</h4>\n      <figure class=\"highlight plain\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">5</span><br><span class=\"line\">3 1 2 4 5</span><br></pre></td></tr></table></div></figure>\n\n\n        <h4 id=\"输出样例：-1\"   >\n          <a href=\"#输出样例：-1\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#输出样例：-1\" class=\"headerlink\" title=\"输出样例：\"></a>输出样例：</h4>\n      <figure class=\"highlight plain\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 2 3 4 5</span><br></pre></td></tr></table></div></figure>\n\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//foreverking</span></span><br><span class=\"line\">#include &lt;vector&gt;</span><br><span class=\"line\">#include &lt;cstdio&gt;</span><br><span class=\"line\">#include &lt;queue&gt;</span><br><span class=\"line\">#include &lt;algorithm&gt;</span><br><span class=\"line\">#include &lt;cstring&gt;</span><br><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">#include &lt;cmath&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> int N = <span class=\"number\">10001000</span>; </span><br><span class=\"line\"></span><br><span class=\"line\">int q[N],tep[N];</span><br><span class=\"line\">int n;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"function\"><span class=\"title\">merge_sort</span>(<span class=\"params\">int q[],int l,int r</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(l &gt;= r) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    int mid = (l + r) &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    merge_sort(q,l,mid),merge_sort(q,mid + <span class=\"number\">1</span>,r);<span class=\"comment\">//递归左右</span></span><br><span class=\"line\"></span><br><span class=\"line\">    int k = <span class=\"number\">0</span>,i = l,j = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(i &lt;= mid &amp;&amp; j &lt;= r)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(q[i] &lt;= q[j]) tep[k++] = q[i++];</span><br><span class=\"line\">        <span class=\"keyword\">else</span> tep[k++] = q[j++];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(i &lt;= mid) tep[k++] = q[i++];</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(j &lt;= r) tep[k++] = q[j++];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(int i = l,j = <span class=\"number\">0</span>;i &lt;= r;i++,j++) q[i] = tep[j];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">int <span class=\"function\"><span class=\"title\">main</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    scanf(<span class=\"string\">&quot;%d&quot;</span>,&amp;n);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(int i = <span class=\"number\">0</span>; i &lt; n; i++)&#123;</span><br><span class=\"line\">        scanf(<span class=\"string\">&quot;%d&quot;</span>,&amp;q[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    merge_sort(q,<span class=\"number\">0</span>,n - <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(int i = <span class=\"number\">0</span>; i &lt; n; i++)&#123;</span><br><span class=\"line\">        <span class=\"comment\">//代码</span></span><br><span class=\"line\">        printf(<span class=\"string\">&quot;%d &quot;</span>,q[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></div></figure>\n<p>两个排序就是这样，还有更多排序以后再说吧。</p>\n","site":{"data":{}},"excerpt":"","more":"\n        <h1 id=\"快速排序\"   >\n          <a href=\"#快速排序\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#快速排序\" class=\"headerlink\" title=\"快速排序\"></a>快速排序</h1>\n      \n        <h2 id=\"主要思想\"   >\n          <a href=\"#主要思想\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#主要思想\" class=\"headerlink\" title=\"主要思想\"></a>主要思想</h2>\n      <p>基于分治思想，平均时间复杂度都是𝞗(nlogn)，快排的性能受初始数列的分布影响较大，最坏情况下时间复杂度达到𝞗(n^2)，空间复杂度达到𝞗(n)（所以他是不太稳定的）</p>\n<blockquote>\n<p>采用分治思想<br>1.确定分界点：<br>x = a[l]<br>x = a[r]<br>q = a[(l + r) / 2]  (分界点取哪一个都行)<br>2.调整范围：<br>左边&lt;=x<br>右边&gt;x<br>3.递归处理左边和右边</p>\n</blockquote>\n<p><img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/610483102e67487cb78dfd630b001040~tplv-k3u1fbpfcp-watermark.image\" alt=\"kuaipai.jpg\"></p>\n\n        <h2 id=\"模板\"   >\n          <a href=\"#模板\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#模板\" class=\"headerlink\" title=\"模板\"></a>模板</h2>\n      <figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"function\"><span class=\"title\">quick_sort</span>(<span class=\"params\">int q[],int l,int r</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(l &gt;= r) <span class=\"keyword\">return</span>;<span class=\"comment\">//区间没有数或只有一个数</span></span><br><span class=\"line\">    int x = q[l],i = l - <span class=\"number\">1</span>,j = r + <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"comment\">//int x = q[r];</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(i &lt; j)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">do</span> i++; <span class=\"keyword\">while</span>(p[i] &lt; x);</span><br><span class=\"line\">        <span class=\"keyword\">do</span> j--; <span class=\"keyword\">while</span>(p[j] &gt; x);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i &lt; j) swap(q[i],q[j]);<span class=\"comment\">//若双指针都找到了不满足条件的数字且话没有相遇，就交换</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    quick_sort(q,l,j);</span><br><span class=\"line\">    <span class=\"comment\">//quick_sort(q,l,i - 1);</span></span><br><span class=\"line\">    quick_sort(q,j + <span class=\"number\">1</span>,r);</span><br><span class=\"line\">    <span class=\"comment\">//quick_sort(q,i,r);</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>关于边界：<br>边界问题在于一开始选择的边界x，如果是 <code>x = q[l];</code>那么递归时的代码只能写为<br><code>quick_sort(q,l,j);quick_sort(q,j + 1,r);</code>而边界选择的是<code>int x = q[r];</code>递归代码就是 <code>quick_sort(q,l,i - 1);quick_sort(q,i,r);</code>。而<code>x =( q[l + r &gt;&gt; 1];</code>则选择哪一个皆可。<br>原因就是边界问题，会产生无限循环的情况。例如，当边界选择 <code>x = q[l];</code>，而排序的数组只有[1.2]时，递归一次就会出现i = j = 0的情况，下一次递归就会出现(0,-1)(0,1)其中第一个第一个递归范围无效，第二个与前一个循环一致，会陷入无限循环。</p>\n<p>ps:pivot可以在左边也可以在右边</p>\n\n        <h2 id=\"例子\"   >\n          <a href=\"#例子\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#例子\" class=\"headerlink\" title=\"例子\"></a>例子</h2>\n      <p>给定你一个长度为 nn 的整数数列。</p>\n<p>请你使用快速排序对这个数列按照从小到大进行排序。</p>\n<p>并将排好序的数列按顺序输出。</p>\n\n        <h4 id=\"输入格式\"   >\n          <a href=\"#输入格式\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#输入格式\" class=\"headerlink\" title=\"输入格式\"></a>输入格式</h4>\n      <p>输入共两行，第一行包含整数 nn。</p>\n<p>第二行包含 nn 个整数（所有整数均在 1∼1091∼109 范围内），表示整个数列。</p>\n\n        <h4 id=\"输出格式\"   >\n          <a href=\"#输出格式\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#输出格式\" class=\"headerlink\" title=\"输出格式\"></a>输出格式</h4>\n      <p>输出共一行，包含 nn 个整数，表示排好序的数列。</p>\n\n        <h4 id=\"数据范围\"   >\n          <a href=\"#数据范围\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#数据范围\" class=\"headerlink\" title=\"数据范围\"></a>数据范围</h4>\n      <p>1≤n≤1000001≤n≤100000</p>\n\n        <h4 id=\"输入样例：\"   >\n          <a href=\"#输入样例：\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#输入样例：\" class=\"headerlink\" title=\"输入样例：\"></a>输入样例：</h4>\n      <figure class=\"highlight plain\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">5</span><br><span class=\"line\">3 1 2 4 5</span><br></pre></td></tr></table></div></figure>\n\n\n        <h4 id=\"输出样例：\"   >\n          <a href=\"#输出样例：\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#输出样例：\" class=\"headerlink\" title=\"输出样例：\"></a>输出样例：</h4>\n      <figure class=\"highlight plain\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 2 3 4 5</span><br></pre></td></tr></table></div></figure>\n\n\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//foreverking</span></span><br><span class=\"line\">#include &lt;vector&gt;</span><br><span class=\"line\">#include &lt;cstdio&gt;</span><br><span class=\"line\">#include &lt;queue&gt;</span><br><span class=\"line\">#include &lt;algorithm&gt;</span><br><span class=\"line\">#include &lt;cstring&gt;</span><br><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">#include &lt;cmath&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> int N = <span class=\"number\">1000010</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">int n;</span><br><span class=\"line\">int q[N];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//快排</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"function\"><span class=\"title\">quick_sort</span>(<span class=\"params\">int q[],int l,int r</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(l &gt;= r) <span class=\"keyword\">return</span>;<span class=\"comment\">//区间没有数或只有一个数</span></span><br><span class=\"line\">    <span class=\"comment\">//int x = q[l],i = l - 1,j = r + 1;</span></span><br><span class=\"line\">    int x = q[l + r&gt;&gt; <span class=\"number\">1</span>],i = l - <span class=\"number\">1</span>,j = r + <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"comment\">//int x = q[r];</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(i &lt; j)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">do</span> i++; <span class=\"keyword\">while</span>(q[i] &lt; x);</span><br><span class=\"line\">        <span class=\"keyword\">do</span> j--; <span class=\"keyword\">while</span>(q[j] &gt; x);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i &lt; j)&#123;</span><br><span class=\"line\">            int num = q[i];</span><br><span class=\"line\">            q[i] = q[j];</span><br><span class=\"line\">            q[j] = num;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    quick_sort(q,l,j);</span><br><span class=\"line\">    <span class=\"comment\">//quick_sort(q,l,i - 1);</span></span><br><span class=\"line\">    quick_sort(q,j + <span class=\"number\">1</span>,r);</span><br><span class=\"line\">    <span class=\"comment\">//quick_sort(q,i,r);</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">int <span class=\"function\"><span class=\"title\">main</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    scanf(<span class=\"string\">&quot;%d&quot;</span>,&amp;n);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (int i = <span class=\"number\">0</span>; i &lt; n; i++)&#123;</span><br><span class=\"line\">        <span class=\"comment\">/* code */</span></span><br><span class=\"line\">        scanf(<span class=\"string\">&quot;%d&quot;</span>,&amp;q[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    quick_sort(q,<span class=\"number\">0</span>,n - <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(int i = <span class=\"number\">0</span>; i &lt; n; i++)&#123;</span><br><span class=\"line\">        <span class=\"comment\">//代码</span></span><br><span class=\"line\">        printf(<span class=\"string\">&quot;%d &quot;</span>,q[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n        <h1 id=\"归并排序\"   >\n          <a href=\"#归并排序\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#归并排序\" class=\"headerlink\" title=\"归并排序\"></a>归并排序</h1>\n      \n        <h2 id=\"主要思想-1\"   >\n          <a href=\"#主要思想-1\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#主要思想-1\" class=\"headerlink\" title=\"主要思想\"></a>主要思想</h2>\n      <p>同样采用分治的思想，平均时间复杂度都是𝞗(nlogn)</p>\n<blockquote>\n<ol>\n<li>确定分界点 ：mid = (l + r) / 2</li>\n<li>递归处理左右两段</li>\n<li>归并[合二为一]（双指针算法，指针表示剩余部分中最小元素的位置）————————&gt;有序链表合并</li>\n</ol>\n</blockquote>\n<p>排序算法的稳定：原序列相同值在排序后位置不发生改变即可称为稳定</p>\n<p><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/758d23eaa41f4159824a5398061c544b~tplv-k3u1fbpfcp-watermark.image\" alt=\"guibing,jpg.gif\"></p>\n\n        <h2 id=\"模板-1\"   >\n          <a href=\"#模板-1\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#模板-1\" class=\"headerlink\" title=\"模板\"></a>模板</h2>\n      <figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//归并排序</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"function\"><span class=\"title\">merge_sort</span>(<span class=\"params\">int q[],int l,int r</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(l &gt;= r) <span class=\"keyword\">return</span>;<span class=\"comment\">//此时区间以无法排序（只有一个或没有数</span></span><br><span class=\"line\">    int mid = l + r &gt;&gt; <span class=\"number\">1</span>;<span class=\"comment\">//区间中点</span></span><br><span class=\"line\"></span><br><span class=\"line\">    merge_sort(q,l,mid),merge_sort(q,mid + <span class=\"number\">1</span>,r);<span class=\"comment\">//递归左边与右边，递归后就都有序了</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//左右边都有序后归并</span></span><br><span class=\"line\">    <span class=\"comment\">//有序链表的合并（并且两表一样长</span></span><br><span class=\"line\">    int k = <span class=\"number\">0</span>,i = l,j = mid + <span class=\"number\">1</span>;<span class=\"comment\">//i,j分别是左右边的起点</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(i &lt;= mid &amp;&amp; j &lt;= r)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(q[i] &lt; q[j]) tep[k++] = q[i++];</span><br><span class=\"line\">        <span class=\"keyword\">else</span> tep[k++] = q[j++];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(i &lt;= mid) tep[k++] = q[i++];<span class=\"comment\">//检查左右两边那边剩下，已经排序好就依次插入</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(j &lt;= mid) tep[k++] = q[j++];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(i = l,j = <span class=\"number\">0</span>; i &lt;= r; i++, j++) q[i] = tep[j];<span class=\"comment\">//有序序列存回q序列</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>ps:在归并步骤时，如果碰到相同元素的插入，每次都选择第1段（左边）的元素插入，则能使归并算法稳定。</p>\n\n        <h2 id=\"例子-1\"   >\n          <a href=\"#例子-1\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#例子-1\" class=\"headerlink\" title=\"例子\"></a>例子</h2>\n      <p>给定你一个长度为 nn 的整数数列。</p>\n<p>请你使用归并排序对这个数列按照从小到大进行排序。</p>\n<p>并将排好序的数列按顺序输出。</p>\n\n        <h4 id=\"输入格式-1\"   >\n          <a href=\"#输入格式-1\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#输入格式-1\" class=\"headerlink\" title=\"输入格式\"></a>输入格式</h4>\n      <p>输入共两行，第一行包含整数 nn。</p>\n<p>第二行包含 nn 个整数（所有整数均在 1∼1091∼109 范围内），表示整个数列。</p>\n\n        <h4 id=\"输出格式-1\"   >\n          <a href=\"#输出格式-1\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#输出格式-1\" class=\"headerlink\" title=\"输出格式\"></a>输出格式</h4>\n      <p>输出共一行，包含 nn 个整数，表示排好序的数列。</p>\n\n        <h4 id=\"数据范围-1\"   >\n          <a href=\"#数据范围-1\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#数据范围-1\" class=\"headerlink\" title=\"数据范围\"></a>数据范围</h4>\n      <p>1≤n≤1000001≤n≤100000</p>\n\n        <h4 id=\"输入样例：-1\"   >\n          <a href=\"#输入样例：-1\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#输入样例：-1\" class=\"headerlink\" title=\"输入样例：\"></a>输入样例：</h4>\n      <figure class=\"highlight plain\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">5</span><br><span class=\"line\">3 1 2 4 5</span><br></pre></td></tr></table></div></figure>\n\n\n        <h4 id=\"输出样例：-1\"   >\n          <a href=\"#输出样例：-1\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#输出样例：-1\" class=\"headerlink\" title=\"输出样例：\"></a>输出样例：</h4>\n      <figure class=\"highlight plain\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 2 3 4 5</span><br></pre></td></tr></table></div></figure>\n\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//foreverking</span></span><br><span class=\"line\">#include &lt;vector&gt;</span><br><span class=\"line\">#include &lt;cstdio&gt;</span><br><span class=\"line\">#include &lt;queue&gt;</span><br><span class=\"line\">#include &lt;algorithm&gt;</span><br><span class=\"line\">#include &lt;cstring&gt;</span><br><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">#include &lt;cmath&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> int N = <span class=\"number\">10001000</span>; </span><br><span class=\"line\"></span><br><span class=\"line\">int q[N],tep[N];</span><br><span class=\"line\">int n;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"function\"><span class=\"title\">merge_sort</span>(<span class=\"params\">int q[],int l,int r</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(l &gt;= r) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    int mid = (l + r) &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    merge_sort(q,l,mid),merge_sort(q,mid + <span class=\"number\">1</span>,r);<span class=\"comment\">//递归左右</span></span><br><span class=\"line\"></span><br><span class=\"line\">    int k = <span class=\"number\">0</span>,i = l,j = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(i &lt;= mid &amp;&amp; j &lt;= r)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(q[i] &lt;= q[j]) tep[k++] = q[i++];</span><br><span class=\"line\">        <span class=\"keyword\">else</span> tep[k++] = q[j++];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(i &lt;= mid) tep[k++] = q[i++];</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(j &lt;= r) tep[k++] = q[j++];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(int i = l,j = <span class=\"number\">0</span>;i &lt;= r;i++,j++) q[i] = tep[j];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">int <span class=\"function\"><span class=\"title\">main</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    scanf(<span class=\"string\">&quot;%d&quot;</span>,&amp;n);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(int i = <span class=\"number\">0</span>; i &lt; n; i++)&#123;</span><br><span class=\"line\">        scanf(<span class=\"string\">&quot;%d&quot;</span>,&amp;q[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    merge_sort(q,<span class=\"number\">0</span>,n - <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(int i = <span class=\"number\">0</span>; i &lt; n; i++)&#123;</span><br><span class=\"line\">        <span class=\"comment\">//代码</span></span><br><span class=\"line\">        printf(<span class=\"string\">&quot;%d &quot;</span>,q[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></div></figure>\n<p>两个排序就是这样，还有更多排序以后再说吧。</p>\n"},{"title":"栈","date":"2021-05-26T05:09:32.000Z","_content":"### 定义\n栈是一种特殊的线性表，限定插入和删除操作只能在表的一端（通常是表尾）进行。（又称为**后进先出**的线性表，简称LIFO结构）。\n> 栈是仅在表尾进行擦汗如，删除操作的线性表。表尾称为栈顶To（an端）p;表头称为栈底Base（a1端）。\n> \n\n![image.png](https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/02513c683fc547acb422d984db360460~tplv-k3u1fbpfcp-watermark.image)\n插入元素到栈顶（表尾）的操作，称为入栈[压栈]（push）。从栈顶（表尾）删除最后一个元素的操作，称为出栈[弹栈]（pop）。\n#### 储存结构\n作为一种线性表，栈既可以用顺序栈，也可以用链栈储存。但是顺序栈更常见。<br>\n栈与一般线性表的区别就在于运算规则不同\n因为运算规则是只能在栈顶运算，后进先出。我们的首要任务就是编写入栈和出栈函数。\n### 栈的经典应用\n##### 进制转化\nN是我们输入的某进制数（就当作10进制吧），要转化为另一个进制（8进制），N除以8，余数保留在栈中，得到的结果存在N接着与8整除运算，直到`N / 8 == 0`，最后把栈中数据取出即可。因为结果是从低到高纪录，先将结果全部入栈之后再全部出栈，正好用到了栈的规则，先进后出的特性\n\n##### 括号匹配\n在编写代码的时候，经常会用到两种括号：圆括号 “()” 和大括号 “{}” 。不管使用哪种括号，程序编译没有问题的其中一个重要因素就是所使用的括号是否能够匹配上，可以利用栈判断括号是否匹配。从控制台正常输入一串括号，在输入期间，检测到左括号，进栈，右括号就要和和左括号比较，如何比较呢，我们可以把右括号翻转，说白了就是遇见右括号就让它变成指定的左括号形式，如：`if(ch == '}')  `这时就可以把ch改成'{'或者'('再和栈中元素进行比较。右边括号(),})就出栈进行比较，看是否输入一对括号，如果匹配，就进行下一个比较，否则return，没有再比较的必要了。》<br\n错误情况\n- 当遇到某一个右括号时，栈已空，说明目前**右括号多余左括号**\n- 从栈中弹出的做括号与当前检验的有括号类型不同，说明括号交叉了，不合法\n- 算数表达式输入完毕，但栈中还没有匹配的左括号，说明左括号多余有括号  \n\n##### 表达式求值\n这里的运算表达式是后缀表达式（所有的运算符都在运算数字的后面出现），包括了：\n- 操作数：常量，变量\n- 运算符：算数运算符，关系运算符和逻辑运算符\n- 界限符：左右括号与表达式结束符（表达的结束符'#',与虚设的表达起始符'#‘\n\n为了实现表达式求值，需要两个栈。一个算符栈是OPTR，用于寄存运算符。另一个是操作数栈OPND，用于寄存运算数和运算结果。<br>\n求值的过程是自左到右扫描表达式的每一个字符。当扫描到的是运算数时，压入栈OPND。当扫描到是运算符时，若这个运算符比OPTR栈顶的运算符优先级高，则入栈OPTR，继续向后处理。若这个运算符比OPTR栈顶运算符优先级低，则从OPND栈中弹出两个运算数，从栈OPTR中弹出栈顶运算符进行运算，并将运算结果压入OPND。继续处理直到遇到结束符。\n\n你也可以嫞栈将平时使用的表达式转化为后缀表达式。\n\n### 栈的实现\n关于栈的抽象数据类型的类型定义：\n\n![image.png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/178a7be1d7514f9b84b7701fe12206df~tplv-k3u1fbpfcp-watermark.image)\n```js\nInitStack(&S);//构造一个空栈\nDestroyStack(&S);//初始条件：栈S已存在    操作结果：栈S被销毁\nStackEmpty(S);//初始条件：栈S乙存在    操作结果：若栈为空，返回true否则false\nStackLength(S);//初始条件：栈S已存在    操作结果：返回S元素的个数，即栈的长度\nGetTop(S,&e);//初始条件：栈S存在且非空     操作结果：用e返回栈S的栈顶元素\nClearStack(&S);//初始条件：栈S已存在    操作结果：将S清为空栈\nPush(&S,e);//初始条件：栈S已存在       操作结果：插入元素e成为新的栈顶元素\nPop(&S,e);//初始条件：栈S已存在        操作结果：删除栈S的栈顶元素an，并是用e返回其值\n```\n栈也分为顺序栈和链栈，顺序栈同一般线性表的顺序储存结构完全相同[利用一组连续的储存单元一次存放自栈底到栈顶的数据元素，一般栈底在低地址端]，有top指针，指示栈顶元素在顺序栈的位置（为了方便操作，通常top指针指示真正的栈顶元素之上的下标地址），base指针，指示栈底元素在顺序栈的位置。\n\n#### 顺序栈实现\n结构体：\n```js\ntypedef struct{\n    StackElemType *base;//栈底指针\n    StackElemType *top;//栈顶指针\n    int stacksize;//栈的最大容量\n}SqStack;\n\n```\n顺序栈的初始化：\n\n```js\nStatus InitStack(SqStack &S){//构造一个空栈\n    //S.base = new StackElemType[MAXSIZE];//c++\n    S.base = (StackElemType*) malloc(sizeof(StackElemType) * MAXSIZE);//指向首元素也就是栈底\n    if (!S.base) exit(0);//储存分配失败\n    S.top = S.base;//初始时栈底指针等于栈顶指针\n    S.stacksize = MAXSIZE;\n    return true;\n}\n```\n判断栈是否为空\n\n```js\n//初始条件：栈S乙存在    操作结果：若栈为空，返回true否则false\nbool StackEmpty(SqStack S){\n    if(S.top == S.base)\n        return true;\n    else\n        return false;\n}\n```\n获取栈的元素个数（长度）：\n\n```js\n//初始条件：栈S已存在    操作结果：返回S元素的个数，即栈的长度\nint StackLength(SqStack S){\n    if(!S.base)\n        return false;\n    return S.top - S.base;\n}\n\n```\n获取栈顶元素：\n\n```js\n//初始条件：栈S存在且非空     操作结果：用e返回栈S的栈顶元素\nStatus GetTop(SqStack S,StackElemType &e){\n    if (!S.base)//栈是否存在\n        return false;\n    if (StackEmpty(S))\n        return false;//栈是否为空\n    //e = S.base[S.top - S.base];\n    e = *(S.top - 1);\n    return true;\n}\n```\n**入栈**：\n\n```js\n//初始条件：栈S已存在       操作结果：插入元素e成为新的栈顶元素\n/*\n * 1.判断是否栈满，若满则出错\n * 2.元素e压入栈\n * 3.栈顶指针+1\n */\nStatus Push(SqStack &S,StackElemType e){\n    if(S.top - S.base == S.stacksize)//栈满，在栈中头尾指针相减时中间的空间\n        return false;\n    //也可以增加内存\n    S.top++;\n    *S.top = e;\n    //*S.top++ = e;\n    return true;\n}\n```\n**出栈**：\n\n```js\n//初始条件：栈S已存在        操作结果：删除栈S的栈顶元素an，并是用e返回其值\n/*\n * 1.判断栈是否为空，若为空则出错（下溢\n * 2.获取栈顶元素e\n * 3.栈顶指针-1\n */\nStatus Pop(SqStack &S,StackElemType e){\n    if(StackEmpty(S))//if(S.top == S.base)\n        return false;//栈是否为空\n    S.top--;\n    e = *S.top;\n    //e = *--S.top;\n}\n```\n遍历：\n\n```js\nvoid Travel(SqStack S){\n    StackElemType *temp;//栈顶指针\n    temp = S.base;\n    while(temp != S.top)\n        cout << *temp++ << \" \";\n    cout << endl;\n}\n```\n#### 链栈的实现\n链栈就是运算受限的单链表，只能在链表的头部进行操作。所以结构和单链表时相同的。\n栈的结构类型和单链表相同：\n```js\n//结构体\ntypedef  struct StackNode{\n    StackElemType data;//数据域\n    struct StackNode *next;\n}StackNodeta,*LinkStack;\n```\n链表的头指针就是栈顶，而栈顶不需要头结点<br>\n不会出现栈满的情况，空栈相当于头指针指向空。\n初始化：\n\n```js\nbool InitStack(LinkStack &S){\n    S = NULL;\n    return true;\n}\n```\n判空：\n\n```js\nStatus StackEmpty(LinkStack S){\n    if(S == NULL)\n        return true;\n    else\n        return false;\n}\n\n```\n入栈：\n\n```js\n/入栈\n Status PUSH(LinkStack &S,StackElemType e){\n    LinkStack p = (LinkStack) malloc(sizeof(StackNode);\n    //LinkStack p = new StackNode;//生成新结点p\n    p->data = e;//将新结点数据域设置为e\n    p->next = S;//将新结点插入栈顶\n    S = p;//修改栈顶指针\n    return true;\n}\n```\n出栈：\n\n```js\n//出栈\nStatus Pop(LinkStack &S,StackElemType &e){\n    if (S == NULL)\n        return false;\n    e = S->data;//将删除的元素存在e\n    LinkStack p = S;\n    S = S->next;\n    free(p);\n    //delete p;\n    return true;\n}\n```\n取出栈顶元素：\n\n```js\n//取栈顶元素\nStackElemType Gettop(LinkStack S){\n    if(S != NULL)\n        return S->data;\n}\n```\n遍历：\n\n```js\nvoid Travel(LinkStack &S){\n    LinkStack p = S;\n    while(p) {\n        cout << p->data << \" \";\n        p = p->next;\n    }\n    cout << endl;\n}\n```\n\n着就是栈的基础知识。\n","source":"_posts/栈.md","raw":"---\ntitle: 栈\ndate: 2021-05-26 13:09:32\ntags: \n    - Study\n    - 栈\ncategories: \n    - 数据结构\n    - 栈\n---\n### 定义\n栈是一种特殊的线性表，限定插入和删除操作只能在表的一端（通常是表尾）进行。（又称为**后进先出**的线性表，简称LIFO结构）。\n> 栈是仅在表尾进行擦汗如，删除操作的线性表。表尾称为栈顶To（an端）p;表头称为栈底Base（a1端）。\n> \n\n![image.png](https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/02513c683fc547acb422d984db360460~tplv-k3u1fbpfcp-watermark.image)\n插入元素到栈顶（表尾）的操作，称为入栈[压栈]（push）。从栈顶（表尾）删除最后一个元素的操作，称为出栈[弹栈]（pop）。\n#### 储存结构\n作为一种线性表，栈既可以用顺序栈，也可以用链栈储存。但是顺序栈更常见。<br>\n栈与一般线性表的区别就在于运算规则不同\n因为运算规则是只能在栈顶运算，后进先出。我们的首要任务就是编写入栈和出栈函数。\n### 栈的经典应用\n##### 进制转化\nN是我们输入的某进制数（就当作10进制吧），要转化为另一个进制（8进制），N除以8，余数保留在栈中，得到的结果存在N接着与8整除运算，直到`N / 8 == 0`，最后把栈中数据取出即可。因为结果是从低到高纪录，先将结果全部入栈之后再全部出栈，正好用到了栈的规则，先进后出的特性\n\n##### 括号匹配\n在编写代码的时候，经常会用到两种括号：圆括号 “()” 和大括号 “{}” 。不管使用哪种括号，程序编译没有问题的其中一个重要因素就是所使用的括号是否能够匹配上，可以利用栈判断括号是否匹配。从控制台正常输入一串括号，在输入期间，检测到左括号，进栈，右括号就要和和左括号比较，如何比较呢，我们可以把右括号翻转，说白了就是遇见右括号就让它变成指定的左括号形式，如：`if(ch == '}')  `这时就可以把ch改成'{'或者'('再和栈中元素进行比较。右边括号(),})就出栈进行比较，看是否输入一对括号，如果匹配，就进行下一个比较，否则return，没有再比较的必要了。》<br\n错误情况\n- 当遇到某一个右括号时，栈已空，说明目前**右括号多余左括号**\n- 从栈中弹出的做括号与当前检验的有括号类型不同，说明括号交叉了，不合法\n- 算数表达式输入完毕，但栈中还没有匹配的左括号，说明左括号多余有括号  \n\n##### 表达式求值\n这里的运算表达式是后缀表达式（所有的运算符都在运算数字的后面出现），包括了：\n- 操作数：常量，变量\n- 运算符：算数运算符，关系运算符和逻辑运算符\n- 界限符：左右括号与表达式结束符（表达的结束符'#',与虚设的表达起始符'#‘\n\n为了实现表达式求值，需要两个栈。一个算符栈是OPTR，用于寄存运算符。另一个是操作数栈OPND，用于寄存运算数和运算结果。<br>\n求值的过程是自左到右扫描表达式的每一个字符。当扫描到的是运算数时，压入栈OPND。当扫描到是运算符时，若这个运算符比OPTR栈顶的运算符优先级高，则入栈OPTR，继续向后处理。若这个运算符比OPTR栈顶运算符优先级低，则从OPND栈中弹出两个运算数，从栈OPTR中弹出栈顶运算符进行运算，并将运算结果压入OPND。继续处理直到遇到结束符。\n\n你也可以嫞栈将平时使用的表达式转化为后缀表达式。\n\n### 栈的实现\n关于栈的抽象数据类型的类型定义：\n\n![image.png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/178a7be1d7514f9b84b7701fe12206df~tplv-k3u1fbpfcp-watermark.image)\n```js\nInitStack(&S);//构造一个空栈\nDestroyStack(&S);//初始条件：栈S已存在    操作结果：栈S被销毁\nStackEmpty(S);//初始条件：栈S乙存在    操作结果：若栈为空，返回true否则false\nStackLength(S);//初始条件：栈S已存在    操作结果：返回S元素的个数，即栈的长度\nGetTop(S,&e);//初始条件：栈S存在且非空     操作结果：用e返回栈S的栈顶元素\nClearStack(&S);//初始条件：栈S已存在    操作结果：将S清为空栈\nPush(&S,e);//初始条件：栈S已存在       操作结果：插入元素e成为新的栈顶元素\nPop(&S,e);//初始条件：栈S已存在        操作结果：删除栈S的栈顶元素an，并是用e返回其值\n```\n栈也分为顺序栈和链栈，顺序栈同一般线性表的顺序储存结构完全相同[利用一组连续的储存单元一次存放自栈底到栈顶的数据元素，一般栈底在低地址端]，有top指针，指示栈顶元素在顺序栈的位置（为了方便操作，通常top指针指示真正的栈顶元素之上的下标地址），base指针，指示栈底元素在顺序栈的位置。\n\n#### 顺序栈实现\n结构体：\n```js\ntypedef struct{\n    StackElemType *base;//栈底指针\n    StackElemType *top;//栈顶指针\n    int stacksize;//栈的最大容量\n}SqStack;\n\n```\n顺序栈的初始化：\n\n```js\nStatus InitStack(SqStack &S){//构造一个空栈\n    //S.base = new StackElemType[MAXSIZE];//c++\n    S.base = (StackElemType*) malloc(sizeof(StackElemType) * MAXSIZE);//指向首元素也就是栈底\n    if (!S.base) exit(0);//储存分配失败\n    S.top = S.base;//初始时栈底指针等于栈顶指针\n    S.stacksize = MAXSIZE;\n    return true;\n}\n```\n判断栈是否为空\n\n```js\n//初始条件：栈S乙存在    操作结果：若栈为空，返回true否则false\nbool StackEmpty(SqStack S){\n    if(S.top == S.base)\n        return true;\n    else\n        return false;\n}\n```\n获取栈的元素个数（长度）：\n\n```js\n//初始条件：栈S已存在    操作结果：返回S元素的个数，即栈的长度\nint StackLength(SqStack S){\n    if(!S.base)\n        return false;\n    return S.top - S.base;\n}\n\n```\n获取栈顶元素：\n\n```js\n//初始条件：栈S存在且非空     操作结果：用e返回栈S的栈顶元素\nStatus GetTop(SqStack S,StackElemType &e){\n    if (!S.base)//栈是否存在\n        return false;\n    if (StackEmpty(S))\n        return false;//栈是否为空\n    //e = S.base[S.top - S.base];\n    e = *(S.top - 1);\n    return true;\n}\n```\n**入栈**：\n\n```js\n//初始条件：栈S已存在       操作结果：插入元素e成为新的栈顶元素\n/*\n * 1.判断是否栈满，若满则出错\n * 2.元素e压入栈\n * 3.栈顶指针+1\n */\nStatus Push(SqStack &S,StackElemType e){\n    if(S.top - S.base == S.stacksize)//栈满，在栈中头尾指针相减时中间的空间\n        return false;\n    //也可以增加内存\n    S.top++;\n    *S.top = e;\n    //*S.top++ = e;\n    return true;\n}\n```\n**出栈**：\n\n```js\n//初始条件：栈S已存在        操作结果：删除栈S的栈顶元素an，并是用e返回其值\n/*\n * 1.判断栈是否为空，若为空则出错（下溢\n * 2.获取栈顶元素e\n * 3.栈顶指针-1\n */\nStatus Pop(SqStack &S,StackElemType e){\n    if(StackEmpty(S))//if(S.top == S.base)\n        return false;//栈是否为空\n    S.top--;\n    e = *S.top;\n    //e = *--S.top;\n}\n```\n遍历：\n\n```js\nvoid Travel(SqStack S){\n    StackElemType *temp;//栈顶指针\n    temp = S.base;\n    while(temp != S.top)\n        cout << *temp++ << \" \";\n    cout << endl;\n}\n```\n#### 链栈的实现\n链栈就是运算受限的单链表，只能在链表的头部进行操作。所以结构和单链表时相同的。\n栈的结构类型和单链表相同：\n```js\n//结构体\ntypedef  struct StackNode{\n    StackElemType data;//数据域\n    struct StackNode *next;\n}StackNodeta,*LinkStack;\n```\n链表的头指针就是栈顶，而栈顶不需要头结点<br>\n不会出现栈满的情况，空栈相当于头指针指向空。\n初始化：\n\n```js\nbool InitStack(LinkStack &S){\n    S = NULL;\n    return true;\n}\n```\n判空：\n\n```js\nStatus StackEmpty(LinkStack S){\n    if(S == NULL)\n        return true;\n    else\n        return false;\n}\n\n```\n入栈：\n\n```js\n/入栈\n Status PUSH(LinkStack &S,StackElemType e){\n    LinkStack p = (LinkStack) malloc(sizeof(StackNode);\n    //LinkStack p = new StackNode;//生成新结点p\n    p->data = e;//将新结点数据域设置为e\n    p->next = S;//将新结点插入栈顶\n    S = p;//修改栈顶指针\n    return true;\n}\n```\n出栈：\n\n```js\n//出栈\nStatus Pop(LinkStack &S,StackElemType &e){\n    if (S == NULL)\n        return false;\n    e = S->data;//将删除的元素存在e\n    LinkStack p = S;\n    S = S->next;\n    free(p);\n    //delete p;\n    return true;\n}\n```\n取出栈顶元素：\n\n```js\n//取栈顶元素\nStackElemType Gettop(LinkStack S){\n    if(S != NULL)\n        return S->data;\n}\n```\n遍历：\n\n```js\nvoid Travel(LinkStack &S){\n    LinkStack p = S;\n    while(p) {\n        cout << p->data << \" \";\n        p = p->next;\n    }\n    cout << endl;\n}\n```\n\n着就是栈的基础知识。\n","slug":"栈","published":1,"updated":"2021-07-05T03:07:06.828Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktvk78fx003a1cws3edwbz5d","content":"\n        <h3 id=\"定义\"   >\n          <a href=\"#定义\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3>\n      <p>栈是一种特殊的线性表，限定插入和删除操作只能在表的一端（通常是表尾）进行。（又称为<strong>后进先出</strong>的线性表，简称LIFO结构）。</p>\n<blockquote>\n<p>栈是仅在表尾进行擦汗如，删除操作的线性表。表尾称为栈顶To（an端）p;表头称为栈底Base（a1端）。</p>\n</blockquote>\n<p><img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/02513c683fc547acb422d984db360460~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\"><br>插入元素到栈顶（表尾）的操作，称为入栈[压栈]（push）。从栈顶（表尾）删除最后一个元素的操作，称为出栈[弹栈]（pop）。</p>\n\n        <h4 id=\"储存结构\"   >\n          <a href=\"#储存结构\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#储存结构\" class=\"headerlink\" title=\"储存结构\"></a>储存结构</h4>\n      <p>作为一种线性表，栈既可以用顺序栈，也可以用链栈储存。但是顺序栈更常见。<br><br>栈与一般线性表的区别就在于运算规则不同<br>因为运算规则是只能在栈顶运算，后进先出。我们的首要任务就是编写入栈和出栈函数。</p>\n\n        <h3 id=\"栈的经典应用\"   >\n          <a href=\"#栈的经典应用\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#栈的经典应用\" class=\"headerlink\" title=\"栈的经典应用\"></a>栈的经典应用</h3>\n      \n        <h5 id=\"进制转化\"   >\n          <a href=\"#进制转化\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#进制转化\" class=\"headerlink\" title=\"进制转化\"></a>进制转化</h5>\n      <p>N是我们输入的某进制数（就当作10进制吧），要转化为另一个进制（8进制），N除以8，余数保留在栈中，得到的结果存在N接着与8整除运算，直到<code>N / 8 == 0</code>，最后把栈中数据取出即可。因为结果是从低到高纪录，先将结果全部入栈之后再全部出栈，正好用到了栈的规则，先进后出的特性</p>\n\n        <h5 id=\"括号匹配\"   >\n          <a href=\"#括号匹配\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#括号匹配\" class=\"headerlink\" title=\"括号匹配\"></a>括号匹配</h5>\n      <p>在编写代码的时候，经常会用到两种括号：圆括号 “()” 和大括号 “{}” 。不管使用哪种括号，程序编译没有问题的其中一个重要因素就是所使用的括号是否能够匹配上，可以利用栈判断括号是否匹配。从控制台正常输入一串括号，在输入期间，检测到左括号，进栈，右括号就要和和左括号比较，如何比较呢，我们可以把右括号翻转，说白了就是遇见右括号就让它变成指定的左括号形式，如：<code>if(ch == &#39;&#125;&#39;)  </code>这时就可以把ch改成’{‘或者’(‘再和栈中元素进行比较。右边括号(),})就出栈进行比较，看是否输入一对括号，如果匹配，就进行下一个比较，否则return，没有再比较的必要了。》&lt;br<br>错误情况</p>\n<ul>\n<li>当遇到某一个右括号时，栈已空，说明目前<strong>右括号多余左括号</strong></li>\n<li>从栈中弹出的做括号与当前检验的有括号类型不同，说明括号交叉了，不合法</li>\n<li>算数表达式输入完毕，但栈中还没有匹配的左括号，说明左括号多余有括号  </li>\n</ul>\n\n        <h5 id=\"表达式求值\"   >\n          <a href=\"#表达式求值\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#表达式求值\" class=\"headerlink\" title=\"表达式求值\"></a>表达式求值</h5>\n      <p>这里的运算表达式是后缀表达式（所有的运算符都在运算数字的后面出现），包括了：</p>\n<ul>\n<li>操作数：常量，变量</li>\n<li>运算符：算数运算符，关系运算符和逻辑运算符</li>\n<li>界限符：左右括号与表达式结束符（表达的结束符’#’,与虚设的表达起始符’#‘</li>\n</ul>\n<p>为了实现表达式求值，需要两个栈。一个算符栈是OPTR，用于寄存运算符。另一个是操作数栈OPND，用于寄存运算数和运算结果。<br><br>求值的过程是自左到右扫描表达式的每一个字符。当扫描到的是运算数时，压入栈OPND。当扫描到是运算符时，若这个运算符比OPTR栈顶的运算符优先级高，则入栈OPTR，继续向后处理。若这个运算符比OPTR栈顶运算符优先级低，则从OPND栈中弹出两个运算数，从栈OPTR中弹出栈顶运算符进行运算，并将运算结果压入OPND。继续处理直到遇到结束符。</p>\n<p>你也可以嫞栈将平时使用的表达式转化为后缀表达式。</p>\n\n        <h3 id=\"栈的实现\"   >\n          <a href=\"#栈的实现\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#栈的实现\" class=\"headerlink\" title=\"栈的实现\"></a>栈的实现</h3>\n      <p>关于栈的抽象数据类型的类型定义：</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/178a7be1d7514f9b84b7701fe12206df~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\"></p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">InitStack(&amp;S);<span class=\"comment\">//构造一个空栈</span></span><br><span class=\"line\">DestroyStack(&amp;S);<span class=\"comment\">//初始条件：栈S已存在    操作结果：栈S被销毁</span></span><br><span class=\"line\">StackEmpty(S);<span class=\"comment\">//初始条件：栈S乙存在    操作结果：若栈为空，返回true否则false</span></span><br><span class=\"line\">StackLength(S);<span class=\"comment\">//初始条件：栈S已存在    操作结果：返回S元素的个数，即栈的长度</span></span><br><span class=\"line\">GetTop(S,&amp;e);<span class=\"comment\">//初始条件：栈S存在且非空     操作结果：用e返回栈S的栈顶元素</span></span><br><span class=\"line\">ClearStack(&amp;S);<span class=\"comment\">//初始条件：栈S已存在    操作结果：将S清为空栈</span></span><br><span class=\"line\">Push(&amp;S,e);<span class=\"comment\">//初始条件：栈S已存在       操作结果：插入元素e成为新的栈顶元素</span></span><br><span class=\"line\">Pop(&amp;S,e);<span class=\"comment\">//初始条件：栈S已存在        操作结果：删除栈S的栈顶元素an，并是用e返回其值</span></span><br></pre></td></tr></table></div></figure>\n<p>栈也分为顺序栈和链栈，顺序栈同一般线性表的顺序储存结构完全相同[利用一组连续的储存单元一次存放自栈底到栈顶的数据元素，一般栈底在低地址端]，有top指针，指示栈顶元素在顺序栈的位置（为了方便操作，通常top指针指示真正的栈顶元素之上的下标地址），base指针，指示栈底元素在顺序栈的位置。</p>\n\n        <h4 id=\"顺序栈实现\"   >\n          <a href=\"#顺序栈实现\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#顺序栈实现\" class=\"headerlink\" title=\"顺序栈实现\"></a>顺序栈实现</h4>\n      <p>结构体：</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">typedef struct&#123;</span><br><span class=\"line\">    StackElemType *base;<span class=\"comment\">//栈底指针</span></span><br><span class=\"line\">    StackElemType *top;<span class=\"comment\">//栈顶指针</span></span><br><span class=\"line\">    int stacksize;<span class=\"comment\">//栈的最大容量</span></span><br><span class=\"line\">&#125;SqStack;</span><br><span class=\"line\"></span><br></pre></td></tr></table></div></figure>\n<p>顺序栈的初始化：</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Status <span class=\"function\"><span class=\"title\">InitStack</span>(<span class=\"params\">SqStack &amp;S</span>)</span>&#123;<span class=\"comment\">//构造一个空栈</span></span><br><span class=\"line\">    <span class=\"comment\">//S.base = new StackElemType[MAXSIZE];//c++</span></span><br><span class=\"line\">    S.base = (StackElemType*) malloc(sizeof(StackElemType) * MAXSIZE);<span class=\"comment\">//指向首元素也就是栈底</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!S.base) exit(<span class=\"number\">0</span>);<span class=\"comment\">//储存分配失败</span></span><br><span class=\"line\">    S.top = S.base;<span class=\"comment\">//初始时栈底指针等于栈顶指针</span></span><br><span class=\"line\">    S.stacksize = MAXSIZE;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>判断栈是否为空</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//初始条件：栈S乙存在    操作结果：若栈为空，返回true否则false</span></span><br><span class=\"line\">bool <span class=\"function\"><span class=\"title\">StackEmpty</span>(<span class=\"params\">SqStack S</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(S.top == S.base)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>获取栈的元素个数（长度）：</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//初始条件：栈S已存在    操作结果：返回S元素的个数，即栈的长度</span></span><br><span class=\"line\">int <span class=\"function\"><span class=\"title\">StackLength</span>(<span class=\"params\">SqStack S</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!S.base)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> S.top - S.base;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></div></figure>\n<p>获取栈顶元素：</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//初始条件：栈S存在且非空     操作结果：用e返回栈S的栈顶元素</span></span><br><span class=\"line\">Status <span class=\"function\"><span class=\"title\">GetTop</span>(<span class=\"params\">SqStack S,StackElemType &amp;e</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!S.base)<span class=\"comment\">//栈是否存在</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (StackEmpty(S))</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;<span class=\"comment\">//栈是否为空</span></span><br><span class=\"line\">    <span class=\"comment\">//e = S.base[S.top - S.base];</span></span><br><span class=\"line\">    e = *(S.top - <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p><strong>入栈</strong>：</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//初始条件：栈S已存在       操作结果：插入元素e成为新的栈顶元素</span></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * 1.判断是否栈满，若满则出错</span></span><br><span class=\"line\"><span class=\"comment\"> * 2.元素e压入栈</span></span><br><span class=\"line\"><span class=\"comment\"> * 3.栈顶指针+1</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">Status <span class=\"function\"><span class=\"title\">Push</span>(<span class=\"params\">SqStack &amp;S,StackElemType e</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(S.top - S.base == S.stacksize)<span class=\"comment\">//栈满，在栈中头尾指针相减时中间的空间</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"comment\">//也可以增加内存</span></span><br><span class=\"line\">    S.top++;</span><br><span class=\"line\">    *S.top = e;</span><br><span class=\"line\">    <span class=\"comment\">//*S.top++ = e;</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p><strong>出栈</strong>：</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//初始条件：栈S已存在        操作结果：删除栈S的栈顶元素an，并是用e返回其值</span></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * 1.判断栈是否为空，若为空则出错（下溢</span></span><br><span class=\"line\"><span class=\"comment\"> * 2.获取栈顶元素e</span></span><br><span class=\"line\"><span class=\"comment\"> * 3.栈顶指针-1</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">Status <span class=\"function\"><span class=\"title\">Pop</span>(<span class=\"params\">SqStack &amp;S,StackElemType e</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(StackEmpty(S))<span class=\"comment\">//if(S.top == S.base)</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;<span class=\"comment\">//栈是否为空</span></span><br><span class=\"line\">    S.top--;</span><br><span class=\"line\">    e = *S.top;</span><br><span class=\"line\">    <span class=\"comment\">//e = *--S.top;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>遍历：</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"function\"><span class=\"title\">Travel</span>(<span class=\"params\">SqStack S</span>)</span>&#123;</span><br><span class=\"line\">    StackElemType *temp;<span class=\"comment\">//栈顶指针</span></span><br><span class=\"line\">    temp = S.base;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(temp != S.top)</span><br><span class=\"line\">        cout &lt;&lt; *temp++ &lt;&lt; <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">    cout &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n        <h4 id=\"链栈的实现\"   >\n          <a href=\"#链栈的实现\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#链栈的实现\" class=\"headerlink\" title=\"链栈的实现\"></a>链栈的实现</h4>\n      <p>链栈就是运算受限的单链表，只能在链表的头部进行操作。所以结构和单链表时相同的。<br>栈的结构类型和单链表相同：</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//结构体</span></span><br><span class=\"line\">typedef  struct StackNode&#123;</span><br><span class=\"line\">    StackElemType data;<span class=\"comment\">//数据域</span></span><br><span class=\"line\">    struct StackNode *next;</span><br><span class=\"line\">&#125;StackNodeta,*LinkStack;</span><br></pre></td></tr></table></div></figure>\n<p>链表的头指针就是栈顶，而栈顶不需要头结点<br><br>不会出现栈满的情况，空栈相当于头指针指向空。<br>初始化：</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bool <span class=\"function\"><span class=\"title\">InitStack</span>(<span class=\"params\">LinkStack &amp;S</span>)</span>&#123;</span><br><span class=\"line\">    S = NULL;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>判空：</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Status <span class=\"function\"><span class=\"title\">StackEmpty</span>(<span class=\"params\">LinkStack S</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(S == NULL)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></div></figure>\n<p>入栈：</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/入栈</span><br><span class=\"line\"> Status <span class=\"function\"><span class=\"title\">PUSH</span>(<span class=\"params\">LinkStack &amp;S,StackElemType e</span>)</span>&#123;</span><br><span class=\"line\">    LinkStack p = (LinkStack) malloc(sizeof(StackNode);</span><br><span class=\"line\">    <span class=\"comment\">//LinkStack p = new StackNode;//生成新结点p</span></span><br><span class=\"line\">    p-&gt;data = e;<span class=\"comment\">//将新结点数据域设置为e</span></span><br><span class=\"line\">    p-&gt;next = S;<span class=\"comment\">//将新结点插入栈顶</span></span><br><span class=\"line\">    S = p;<span class=\"comment\">//修改栈顶指针</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>出栈：</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//出栈</span></span><br><span class=\"line\">Status <span class=\"function\"><span class=\"title\">Pop</span>(<span class=\"params\">LinkStack &amp;S,StackElemType &amp;e</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (S == NULL)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    e = S-&gt;data;<span class=\"comment\">//将删除的元素存在e</span></span><br><span class=\"line\">    LinkStack p = S;</span><br><span class=\"line\">    S = S-&gt;next;</span><br><span class=\"line\">    free(p);</span><br><span class=\"line\">    <span class=\"comment\">//delete p;</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>取出栈顶元素：</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//取栈顶元素</span></span><br><span class=\"line\">StackElemType <span class=\"function\"><span class=\"title\">Gettop</span>(<span class=\"params\">LinkStack S</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(S != NULL)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> S-&gt;data;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>遍历：</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"function\"><span class=\"title\">Travel</span>(<span class=\"params\">LinkStack &amp;S</span>)</span>&#123;</span><br><span class=\"line\">    LinkStack p = S;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(p) &#123;</span><br><span class=\"line\">        cout &lt;&lt; p-&gt;data &lt;&lt; <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">        p = p-&gt;next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>着就是栈的基础知识。</p>\n","site":{"data":{}},"excerpt":"","more":"\n        <h3 id=\"定义\"   >\n          <a href=\"#定义\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3>\n      <p>栈是一种特殊的线性表，限定插入和删除操作只能在表的一端（通常是表尾）进行。（又称为<strong>后进先出</strong>的线性表，简称LIFO结构）。</p>\n<blockquote>\n<p>栈是仅在表尾进行擦汗如，删除操作的线性表。表尾称为栈顶To（an端）p;表头称为栈底Base（a1端）。</p>\n</blockquote>\n<p><img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/02513c683fc547acb422d984db360460~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\"><br>插入元素到栈顶（表尾）的操作，称为入栈[压栈]（push）。从栈顶（表尾）删除最后一个元素的操作，称为出栈[弹栈]（pop）。</p>\n\n        <h4 id=\"储存结构\"   >\n          <a href=\"#储存结构\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#储存结构\" class=\"headerlink\" title=\"储存结构\"></a>储存结构</h4>\n      <p>作为一种线性表，栈既可以用顺序栈，也可以用链栈储存。但是顺序栈更常见。<br><br>栈与一般线性表的区别就在于运算规则不同<br>因为运算规则是只能在栈顶运算，后进先出。我们的首要任务就是编写入栈和出栈函数。</p>\n\n        <h3 id=\"栈的经典应用\"   >\n          <a href=\"#栈的经典应用\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#栈的经典应用\" class=\"headerlink\" title=\"栈的经典应用\"></a>栈的经典应用</h3>\n      \n        <h5 id=\"进制转化\"   >\n          <a href=\"#进制转化\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#进制转化\" class=\"headerlink\" title=\"进制转化\"></a>进制转化</h5>\n      <p>N是我们输入的某进制数（就当作10进制吧），要转化为另一个进制（8进制），N除以8，余数保留在栈中，得到的结果存在N接着与8整除运算，直到<code>N / 8 == 0</code>，最后把栈中数据取出即可。因为结果是从低到高纪录，先将结果全部入栈之后再全部出栈，正好用到了栈的规则，先进后出的特性</p>\n\n        <h5 id=\"括号匹配\"   >\n          <a href=\"#括号匹配\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#括号匹配\" class=\"headerlink\" title=\"括号匹配\"></a>括号匹配</h5>\n      <p>在编写代码的时候，经常会用到两种括号：圆括号 “()” 和大括号 “{}” 。不管使用哪种括号，程序编译没有问题的其中一个重要因素就是所使用的括号是否能够匹配上，可以利用栈判断括号是否匹配。从控制台正常输入一串括号，在输入期间，检测到左括号，进栈，右括号就要和和左括号比较，如何比较呢，我们可以把右括号翻转，说白了就是遇见右括号就让它变成指定的左括号形式，如：<code>if(ch == &#39;&#125;&#39;)  </code>这时就可以把ch改成’{‘或者’(‘再和栈中元素进行比较。右边括号(),})就出栈进行比较，看是否输入一对括号，如果匹配，就进行下一个比较，否则return，没有再比较的必要了。》&lt;br<br>错误情况</p>\n<ul>\n<li>当遇到某一个右括号时，栈已空，说明目前<strong>右括号多余左括号</strong></li>\n<li>从栈中弹出的做括号与当前检验的有括号类型不同，说明括号交叉了，不合法</li>\n<li>算数表达式输入完毕，但栈中还没有匹配的左括号，说明左括号多余有括号  </li>\n</ul>\n\n        <h5 id=\"表达式求值\"   >\n          <a href=\"#表达式求值\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#表达式求值\" class=\"headerlink\" title=\"表达式求值\"></a>表达式求值</h5>\n      <p>这里的运算表达式是后缀表达式（所有的运算符都在运算数字的后面出现），包括了：</p>\n<ul>\n<li>操作数：常量，变量</li>\n<li>运算符：算数运算符，关系运算符和逻辑运算符</li>\n<li>界限符：左右括号与表达式结束符（表达的结束符’#’,与虚设的表达起始符’#‘</li>\n</ul>\n<p>为了实现表达式求值，需要两个栈。一个算符栈是OPTR，用于寄存运算符。另一个是操作数栈OPND，用于寄存运算数和运算结果。<br><br>求值的过程是自左到右扫描表达式的每一个字符。当扫描到的是运算数时，压入栈OPND。当扫描到是运算符时，若这个运算符比OPTR栈顶的运算符优先级高，则入栈OPTR，继续向后处理。若这个运算符比OPTR栈顶运算符优先级低，则从OPND栈中弹出两个运算数，从栈OPTR中弹出栈顶运算符进行运算，并将运算结果压入OPND。继续处理直到遇到结束符。</p>\n<p>你也可以嫞栈将平时使用的表达式转化为后缀表达式。</p>\n\n        <h3 id=\"栈的实现\"   >\n          <a href=\"#栈的实现\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#栈的实现\" class=\"headerlink\" title=\"栈的实现\"></a>栈的实现</h3>\n      <p>关于栈的抽象数据类型的类型定义：</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/178a7be1d7514f9b84b7701fe12206df~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\"></p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">InitStack(&amp;S);<span class=\"comment\">//构造一个空栈</span></span><br><span class=\"line\">DestroyStack(&amp;S);<span class=\"comment\">//初始条件：栈S已存在    操作结果：栈S被销毁</span></span><br><span class=\"line\">StackEmpty(S);<span class=\"comment\">//初始条件：栈S乙存在    操作结果：若栈为空，返回true否则false</span></span><br><span class=\"line\">StackLength(S);<span class=\"comment\">//初始条件：栈S已存在    操作结果：返回S元素的个数，即栈的长度</span></span><br><span class=\"line\">GetTop(S,&amp;e);<span class=\"comment\">//初始条件：栈S存在且非空     操作结果：用e返回栈S的栈顶元素</span></span><br><span class=\"line\">ClearStack(&amp;S);<span class=\"comment\">//初始条件：栈S已存在    操作结果：将S清为空栈</span></span><br><span class=\"line\">Push(&amp;S,e);<span class=\"comment\">//初始条件：栈S已存在       操作结果：插入元素e成为新的栈顶元素</span></span><br><span class=\"line\">Pop(&amp;S,e);<span class=\"comment\">//初始条件：栈S已存在        操作结果：删除栈S的栈顶元素an，并是用e返回其值</span></span><br></pre></td></tr></table></div></figure>\n<p>栈也分为顺序栈和链栈，顺序栈同一般线性表的顺序储存结构完全相同[利用一组连续的储存单元一次存放自栈底到栈顶的数据元素，一般栈底在低地址端]，有top指针，指示栈顶元素在顺序栈的位置（为了方便操作，通常top指针指示真正的栈顶元素之上的下标地址），base指针，指示栈底元素在顺序栈的位置。</p>\n\n        <h4 id=\"顺序栈实现\"   >\n          <a href=\"#顺序栈实现\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#顺序栈实现\" class=\"headerlink\" title=\"顺序栈实现\"></a>顺序栈实现</h4>\n      <p>结构体：</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">typedef struct&#123;</span><br><span class=\"line\">    StackElemType *base;<span class=\"comment\">//栈底指针</span></span><br><span class=\"line\">    StackElemType *top;<span class=\"comment\">//栈顶指针</span></span><br><span class=\"line\">    int stacksize;<span class=\"comment\">//栈的最大容量</span></span><br><span class=\"line\">&#125;SqStack;</span><br><span class=\"line\"></span><br></pre></td></tr></table></div></figure>\n<p>顺序栈的初始化：</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Status <span class=\"function\"><span class=\"title\">InitStack</span>(<span class=\"params\">SqStack &amp;S</span>)</span>&#123;<span class=\"comment\">//构造一个空栈</span></span><br><span class=\"line\">    <span class=\"comment\">//S.base = new StackElemType[MAXSIZE];//c++</span></span><br><span class=\"line\">    S.base = (StackElemType*) malloc(sizeof(StackElemType) * MAXSIZE);<span class=\"comment\">//指向首元素也就是栈底</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!S.base) exit(<span class=\"number\">0</span>);<span class=\"comment\">//储存分配失败</span></span><br><span class=\"line\">    S.top = S.base;<span class=\"comment\">//初始时栈底指针等于栈顶指针</span></span><br><span class=\"line\">    S.stacksize = MAXSIZE;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>判断栈是否为空</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//初始条件：栈S乙存在    操作结果：若栈为空，返回true否则false</span></span><br><span class=\"line\">bool <span class=\"function\"><span class=\"title\">StackEmpty</span>(<span class=\"params\">SqStack S</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(S.top == S.base)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>获取栈的元素个数（长度）：</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//初始条件：栈S已存在    操作结果：返回S元素的个数，即栈的长度</span></span><br><span class=\"line\">int <span class=\"function\"><span class=\"title\">StackLength</span>(<span class=\"params\">SqStack S</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!S.base)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> S.top - S.base;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></div></figure>\n<p>获取栈顶元素：</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//初始条件：栈S存在且非空     操作结果：用e返回栈S的栈顶元素</span></span><br><span class=\"line\">Status <span class=\"function\"><span class=\"title\">GetTop</span>(<span class=\"params\">SqStack S,StackElemType &amp;e</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!S.base)<span class=\"comment\">//栈是否存在</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (StackEmpty(S))</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;<span class=\"comment\">//栈是否为空</span></span><br><span class=\"line\">    <span class=\"comment\">//e = S.base[S.top - S.base];</span></span><br><span class=\"line\">    e = *(S.top - <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p><strong>入栈</strong>：</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//初始条件：栈S已存在       操作结果：插入元素e成为新的栈顶元素</span></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * 1.判断是否栈满，若满则出错</span></span><br><span class=\"line\"><span class=\"comment\"> * 2.元素e压入栈</span></span><br><span class=\"line\"><span class=\"comment\"> * 3.栈顶指针+1</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">Status <span class=\"function\"><span class=\"title\">Push</span>(<span class=\"params\">SqStack &amp;S,StackElemType e</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(S.top - S.base == S.stacksize)<span class=\"comment\">//栈满，在栈中头尾指针相减时中间的空间</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"comment\">//也可以增加内存</span></span><br><span class=\"line\">    S.top++;</span><br><span class=\"line\">    *S.top = e;</span><br><span class=\"line\">    <span class=\"comment\">//*S.top++ = e;</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p><strong>出栈</strong>：</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//初始条件：栈S已存在        操作结果：删除栈S的栈顶元素an，并是用e返回其值</span></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * 1.判断栈是否为空，若为空则出错（下溢</span></span><br><span class=\"line\"><span class=\"comment\"> * 2.获取栈顶元素e</span></span><br><span class=\"line\"><span class=\"comment\"> * 3.栈顶指针-1</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">Status <span class=\"function\"><span class=\"title\">Pop</span>(<span class=\"params\">SqStack &amp;S,StackElemType e</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(StackEmpty(S))<span class=\"comment\">//if(S.top == S.base)</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;<span class=\"comment\">//栈是否为空</span></span><br><span class=\"line\">    S.top--;</span><br><span class=\"line\">    e = *S.top;</span><br><span class=\"line\">    <span class=\"comment\">//e = *--S.top;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>遍历：</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"function\"><span class=\"title\">Travel</span>(<span class=\"params\">SqStack S</span>)</span>&#123;</span><br><span class=\"line\">    StackElemType *temp;<span class=\"comment\">//栈顶指针</span></span><br><span class=\"line\">    temp = S.base;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(temp != S.top)</span><br><span class=\"line\">        cout &lt;&lt; *temp++ &lt;&lt; <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">    cout &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n        <h4 id=\"链栈的实现\"   >\n          <a href=\"#链栈的实现\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#链栈的实现\" class=\"headerlink\" title=\"链栈的实现\"></a>链栈的实现</h4>\n      <p>链栈就是运算受限的单链表，只能在链表的头部进行操作。所以结构和单链表时相同的。<br>栈的结构类型和单链表相同：</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//结构体</span></span><br><span class=\"line\">typedef  struct StackNode&#123;</span><br><span class=\"line\">    StackElemType data;<span class=\"comment\">//数据域</span></span><br><span class=\"line\">    struct StackNode *next;</span><br><span class=\"line\">&#125;StackNodeta,*LinkStack;</span><br></pre></td></tr></table></div></figure>\n<p>链表的头指针就是栈顶，而栈顶不需要头结点<br><br>不会出现栈满的情况，空栈相当于头指针指向空。<br>初始化：</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bool <span class=\"function\"><span class=\"title\">InitStack</span>(<span class=\"params\">LinkStack &amp;S</span>)</span>&#123;</span><br><span class=\"line\">    S = NULL;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>判空：</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Status <span class=\"function\"><span class=\"title\">StackEmpty</span>(<span class=\"params\">LinkStack S</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(S == NULL)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></div></figure>\n<p>入栈：</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/入栈</span><br><span class=\"line\"> Status <span class=\"function\"><span class=\"title\">PUSH</span>(<span class=\"params\">LinkStack &amp;S,StackElemType e</span>)</span>&#123;</span><br><span class=\"line\">    LinkStack p = (LinkStack) malloc(sizeof(StackNode);</span><br><span class=\"line\">    <span class=\"comment\">//LinkStack p = new StackNode;//生成新结点p</span></span><br><span class=\"line\">    p-&gt;data = e;<span class=\"comment\">//将新结点数据域设置为e</span></span><br><span class=\"line\">    p-&gt;next = S;<span class=\"comment\">//将新结点插入栈顶</span></span><br><span class=\"line\">    S = p;<span class=\"comment\">//修改栈顶指针</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>出栈：</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//出栈</span></span><br><span class=\"line\">Status <span class=\"function\"><span class=\"title\">Pop</span>(<span class=\"params\">LinkStack &amp;S,StackElemType &amp;e</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (S == NULL)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    e = S-&gt;data;<span class=\"comment\">//将删除的元素存在e</span></span><br><span class=\"line\">    LinkStack p = S;</span><br><span class=\"line\">    S = S-&gt;next;</span><br><span class=\"line\">    free(p);</span><br><span class=\"line\">    <span class=\"comment\">//delete p;</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>取出栈顶元素：</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//取栈顶元素</span></span><br><span class=\"line\">StackElemType <span class=\"function\"><span class=\"title\">Gettop</span>(<span class=\"params\">LinkStack S</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(S != NULL)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> S-&gt;data;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>遍历：</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"function\"><span class=\"title\">Travel</span>(<span class=\"params\">LinkStack &amp;S</span>)</span>&#123;</span><br><span class=\"line\">    LinkStack p = S;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(p) &#123;</span><br><span class=\"line\">        cout &lt;&lt; p-&gt;data &lt;&lt; <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">        p = p-&gt;next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>着就是栈的基础知识。</p>\n"},{"title":"队列","date":"2021-05-30T01:24:23.000Z","_content":"### 定义\n队列（**Queue**）是仅在表尾进行插入操作，在表头进行删除操作的线性表(头插尾删)。它是一种先进先出(FIFO)的线性表  \n形如图：\n![image.png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6c7dcb9bdd564adca3a62e8f67505e62~tplv-k3u1fbpfcp-watermark.image)\n表尾即an端。称为队尾：表头即a1端，称为队头。`  \n同样的队列的储存结构也可以同时使用链队或者顺序队[然而我们常用的是循环顺序队列]。\n#### 队列抽象数据类型定义\n![image.png](https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/685f9d71ac4449fdaf88b365ec73fc9e~tplv-k3u1fbpfcp-watermark.image)\n### 队列的常见应用\n队列的特点就是需要排队\n- 打印机打印输出：按申请的*先后顺序*依次输出\n- 多用户系统中，多个用户排队（是不是想到了OJ\n- 按用户的优先级排成多队，每个优先级一个队列\n- 实时控制系统，信号按接受的先后顺序依次处理\n### 队列的实现\n#### 顺序队列\n> 顺序队列，我们一般使用循环队列，原因在于循环利用空间，解决假上溢的问题。  \n> 设数组大小为MAXSIZEE,当rear等于MAXSIZE时，头部可能还有空间，但是却无法使用，造成了队列已满的假象，就是假上溢。\n> \n> ![image.png](https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/90a2ddbd2eec479e9f347fea4450f91d~tplv-k3u1fbpfcp-watermark.image)\n\n所以引进循环队列。\n结构体：\n\n```js\ntypedef  struct {\n    QueueElemType *base;//初始化的动态分配储存空间，其实就是base数组\n    int front;//头指针，队头\n    int rear;//尾指针，队尾\n    //其实不是指针类型，只是表示下标位置\n}SqQueue;\n```\n初始化：\n```js\n//初始化\nStatus InitQueue(SqQueue &Q) {\n//    Q.base = new QueueElemType[MAXSIZE];\n    Q.base = (QueueElemType *) malloc(MAXSIZE *sizeof (QueueElemType));\n    if(!Q.base) exit(-1);\n    Q.front = Q.rear = 0;\n    return true;\n}\n```\n长度：\n\n```js\n//长度\nint QueueLength(SqQueue Q) {\n    return (Q.rear - Q.front + MAXSIZE) % MAXSIZE;//循环队列，因为可能会减成负数。\n    //正数等于直接减，负数等于加上MAXSIZE\n}\n```\n入队：\n```js\n//入队\nStatus EnQueue(SqQueue &Q, int e) {\n    if((Q.rear + 1) % MAXSIZE == Q.front)//为了防止与队空情况相同，我们需要少用一个空间\n        return false;//队满错误\n    Q.base[Q.rear] =e ;//新元素插入队尾\n    Q.rear = (Q.rear + 1) % MAXSIZE;//循环队列，为了节省空间，队尾指针+1，但到达队列数组的顶部，返回0位置\n    return true;\n}\n```\n判空：\n\n```js\nbool QueueEmpty(SqQueue Q) {   //判断队列是否为空\n    if(Q.front == Q.rear)\n        return true;\n    else\n        return true;\n}\n```\n遍历：\n\n```js\nvoid Traval(SqQueue &Q) {\n    int temp = Q.front;\n    while(temp!= Q.rear){\n        cout << Q.base[temp] << \" \";\n        temp++;\n        temp = temp % MAXSIZE;\n    }\n    cout << endl;\n}\n```\n出队：\n\n```js\n//出队\nStatus DeQueue(SqQueue &Q, int &e) {\n    if(Q.rear == Q.front)//队空\n        return false;\n    e = Q.base[Q.front];//保存要删除的队头元素\n    Q.front = (Q.front + 1) % MAXSIZE;\n    return true;\n}\n```\n取队头元素：\n\n```js\n//取队头元素\nQueueElemType GetHead(SqQueue Q) {\n    if(Q.front != Q.rear)\n        return Q.base[Q.front];\n}\n\n```\n#### 链队列\n当用户无法估计所用队列的长度时，则宜使用链队列\n结构体：\n\n```js\ntypedef struct Qnode{\n    QueueElemType data;\n    struct Qnode *next;\n}Qnode,*QueuePtr;\n\ntypedef struct {\n    QueuePtr front;//头指针\n    QueuePtr rear;//尾指针\n}LinkQueue;\n```\n具体入队，出队操作：\n![image.png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7b69c9565f1840599f0a3104674a55f4~tplv-k3u1fbpfcp-watermark.image)\n初始化：\n\n```js\n//初始化\nStatus InitQueue(LinkQueue &Q){\n    Q.front = Q.rear = (QueuePtr) malloc(sizeof (Qnode));//结点空间\n    if(Q.front) exit(-1);\n    Q.front->next = NULL;\n    return true;\n}\n```\n销毁：\n\n```js\n//销毁队列\nStatus DestroyQueue(LinkQueue &Q){\n    while(Q.front){\n        QueuePtr  p = Q.front->next;\n        free(Q.front);\n        Q.front = p;\n    }\n    return true;\n}\n```\n入队：\n\n```js\n//入队\nStatus enQueue( LinkQueue &Q,QueueElemType e){\n    QueuePtr  p = (QueuePtr) malloc(sizeof (Qnode));//结点空间\n    if(!p) exit(-1);\n    p->data = e;//数据域存进去\n    p->next = NULL;//新结点的指针域指向空\n    Q.rear->next = p;//插到尾结点后面\n    Q.rear = p;//更新尾结点\n}\n```\n出队：\n\n```js\n//出队\nStatus DnQueue(LinkQueue &Q,QueueElemType &e){\n    if(Q.front == Q.rear) return false;//队空，错误\n    QueuePtr  p = Q.front->next;//头结点的下一个，就是要出的队头\n    e = p->data;//用e存除队的\n    Q.front->next = p->next;//将队列跨过队头链接\n    if(Q.rear == p)\n        Q.rear = Q.front;//防止尾结点称为野指针，（直接把他删除了d\n    //delete p;\n    free(p);\n    return true;\n}\n```\n\n 求队头元素：\n \n```js\n//求队头yuansu\nStatus GetHEead(LinkQueue Q,QueueElemType &e){\n    if(Q.front == Q.rear)\n        return false;//空队列，无元素可取\n    e = Q.front->next->data;\n    return true;\n}\n\n```\n像其他比如遍历，判空就不写在这里了，没准那天回来写。\n","source":"_posts/队列.md","raw":"---\ntitle: 队列\ndate: 2021-05-30 09:24:23\ntags: \n    - Study\n    - 队列\ncategories: \n    - 数据结构\n    - 队列\n---\n### 定义\n队列（**Queue**）是仅在表尾进行插入操作，在表头进行删除操作的线性表(头插尾删)。它是一种先进先出(FIFO)的线性表  \n形如图：\n![image.png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6c7dcb9bdd564adca3a62e8f67505e62~tplv-k3u1fbpfcp-watermark.image)\n表尾即an端。称为队尾：表头即a1端，称为队头。`  \n同样的队列的储存结构也可以同时使用链队或者顺序队[然而我们常用的是循环顺序队列]。\n#### 队列抽象数据类型定义\n![image.png](https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/685f9d71ac4449fdaf88b365ec73fc9e~tplv-k3u1fbpfcp-watermark.image)\n### 队列的常见应用\n队列的特点就是需要排队\n- 打印机打印输出：按申请的*先后顺序*依次输出\n- 多用户系统中，多个用户排队（是不是想到了OJ\n- 按用户的优先级排成多队，每个优先级一个队列\n- 实时控制系统，信号按接受的先后顺序依次处理\n### 队列的实现\n#### 顺序队列\n> 顺序队列，我们一般使用循环队列，原因在于循环利用空间，解决假上溢的问题。  \n> 设数组大小为MAXSIZEE,当rear等于MAXSIZE时，头部可能还有空间，但是却无法使用，造成了队列已满的假象，就是假上溢。\n> \n> ![image.png](https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/90a2ddbd2eec479e9f347fea4450f91d~tplv-k3u1fbpfcp-watermark.image)\n\n所以引进循环队列。\n结构体：\n\n```js\ntypedef  struct {\n    QueueElemType *base;//初始化的动态分配储存空间，其实就是base数组\n    int front;//头指针，队头\n    int rear;//尾指针，队尾\n    //其实不是指针类型，只是表示下标位置\n}SqQueue;\n```\n初始化：\n```js\n//初始化\nStatus InitQueue(SqQueue &Q) {\n//    Q.base = new QueueElemType[MAXSIZE];\n    Q.base = (QueueElemType *) malloc(MAXSIZE *sizeof (QueueElemType));\n    if(!Q.base) exit(-1);\n    Q.front = Q.rear = 0;\n    return true;\n}\n```\n长度：\n\n```js\n//长度\nint QueueLength(SqQueue Q) {\n    return (Q.rear - Q.front + MAXSIZE) % MAXSIZE;//循环队列，因为可能会减成负数。\n    //正数等于直接减，负数等于加上MAXSIZE\n}\n```\n入队：\n```js\n//入队\nStatus EnQueue(SqQueue &Q, int e) {\n    if((Q.rear + 1) % MAXSIZE == Q.front)//为了防止与队空情况相同，我们需要少用一个空间\n        return false;//队满错误\n    Q.base[Q.rear] =e ;//新元素插入队尾\n    Q.rear = (Q.rear + 1) % MAXSIZE;//循环队列，为了节省空间，队尾指针+1，但到达队列数组的顶部，返回0位置\n    return true;\n}\n```\n判空：\n\n```js\nbool QueueEmpty(SqQueue Q) {   //判断队列是否为空\n    if(Q.front == Q.rear)\n        return true;\n    else\n        return true;\n}\n```\n遍历：\n\n```js\nvoid Traval(SqQueue &Q) {\n    int temp = Q.front;\n    while(temp!= Q.rear){\n        cout << Q.base[temp] << \" \";\n        temp++;\n        temp = temp % MAXSIZE;\n    }\n    cout << endl;\n}\n```\n出队：\n\n```js\n//出队\nStatus DeQueue(SqQueue &Q, int &e) {\n    if(Q.rear == Q.front)//队空\n        return false;\n    e = Q.base[Q.front];//保存要删除的队头元素\n    Q.front = (Q.front + 1) % MAXSIZE;\n    return true;\n}\n```\n取队头元素：\n\n```js\n//取队头元素\nQueueElemType GetHead(SqQueue Q) {\n    if(Q.front != Q.rear)\n        return Q.base[Q.front];\n}\n\n```\n#### 链队列\n当用户无法估计所用队列的长度时，则宜使用链队列\n结构体：\n\n```js\ntypedef struct Qnode{\n    QueueElemType data;\n    struct Qnode *next;\n}Qnode,*QueuePtr;\n\ntypedef struct {\n    QueuePtr front;//头指针\n    QueuePtr rear;//尾指针\n}LinkQueue;\n```\n具体入队，出队操作：\n![image.png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7b69c9565f1840599f0a3104674a55f4~tplv-k3u1fbpfcp-watermark.image)\n初始化：\n\n```js\n//初始化\nStatus InitQueue(LinkQueue &Q){\n    Q.front = Q.rear = (QueuePtr) malloc(sizeof (Qnode));//结点空间\n    if(Q.front) exit(-1);\n    Q.front->next = NULL;\n    return true;\n}\n```\n销毁：\n\n```js\n//销毁队列\nStatus DestroyQueue(LinkQueue &Q){\n    while(Q.front){\n        QueuePtr  p = Q.front->next;\n        free(Q.front);\n        Q.front = p;\n    }\n    return true;\n}\n```\n入队：\n\n```js\n//入队\nStatus enQueue( LinkQueue &Q,QueueElemType e){\n    QueuePtr  p = (QueuePtr) malloc(sizeof (Qnode));//结点空间\n    if(!p) exit(-1);\n    p->data = e;//数据域存进去\n    p->next = NULL;//新结点的指针域指向空\n    Q.rear->next = p;//插到尾结点后面\n    Q.rear = p;//更新尾结点\n}\n```\n出队：\n\n```js\n//出队\nStatus DnQueue(LinkQueue &Q,QueueElemType &e){\n    if(Q.front == Q.rear) return false;//队空，错误\n    QueuePtr  p = Q.front->next;//头结点的下一个，就是要出的队头\n    e = p->data;//用e存除队的\n    Q.front->next = p->next;//将队列跨过队头链接\n    if(Q.rear == p)\n        Q.rear = Q.front;//防止尾结点称为野指针，（直接把他删除了d\n    //delete p;\n    free(p);\n    return true;\n}\n```\n\n 求队头元素：\n \n```js\n//求队头yuansu\nStatus GetHEead(LinkQueue Q,QueueElemType &e){\n    if(Q.front == Q.rear)\n        return false;//空队列，无元素可取\n    e = Q.front->next->data;\n    return true;\n}\n\n```\n像其他比如遍历，判空就不写在这里了，没准那天回来写。\n","slug":"队列","published":1,"updated":"2021-06-02T08:05:32.241Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktvk78fx003d1cws0o0ncj5i","content":"\n        <h3 id=\"定义\"   >\n          <a href=\"#定义\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3>\n      <p>队列（<strong>Queue</strong>）是仅在表尾进行插入操作，在表头进行删除操作的线性表(头插尾删)。它是一种先进先出(FIFO)的线性表<br>形如图：<br><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6c7dcb9bdd564adca3a62e8f67505e62~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\"><br>表尾即an端。称为队尾：表头即a1端，称为队头。`<br>同样的队列的储存结构也可以同时使用链队或者顺序队[然而我们常用的是循环顺序队列]。</p>\n\n        <h4 id=\"队列抽象数据类型定义\"   >\n          <a href=\"#队列抽象数据类型定义\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#队列抽象数据类型定义\" class=\"headerlink\" title=\"队列抽象数据类型定义\"></a>队列抽象数据类型定义</h4>\n      <p><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/685f9d71ac4449fdaf88b365ec73fc9e~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\"></p>\n\n        <h3 id=\"队列的常见应用\"   >\n          <a href=\"#队列的常见应用\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#队列的常见应用\" class=\"headerlink\" title=\"队列的常见应用\"></a>队列的常见应用</h3>\n      <p>队列的特点就是需要排队</p>\n<ul>\n<li>打印机打印输出：按申请的<em>先后顺序</em>依次输出</li>\n<li>多用户系统中，多个用户排队（是不是想到了OJ</li>\n<li>按用户的优先级排成多队，每个优先级一个队列</li>\n<li>实时控制系统，信号按接受的先后顺序依次处理\n        <h3 id=\"队列的实现\"   >\n          <a href=\"#队列的实现\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#队列的实现\" class=\"headerlink\" title=\"队列的实现\"></a>队列的实现</h3>\n      \n        <h4 id=\"顺序队列\"   >\n          <a href=\"#顺序队列\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#顺序队列\" class=\"headerlink\" title=\"顺序队列\"></a>顺序队列</h4>\n      <blockquote>\n<p>顺序队列，我们一般使用循环队列，原因在于循环利用空间，解决假上溢的问题。<br>设数组大小为MAXSIZEE,当rear等于MAXSIZE时，头部可能还有空间，但是却无法使用，造成了队列已满的假象，就是假上溢。</p>\n<p><img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/90a2ddbd2eec479e9f347fea4450f91d~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\"></p>\n</blockquote>\n</li>\n</ul>\n<p>所以引进循环队列。<br>结构体：</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">typedef  struct &#123;</span><br><span class=\"line\">    QueueElemType *base;<span class=\"comment\">//初始化的动态分配储存空间，其实就是base数组</span></span><br><span class=\"line\">    int front;<span class=\"comment\">//头指针，队头</span></span><br><span class=\"line\">    int rear;<span class=\"comment\">//尾指针，队尾</span></span><br><span class=\"line\">    <span class=\"comment\">//其实不是指针类型，只是表示下标位置</span></span><br><span class=\"line\">&#125;SqQueue;</span><br></pre></td></tr></table></div></figure>\n<p>初始化：</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//初始化</span></span><br><span class=\"line\">Status <span class=\"function\"><span class=\"title\">InitQueue</span>(<span class=\"params\">SqQueue &amp;Q</span>)</span> &#123;</span><br><span class=\"line\"><span class=\"comment\">//    Q.base = new QueueElemType[MAXSIZE];</span></span><br><span class=\"line\">    Q.base = (QueueElemType *) malloc(MAXSIZE *sizeof (QueueElemType));</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!Q.base) exit(-<span class=\"number\">1</span>);</span><br><span class=\"line\">    Q.front = Q.rear = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>长度：</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//长度</span></span><br><span class=\"line\">int <span class=\"function\"><span class=\"title\">QueueLength</span>(<span class=\"params\">SqQueue Q</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (Q.rear - Q.front + MAXSIZE) % MAXSIZE;<span class=\"comment\">//循环队列，因为可能会减成负数。</span></span><br><span class=\"line\">    <span class=\"comment\">//正数等于直接减，负数等于加上MAXSIZE</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>入队：</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//入队</span></span><br><span class=\"line\">Status <span class=\"function\"><span class=\"title\">EnQueue</span>(<span class=\"params\">SqQueue &amp;Q, int e</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>((Q.rear + <span class=\"number\">1</span>) % MAXSIZE == Q.front)<span class=\"comment\">//为了防止与队空情况相同，我们需要少用一个空间</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;<span class=\"comment\">//队满错误</span></span><br><span class=\"line\">    Q.base[Q.rear] =e ;<span class=\"comment\">//新元素插入队尾</span></span><br><span class=\"line\">    Q.rear = (Q.rear + <span class=\"number\">1</span>) % MAXSIZE;<span class=\"comment\">//循环队列，为了节省空间，队尾指针+1，但到达队列数组的顶部，返回0位置</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>判空：</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bool <span class=\"function\"><span class=\"title\">QueueEmpty</span>(<span class=\"params\">SqQueue Q</span>)</span> &#123;   <span class=\"comment\">//判断队列是否为空</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(Q.front == Q.rear)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>遍历：</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"function\"><span class=\"title\">Traval</span>(<span class=\"params\">SqQueue &amp;Q</span>)</span> &#123;</span><br><span class=\"line\">    int temp = Q.front;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(temp!= Q.rear)&#123;</span><br><span class=\"line\">        cout &lt;&lt; Q.base[temp] &lt;&lt; <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">        temp++;</span><br><span class=\"line\">        temp = temp % MAXSIZE;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>出队：</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//出队</span></span><br><span class=\"line\">Status <span class=\"function\"><span class=\"title\">DeQueue</span>(<span class=\"params\">SqQueue &amp;Q, int &amp;e</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(Q.rear == Q.front)<span class=\"comment\">//队空</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    e = Q.base[Q.front];<span class=\"comment\">//保存要删除的队头元素</span></span><br><span class=\"line\">    Q.front = (Q.front + <span class=\"number\">1</span>) % MAXSIZE;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>取队头元素：</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//取队头元素</span></span><br><span class=\"line\">QueueElemType <span class=\"function\"><span class=\"title\">GetHead</span>(<span class=\"params\">SqQueue Q</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(Q.front != Q.rear)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Q.base[Q.front];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></div></figure>\n\n        <h4 id=\"链队列\"   >\n          <a href=\"#链队列\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#链队列\" class=\"headerlink\" title=\"链队列\"></a>链队列</h4>\n      <p>当用户无法估计所用队列的长度时，则宜使用链队列<br>结构体：</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">typedef struct Qnode&#123;</span><br><span class=\"line\">    QueueElemType data;</span><br><span class=\"line\">    struct Qnode *next;</span><br><span class=\"line\">&#125;Qnode,*QueuePtr;</span><br><span class=\"line\"></span><br><span class=\"line\">typedef struct &#123;</span><br><span class=\"line\">    QueuePtr front;<span class=\"comment\">//头指针</span></span><br><span class=\"line\">    QueuePtr rear;<span class=\"comment\">//尾指针</span></span><br><span class=\"line\">&#125;LinkQueue;</span><br></pre></td></tr></table></div></figure>\n<p>具体入队，出队操作：<br><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7b69c9565f1840599f0a3104674a55f4~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\"><br>初始化：</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//初始化</span></span><br><span class=\"line\">Status <span class=\"function\"><span class=\"title\">InitQueue</span>(<span class=\"params\">LinkQueue &amp;Q</span>)</span>&#123;</span><br><span class=\"line\">    Q.front = Q.rear = (QueuePtr) malloc(sizeof (Qnode));<span class=\"comment\">//结点空间</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(Q.front) exit(-<span class=\"number\">1</span>);</span><br><span class=\"line\">    Q.front-&gt;next = NULL;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>销毁：</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//销毁队列</span></span><br><span class=\"line\">Status <span class=\"function\"><span class=\"title\">DestroyQueue</span>(<span class=\"params\">LinkQueue &amp;Q</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(Q.front)&#123;</span><br><span class=\"line\">        QueuePtr  p = Q.front-&gt;next;</span><br><span class=\"line\">        free(Q.front);</span><br><span class=\"line\">        Q.front = p;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>入队：</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//入队</span></span><br><span class=\"line\">Status <span class=\"function\"><span class=\"title\">enQueue</span>(<span class=\"params\"> LinkQueue &amp;Q,QueueElemType e</span>)</span>&#123;</span><br><span class=\"line\">    QueuePtr  p = (QueuePtr) malloc(sizeof (Qnode));<span class=\"comment\">//结点空间</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!p) exit(-<span class=\"number\">1</span>);</span><br><span class=\"line\">    p-&gt;data = e;<span class=\"comment\">//数据域存进去</span></span><br><span class=\"line\">    p-&gt;next = NULL;<span class=\"comment\">//新结点的指针域指向空</span></span><br><span class=\"line\">    Q.rear-&gt;next = p;<span class=\"comment\">//插到尾结点后面</span></span><br><span class=\"line\">    Q.rear = p;<span class=\"comment\">//更新尾结点</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>出队：</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//出队</span></span><br><span class=\"line\">Status <span class=\"function\"><span class=\"title\">DnQueue</span>(<span class=\"params\">LinkQueue &amp;Q,QueueElemType &amp;e</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(Q.front == Q.rear) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;<span class=\"comment\">//队空，错误</span></span><br><span class=\"line\">    QueuePtr  p = Q.front-&gt;next;<span class=\"comment\">//头结点的下一个，就是要出的队头</span></span><br><span class=\"line\">    e = p-&gt;data;<span class=\"comment\">//用e存除队的</span></span><br><span class=\"line\">    Q.front-&gt;next = p-&gt;next;<span class=\"comment\">//将队列跨过队头链接</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(Q.rear == p)</span><br><span class=\"line\">        Q.rear = Q.front;<span class=\"comment\">//防止尾结点称为野指针，（直接把他删除了d</span></span><br><span class=\"line\">    <span class=\"comment\">//delete p;</span></span><br><span class=\"line\">    free(p);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p> 求队头元素：</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//求队头yuansu</span></span><br><span class=\"line\">Status <span class=\"function\"><span class=\"title\">GetHEead</span>(<span class=\"params\">LinkQueue Q,QueueElemType &amp;e</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(Q.front == Q.rear)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;<span class=\"comment\">//空队列，无元素可取</span></span><br><span class=\"line\">    e = Q.front-&gt;next-&gt;data;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></div></figure>\n<p>像其他比如遍历，判空就不写在这里了，没准那天回来写。</p>\n","site":{"data":{}},"excerpt":"","more":"\n        <h3 id=\"定义\"   >\n          <a href=\"#定义\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3>\n      <p>队列（<strong>Queue</strong>）是仅在表尾进行插入操作，在表头进行删除操作的线性表(头插尾删)。它是一种先进先出(FIFO)的线性表<br>形如图：<br><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6c7dcb9bdd564adca3a62e8f67505e62~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\"><br>表尾即an端。称为队尾：表头即a1端，称为队头。`<br>同样的队列的储存结构也可以同时使用链队或者顺序队[然而我们常用的是循环顺序队列]。</p>\n\n        <h4 id=\"队列抽象数据类型定义\"   >\n          <a href=\"#队列抽象数据类型定义\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#队列抽象数据类型定义\" class=\"headerlink\" title=\"队列抽象数据类型定义\"></a>队列抽象数据类型定义</h4>\n      <p><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/685f9d71ac4449fdaf88b365ec73fc9e~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\"></p>\n\n        <h3 id=\"队列的常见应用\"   >\n          <a href=\"#队列的常见应用\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#队列的常见应用\" class=\"headerlink\" title=\"队列的常见应用\"></a>队列的常见应用</h3>\n      <p>队列的特点就是需要排队</p>\n<ul>\n<li>打印机打印输出：按申请的<em>先后顺序</em>依次输出</li>\n<li>多用户系统中，多个用户排队（是不是想到了OJ</li>\n<li>按用户的优先级排成多队，每个优先级一个队列</li>\n<li>实时控制系统，信号按接受的先后顺序依次处理\n        <h3 id=\"队列的实现\"   >\n          <a href=\"#队列的实现\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#队列的实现\" class=\"headerlink\" title=\"队列的实现\"></a>队列的实现</h3>\n      \n        <h4 id=\"顺序队列\"   >\n          <a href=\"#顺序队列\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#顺序队列\" class=\"headerlink\" title=\"顺序队列\"></a>顺序队列</h4>\n      <blockquote>\n<p>顺序队列，我们一般使用循环队列，原因在于循环利用空间，解决假上溢的问题。<br>设数组大小为MAXSIZEE,当rear等于MAXSIZE时，头部可能还有空间，但是却无法使用，造成了队列已满的假象，就是假上溢。</p>\n<p><img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/90a2ddbd2eec479e9f347fea4450f91d~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\"></p>\n</blockquote>\n</li>\n</ul>\n<p>所以引进循环队列。<br>结构体：</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">typedef  struct &#123;</span><br><span class=\"line\">    QueueElemType *base;<span class=\"comment\">//初始化的动态分配储存空间，其实就是base数组</span></span><br><span class=\"line\">    int front;<span class=\"comment\">//头指针，队头</span></span><br><span class=\"line\">    int rear;<span class=\"comment\">//尾指针，队尾</span></span><br><span class=\"line\">    <span class=\"comment\">//其实不是指针类型，只是表示下标位置</span></span><br><span class=\"line\">&#125;SqQueue;</span><br></pre></td></tr></table></div></figure>\n<p>初始化：</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//初始化</span></span><br><span class=\"line\">Status <span class=\"function\"><span class=\"title\">InitQueue</span>(<span class=\"params\">SqQueue &amp;Q</span>)</span> &#123;</span><br><span class=\"line\"><span class=\"comment\">//    Q.base = new QueueElemType[MAXSIZE];</span></span><br><span class=\"line\">    Q.base = (QueueElemType *) malloc(MAXSIZE *sizeof (QueueElemType));</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!Q.base) exit(-<span class=\"number\">1</span>);</span><br><span class=\"line\">    Q.front = Q.rear = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>长度：</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//长度</span></span><br><span class=\"line\">int <span class=\"function\"><span class=\"title\">QueueLength</span>(<span class=\"params\">SqQueue Q</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (Q.rear - Q.front + MAXSIZE) % MAXSIZE;<span class=\"comment\">//循环队列，因为可能会减成负数。</span></span><br><span class=\"line\">    <span class=\"comment\">//正数等于直接减，负数等于加上MAXSIZE</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>入队：</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//入队</span></span><br><span class=\"line\">Status <span class=\"function\"><span class=\"title\">EnQueue</span>(<span class=\"params\">SqQueue &amp;Q, int e</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>((Q.rear + <span class=\"number\">1</span>) % MAXSIZE == Q.front)<span class=\"comment\">//为了防止与队空情况相同，我们需要少用一个空间</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;<span class=\"comment\">//队满错误</span></span><br><span class=\"line\">    Q.base[Q.rear] =e ;<span class=\"comment\">//新元素插入队尾</span></span><br><span class=\"line\">    Q.rear = (Q.rear + <span class=\"number\">1</span>) % MAXSIZE;<span class=\"comment\">//循环队列，为了节省空间，队尾指针+1，但到达队列数组的顶部，返回0位置</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>判空：</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bool <span class=\"function\"><span class=\"title\">QueueEmpty</span>(<span class=\"params\">SqQueue Q</span>)</span> &#123;   <span class=\"comment\">//判断队列是否为空</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(Q.front == Q.rear)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>遍历：</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"function\"><span class=\"title\">Traval</span>(<span class=\"params\">SqQueue &amp;Q</span>)</span> &#123;</span><br><span class=\"line\">    int temp = Q.front;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(temp!= Q.rear)&#123;</span><br><span class=\"line\">        cout &lt;&lt; Q.base[temp] &lt;&lt; <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">        temp++;</span><br><span class=\"line\">        temp = temp % MAXSIZE;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>出队：</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//出队</span></span><br><span class=\"line\">Status <span class=\"function\"><span class=\"title\">DeQueue</span>(<span class=\"params\">SqQueue &amp;Q, int &amp;e</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(Q.rear == Q.front)<span class=\"comment\">//队空</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    e = Q.base[Q.front];<span class=\"comment\">//保存要删除的队头元素</span></span><br><span class=\"line\">    Q.front = (Q.front + <span class=\"number\">1</span>) % MAXSIZE;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>取队头元素：</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//取队头元素</span></span><br><span class=\"line\">QueueElemType <span class=\"function\"><span class=\"title\">GetHead</span>(<span class=\"params\">SqQueue Q</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(Q.front != Q.rear)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Q.base[Q.front];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></div></figure>\n\n        <h4 id=\"链队列\"   >\n          <a href=\"#链队列\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#链队列\" class=\"headerlink\" title=\"链队列\"></a>链队列</h4>\n      <p>当用户无法估计所用队列的长度时，则宜使用链队列<br>结构体：</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">typedef struct Qnode&#123;</span><br><span class=\"line\">    QueueElemType data;</span><br><span class=\"line\">    struct Qnode *next;</span><br><span class=\"line\">&#125;Qnode,*QueuePtr;</span><br><span class=\"line\"></span><br><span class=\"line\">typedef struct &#123;</span><br><span class=\"line\">    QueuePtr front;<span class=\"comment\">//头指针</span></span><br><span class=\"line\">    QueuePtr rear;<span class=\"comment\">//尾指针</span></span><br><span class=\"line\">&#125;LinkQueue;</span><br></pre></td></tr></table></div></figure>\n<p>具体入队，出队操作：<br><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7b69c9565f1840599f0a3104674a55f4~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\"><br>初始化：</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//初始化</span></span><br><span class=\"line\">Status <span class=\"function\"><span class=\"title\">InitQueue</span>(<span class=\"params\">LinkQueue &amp;Q</span>)</span>&#123;</span><br><span class=\"line\">    Q.front = Q.rear = (QueuePtr) malloc(sizeof (Qnode));<span class=\"comment\">//结点空间</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(Q.front) exit(-<span class=\"number\">1</span>);</span><br><span class=\"line\">    Q.front-&gt;next = NULL;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>销毁：</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//销毁队列</span></span><br><span class=\"line\">Status <span class=\"function\"><span class=\"title\">DestroyQueue</span>(<span class=\"params\">LinkQueue &amp;Q</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(Q.front)&#123;</span><br><span class=\"line\">        QueuePtr  p = Q.front-&gt;next;</span><br><span class=\"line\">        free(Q.front);</span><br><span class=\"line\">        Q.front = p;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>入队：</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//入队</span></span><br><span class=\"line\">Status <span class=\"function\"><span class=\"title\">enQueue</span>(<span class=\"params\"> LinkQueue &amp;Q,QueueElemType e</span>)</span>&#123;</span><br><span class=\"line\">    QueuePtr  p = (QueuePtr) malloc(sizeof (Qnode));<span class=\"comment\">//结点空间</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!p) exit(-<span class=\"number\">1</span>);</span><br><span class=\"line\">    p-&gt;data = e;<span class=\"comment\">//数据域存进去</span></span><br><span class=\"line\">    p-&gt;next = NULL;<span class=\"comment\">//新结点的指针域指向空</span></span><br><span class=\"line\">    Q.rear-&gt;next = p;<span class=\"comment\">//插到尾结点后面</span></span><br><span class=\"line\">    Q.rear = p;<span class=\"comment\">//更新尾结点</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>出队：</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//出队</span></span><br><span class=\"line\">Status <span class=\"function\"><span class=\"title\">DnQueue</span>(<span class=\"params\">LinkQueue &amp;Q,QueueElemType &amp;e</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(Q.front == Q.rear) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;<span class=\"comment\">//队空，错误</span></span><br><span class=\"line\">    QueuePtr  p = Q.front-&gt;next;<span class=\"comment\">//头结点的下一个，就是要出的队头</span></span><br><span class=\"line\">    e = p-&gt;data;<span class=\"comment\">//用e存除队的</span></span><br><span class=\"line\">    Q.front-&gt;next = p-&gt;next;<span class=\"comment\">//将队列跨过队头链接</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(Q.rear == p)</span><br><span class=\"line\">        Q.rear = Q.front;<span class=\"comment\">//防止尾结点称为野指针，（直接把他删除了d</span></span><br><span class=\"line\">    <span class=\"comment\">//delete p;</span></span><br><span class=\"line\">    free(p);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p> 求队头元素：</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//求队头yuansu</span></span><br><span class=\"line\">Status <span class=\"function\"><span class=\"title\">GetHEead</span>(<span class=\"params\">LinkQueue Q,QueueElemType &amp;e</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(Q.front == Q.rear)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;<span class=\"comment\">//空队列，无元素可取</span></span><br><span class=\"line\">    e = Q.front-&gt;next-&gt;data;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></div></figure>\n<p>像其他比如遍历，判空就不写在这里了，没准那天回来写。</p>\n"},{"title":"顺序表","date":"2021-04-27T14:22:04.000Z","_content":"### 线性表的定义和特点\n### 线性表的定义和特点\n定义：线性表是具有**相同特性**的数据结构元素（由n[n>=0]个数据元素（结点）a1,a2……an组成的）的一个有限序列。\n\n- 其中数据原始的个数n定义为表的长度\n- 当n = 0时称为空表\n- 将非空线性表（n > 0）记作：（a1,a2……an）\n- 这里的数据袁术ai只是一个丑行的符号其具体含义在不同情况下可以不同\n- 同一线性表的原始必定具有相同特性，数据元素之间是线性关系\n#### 线性表类型定义\n抽象数据类型线性表的定义：\n![image.png](https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/fdb4e6b7f1844c79b0f10b9ea843da6f~tplv-k3u1fbpfcp-watermark.image)\n有以下操作：\n```js\nOoeration:\n    InitList(*L/*&L*)//初始化操作，建立一个新的线性表L\n    GetLength(Sqlist L);//返回线性表的长度\n    ListEmpty(L)//线性表已存在，若线性表为空表，则返回TURE，否则返回FALSE\n    DestroyList(*L/*&L*)//线性表已存在，销毁线性表\n    ClearList(*L)//线性表已存在，清空线性表（置为空表）\n    GetElem(L,i,&e)//线性表已存在，用e返回表中第i个元素\n    LocateElem(L,e,cmp())//线性表已存在，cmp()是数据元素的判定函数（= < >）,返回L中第一个满足cmp()的数据元素的序号。若不此女子这样的数据元素则返回0\n    PriorElem(L,cur,pre)//线性表已存在，若cur是L的数据元素且不是第一个，则用pre返回cur的前驱，否则返回失败（pre无意义）\n    NextElem(L,cur,next)//线性表已存在。若cur是L的数据元素且不是最后一个，则用next返回cur的前驱，否则返回失败（next无意义）\n    ListInsert(*L/*&L*,i,e)//线性表已存在，且1<=i<=len_s+1。在L的第i个位置之前插入新的数据元素e，L的长的（len_s）加一\n    ListDelete(*L/*&L*,i,&e)//线性表已存在,且1<=i<=len_s。删除L的第i个数据元素，并用e返回其值，L长度减一\n    ListTraverse(L,visited())//线性表已存在。一次对线性表中每个元素用visited()[遍历之后，输出，修改之类~~]\n    \n```\n发现上面各函数的传入的参数各有不同，其中有一点差别的是表头的传入，一些是L，一些是*L，那么什么时候传入什么呢，其***实如果函数会改变指针L的值（改变表的地址）,而你希望函数结束调用后保存L的值,那你就要用LinkList *L,这样,向函数传递的就是指针的地址,结束调用后,自然就可以去改变指针的值;**\n而如果函数只会修改指针所指向的内容,而不会更改指针的值,那么用LinkList L就行了;\n举个例子：清空线性表，函数调用完毕后,链表被清空，L会指向一个空的链表,即会改变指针的值,所以要用*L，而插入元素这种，不会改变链表的地址，所以传入L就好！！\n### 线性表的储存结构\n计算机中，线性表有两种基本的粗存结构：顺序储存结构和链式储存结构\n#### 线性表的顺序表示和实现\n顺序储存定义把逻辑上相邻的数据元素储存在物理上相邻的储存单元中的储存结构。\n\n如下顺序储存结构占据一片连续的空间[地址连续]（知道某个元素的储存位置就可以计算其他元素的储存位置）：\n\n![image.png](https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b3fa5f54701246ca8cac5fea77682495~tplv-k3u1fbpfcp-watermark.image)\n线性表中第一个数据元素a1的储存位置，作为线性表的起始位置或基地址。\n\n顺序表是利用元素的储存位置表示线性表中相邻元素之前的前后关系，即顺序表（线性表）的逻辑结构和存储结构一致。我们**用一维数组表示顺序表**，但是数组长度是不能动态定义的（数组长度不等于线性表长度），我们就用一个变量表示顺序表的长度属性：\n![image.png](https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4731deb1d4e14b2b978cfafb63a27008~tplv-k3u1fbpfcp-watermark.image)\n然后我们来进行函数的实现：\n### 函数\n`我们提前定义一下Status为函数的类型（返回值），ElemType是表中元素的值。还有一些其他定义下面再说`\n```js\n//初始化\nStatus InitList(Sqlist *L/*Sqlist &L*){\n    L->elem = (ElemType *)malloc(MAXSIZE * sizeof(ElemType));//得到全部空间\n    if(!L->elem) return false;//分配空间失败\n    L->len = 0;//线性表长度为0\n    return OK;//创建成功\n}\n\n }\n```\n\n```js\n//删除表\nvoid DestroyList(Sqlist *L/*Sqlist &L*){\n    if(L->elem) free(L->elem);//释放空间\n    L->elem = NULL;\n    L->len = 0;//\n}\n```\n\n```js\n//清空表\nvoid ClearList(Sqlist *L/*Sqlist &L*){\n    L->len = 0;//直接清空\n}\n```\n\n```js\n//得到线性表长度\nint GetLength(Sqlist L) {\n    return L.len;\n}\n```\n\n```js\n//判断是否空表\nint listEmpty(Sqlist L) {\n    if(L.len == 0) return true;\n    else return false;\n}\n```\n\n```js\n////根据位置i得到对应位置数据元素的值\nint GetElem(Sqlist L,int i, ElemType &e) {\n    if(i < 1 || i > L.len) return false;\n    e = L.elem[i - 1];//第i-1个位置储存这第i个数据，从0开始\n    return true;\n}\n\n```\n\n```js\n//按值查找（找相同的，查找成功返回序号，失败返回false）\nint LocateElem(Sqlist L, ElemType e) {\n    for(int i = 0; i < L.len; i++)\n        if(L.elem[i] == e) return i+1;//查找成功，返回序号\n\n    return false;//查找失败\n}\n```\n> *平均查找长度* ASL（Average Search Length）:为了确定记录在表中的位置，需要与给定值进行比较关键字的个数的期望值叫做查找算法的平均查找长度   ASL = ΣPiCi[第i个元素被查找的概率；找到第i个记录需要比较的次数]\n\n插入函数，插入到哪个位置，一个表有N个元素可以插入到0~N+1的位置。若是元素已经满了，那就溢出了。\n\n![image.png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7343c51e392c4d859d91f055fa66f958~tplv-k3u1fbpfcp-watermark.image)\n\n```js\n/*\n * 1.判断插入位置i是否合法\n * 2.判断顺序表的储存空间是否已满，若已满返回ERROR\n * 3.将第n至第i位的元素一次向后移动一个位置，空出第i个位置\n * 4.将要插入的新元素e放入第i个位置\n * 5.表长加一，返回OK\n */\nint ListInsert(Sqlist *L/*Sqlist &L*/,int i,ElemType e) {\n    if(i < 1 || i > L->len + 1) return false;\n    if(L->len == MAXSIZE) return  false;\n    for(int j = L->len - 1; j >= i - 1; j--){\n        L->elem[j + 1] = L->elem[j];//向后移\n    }\n    L->elem[i - 1] = e;\n    L->len++;\n    return true;\n}\n```\n\n```js\n//删除元素,删除位置，最前面，中间，最后\n/*\n * 1.判断删除位置i是否合法（1~n）\n * 2.将欲删除的元素保留在e中\n * 3.将第i+1至第n位元素一次向前移动一个位置\n * 4.表长减一\n */\nint ListDelete(Sqlist *L/*Sqlist &L*,int i,ElemType *e){\n    if(i < 1 || i > L->len) return false;\n    *e = L->elem[i - 1];//删除的值给到e\n    for(int j = i; j <= L->len - 1; j++){\n        L->elem[j - 1] = L->elem[j];//依次前移\n    }\n    L->len--;\n    return true;\n}\n//删除，插入的复杂度都是O(n);\n```\n还有其他的函数比如遍历就不写了。\n#### 某些顺序`表操作\n顺序表合并`\n\n```js\nvoid unionList(Sqlist &La, Sqlist Lb) {\n    int La_len = GetLength(La);\n    int Lb_len = GetLength(Lb);\n    for (int i = 1; i <= Lb_len; ++i) {//查看链表b中是否存在链表a中的元素\n        //因为查找的元素是序号，不是下标，从1开始\n        ElemType e;\n        GetElem(Lb,i,&e);//得到b链表中的第i个值\n        if (!LocateElem(La,e)) { ListInsert(&La, ++La_len, e); }//a当最找到了e，那么加到a表尾，表长加一\n    }\n}\n```\n有序表的合并：\n两种都可以用，原理都相同，第二中再函数内申请了Lc的空间\n```js\nvoid MergeList_One(Sqlist La, Sqlist Lb, Sqlist &Lc){\n    int i=0,j=0,k=0;//分别表示三个表到了哪个位置\n    while((i < La.len) && (j < Lb.len)){\n        if(La.elem[i] <= Lb.elem[j])\n            Lc.elem[k++]=La.elem[i++];\n        else\n            Lc.elem[k++] = Lb.elem[j++];\n    }\n    while(i < La.len){\n        Lc.elem[k++] = La.elem[i++];\n    }\n    while(j < Lb.len){\n        Lc.elem[k++]=Lb.elem[j++];\n    }\n    Lc.len = k;\n}\n```\n\n```js\nvoid MergeList_Two(Sqlist La, Sqlist Lb, Sqlist &Lc){\n    ElemType *pa = La.elem;\n    ElemType *pb = Lb.elem;//pa,pa分别指向La,Lb第一个元素\n    Lc.len = La.len + Lb.len;//Lc的长度\n    Lc.elem = (ElemType *)malloc(MAXSIZE * sizeof(ElemType));//得到全部空间\n    ElemType *pc = Lc.elem;\n    ElemType *paLast = La.elem + La.len - 1;\n    ElemType *pbLast = Lb.elem + Lb.len - 1;//指向最后一个元素的指针\n    while (pa <= paLast && pb <= pbLast){\n        //依次拿比较小的\n        if(*pa <= *pb)\n            *pc++ = *pa++;\n        else\n            *pc++ = *pb++;\n    }\n    //La还没拿完\n    while (pa <= paLast)\n        *pc++ = *pa++;\n    //Lb还没拿完\n    while (pb <= pbLast)\n        *pc++ = *pb++;\n}\n```\n*代码会传到我的github上，还有一个引用版本的，更简单*\n### 特点\n优点：\n- 存储密度大（节点本身所占存储量/结点结构所占存储量）\n- 可以随机存取表中任意元素\n缺点：\n- 在插入，删除某一元素时，需要移动大量元素\n- 浪费储存空间\n- 属于静态储存形式，数据元素的个数不能自由扩充\n\n克服缺点，就使用链表。","source":"_posts/顺序表.md","raw":"---\ntitle: 顺序表\ndate: 2021-04-27 22:22:04\ntags: \n    - Study\n    - 链表\ncategories: \n    - 数据结构\n    - 链表\n---\n### 线性表的定义和特点\n### 线性表的定义和特点\n定义：线性表是具有**相同特性**的数据结构元素（由n[n>=0]个数据元素（结点）a1,a2……an组成的）的一个有限序列。\n\n- 其中数据原始的个数n定义为表的长度\n- 当n = 0时称为空表\n- 将非空线性表（n > 0）记作：（a1,a2……an）\n- 这里的数据袁术ai只是一个丑行的符号其具体含义在不同情况下可以不同\n- 同一线性表的原始必定具有相同特性，数据元素之间是线性关系\n#### 线性表类型定义\n抽象数据类型线性表的定义：\n![image.png](https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/fdb4e6b7f1844c79b0f10b9ea843da6f~tplv-k3u1fbpfcp-watermark.image)\n有以下操作：\n```js\nOoeration:\n    InitList(*L/*&L*)//初始化操作，建立一个新的线性表L\n    GetLength(Sqlist L);//返回线性表的长度\n    ListEmpty(L)//线性表已存在，若线性表为空表，则返回TURE，否则返回FALSE\n    DestroyList(*L/*&L*)//线性表已存在，销毁线性表\n    ClearList(*L)//线性表已存在，清空线性表（置为空表）\n    GetElem(L,i,&e)//线性表已存在，用e返回表中第i个元素\n    LocateElem(L,e,cmp())//线性表已存在，cmp()是数据元素的判定函数（= < >）,返回L中第一个满足cmp()的数据元素的序号。若不此女子这样的数据元素则返回0\n    PriorElem(L,cur,pre)//线性表已存在，若cur是L的数据元素且不是第一个，则用pre返回cur的前驱，否则返回失败（pre无意义）\n    NextElem(L,cur,next)//线性表已存在。若cur是L的数据元素且不是最后一个，则用next返回cur的前驱，否则返回失败（next无意义）\n    ListInsert(*L/*&L*,i,e)//线性表已存在，且1<=i<=len_s+1。在L的第i个位置之前插入新的数据元素e，L的长的（len_s）加一\n    ListDelete(*L/*&L*,i,&e)//线性表已存在,且1<=i<=len_s。删除L的第i个数据元素，并用e返回其值，L长度减一\n    ListTraverse(L,visited())//线性表已存在。一次对线性表中每个元素用visited()[遍历之后，输出，修改之类~~]\n    \n```\n发现上面各函数的传入的参数各有不同，其中有一点差别的是表头的传入，一些是L，一些是*L，那么什么时候传入什么呢，其***实如果函数会改变指针L的值（改变表的地址）,而你希望函数结束调用后保存L的值,那你就要用LinkList *L,这样,向函数传递的就是指针的地址,结束调用后,自然就可以去改变指针的值;**\n而如果函数只会修改指针所指向的内容,而不会更改指针的值,那么用LinkList L就行了;\n举个例子：清空线性表，函数调用完毕后,链表被清空，L会指向一个空的链表,即会改变指针的值,所以要用*L，而插入元素这种，不会改变链表的地址，所以传入L就好！！\n### 线性表的储存结构\n计算机中，线性表有两种基本的粗存结构：顺序储存结构和链式储存结构\n#### 线性表的顺序表示和实现\n顺序储存定义把逻辑上相邻的数据元素储存在物理上相邻的储存单元中的储存结构。\n\n如下顺序储存结构占据一片连续的空间[地址连续]（知道某个元素的储存位置就可以计算其他元素的储存位置）：\n\n![image.png](https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b3fa5f54701246ca8cac5fea77682495~tplv-k3u1fbpfcp-watermark.image)\n线性表中第一个数据元素a1的储存位置，作为线性表的起始位置或基地址。\n\n顺序表是利用元素的储存位置表示线性表中相邻元素之前的前后关系，即顺序表（线性表）的逻辑结构和存储结构一致。我们**用一维数组表示顺序表**，但是数组长度是不能动态定义的（数组长度不等于线性表长度），我们就用一个变量表示顺序表的长度属性：\n![image.png](https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4731deb1d4e14b2b978cfafb63a27008~tplv-k3u1fbpfcp-watermark.image)\n然后我们来进行函数的实现：\n### 函数\n`我们提前定义一下Status为函数的类型（返回值），ElemType是表中元素的值。还有一些其他定义下面再说`\n```js\n//初始化\nStatus InitList(Sqlist *L/*Sqlist &L*){\n    L->elem = (ElemType *)malloc(MAXSIZE * sizeof(ElemType));//得到全部空间\n    if(!L->elem) return false;//分配空间失败\n    L->len = 0;//线性表长度为0\n    return OK;//创建成功\n}\n\n }\n```\n\n```js\n//删除表\nvoid DestroyList(Sqlist *L/*Sqlist &L*){\n    if(L->elem) free(L->elem);//释放空间\n    L->elem = NULL;\n    L->len = 0;//\n}\n```\n\n```js\n//清空表\nvoid ClearList(Sqlist *L/*Sqlist &L*){\n    L->len = 0;//直接清空\n}\n```\n\n```js\n//得到线性表长度\nint GetLength(Sqlist L) {\n    return L.len;\n}\n```\n\n```js\n//判断是否空表\nint listEmpty(Sqlist L) {\n    if(L.len == 0) return true;\n    else return false;\n}\n```\n\n```js\n////根据位置i得到对应位置数据元素的值\nint GetElem(Sqlist L,int i, ElemType &e) {\n    if(i < 1 || i > L.len) return false;\n    e = L.elem[i - 1];//第i-1个位置储存这第i个数据，从0开始\n    return true;\n}\n\n```\n\n```js\n//按值查找（找相同的，查找成功返回序号，失败返回false）\nint LocateElem(Sqlist L, ElemType e) {\n    for(int i = 0; i < L.len; i++)\n        if(L.elem[i] == e) return i+1;//查找成功，返回序号\n\n    return false;//查找失败\n}\n```\n> *平均查找长度* ASL（Average Search Length）:为了确定记录在表中的位置，需要与给定值进行比较关键字的个数的期望值叫做查找算法的平均查找长度   ASL = ΣPiCi[第i个元素被查找的概率；找到第i个记录需要比较的次数]\n\n插入函数，插入到哪个位置，一个表有N个元素可以插入到0~N+1的位置。若是元素已经满了，那就溢出了。\n\n![image.png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7343c51e392c4d859d91f055fa66f958~tplv-k3u1fbpfcp-watermark.image)\n\n```js\n/*\n * 1.判断插入位置i是否合法\n * 2.判断顺序表的储存空间是否已满，若已满返回ERROR\n * 3.将第n至第i位的元素一次向后移动一个位置，空出第i个位置\n * 4.将要插入的新元素e放入第i个位置\n * 5.表长加一，返回OK\n */\nint ListInsert(Sqlist *L/*Sqlist &L*/,int i,ElemType e) {\n    if(i < 1 || i > L->len + 1) return false;\n    if(L->len == MAXSIZE) return  false;\n    for(int j = L->len - 1; j >= i - 1; j--){\n        L->elem[j + 1] = L->elem[j];//向后移\n    }\n    L->elem[i - 1] = e;\n    L->len++;\n    return true;\n}\n```\n\n```js\n//删除元素,删除位置，最前面，中间，最后\n/*\n * 1.判断删除位置i是否合法（1~n）\n * 2.将欲删除的元素保留在e中\n * 3.将第i+1至第n位元素一次向前移动一个位置\n * 4.表长减一\n */\nint ListDelete(Sqlist *L/*Sqlist &L*,int i,ElemType *e){\n    if(i < 1 || i > L->len) return false;\n    *e = L->elem[i - 1];//删除的值给到e\n    for(int j = i; j <= L->len - 1; j++){\n        L->elem[j - 1] = L->elem[j];//依次前移\n    }\n    L->len--;\n    return true;\n}\n//删除，插入的复杂度都是O(n);\n```\n还有其他的函数比如遍历就不写了。\n#### 某些顺序`表操作\n顺序表合并`\n\n```js\nvoid unionList(Sqlist &La, Sqlist Lb) {\n    int La_len = GetLength(La);\n    int Lb_len = GetLength(Lb);\n    for (int i = 1; i <= Lb_len; ++i) {//查看链表b中是否存在链表a中的元素\n        //因为查找的元素是序号，不是下标，从1开始\n        ElemType e;\n        GetElem(Lb,i,&e);//得到b链表中的第i个值\n        if (!LocateElem(La,e)) { ListInsert(&La, ++La_len, e); }//a当最找到了e，那么加到a表尾，表长加一\n    }\n}\n```\n有序表的合并：\n两种都可以用，原理都相同，第二中再函数内申请了Lc的空间\n```js\nvoid MergeList_One(Sqlist La, Sqlist Lb, Sqlist &Lc){\n    int i=0,j=0,k=0;//分别表示三个表到了哪个位置\n    while((i < La.len) && (j < Lb.len)){\n        if(La.elem[i] <= Lb.elem[j])\n            Lc.elem[k++]=La.elem[i++];\n        else\n            Lc.elem[k++] = Lb.elem[j++];\n    }\n    while(i < La.len){\n        Lc.elem[k++] = La.elem[i++];\n    }\n    while(j < Lb.len){\n        Lc.elem[k++]=Lb.elem[j++];\n    }\n    Lc.len = k;\n}\n```\n\n```js\nvoid MergeList_Two(Sqlist La, Sqlist Lb, Sqlist &Lc){\n    ElemType *pa = La.elem;\n    ElemType *pb = Lb.elem;//pa,pa分别指向La,Lb第一个元素\n    Lc.len = La.len + Lb.len;//Lc的长度\n    Lc.elem = (ElemType *)malloc(MAXSIZE * sizeof(ElemType));//得到全部空间\n    ElemType *pc = Lc.elem;\n    ElemType *paLast = La.elem + La.len - 1;\n    ElemType *pbLast = Lb.elem + Lb.len - 1;//指向最后一个元素的指针\n    while (pa <= paLast && pb <= pbLast){\n        //依次拿比较小的\n        if(*pa <= *pb)\n            *pc++ = *pa++;\n        else\n            *pc++ = *pb++;\n    }\n    //La还没拿完\n    while (pa <= paLast)\n        *pc++ = *pa++;\n    //Lb还没拿完\n    while (pb <= pbLast)\n        *pc++ = *pb++;\n}\n```\n*代码会传到我的github上，还有一个引用版本的，更简单*\n### 特点\n优点：\n- 存储密度大（节点本身所占存储量/结点结构所占存储量）\n- 可以随机存取表中任意元素\n缺点：\n- 在插入，删除某一元素时，需要移动大量元素\n- 浪费储存空间\n- 属于静态储存形式，数据元素的个数不能自由扩充\n\n克服缺点，就使用链表。","slug":"顺序表","published":1,"updated":"2021-11-07T10:43:20.374Z","_id":"cktvk78fz003i1cws4h8vfsc9","comments":1,"layout":"post","photos":[],"link":"","content":"\n        <h3 id=\"线性表的定义和特点\"   >\n          <a href=\"#线性表的定义和特点\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#线性表的定义和特点\" class=\"headerlink\" title=\"线性表的定义和特点\"></a>线性表的定义和特点</h3>\n      \n        <h3 id=\"线性表的定义和特点-1\"   >\n          <a href=\"#线性表的定义和特点-1\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#线性表的定义和特点-1\" class=\"headerlink\" title=\"线性表的定义和特点\"></a>线性表的定义和特点</h3>\n      <p>定义：线性表是具有<strong>相同特性</strong>的数据结构元素（由n[n&gt;=0]个数据元素（结点）a1,a2……an组成的）的一个有限序列。</p>\n<ul>\n<li>其中数据原始的个数n定义为表的长度</li>\n<li>当n = 0时称为空表</li>\n<li>将非空线性表（n &gt; 0）记作：（a1,a2……an）</li>\n<li>这里的数据袁术ai只是一个丑行的符号其具体含义在不同情况下可以不同</li>\n<li>同一线性表的原始必定具有相同特性，数据元素之间是线性关系\n        <h4 id=\"线性表类型定义\"   >\n          <a href=\"#线性表类型定义\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#线性表类型定义\" class=\"headerlink\" title=\"线性表类型定义\"></a>线性表类型定义</h4>\n      抽象数据类型线性表的定义：<br><img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/fdb4e6b7f1844c79b0f10b9ea843da6f~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\"><br>有以下操作：<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Ooeration:</span><br><span class=\"line\">    InitList(*L<span class=\"comment\">/*&amp;L*)//初始化操作，建立一个新的线性表L</span></span><br><span class=\"line\"><span class=\"comment\">    GetLength(Sqlist L);//返回线性表的长度</span></span><br><span class=\"line\"><span class=\"comment\">    ListEmpty(L)//线性表已存在，若线性表为空表，则返回TURE，否则返回FALSE</span></span><br><span class=\"line\"><span class=\"comment\">    DestroyList(*L/*&amp;L*)//线性表已存在，销毁线性表</span></span><br><span class=\"line\"><span class=\"comment\">    ClearList(*L)//线性表已存在，清空线性表（置为空表）</span></span><br><span class=\"line\"><span class=\"comment\">    GetElem(L,i,&amp;e)//线性表已存在，用e返回表中第i个元素</span></span><br><span class=\"line\"><span class=\"comment\">    LocateElem(L,e,cmp())//线性表已存在，cmp()是数据元素的判定函数（= &lt; &gt;）,返回L中第一个满足cmp()的数据元素的序号。若不此女子这样的数据元素则返回0</span></span><br><span class=\"line\"><span class=\"comment\">    PriorElem(L,cur,pre)//线性表已存在，若cur是L的数据元素且不是第一个，则用pre返回cur的前驱，否则返回失败（pre无意义）</span></span><br><span class=\"line\"><span class=\"comment\">    NextElem(L,cur,next)//线性表已存在。若cur是L的数据元素且不是最后一个，则用next返回cur的前驱，否则返回失败（next无意义）</span></span><br><span class=\"line\"><span class=\"comment\">    ListInsert(*L/*&amp;L*,i,e)//线性表已存在，且1&lt;=i&lt;=len_s+1。在L的第i个位置之前插入新的数据元素e，L的长的（len_s）加一</span></span><br><span class=\"line\"><span class=\"comment\">    ListDelete(*L/*&amp;L*,i,&amp;e)//线性表已存在,且1&lt;=i&lt;=len_s。删除L的第i个数据元素，并用e返回其值，L长度减一</span></span><br><span class=\"line\"><span class=\"comment\">    ListTraverse(L,visited())//线性表已存在。一次对线性表中每个元素用visited()[遍历之后，输出，修改之类~~]</span></span><br><span class=\"line\"><span class=\"comment\">    </span></span><br></pre></td></tr></table></div></figure>\n发现上面各函数的传入的参数各有不同，其中有一点差别的是表头的传入，一些是L，一些是<em>L，那么什么时候传入什么呢，其**</em>实如果函数会改变指针L的值（改变表的地址）,而你希望函数结束调用后保存L的值,那你就要用LinkList <em>L,这样,向函数传递的就是指针的地址,结束调用后,自然就可以去改变指针的值;*</em><br>而如果函数只会修改指针所指向的内容,而不会更改指针的值,那么用LinkList L就行了;<br>举个例子：清空线性表，函数调用完毕后,链表被清空，L会指向一个空的链表,即会改变指针的值,所以要用*L，而插入元素这种，不会改变链表的地址，所以传入L就好！！\n        <h3 id=\"线性表的储存结构\"   >\n          <a href=\"#线性表的储存结构\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#线性表的储存结构\" class=\"headerlink\" title=\"线性表的储存结构\"></a>线性表的储存结构</h3>\n      计算机中，线性表有两种基本的粗存结构：顺序储存结构和链式储存结构\n        <h4 id=\"线性表的顺序表示和实现\"   >\n          <a href=\"#线性表的顺序表示和实现\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#线性表的顺序表示和实现\" class=\"headerlink\" title=\"线性表的顺序表示和实现\"></a>线性表的顺序表示和实现</h4>\n      顺序储存定义把逻辑上相邻的数据元素储存在物理上相邻的储存单元中的储存结构。</li>\n</ul>\n<p>如下顺序储存结构占据一片连续的空间[地址连续]（知道某个元素的储存位置就可以计算其他元素的储存位置）：</p>\n<p><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b3fa5f54701246ca8cac5fea77682495~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\"><br>线性表中第一个数据元素a1的储存位置，作为线性表的起始位置或基地址。</p>\n<p>顺序表是利用元素的储存位置表示线性表中相邻元素之前的前后关系，即顺序表（线性表）的逻辑结构和存储结构一致。我们<strong>用一维数组表示顺序表</strong>，但是数组长度是不能动态定义的（数组长度不等于线性表长度），我们就用一个变量表示顺序表的长度属性：<br><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4731deb1d4e14b2b978cfafb63a27008~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\"><br>然后我们来进行函数的实现：</p>\n\n        <h3 id=\"函数\"   >\n          <a href=\"#函数\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h3>\n      <p><code>我们提前定义一下Status为函数的类型（返回值），ElemType是表中元素的值。还有一些其他定义下面再说</code></p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//初始化</span></span><br><span class=\"line\">Status <span class=\"function\"><span class=\"title\">InitList</span>(<span class=\"params\">Sqlist *L<span class=\"comment\">/*Sqlist &amp;L*)&#123;</span></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"><span class=\"comment\">    L-&gt;elem = (ElemType *)malloc(MAXSIZE * sizeof(ElemType));//得到全部空间</span></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"><span class=\"comment\">    if(!L-&gt;elem) return false;//分配空间失败</span></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"><span class=\"comment\">    L-&gt;len = 0;//线性表长度为0</span></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"><span class=\"comment\">    return OK;//创建成功</span></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"><span class=\"comment\">&#125;</span></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"><span class=\"comment\"></span></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"><span class=\"comment\"> &#125;</span></span></span></span><br></pre></td></tr></table></div></figure>\n\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//删除表</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"function\"><span class=\"title\">DestroyList</span>(<span class=\"params\">Sqlist *L<span class=\"comment\">/*Sqlist &amp;L*)&#123;</span></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"><span class=\"comment\">    if(L-&gt;elem) free(L-&gt;elem);//释放空间</span></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"><span class=\"comment\">    L-&gt;elem = NULL;</span></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"><span class=\"comment\">    L-&gt;len = 0;//</span></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"><span class=\"comment\">&#125;</span></span></span></span><br></pre></td></tr></table></div></figure>\n\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//清空表</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"function\"><span class=\"title\">ClearList</span>(<span class=\"params\">Sqlist *L<span class=\"comment\">/*Sqlist &amp;L*)&#123;</span></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"><span class=\"comment\">    L-&gt;len = 0;//直接清空</span></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"><span class=\"comment\">&#125;</span></span></span></span><br></pre></td></tr></table></div></figure>\n\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//得到线性表长度</span></span><br><span class=\"line\">int <span class=\"function\"><span class=\"title\">GetLength</span>(<span class=\"params\">Sqlist L</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> L.len;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//判断是否空表</span></span><br><span class=\"line\">int <span class=\"function\"><span class=\"title\">listEmpty</span>(<span class=\"params\">Sqlist L</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(L.len == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">////根据位置i得到对应位置数据元素的值</span></span><br><span class=\"line\">int <span class=\"function\"><span class=\"title\">GetElem</span>(<span class=\"params\">Sqlist L,int i, ElemType &amp;e</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(i &lt; <span class=\"number\">1</span> || i &gt; L.len) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    e = L.elem[i - <span class=\"number\">1</span>];<span class=\"comment\">//第i-1个位置储存这第i个数据，从0开始</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></div></figure>\n\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//按值查找（找相同的，查找成功返回序号，失败返回false）</span></span><br><span class=\"line\">int <span class=\"function\"><span class=\"title\">LocateElem</span>(<span class=\"params\">Sqlist L, ElemType e</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(int i = <span class=\"number\">0</span>; i &lt; L.len; i++)</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(L.elem[i] == e) <span class=\"keyword\">return</span> i+<span class=\"number\">1</span>;<span class=\"comment\">//查找成功，返回序号</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;<span class=\"comment\">//查找失败</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<blockquote>\n<p><em>平均查找长度</em> ASL（Average Search Length）:为了确定记录在表中的位置，需要与给定值进行比较关键字的个数的期望值叫做查找算法的平均查找长度   ASL = ΣPiCi[第i个元素被查找的概率；找到第i个记录需要比较的次数]</p>\n</blockquote>\n<p>插入函数，插入到哪个位置，一个表有N个元素可以插入到0~N+1的位置。若是元素已经满了，那就溢出了。</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7343c51e392c4d859d91f055fa66f958~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\"></p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * 1.判断插入位置i是否合法</span></span><br><span class=\"line\"><span class=\"comment\"> * 2.判断顺序表的储存空间是否已满，若已满返回ERROR</span></span><br><span class=\"line\"><span class=\"comment\"> * 3.将第n至第i位的元素一次向后移动一个位置，空出第i个位置</span></span><br><span class=\"line\"><span class=\"comment\"> * 4.将要插入的新元素e放入第i个位置</span></span><br><span class=\"line\"><span class=\"comment\"> * 5.表长加一，返回OK</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">int <span class=\"function\"><span class=\"title\">ListInsert</span>(<span class=\"params\">Sqlist *L<span class=\"comment\">/*Sqlist &amp;L*/</span>,int i,ElemType e</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(i &lt; <span class=\"number\">1</span> || i &gt; L-&gt;len + <span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(L-&gt;len == MAXSIZE) <span class=\"keyword\">return</span>  <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(int j = L-&gt;len - <span class=\"number\">1</span>; j &gt;= i - <span class=\"number\">1</span>; j--)&#123;</span><br><span class=\"line\">        L-&gt;elem[j + <span class=\"number\">1</span>] = L-&gt;elem[j];<span class=\"comment\">//向后移</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    L-&gt;elem[i - <span class=\"number\">1</span>] = e;</span><br><span class=\"line\">    L-&gt;len++;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//删除元素,删除位置，最前面，中间，最后</span></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * 1.判断删除位置i是否合法（1~n）</span></span><br><span class=\"line\"><span class=\"comment\"> * 2.将欲删除的元素保留在e中</span></span><br><span class=\"line\"><span class=\"comment\"> * 3.将第i+1至第n位元素一次向前移动一个位置</span></span><br><span class=\"line\"><span class=\"comment\"> * 4.表长减一</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">int <span class=\"function\"><span class=\"title\">ListDelete</span>(<span class=\"params\">Sqlist *L<span class=\"comment\">/*Sqlist &amp;L*,int i,ElemType *e)&#123;</span></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"><span class=\"comment\">    if(i &lt; 1 || i &gt; L-&gt;len) return false;</span></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"><span class=\"comment\">    *e = L-&gt;elem[i - 1];//删除的值给到e</span></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"><span class=\"comment\">    for(int j = i; j &lt;= L-&gt;len - 1; j++)&#123;</span></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"><span class=\"comment\">        L-&gt;elem[j - 1] = L-&gt;elem[j];//依次前移</span></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"><span class=\"comment\">    &#125;</span></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"><span class=\"comment\">    L-&gt;len--;</span></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"><span class=\"comment\">    return true;</span></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"><span class=\"comment\">&#125;</span></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"><span class=\"comment\">//删除，插入的复杂度都是O(n);</span></span></span></span><br></pre></td></tr></table></div></figure>\n<p>还有其他的函数比如遍历就不写了。</p>\n\n        <h4 id=\"某些顺序-表操作\"   >\n          <a href=\"#某些顺序-表操作\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#某些顺序-表操作\" class=\"headerlink\" title=\"某些顺序`表操作\"></a>某些顺序`表操作</h4>\n      <p>顺序表合并`</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"function\"><span class=\"title\">unionList</span>(<span class=\"params\">Sqlist &amp;La, Sqlist Lb</span>)</span> &#123;</span><br><span class=\"line\">    int La_len = GetLength(La);</span><br><span class=\"line\">    int Lb_len = GetLength(Lb);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (int i = <span class=\"number\">1</span>; i &lt;= Lb_len; ++i) &#123;<span class=\"comment\">//查看链表b中是否存在链表a中的元素</span></span><br><span class=\"line\">        <span class=\"comment\">//因为查找的元素是序号，不是下标，从1开始</span></span><br><span class=\"line\">        ElemType e;</span><br><span class=\"line\">        GetElem(Lb,i,&amp;e);<span class=\"comment\">//得到b链表中的第i个值</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!LocateElem(La,e)) &#123; ListInsert(&amp;La, ++La_len, e); &#125;<span class=\"comment\">//a当最找到了e，那么加到a表尾，表长加一</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>有序表的合并：<br>两种都可以用，原理都相同，第二中再函数内申请了Lc的空间</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"function\"><span class=\"title\">MergeList_One</span>(<span class=\"params\">Sqlist La, Sqlist Lb, Sqlist &amp;Lc</span>)</span>&#123;</span><br><span class=\"line\">    int i=<span class=\"number\">0</span>,j=<span class=\"number\">0</span>,k=<span class=\"number\">0</span>;<span class=\"comment\">//分别表示三个表到了哪个位置</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>((i &lt; La.len) &amp;&amp; (j &lt; Lb.len))&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(La.elem[i] &lt;= Lb.elem[j])</span><br><span class=\"line\">            Lc.elem[k++]=La.elem[i++];</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            Lc.elem[k++] = Lb.elem[j++];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(i &lt; La.len)&#123;</span><br><span class=\"line\">        Lc.elem[k++] = La.elem[i++];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(j &lt; Lb.len)&#123;</span><br><span class=\"line\">        Lc.elem[k++]=Lb.elem[j++];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Lc.len = k;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"function\"><span class=\"title\">MergeList_Two</span>(<span class=\"params\">Sqlist La, Sqlist Lb, Sqlist &amp;Lc</span>)</span>&#123;</span><br><span class=\"line\">    ElemType *pa = La.elem;</span><br><span class=\"line\">    ElemType *pb = Lb.elem;<span class=\"comment\">//pa,pa分别指向La,Lb第一个元素</span></span><br><span class=\"line\">    Lc.len = La.len + Lb.len;<span class=\"comment\">//Lc的长度</span></span><br><span class=\"line\">    Lc.elem = (ElemType *)malloc(MAXSIZE * sizeof(ElemType));<span class=\"comment\">//得到全部空间</span></span><br><span class=\"line\">    ElemType *pc = Lc.elem;</span><br><span class=\"line\">    ElemType *paLast = La.elem + La.len - <span class=\"number\">1</span>;</span><br><span class=\"line\">    ElemType *pbLast = Lb.elem + Lb.len - <span class=\"number\">1</span>;<span class=\"comment\">//指向最后一个元素的指针</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (pa &lt;= paLast &amp;&amp; pb &lt;= pbLast)&#123;</span><br><span class=\"line\">        <span class=\"comment\">//依次拿比较小的</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(*pa &lt;= *pb)</span><br><span class=\"line\">            *pc++ = *pa++;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            *pc++ = *pb++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//La还没拿完</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (pa &lt;= paLast)</span><br><span class=\"line\">        *pc++ = *pa++;</span><br><span class=\"line\">    <span class=\"comment\">//Lb还没拿完</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (pb &lt;= pbLast)</span><br><span class=\"line\">        *pc++ = *pb++;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p><em>代码会传到我的github上，还有一个引用版本的，更简单</em></p>\n\n        <h3 id=\"特点\"   >\n          <a href=\"#特点\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#特点\" class=\"headerlink\" title=\"特点\"></a>特点</h3>\n      <p>优点：</p>\n<ul>\n<li>存储密度大（节点本身所占存储量/结点结构所占存储量）</li>\n<li>可以随机存取表中任意元素<br>缺点：</li>\n<li>在插入，删除某一元素时，需要移动大量元素</li>\n<li>浪费储存空间</li>\n<li>属于静态储存形式，数据元素的个数不能自由扩充</li>\n</ul>\n<p>克服缺点，就使用链表。</p>\n","site":{"data":{}},"excerpt":"","more":"\n        <h3 id=\"线性表的定义和特点\"   >\n          <a href=\"#线性表的定义和特点\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#线性表的定义和特点\" class=\"headerlink\" title=\"线性表的定义和特点\"></a>线性表的定义和特点</h3>\n      \n        <h3 id=\"线性表的定义和特点-1\"   >\n          <a href=\"#线性表的定义和特点-1\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#线性表的定义和特点-1\" class=\"headerlink\" title=\"线性表的定义和特点\"></a>线性表的定义和特点</h3>\n      <p>定义：线性表是具有<strong>相同特性</strong>的数据结构元素（由n[n&gt;=0]个数据元素（结点）a1,a2……an组成的）的一个有限序列。</p>\n<ul>\n<li>其中数据原始的个数n定义为表的长度</li>\n<li>当n = 0时称为空表</li>\n<li>将非空线性表（n &gt; 0）记作：（a1,a2……an）</li>\n<li>这里的数据袁术ai只是一个丑行的符号其具体含义在不同情况下可以不同</li>\n<li>同一线性表的原始必定具有相同特性，数据元素之间是线性关系\n        <h4 id=\"线性表类型定义\"   >\n          <a href=\"#线性表类型定义\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#线性表类型定义\" class=\"headerlink\" title=\"线性表类型定义\"></a>线性表类型定义</h4>\n      抽象数据类型线性表的定义：<br><img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/fdb4e6b7f1844c79b0f10b9ea843da6f~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\"><br>有以下操作：<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Ooeration:</span><br><span class=\"line\">    InitList(*L<span class=\"comment\">/*&amp;L*)//初始化操作，建立一个新的线性表L</span></span><br><span class=\"line\"><span class=\"comment\">    GetLength(Sqlist L);//返回线性表的长度</span></span><br><span class=\"line\"><span class=\"comment\">    ListEmpty(L)//线性表已存在，若线性表为空表，则返回TURE，否则返回FALSE</span></span><br><span class=\"line\"><span class=\"comment\">    DestroyList(*L/*&amp;L*)//线性表已存在，销毁线性表</span></span><br><span class=\"line\"><span class=\"comment\">    ClearList(*L)//线性表已存在，清空线性表（置为空表）</span></span><br><span class=\"line\"><span class=\"comment\">    GetElem(L,i,&amp;e)//线性表已存在，用e返回表中第i个元素</span></span><br><span class=\"line\"><span class=\"comment\">    LocateElem(L,e,cmp())//线性表已存在，cmp()是数据元素的判定函数（= &lt; &gt;）,返回L中第一个满足cmp()的数据元素的序号。若不此女子这样的数据元素则返回0</span></span><br><span class=\"line\"><span class=\"comment\">    PriorElem(L,cur,pre)//线性表已存在，若cur是L的数据元素且不是第一个，则用pre返回cur的前驱，否则返回失败（pre无意义）</span></span><br><span class=\"line\"><span class=\"comment\">    NextElem(L,cur,next)//线性表已存在。若cur是L的数据元素且不是最后一个，则用next返回cur的前驱，否则返回失败（next无意义）</span></span><br><span class=\"line\"><span class=\"comment\">    ListInsert(*L/*&amp;L*,i,e)//线性表已存在，且1&lt;=i&lt;=len_s+1。在L的第i个位置之前插入新的数据元素e，L的长的（len_s）加一</span></span><br><span class=\"line\"><span class=\"comment\">    ListDelete(*L/*&amp;L*,i,&amp;e)//线性表已存在,且1&lt;=i&lt;=len_s。删除L的第i个数据元素，并用e返回其值，L长度减一</span></span><br><span class=\"line\"><span class=\"comment\">    ListTraverse(L,visited())//线性表已存在。一次对线性表中每个元素用visited()[遍历之后，输出，修改之类~~]</span></span><br><span class=\"line\"><span class=\"comment\">    </span></span><br></pre></td></tr></table></div></figure>\n发现上面各函数的传入的参数各有不同，其中有一点差别的是表头的传入，一些是L，一些是<em>L，那么什么时候传入什么呢，其**</em>实如果函数会改变指针L的值（改变表的地址）,而你希望函数结束调用后保存L的值,那你就要用LinkList <em>L,这样,向函数传递的就是指针的地址,结束调用后,自然就可以去改变指针的值;*</em><br>而如果函数只会修改指针所指向的内容,而不会更改指针的值,那么用LinkList L就行了;<br>举个例子：清空线性表，函数调用完毕后,链表被清空，L会指向一个空的链表,即会改变指针的值,所以要用*L，而插入元素这种，不会改变链表的地址，所以传入L就好！！\n        <h3 id=\"线性表的储存结构\"   >\n          <a href=\"#线性表的储存结构\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#线性表的储存结构\" class=\"headerlink\" title=\"线性表的储存结构\"></a>线性表的储存结构</h3>\n      计算机中，线性表有两种基本的粗存结构：顺序储存结构和链式储存结构\n        <h4 id=\"线性表的顺序表示和实现\"   >\n          <a href=\"#线性表的顺序表示和实现\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#线性表的顺序表示和实现\" class=\"headerlink\" title=\"线性表的顺序表示和实现\"></a>线性表的顺序表示和实现</h4>\n      顺序储存定义把逻辑上相邻的数据元素储存在物理上相邻的储存单元中的储存结构。</li>\n</ul>\n<p>如下顺序储存结构占据一片连续的空间[地址连续]（知道某个元素的储存位置就可以计算其他元素的储存位置）：</p>\n<p><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b3fa5f54701246ca8cac5fea77682495~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\"><br>线性表中第一个数据元素a1的储存位置，作为线性表的起始位置或基地址。</p>\n<p>顺序表是利用元素的储存位置表示线性表中相邻元素之前的前后关系，即顺序表（线性表）的逻辑结构和存储结构一致。我们<strong>用一维数组表示顺序表</strong>，但是数组长度是不能动态定义的（数组长度不等于线性表长度），我们就用一个变量表示顺序表的长度属性：<br><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4731deb1d4e14b2b978cfafb63a27008~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\"><br>然后我们来进行函数的实现：</p>\n\n        <h3 id=\"函数\"   >\n          <a href=\"#函数\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h3>\n      <p><code>我们提前定义一下Status为函数的类型（返回值），ElemType是表中元素的值。还有一些其他定义下面再说</code></p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//初始化</span></span><br><span class=\"line\">Status <span class=\"function\"><span class=\"title\">InitList</span>(<span class=\"params\">Sqlist *L<span class=\"comment\">/*Sqlist &amp;L*)&#123;</span></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"><span class=\"comment\">    L-&gt;elem = (ElemType *)malloc(MAXSIZE * sizeof(ElemType));//得到全部空间</span></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"><span class=\"comment\">    if(!L-&gt;elem) return false;//分配空间失败</span></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"><span class=\"comment\">    L-&gt;len = 0;//线性表长度为0</span></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"><span class=\"comment\">    return OK;//创建成功</span></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"><span class=\"comment\">&#125;</span></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"><span class=\"comment\"></span></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"><span class=\"comment\"> &#125;</span></span></span></span><br></pre></td></tr></table></div></figure>\n\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//删除表</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"function\"><span class=\"title\">DestroyList</span>(<span class=\"params\">Sqlist *L<span class=\"comment\">/*Sqlist &amp;L*)&#123;</span></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"><span class=\"comment\">    if(L-&gt;elem) free(L-&gt;elem);//释放空间</span></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"><span class=\"comment\">    L-&gt;elem = NULL;</span></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"><span class=\"comment\">    L-&gt;len = 0;//</span></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"><span class=\"comment\">&#125;</span></span></span></span><br></pre></td></tr></table></div></figure>\n\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//清空表</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"function\"><span class=\"title\">ClearList</span>(<span class=\"params\">Sqlist *L<span class=\"comment\">/*Sqlist &amp;L*)&#123;</span></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"><span class=\"comment\">    L-&gt;len = 0;//直接清空</span></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"><span class=\"comment\">&#125;</span></span></span></span><br></pre></td></tr></table></div></figure>\n\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//得到线性表长度</span></span><br><span class=\"line\">int <span class=\"function\"><span class=\"title\">GetLength</span>(<span class=\"params\">Sqlist L</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> L.len;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//判断是否空表</span></span><br><span class=\"line\">int <span class=\"function\"><span class=\"title\">listEmpty</span>(<span class=\"params\">Sqlist L</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(L.len == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">////根据位置i得到对应位置数据元素的值</span></span><br><span class=\"line\">int <span class=\"function\"><span class=\"title\">GetElem</span>(<span class=\"params\">Sqlist L,int i, ElemType &amp;e</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(i &lt; <span class=\"number\">1</span> || i &gt; L.len) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    e = L.elem[i - <span class=\"number\">1</span>];<span class=\"comment\">//第i-1个位置储存这第i个数据，从0开始</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></div></figure>\n\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//按值查找（找相同的，查找成功返回序号，失败返回false）</span></span><br><span class=\"line\">int <span class=\"function\"><span class=\"title\">LocateElem</span>(<span class=\"params\">Sqlist L, ElemType e</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(int i = <span class=\"number\">0</span>; i &lt; L.len; i++)</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(L.elem[i] == e) <span class=\"keyword\">return</span> i+<span class=\"number\">1</span>;<span class=\"comment\">//查找成功，返回序号</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;<span class=\"comment\">//查找失败</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<blockquote>\n<p><em>平均查找长度</em> ASL（Average Search Length）:为了确定记录在表中的位置，需要与给定值进行比较关键字的个数的期望值叫做查找算法的平均查找长度   ASL = ΣPiCi[第i个元素被查找的概率；找到第i个记录需要比较的次数]</p>\n</blockquote>\n<p>插入函数，插入到哪个位置，一个表有N个元素可以插入到0~N+1的位置。若是元素已经满了，那就溢出了。</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7343c51e392c4d859d91f055fa66f958~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\"></p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * 1.判断插入位置i是否合法</span></span><br><span class=\"line\"><span class=\"comment\"> * 2.判断顺序表的储存空间是否已满，若已满返回ERROR</span></span><br><span class=\"line\"><span class=\"comment\"> * 3.将第n至第i位的元素一次向后移动一个位置，空出第i个位置</span></span><br><span class=\"line\"><span class=\"comment\"> * 4.将要插入的新元素e放入第i个位置</span></span><br><span class=\"line\"><span class=\"comment\"> * 5.表长加一，返回OK</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">int <span class=\"function\"><span class=\"title\">ListInsert</span>(<span class=\"params\">Sqlist *L<span class=\"comment\">/*Sqlist &amp;L*/</span>,int i,ElemType e</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(i &lt; <span class=\"number\">1</span> || i &gt; L-&gt;len + <span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(L-&gt;len == MAXSIZE) <span class=\"keyword\">return</span>  <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(int j = L-&gt;len - <span class=\"number\">1</span>; j &gt;= i - <span class=\"number\">1</span>; j--)&#123;</span><br><span class=\"line\">        L-&gt;elem[j + <span class=\"number\">1</span>] = L-&gt;elem[j];<span class=\"comment\">//向后移</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    L-&gt;elem[i - <span class=\"number\">1</span>] = e;</span><br><span class=\"line\">    L-&gt;len++;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//删除元素,删除位置，最前面，中间，最后</span></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * 1.判断删除位置i是否合法（1~n）</span></span><br><span class=\"line\"><span class=\"comment\"> * 2.将欲删除的元素保留在e中</span></span><br><span class=\"line\"><span class=\"comment\"> * 3.将第i+1至第n位元素一次向前移动一个位置</span></span><br><span class=\"line\"><span class=\"comment\"> * 4.表长减一</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">int <span class=\"function\"><span class=\"title\">ListDelete</span>(<span class=\"params\">Sqlist *L<span class=\"comment\">/*Sqlist &amp;L*,int i,ElemType *e)&#123;</span></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"><span class=\"comment\">    if(i &lt; 1 || i &gt; L-&gt;len) return false;</span></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"><span class=\"comment\">    *e = L-&gt;elem[i - 1];//删除的值给到e</span></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"><span class=\"comment\">    for(int j = i; j &lt;= L-&gt;len - 1; j++)&#123;</span></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"><span class=\"comment\">        L-&gt;elem[j - 1] = L-&gt;elem[j];//依次前移</span></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"><span class=\"comment\">    &#125;</span></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"><span class=\"comment\">    L-&gt;len--;</span></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"><span class=\"comment\">    return true;</span></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"><span class=\"comment\">&#125;</span></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"><span class=\"comment\">//删除，插入的复杂度都是O(n);</span></span></span></span><br></pre></td></tr></table></div></figure>\n<p>还有其他的函数比如遍历就不写了。</p>\n\n        <h4 id=\"某些顺序-表操作\"   >\n          <a href=\"#某些顺序-表操作\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#某些顺序-表操作\" class=\"headerlink\" title=\"某些顺序`表操作\"></a>某些顺序`表操作</h4>\n      <p>顺序表合并`</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"function\"><span class=\"title\">unionList</span>(<span class=\"params\">Sqlist &amp;La, Sqlist Lb</span>)</span> &#123;</span><br><span class=\"line\">    int La_len = GetLength(La);</span><br><span class=\"line\">    int Lb_len = GetLength(Lb);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (int i = <span class=\"number\">1</span>; i &lt;= Lb_len; ++i) &#123;<span class=\"comment\">//查看链表b中是否存在链表a中的元素</span></span><br><span class=\"line\">        <span class=\"comment\">//因为查找的元素是序号，不是下标，从1开始</span></span><br><span class=\"line\">        ElemType e;</span><br><span class=\"line\">        GetElem(Lb,i,&amp;e);<span class=\"comment\">//得到b链表中的第i个值</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!LocateElem(La,e)) &#123; ListInsert(&amp;La, ++La_len, e); &#125;<span class=\"comment\">//a当最找到了e，那么加到a表尾，表长加一</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>有序表的合并：<br>两种都可以用，原理都相同，第二中再函数内申请了Lc的空间</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"function\"><span class=\"title\">MergeList_One</span>(<span class=\"params\">Sqlist La, Sqlist Lb, Sqlist &amp;Lc</span>)</span>&#123;</span><br><span class=\"line\">    int i=<span class=\"number\">0</span>,j=<span class=\"number\">0</span>,k=<span class=\"number\">0</span>;<span class=\"comment\">//分别表示三个表到了哪个位置</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>((i &lt; La.len) &amp;&amp; (j &lt; Lb.len))&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(La.elem[i] &lt;= Lb.elem[j])</span><br><span class=\"line\">            Lc.elem[k++]=La.elem[i++];</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            Lc.elem[k++] = Lb.elem[j++];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(i &lt; La.len)&#123;</span><br><span class=\"line\">        Lc.elem[k++] = La.elem[i++];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(j &lt; Lb.len)&#123;</span><br><span class=\"line\">        Lc.elem[k++]=Lb.elem[j++];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Lc.len = k;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"function\"><span class=\"title\">MergeList_Two</span>(<span class=\"params\">Sqlist La, Sqlist Lb, Sqlist &amp;Lc</span>)</span>&#123;</span><br><span class=\"line\">    ElemType *pa = La.elem;</span><br><span class=\"line\">    ElemType *pb = Lb.elem;<span class=\"comment\">//pa,pa分别指向La,Lb第一个元素</span></span><br><span class=\"line\">    Lc.len = La.len + Lb.len;<span class=\"comment\">//Lc的长度</span></span><br><span class=\"line\">    Lc.elem = (ElemType *)malloc(MAXSIZE * sizeof(ElemType));<span class=\"comment\">//得到全部空间</span></span><br><span class=\"line\">    ElemType *pc = Lc.elem;</span><br><span class=\"line\">    ElemType *paLast = La.elem + La.len - <span class=\"number\">1</span>;</span><br><span class=\"line\">    ElemType *pbLast = Lb.elem + Lb.len - <span class=\"number\">1</span>;<span class=\"comment\">//指向最后一个元素的指针</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (pa &lt;= paLast &amp;&amp; pb &lt;= pbLast)&#123;</span><br><span class=\"line\">        <span class=\"comment\">//依次拿比较小的</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(*pa &lt;= *pb)</span><br><span class=\"line\">            *pc++ = *pa++;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            *pc++ = *pb++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//La还没拿完</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (pa &lt;= paLast)</span><br><span class=\"line\">        *pc++ = *pa++;</span><br><span class=\"line\">    <span class=\"comment\">//Lb还没拿完</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (pb &lt;= pbLast)</span><br><span class=\"line\">        *pc++ = *pb++;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p><em>代码会传到我的github上，还有一个引用版本的，更简单</em></p>\n\n        <h3 id=\"特点\"   >\n          <a href=\"#特点\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#特点\" class=\"headerlink\" title=\"特点\"></a>特点</h3>\n      <p>优点：</p>\n<ul>\n<li>存储密度大（节点本身所占存储量/结点结构所占存储量）</li>\n<li>可以随机存取表中任意元素<br>缺点：</li>\n<li>在插入，删除某一元素时，需要移动大量元素</li>\n<li>浪费储存空间</li>\n<li>属于静态储存形式，数据元素的个数不能自由扩充</li>\n</ul>\n<p>克服缺点，就使用链表。</p>\n"},{"title":"Acwing788","date":"2021-09-30T12:35:29.000Z","_content":"给定一个长度为 n 的整数数列，请你计算数列中的逆序对的数量。\n\n逆序对的定义如下：对于数列的第 i 个和第 j 个元素，如果满足 i<j且 a[i]>a[j]，则其为一个逆序对；否则不是。\n\n#### 输入格式\n\n第一行包含整数 nn，表示数列的长度。\n\n第二行包含 nn 个整数，表示整个数列。\n\n#### 输出格式\n\n输出一个整数，表示逆序对的个数。\n\n#### 数据范围\n\n1≤n≤1000001≤n≤100000，\\\n数列中的元素的取值范围 [1,10^9]\n\n#### 输入样例：\n\n```\n6\n2 3 4 5 6 1\n```\n\n#### 输出样例：\n\n```\n5\n```\n#### 思路：\n根据题目我们给出逆序对的定义：  \n对于数列的第 i 个和第 j 个元素，如果满足 i < j 且 a[i] > a[j]，则其为一个逆序对。\n有一个重要的地方在于，一个元素可以不只是在一个逆序对中存在。如果 k > j > i 且 a[i] > a[j] > a[k]，那么这里有两个含 a[i] 的逆序对，分别是 (a[i], a[j]) 和 (a[i], a[k]), 即a[i]是可以使用多次的。\n\n知道定义后来思考如何解决问题,我们以分治思想来解决问题，将区间一分为二，所有的逆序对以中间为划分分为三类\n- 两个元素都在左边的（左半边逆序对的数量：merge-sort(l,mid)）\n- 两个元素都在右边的（右半边逆序对的数量：merge_sort(mid + 1,r)）\n- 两个元素一左一右的（）\n\n我们要做的就是分别递归左边和右边寻找逆序对，最后计算一个在左边一个在右边的情况（归并）。把所有的加在一起就是答案。在第三步计算元素分别在左右两边的逆序对的时候，先对左右分别进行排序，这样并不会改变答案（**一个很重要的性质，左右半边的元素在各自任意调换顺序，是不影响第三步计数的**），但是可以让第三步计算变得很简单。\n> 7 8 9 | 4 5 6 \n\n显然在7 > 4后，在左边7后面所有的数都大于4，就不继续计算，只用加上后面的元素个数就行了，很自然的，用到了归并排序的思想。\n\n\n```js\n//foreverking\n#include <vector>\n#include <cstdio>\n#include <queue>\n#include <algorithm>\n#include <cstring>\n#include <iostream>\n#include <cmath>\nusing namespace std;\n//对于数列的第 i 个和第 j 个元素，如果满足 i<j 且 a[i]>a[j]，则其为一个逆序对；否则不是。\n\nconst int N = 100010;\nint n;\nlong long cnt;\nint q[N],tep[N];\n\n\nvoid merge_sortfind(int q[],int l,int r){\n    if(l >= r) return;\n    int mid = (l + r) >> 1;\n\n    merge_sortfind(q,l,mid),merge_sortfind(q,mid + 1,r);\n    int k = 0,i = l,j = mid + 1;\n    while(i <= mid && j <= r){\n        if(q[i] <= q[j]) tep[k++] = q[i++];//不满足，往后加\n        else{\n            tep[k++] = q[j++];\n            cnt += (mid - i + 1);//直接加，因为排序后左边有一个大于右边的某数，那么此数后面所有都大于右边的某数\n        }\n    }\n\n    while(i <= mid) tep[k++] = q[i++];\n    while(j <= r) tep[k++] = q[j++];\n\n    for(i = l,j = 0;i <= r;i++,j++) q[i] = tep[j];\n}\n\nint main(){\n    scanf(\"%d\",&n);\n    for(int i = 0; i < n; i++) scanf(\"%d\",&q[i]);\n\n    merge_sortfind(q,0,n - 1);\n    cout << cnt;\n    return 0;\n}\n```","source":"_posts/Acwing788.md","raw":"---\ntitle: Acwing788\ndate: 2021-09-30 20:35:29\ntags: \n    - Study\n    - 排序\ncategories: \n    - 题解\n    - Acwing\n---\n给定一个长度为 n 的整数数列，请你计算数列中的逆序对的数量。\n\n逆序对的定义如下：对于数列的第 i 个和第 j 个元素，如果满足 i<j且 a[i]>a[j]，则其为一个逆序对；否则不是。\n\n#### 输入格式\n\n第一行包含整数 nn，表示数列的长度。\n\n第二行包含 nn 个整数，表示整个数列。\n\n#### 输出格式\n\n输出一个整数，表示逆序对的个数。\n\n#### 数据范围\n\n1≤n≤1000001≤n≤100000，\\\n数列中的元素的取值范围 [1,10^9]\n\n#### 输入样例：\n\n```\n6\n2 3 4 5 6 1\n```\n\n#### 输出样例：\n\n```\n5\n```\n#### 思路：\n根据题目我们给出逆序对的定义：  \n对于数列的第 i 个和第 j 个元素，如果满足 i < j 且 a[i] > a[j]，则其为一个逆序对。\n有一个重要的地方在于，一个元素可以不只是在一个逆序对中存在。如果 k > j > i 且 a[i] > a[j] > a[k]，那么这里有两个含 a[i] 的逆序对，分别是 (a[i], a[j]) 和 (a[i], a[k]), 即a[i]是可以使用多次的。\n\n知道定义后来思考如何解决问题,我们以分治思想来解决问题，将区间一分为二，所有的逆序对以中间为划分分为三类\n- 两个元素都在左边的（左半边逆序对的数量：merge-sort(l,mid)）\n- 两个元素都在右边的（右半边逆序对的数量：merge_sort(mid + 1,r)）\n- 两个元素一左一右的（）\n\n我们要做的就是分别递归左边和右边寻找逆序对，最后计算一个在左边一个在右边的情况（归并）。把所有的加在一起就是答案。在第三步计算元素分别在左右两边的逆序对的时候，先对左右分别进行排序，这样并不会改变答案（**一个很重要的性质，左右半边的元素在各自任意调换顺序，是不影响第三步计数的**），但是可以让第三步计算变得很简单。\n> 7 8 9 | 4 5 6 \n\n显然在7 > 4后，在左边7后面所有的数都大于4，就不继续计算，只用加上后面的元素个数就行了，很自然的，用到了归并排序的思想。\n\n\n```js\n//foreverking\n#include <vector>\n#include <cstdio>\n#include <queue>\n#include <algorithm>\n#include <cstring>\n#include <iostream>\n#include <cmath>\nusing namespace std;\n//对于数列的第 i 个和第 j 个元素，如果满足 i<j 且 a[i]>a[j]，则其为一个逆序对；否则不是。\n\nconst int N = 100010;\nint n;\nlong long cnt;\nint q[N],tep[N];\n\n\nvoid merge_sortfind(int q[],int l,int r){\n    if(l >= r) return;\n    int mid = (l + r) >> 1;\n\n    merge_sortfind(q,l,mid),merge_sortfind(q,mid + 1,r);\n    int k = 0,i = l,j = mid + 1;\n    while(i <= mid && j <= r){\n        if(q[i] <= q[j]) tep[k++] = q[i++];//不满足，往后加\n        else{\n            tep[k++] = q[j++];\n            cnt += (mid - i + 1);//直接加，因为排序后左边有一个大于右边的某数，那么此数后面所有都大于右边的某数\n        }\n    }\n\n    while(i <= mid) tep[k++] = q[i++];\n    while(j <= r) tep[k++] = q[j++];\n\n    for(i = l,j = 0;i <= r;i++,j++) q[i] = tep[j];\n}\n\nint main(){\n    scanf(\"%d\",&n);\n    for(int i = 0; i < n; i++) scanf(\"%d\",&q[i]);\n\n    merge_sortfind(q,0,n - 1);\n    cout << cnt;\n    return 0;\n}\n```","slug":"Acwing788","published":1,"updated":"2021-09-30T12:36:02.778Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cku6xacp90000kcwscla9du0u","content":"<p>给定一个长度为 n 的整数数列，请你计算数列中的逆序对的数量。</p>\n<p>逆序对的定义如下：对于数列的第 i 个和第 j 个元素，如果满足 i&lt;j且 a[i]&gt;a[j]，则其为一个逆序对；否则不是。</p>\n\n        <h4 id=\"输入格式\"   >\n          <a href=\"#输入格式\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#输入格式\" class=\"headerlink\" title=\"输入格式\"></a>输入格式</h4>\n      <p>第一行包含整数 nn，表示数列的长度。</p>\n<p>第二行包含 nn 个整数，表示整个数列。</p>\n\n        <h4 id=\"输出格式\"   >\n          <a href=\"#输出格式\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#输出格式\" class=\"headerlink\" title=\"输出格式\"></a>输出格式</h4>\n      <p>输出一个整数，表示逆序对的个数。</p>\n\n        <h4 id=\"数据范围\"   >\n          <a href=\"#数据范围\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#数据范围\" class=\"headerlink\" title=\"数据范围\"></a>数据范围</h4>\n      <p>1≤n≤1000001≤n≤100000，<br>数列中的元素的取值范围 [1,10^9]</p>\n\n        <h4 id=\"输入样例：\"   >\n          <a href=\"#输入样例：\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#输入样例：\" class=\"headerlink\" title=\"输入样例：\"></a>输入样例：</h4>\n      <figure class=\"highlight plain\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">6</span><br><span class=\"line\">2 3 4 5 6 1</span><br></pre></td></tr></table></div></figure>\n\n\n        <h4 id=\"输出样例：\"   >\n          <a href=\"#输出样例：\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#输出样例：\" class=\"headerlink\" title=\"输出样例：\"></a>输出样例：</h4>\n      <figure class=\"highlight plain\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">5</span><br></pre></td></tr></table></div></figure>\n\n        <h4 id=\"思路：\"   >\n          <a href=\"#思路：\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#思路：\" class=\"headerlink\" title=\"思路：\"></a>思路：</h4>\n      <p>根据题目我们给出逆序对的定义：<br>对于数列的第 i 个和第 j 个元素，如果满足 i &lt; j 且 a[i] &gt; a[j]，则其为一个逆序对。<br>有一个重要的地方在于，一个元素可以不只是在一个逆序对中存在。如果 k &gt; j &gt; i 且 a[i] &gt; a[j] &gt; a[k]，那么这里有两个含 a[i] 的逆序对，分别是 (a[i], a[j]) 和 (a[i], a[k]), 即a[i]是可以使用多次的。</p>\n<p>知道定义后来思考如何解决问题,我们以分治思想来解决问题，将区间一分为二，所有的逆序对以中间为划分分为三类</p>\n<ul>\n<li>两个元素都在左边的（左半边逆序对的数量：merge-sort(l,mid)）</li>\n<li>两个元素都在右边的（右半边逆序对的数量：merge_sort(mid + 1,r)）</li>\n<li>两个元素一左一右的（）</li>\n</ul>\n<p>我们要做的就是分别递归左边和右边寻找逆序对，最后计算一个在左边一个在右边的情况（归并）。把所有的加在一起就是答案。在第三步计算元素分别在左右两边的逆序对的时候，先对左右分别进行排序，这样并不会改变答案（<strong>一个很重要的性质，左右半边的元素在各自任意调换顺序，是不影响第三步计数的</strong>），但是可以让第三步计算变得很简单。</p>\n<blockquote>\n<p>7 8 9 | 4 5 6 </p>\n</blockquote>\n<p>显然在7 &gt; 4后，在左边7后面所有的数都大于4，就不继续计算，只用加上后面的元素个数就行了，很自然的，用到了归并排序的思想。</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//foreverking</span></span><br><span class=\"line\">#include &lt;vector&gt;</span><br><span class=\"line\">#include &lt;cstdio&gt;</span><br><span class=\"line\">#include &lt;queue&gt;</span><br><span class=\"line\">#include &lt;algorithm&gt;</span><br><span class=\"line\">#include &lt;cstring&gt;</span><br><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">#include &lt;cmath&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\"><span class=\"comment\">//对于数列的第 i 个和第 j 个元素，如果满足 i&lt;j 且 a[i]&gt;a[j]，则其为一个逆序对；否则不是。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> int N = <span class=\"number\">100010</span>;</span><br><span class=\"line\">int n;</span><br><span class=\"line\">long long cnt;</span><br><span class=\"line\">int q[N],tep[N];</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"function\"><span class=\"title\">merge_sortfind</span>(<span class=\"params\">int q[],int l,int r</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(l &gt;= r) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    int mid = (l + r) &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    merge_sortfind(q,l,mid),merge_sortfind(q,mid + <span class=\"number\">1</span>,r);</span><br><span class=\"line\">    int k = <span class=\"number\">0</span>,i = l,j = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(i &lt;= mid &amp;&amp; j &lt;= r)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(q[i] &lt;= q[j]) tep[k++] = q[i++];<span class=\"comment\">//不满足，往后加</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            tep[k++] = q[j++];</span><br><span class=\"line\">            cnt += (mid - i + <span class=\"number\">1</span>);<span class=\"comment\">//直接加，因为排序后左边有一个大于右边的某数，那么此数后面所有都大于右边的某数</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(i &lt;= mid) tep[k++] = q[i++];</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(j &lt;= r) tep[k++] = q[j++];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(i = l,j = <span class=\"number\">0</span>;i &lt;= r;i++,j++) q[i] = tep[j];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">int <span class=\"function\"><span class=\"title\">main</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    scanf(<span class=\"string\">&quot;%d&quot;</span>,&amp;n);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(int i = <span class=\"number\">0</span>; i &lt; n; i++) scanf(<span class=\"string\">&quot;%d&quot;</span>,&amp;q[i]);</span><br><span class=\"line\"></span><br><span class=\"line\">    merge_sortfind(q,<span class=\"number\">0</span>,n - <span class=\"number\">1</span>);</span><br><span class=\"line\">    cout &lt;&lt; cnt;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>","site":{"data":{}},"excerpt":"","more":"<p>给定一个长度为 n 的整数数列，请你计算数列中的逆序对的数量。</p>\n<p>逆序对的定义如下：对于数列的第 i 个和第 j 个元素，如果满足 i&lt;j且 a[i]&gt;a[j]，则其为一个逆序对；否则不是。</p>\n\n        <h4 id=\"输入格式\"   >\n          <a href=\"#输入格式\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#输入格式\" class=\"headerlink\" title=\"输入格式\"></a>输入格式</h4>\n      <p>第一行包含整数 nn，表示数列的长度。</p>\n<p>第二行包含 nn 个整数，表示整个数列。</p>\n\n        <h4 id=\"输出格式\"   >\n          <a href=\"#输出格式\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#输出格式\" class=\"headerlink\" title=\"输出格式\"></a>输出格式</h4>\n      <p>输出一个整数，表示逆序对的个数。</p>\n\n        <h4 id=\"数据范围\"   >\n          <a href=\"#数据范围\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#数据范围\" class=\"headerlink\" title=\"数据范围\"></a>数据范围</h4>\n      <p>1≤n≤1000001≤n≤100000，<br>数列中的元素的取值范围 [1,10^9]</p>\n\n        <h4 id=\"输入样例：\"   >\n          <a href=\"#输入样例：\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#输入样例：\" class=\"headerlink\" title=\"输入样例：\"></a>输入样例：</h4>\n      <figure class=\"highlight plain\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">6</span><br><span class=\"line\">2 3 4 5 6 1</span><br></pre></td></tr></table></div></figure>\n\n\n        <h4 id=\"输出样例：\"   >\n          <a href=\"#输出样例：\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#输出样例：\" class=\"headerlink\" title=\"输出样例：\"></a>输出样例：</h4>\n      <figure class=\"highlight plain\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">5</span><br></pre></td></tr></table></div></figure>\n\n        <h4 id=\"思路：\"   >\n          <a href=\"#思路：\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#思路：\" class=\"headerlink\" title=\"思路：\"></a>思路：</h4>\n      <p>根据题目我们给出逆序对的定义：<br>对于数列的第 i 个和第 j 个元素，如果满足 i &lt; j 且 a[i] &gt; a[j]，则其为一个逆序对。<br>有一个重要的地方在于，一个元素可以不只是在一个逆序对中存在。如果 k &gt; j &gt; i 且 a[i] &gt; a[j] &gt; a[k]，那么这里有两个含 a[i] 的逆序对，分别是 (a[i], a[j]) 和 (a[i], a[k]), 即a[i]是可以使用多次的。</p>\n<p>知道定义后来思考如何解决问题,我们以分治思想来解决问题，将区间一分为二，所有的逆序对以中间为划分分为三类</p>\n<ul>\n<li>两个元素都在左边的（左半边逆序对的数量：merge-sort(l,mid)）</li>\n<li>两个元素都在右边的（右半边逆序对的数量：merge_sort(mid + 1,r)）</li>\n<li>两个元素一左一右的（）</li>\n</ul>\n<p>我们要做的就是分别递归左边和右边寻找逆序对，最后计算一个在左边一个在右边的情况（归并）。把所有的加在一起就是答案。在第三步计算元素分别在左右两边的逆序对的时候，先对左右分别进行排序，这样并不会改变答案（<strong>一个很重要的性质，左右半边的元素在各自任意调换顺序，是不影响第三步计数的</strong>），但是可以让第三步计算变得很简单。</p>\n<blockquote>\n<p>7 8 9 | 4 5 6 </p>\n</blockquote>\n<p>显然在7 &gt; 4后，在左边7后面所有的数都大于4，就不继续计算，只用加上后面的元素个数就行了，很自然的，用到了归并排序的思想。</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//foreverking</span></span><br><span class=\"line\">#include &lt;vector&gt;</span><br><span class=\"line\">#include &lt;cstdio&gt;</span><br><span class=\"line\">#include &lt;queue&gt;</span><br><span class=\"line\">#include &lt;algorithm&gt;</span><br><span class=\"line\">#include &lt;cstring&gt;</span><br><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">#include &lt;cmath&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\"><span class=\"comment\">//对于数列的第 i 个和第 j 个元素，如果满足 i&lt;j 且 a[i]&gt;a[j]，则其为一个逆序对；否则不是。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> int N = <span class=\"number\">100010</span>;</span><br><span class=\"line\">int n;</span><br><span class=\"line\">long long cnt;</span><br><span class=\"line\">int q[N],tep[N];</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"function\"><span class=\"title\">merge_sortfind</span>(<span class=\"params\">int q[],int l,int r</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(l &gt;= r) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    int mid = (l + r) &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    merge_sortfind(q,l,mid),merge_sortfind(q,mid + <span class=\"number\">1</span>,r);</span><br><span class=\"line\">    int k = <span class=\"number\">0</span>,i = l,j = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(i &lt;= mid &amp;&amp; j &lt;= r)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(q[i] &lt;= q[j]) tep[k++] = q[i++];<span class=\"comment\">//不满足，往后加</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            tep[k++] = q[j++];</span><br><span class=\"line\">            cnt += (mid - i + <span class=\"number\">1</span>);<span class=\"comment\">//直接加，因为排序后左边有一个大于右边的某数，那么此数后面所有都大于右边的某数</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(i &lt;= mid) tep[k++] = q[i++];</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(j &lt;= r) tep[k++] = q[j++];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(i = l,j = <span class=\"number\">0</span>;i &lt;= r;i++,j++) q[i] = tep[j];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">int <span class=\"function\"><span class=\"title\">main</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    scanf(<span class=\"string\">&quot;%d&quot;</span>,&amp;n);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(int i = <span class=\"number\">0</span>; i &lt; n; i++) scanf(<span class=\"string\">&quot;%d&quot;</span>,&amp;q[i]);</span><br><span class=\"line\"></span><br><span class=\"line\">    merge_sortfind(q,<span class=\"number\">0</span>,n - <span class=\"number\">1</span>);</span><br><span class=\"line\">    cout &lt;&lt; cnt;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>"},{"title":"二分","date":"2021-10-04T05:09:39.000Z","_content":"\n第一次了解二分是在高中的数学课，当时没觉得多难，毕竟思想是很简单的。但在代码实现上却会遇到很多困难,最常见的也是最难的就是整数二分的边界问题。\n## 整数二分\n### 主要思路\n整数二分的思路是这样的：将整数序列分为两端，分界满足的条件，将区间化为左右两个部分，左边满足这个条件，右边不能满足这个条件（或者相反）。此时就用二分来来查找左右两部分的边界。所以所谓二分算法，就是我们知道当前的候选区间中,一定存在我们要找到的答案,而且我们发现这个区间拥有单调性质此类的性质,那么我们可以不停地缩减候选区间的范围,达到排除无用答案的效果，也就是找到正确答案（边界）。\n\n整数二分是有两个边界的，分别是左边的边界与右边的边界，即左右两半部分的边界不是同一个点，而是相邻的2个点，就像下面这个草图：\n\n![image.png](https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/632b12d0dd0741519d753a6a1e0afd7c~tplv-k3u1fbpfcp-watermark.image?)\n\n这就让我们的二分有两个模板，一个是找左边红色的边界，一个是找右边绿色的边界。实际运用时，先不考虑用哪个模板，而是先写`check()`函数，然后写模板（不考虑mid是否+1），写到`if(check(mid))`时，再考虑满足`check(mid)`条件的段是在哪一边：如果在左边红色，则填`l = mid`；如果在右边，则填`r = mid`。然后填出else的部分，最后看else后如果填写的是``-``，则要在mid声明处`+1`；反之不补。（简单的记忆就是，仅当采用`l = mid`这种更新方式时，计算`mid`时需要加1。）\n### 模板\n\n```js\nbool check(int x){/*检查x是否满足某个条件*/};\n//二分\nvoid bsearch_one(int l,int r){\n    while(l < r){\n        int mid = (l + r) >> 1;\n        if(check(mid)) r = mid;//检查\n        else l = mid + 1;\n    }\n}\n\nvoid bsearch_two(int l,int r){\n    while(l < r){\n        int mid = (l + r + 1) >> 1;\n        if(check(mid)) l = mid;//检查\n        else r = mid - 1;\n    }\n}\n```\n### 例子\n给定一个按照升序排列的长度为 nn 的整数数组，以及 qq 个查询。\n\n对于每个查询，返回一个元素 kk 的起始位置和终止位置（位置从 00 开始计数）。\n\n如果数组中不存在该元素，则返回 `-1 -1`。\n\n#### 输入格式\n\n第一行包含整数 nn 和 qq，表示数组长度和询问个数。\n\n第二行包含 nn 个整数（均在 1∼100001∼10000 范围内），表示完整数组。\n\n接下来 qq 行，每行包含一个整数 kk，表示一个询问元素。\n\n#### 输出格式\n\n共 qq 行，每行包含两个整数，表示所求元素的起始位置和终止位置。\n\n如果数组中不存在该元素，则返回 `-1 -1`。\n\n#### 数据范围\n\n1≤n≤1000001≤n≤100000\\\n1≤q≤100001≤q≤10000\\\n1≤k≤100001≤k≤10000\n\n#### 输入样例：\n\n```\n6 3\n1 2 2 3 3 4\n3\n4\n5\n```\n\n#### 输出样例：\n\n```\n3 4\n5 5\n-1 -1\n```\n\n```js\n//foreverking\n#include <vector>\n#include <cstdio>\n#include <queue>\n#include <algorithm>\n#include <cstring>\n#include <iostream>\n#include <cmath>\nusing namespace std;\n\nconst int N = 100001;\n\nint n,q,x;\nint a[N];\n\nint main(){\n    cin >> n >> q;\n    for(int i = 0; i < n; i++) cin >> a[i];\n\n    while(q--){\n        cin >> x;\n        int l = 0,r = n - 1;\n        while(l < r){\n            int mid = (l + r) >> 1;\n            if(a[mid] >= x) r = mid;\n            else l = mid + 1;\n        }\n\n        if(a[l] != x) cout << \"-1 -1\" << endl;\n        else{\n             cout << l << ' ';\n             //找左边界，第二个模板\n             int l = 0,r = n - 1;\n             while(l < r){\n                 int mid = (l +  r + 1) >> 1;\n                 if(a[mid] <= x) l = mid;\n                 else r = mid - 1;\n             }\n             cout << l << endl;\n        }   \n    }\n\n    return 0;\n}\n```\n分别找出左边边界和右边边界就是答案，找不到就输出-1。\n## 浮点二分\n浮点二分就简单许多，因为没有边界问题。\n### 模板\n\n```js\n//浮点二分\nbool check(double x) {/* ... */} // 检查x是否满足某种性质\n\nvoid bsearch_3(double l, double r)\n{\n    const double eps = 1e-6;   // eps 表示精度，取决于题目对精度的要求\n    while (r - l > eps)\n    {\n        double mid = (l + r) / 2;\n        if (check(mid)) r = mid;\n        else l = mid;\n    }\n}\n```\n","source":"_posts/二分.md","raw":"---\ntitle: 二分\ndate: 2021-10-04 13:09:39\ntags: \n    - Study\n    - 二分\ncategories: \n    - 算法\n    - 二分\n---\n\n第一次了解二分是在高中的数学课，当时没觉得多难，毕竟思想是很简单的。但在代码实现上却会遇到很多困难,最常见的也是最难的就是整数二分的边界问题。\n## 整数二分\n### 主要思路\n整数二分的思路是这样的：将整数序列分为两端，分界满足的条件，将区间化为左右两个部分，左边满足这个条件，右边不能满足这个条件（或者相反）。此时就用二分来来查找左右两部分的边界。所以所谓二分算法，就是我们知道当前的候选区间中,一定存在我们要找到的答案,而且我们发现这个区间拥有单调性质此类的性质,那么我们可以不停地缩减候选区间的范围,达到排除无用答案的效果，也就是找到正确答案（边界）。\n\n整数二分是有两个边界的，分别是左边的边界与右边的边界，即左右两半部分的边界不是同一个点，而是相邻的2个点，就像下面这个草图：\n\n![image.png](https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/632b12d0dd0741519d753a6a1e0afd7c~tplv-k3u1fbpfcp-watermark.image?)\n\n这就让我们的二分有两个模板，一个是找左边红色的边界，一个是找右边绿色的边界。实际运用时，先不考虑用哪个模板，而是先写`check()`函数，然后写模板（不考虑mid是否+1），写到`if(check(mid))`时，再考虑满足`check(mid)`条件的段是在哪一边：如果在左边红色，则填`l = mid`；如果在右边，则填`r = mid`。然后填出else的部分，最后看else后如果填写的是``-``，则要在mid声明处`+1`；反之不补。（简单的记忆就是，仅当采用`l = mid`这种更新方式时，计算`mid`时需要加1。）\n### 模板\n\n```js\nbool check(int x){/*检查x是否满足某个条件*/};\n//二分\nvoid bsearch_one(int l,int r){\n    while(l < r){\n        int mid = (l + r) >> 1;\n        if(check(mid)) r = mid;//检查\n        else l = mid + 1;\n    }\n}\n\nvoid bsearch_two(int l,int r){\n    while(l < r){\n        int mid = (l + r + 1) >> 1;\n        if(check(mid)) l = mid;//检查\n        else r = mid - 1;\n    }\n}\n```\n### 例子\n给定一个按照升序排列的长度为 nn 的整数数组，以及 qq 个查询。\n\n对于每个查询，返回一个元素 kk 的起始位置和终止位置（位置从 00 开始计数）。\n\n如果数组中不存在该元素，则返回 `-1 -1`。\n\n#### 输入格式\n\n第一行包含整数 nn 和 qq，表示数组长度和询问个数。\n\n第二行包含 nn 个整数（均在 1∼100001∼10000 范围内），表示完整数组。\n\n接下来 qq 行，每行包含一个整数 kk，表示一个询问元素。\n\n#### 输出格式\n\n共 qq 行，每行包含两个整数，表示所求元素的起始位置和终止位置。\n\n如果数组中不存在该元素，则返回 `-1 -1`。\n\n#### 数据范围\n\n1≤n≤1000001≤n≤100000\\\n1≤q≤100001≤q≤10000\\\n1≤k≤100001≤k≤10000\n\n#### 输入样例：\n\n```\n6 3\n1 2 2 3 3 4\n3\n4\n5\n```\n\n#### 输出样例：\n\n```\n3 4\n5 5\n-1 -1\n```\n\n```js\n//foreverking\n#include <vector>\n#include <cstdio>\n#include <queue>\n#include <algorithm>\n#include <cstring>\n#include <iostream>\n#include <cmath>\nusing namespace std;\n\nconst int N = 100001;\n\nint n,q,x;\nint a[N];\n\nint main(){\n    cin >> n >> q;\n    for(int i = 0; i < n; i++) cin >> a[i];\n\n    while(q--){\n        cin >> x;\n        int l = 0,r = n - 1;\n        while(l < r){\n            int mid = (l + r) >> 1;\n            if(a[mid] >= x) r = mid;\n            else l = mid + 1;\n        }\n\n        if(a[l] != x) cout << \"-1 -1\" << endl;\n        else{\n             cout << l << ' ';\n             //找左边界，第二个模板\n             int l = 0,r = n - 1;\n             while(l < r){\n                 int mid = (l +  r + 1) >> 1;\n                 if(a[mid] <= x) l = mid;\n                 else r = mid - 1;\n             }\n             cout << l << endl;\n        }   \n    }\n\n    return 0;\n}\n```\n分别找出左边边界和右边边界就是答案，找不到就输出-1。\n## 浮点二分\n浮点二分就简单许多，因为没有边界问题。\n### 模板\n\n```js\n//浮点二分\nbool check(double x) {/* ... */} // 检查x是否满足某种性质\n\nvoid bsearch_3(double l, double r)\n{\n    const double eps = 1e-6;   // eps 表示精度，取决于题目对精度的要求\n    while (r - l > eps)\n    {\n        double mid = (l + r) / 2;\n        if (check(mid)) r = mid;\n        else l = mid;\n    }\n}\n```\n","slug":"二分","published":1,"updated":"2021-10-04T05:12:17.903Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckuva9uu30000tows8uola0yl","content":"<p>第一次了解二分是在高中的数学课，当时没觉得多难，毕竟思想是很简单的。但在代码实现上却会遇到很多困难,最常见的也是最难的就是整数二分的边界问题。</p>\n\n        <h2 id=\"整数二分\"   >\n          <a href=\"#整数二分\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#整数二分\" class=\"headerlink\" title=\"整数二分\"></a>整数二分</h2>\n      \n        <h3 id=\"主要思路\"   >\n          <a href=\"#主要思路\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#主要思路\" class=\"headerlink\" title=\"主要思路\"></a>主要思路</h3>\n      <p>整数二分的思路是这样的：将整数序列分为两端，分界满足的条件，将区间化为左右两个部分，左边满足这个条件，右边不能满足这个条件（或者相反）。此时就用二分来来查找左右两部分的边界。所以所谓二分算法，就是我们知道当前的候选区间中,一定存在我们要找到的答案,而且我们发现这个区间拥有单调性质此类的性质,那么我们可以不停地缩减候选区间的范围,达到排除无用答案的效果，也就是找到正确答案（边界）。</p>\n<p>整数二分是有两个边界的，分别是左边的边界与右边的边界，即左右两半部分的边界不是同一个点，而是相邻的2个点，就像下面这个草图：</p>\n<p><img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/632b12d0dd0741519d753a6a1e0afd7c~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\"></p>\n<p>这就让我们的二分有两个模板，一个是找左边红色的边界，一个是找右边绿色的边界。实际运用时，先不考虑用哪个模板，而是先写<code>check()</code>函数，然后写模板（不考虑mid是否+1），写到<code>if(check(mid))</code>时，再考虑满足<code>check(mid)</code>条件的段是在哪一边：如果在左边红色，则填<code>l = mid</code>；如果在右边，则填<code>r = mid</code>。然后填出else的部分，最后看else后如果填写的是<code>-</code>，则要在mid声明处<code>+1</code>；反之不补。（简单的记忆就是，仅当采用<code>l = mid</code>这种更新方式时，计算<code>mid</code>时需要加1。）</p>\n\n        <h3 id=\"模板\"   >\n          <a href=\"#模板\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#模板\" class=\"headerlink\" title=\"模板\"></a>模板</h3>\n      <figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bool <span class=\"function\"><span class=\"title\">check</span>(<span class=\"params\">int x</span>)</span>&#123;<span class=\"comment\">/*检查x是否满足某个条件*/</span>&#125;;</span><br><span class=\"line\"><span class=\"comment\">//二分</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"function\"><span class=\"title\">bsearch_one</span>(<span class=\"params\">int l,int r</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(l &lt; r)&#123;</span><br><span class=\"line\">        int mid = (l + r) &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(check(mid)) r = mid;<span class=\"comment\">//检查</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span> l = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"function\"><span class=\"title\">bsearch_two</span>(<span class=\"params\">int l,int r</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(l &lt; r)&#123;</span><br><span class=\"line\">        int mid = (l + r + <span class=\"number\">1</span>) &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(check(mid)) l = mid;<span class=\"comment\">//检查</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span> r = mid - <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n        <h3 id=\"例子\"   >\n          <a href=\"#例子\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#例子\" class=\"headerlink\" title=\"例子\"></a>例子</h3>\n      <p>给定一个按照升序排列的长度为 nn 的整数数组，以及 qq 个查询。</p>\n<p>对于每个查询，返回一个元素 kk 的起始位置和终止位置（位置从 00 开始计数）。</p>\n<p>如果数组中不存在该元素，则返回 <code>-1 -1</code>。</p>\n\n        <h4 id=\"输入格式\"   >\n          <a href=\"#输入格式\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#输入格式\" class=\"headerlink\" title=\"输入格式\"></a>输入格式</h4>\n      <p>第一行包含整数 nn 和 qq，表示数组长度和询问个数。</p>\n<p>第二行包含 nn 个整数（均在 1∼100001∼10000 范围内），表示完整数组。</p>\n<p>接下来 qq 行，每行包含一个整数 kk，表示一个询问元素。</p>\n\n        <h4 id=\"输出格式\"   >\n          <a href=\"#输出格式\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#输出格式\" class=\"headerlink\" title=\"输出格式\"></a>输出格式</h4>\n      <p>共 qq 行，每行包含两个整数，表示所求元素的起始位置和终止位置。</p>\n<p>如果数组中不存在该元素，则返回 <code>-1 -1</code>。</p>\n\n        <h4 id=\"数据范围\"   >\n          <a href=\"#数据范围\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#数据范围\" class=\"headerlink\" title=\"数据范围\"></a>数据范围</h4>\n      <p>1≤n≤1000001≤n≤100000<br>1≤q≤100001≤q≤10000<br>1≤k≤100001≤k≤10000</p>\n\n        <h4 id=\"输入样例：\"   >\n          <a href=\"#输入样例：\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#输入样例：\" class=\"headerlink\" title=\"输入样例：\"></a>输入样例：</h4>\n      <figure class=\"highlight plain\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">6 3</span><br><span class=\"line\">1 2 2 3 3 4</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td></tr></table></div></figure>\n\n\n        <h4 id=\"输出样例：\"   >\n          <a href=\"#输出样例：\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#输出样例：\" class=\"headerlink\" title=\"输出样例：\"></a>输出样例：</h4>\n      <figure class=\"highlight plain\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">3 4</span><br><span class=\"line\">5 5</span><br><span class=\"line\">-1 -1</span><br></pre></td></tr></table></div></figure>\n\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//foreverking</span></span><br><span class=\"line\">#include &lt;vector&gt;</span><br><span class=\"line\">#include &lt;cstdio&gt;</span><br><span class=\"line\">#include &lt;queue&gt;</span><br><span class=\"line\">#include &lt;algorithm&gt;</span><br><span class=\"line\">#include &lt;cstring&gt;</span><br><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">#include &lt;cmath&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> int N = <span class=\"number\">100001</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">int n,q,x;</span><br><span class=\"line\">int a[N];</span><br><span class=\"line\"></span><br><span class=\"line\">int <span class=\"function\"><span class=\"title\">main</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    cin &gt;&gt; n &gt;&gt; q;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(int i = <span class=\"number\">0</span>; i &lt; n; i++) cin &gt;&gt; a[i];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(q--)&#123;</span><br><span class=\"line\">        cin &gt;&gt; x;</span><br><span class=\"line\">        int l = <span class=\"number\">0</span>,r = n - <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(l &lt; r)&#123;</span><br><span class=\"line\">            int mid = (l + r) &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(a[mid] &gt;= x) r = mid;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> l = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(a[l] != x) cout &lt;&lt; <span class=\"string\">&quot;-1 -1&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">        <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">             cout &lt;&lt; l &lt;&lt; <span class=\"string\">&#x27; &#x27;</span>;</span><br><span class=\"line\">             <span class=\"comment\">//找左边界，第二个模板</span></span><br><span class=\"line\">             int l = <span class=\"number\">0</span>,r = n - <span class=\"number\">1</span>;</span><br><span class=\"line\">             <span class=\"keyword\">while</span>(l &lt; r)&#123;</span><br><span class=\"line\">                 int mid = (l +  r + <span class=\"number\">1</span>) &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">                 <span class=\"keyword\">if</span>(a[mid] &lt;= x) l = mid;</span><br><span class=\"line\">                 <span class=\"keyword\">else</span> r = mid - <span class=\"number\">1</span>;</span><br><span class=\"line\">             &#125;</span><br><span class=\"line\">             cout &lt;&lt; l &lt;&lt; endl;</span><br><span class=\"line\">        &#125;   </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>分别找出左边边界和右边边界就是答案，找不到就输出-1。</p>\n\n        <h2 id=\"浮点二分\"   >\n          <a href=\"#浮点二分\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#浮点二分\" class=\"headerlink\" title=\"浮点二分\"></a>浮点二分</h2>\n      <p>浮点二分就简单许多，因为没有边界问题。</p>\n\n        <h3 id=\"模板-1\"   >\n          <a href=\"#模板-1\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#模板-1\" class=\"headerlink\" title=\"模板\"></a>模板</h3>\n      <figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//浮点二分</span></span><br><span class=\"line\">bool <span class=\"function\"><span class=\"title\">check</span>(<span class=\"params\">double x</span>)</span> &#123;<span class=\"comment\">/* ... */</span>&#125; <span class=\"comment\">// 检查x是否满足某种性质</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">void</span> bsearch_3(double l, double r)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> double eps = <span class=\"number\">1e-6</span>;   <span class=\"comment\">// eps 表示精度，取决于题目对精度的要求</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (r - l &gt; eps)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        double mid = (l + r) / <span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (check(mid)) r = mid;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> l = mid;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>第一次了解二分是在高中的数学课，当时没觉得多难，毕竟思想是很简单的。但在代码实现上却会遇到很多困难,最常见的也是最难的就是整数二分的边界问题。</p>\n\n        <h2 id=\"整数二分\"   >\n          <a href=\"#整数二分\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#整数二分\" class=\"headerlink\" title=\"整数二分\"></a>整数二分</h2>\n      \n        <h3 id=\"主要思路\"   >\n          <a href=\"#主要思路\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#主要思路\" class=\"headerlink\" title=\"主要思路\"></a>主要思路</h3>\n      <p>整数二分的思路是这样的：将整数序列分为两端，分界满足的条件，将区间化为左右两个部分，左边满足这个条件，右边不能满足这个条件（或者相反）。此时就用二分来来查找左右两部分的边界。所以所谓二分算法，就是我们知道当前的候选区间中,一定存在我们要找到的答案,而且我们发现这个区间拥有单调性质此类的性质,那么我们可以不停地缩减候选区间的范围,达到排除无用答案的效果，也就是找到正确答案（边界）。</p>\n<p>整数二分是有两个边界的，分别是左边的边界与右边的边界，即左右两半部分的边界不是同一个点，而是相邻的2个点，就像下面这个草图：</p>\n<p><img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/632b12d0dd0741519d753a6a1e0afd7c~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\"></p>\n<p>这就让我们的二分有两个模板，一个是找左边红色的边界，一个是找右边绿色的边界。实际运用时，先不考虑用哪个模板，而是先写<code>check()</code>函数，然后写模板（不考虑mid是否+1），写到<code>if(check(mid))</code>时，再考虑满足<code>check(mid)</code>条件的段是在哪一边：如果在左边红色，则填<code>l = mid</code>；如果在右边，则填<code>r = mid</code>。然后填出else的部分，最后看else后如果填写的是<code>-</code>，则要在mid声明处<code>+1</code>；反之不补。（简单的记忆就是，仅当采用<code>l = mid</code>这种更新方式时，计算<code>mid</code>时需要加1。）</p>\n\n        <h3 id=\"模板\"   >\n          <a href=\"#模板\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#模板\" class=\"headerlink\" title=\"模板\"></a>模板</h3>\n      <figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bool <span class=\"function\"><span class=\"title\">check</span>(<span class=\"params\">int x</span>)</span>&#123;<span class=\"comment\">/*检查x是否满足某个条件*/</span>&#125;;</span><br><span class=\"line\"><span class=\"comment\">//二分</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"function\"><span class=\"title\">bsearch_one</span>(<span class=\"params\">int l,int r</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(l &lt; r)&#123;</span><br><span class=\"line\">        int mid = (l + r) &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(check(mid)) r = mid;<span class=\"comment\">//检查</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span> l = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"function\"><span class=\"title\">bsearch_two</span>(<span class=\"params\">int l,int r</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(l &lt; r)&#123;</span><br><span class=\"line\">        int mid = (l + r + <span class=\"number\">1</span>) &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(check(mid)) l = mid;<span class=\"comment\">//检查</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span> r = mid - <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n        <h3 id=\"例子\"   >\n          <a href=\"#例子\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#例子\" class=\"headerlink\" title=\"例子\"></a>例子</h3>\n      <p>给定一个按照升序排列的长度为 nn 的整数数组，以及 qq 个查询。</p>\n<p>对于每个查询，返回一个元素 kk 的起始位置和终止位置（位置从 00 开始计数）。</p>\n<p>如果数组中不存在该元素，则返回 <code>-1 -1</code>。</p>\n\n        <h4 id=\"输入格式\"   >\n          <a href=\"#输入格式\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#输入格式\" class=\"headerlink\" title=\"输入格式\"></a>输入格式</h4>\n      <p>第一行包含整数 nn 和 qq，表示数组长度和询问个数。</p>\n<p>第二行包含 nn 个整数（均在 1∼100001∼10000 范围内），表示完整数组。</p>\n<p>接下来 qq 行，每行包含一个整数 kk，表示一个询问元素。</p>\n\n        <h4 id=\"输出格式\"   >\n          <a href=\"#输出格式\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#输出格式\" class=\"headerlink\" title=\"输出格式\"></a>输出格式</h4>\n      <p>共 qq 行，每行包含两个整数，表示所求元素的起始位置和终止位置。</p>\n<p>如果数组中不存在该元素，则返回 <code>-1 -1</code>。</p>\n\n        <h4 id=\"数据范围\"   >\n          <a href=\"#数据范围\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#数据范围\" class=\"headerlink\" title=\"数据范围\"></a>数据范围</h4>\n      <p>1≤n≤1000001≤n≤100000<br>1≤q≤100001≤q≤10000<br>1≤k≤100001≤k≤10000</p>\n\n        <h4 id=\"输入样例：\"   >\n          <a href=\"#输入样例：\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#输入样例：\" class=\"headerlink\" title=\"输入样例：\"></a>输入样例：</h4>\n      <figure class=\"highlight plain\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">6 3</span><br><span class=\"line\">1 2 2 3 3 4</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td></tr></table></div></figure>\n\n\n        <h4 id=\"输出样例：\"   >\n          <a href=\"#输出样例：\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#输出样例：\" class=\"headerlink\" title=\"输出样例：\"></a>输出样例：</h4>\n      <figure class=\"highlight plain\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">3 4</span><br><span class=\"line\">5 5</span><br><span class=\"line\">-1 -1</span><br></pre></td></tr></table></div></figure>\n\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//foreverking</span></span><br><span class=\"line\">#include &lt;vector&gt;</span><br><span class=\"line\">#include &lt;cstdio&gt;</span><br><span class=\"line\">#include &lt;queue&gt;</span><br><span class=\"line\">#include &lt;algorithm&gt;</span><br><span class=\"line\">#include &lt;cstring&gt;</span><br><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">#include &lt;cmath&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> int N = <span class=\"number\">100001</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">int n,q,x;</span><br><span class=\"line\">int a[N];</span><br><span class=\"line\"></span><br><span class=\"line\">int <span class=\"function\"><span class=\"title\">main</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    cin &gt;&gt; n &gt;&gt; q;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(int i = <span class=\"number\">0</span>; i &lt; n; i++) cin &gt;&gt; a[i];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(q--)&#123;</span><br><span class=\"line\">        cin &gt;&gt; x;</span><br><span class=\"line\">        int l = <span class=\"number\">0</span>,r = n - <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(l &lt; r)&#123;</span><br><span class=\"line\">            int mid = (l + r) &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(a[mid] &gt;= x) r = mid;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> l = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(a[l] != x) cout &lt;&lt; <span class=\"string\">&quot;-1 -1&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">        <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">             cout &lt;&lt; l &lt;&lt; <span class=\"string\">&#x27; &#x27;</span>;</span><br><span class=\"line\">             <span class=\"comment\">//找左边界，第二个模板</span></span><br><span class=\"line\">             int l = <span class=\"number\">0</span>,r = n - <span class=\"number\">1</span>;</span><br><span class=\"line\">             <span class=\"keyword\">while</span>(l &lt; r)&#123;</span><br><span class=\"line\">                 int mid = (l +  r + <span class=\"number\">1</span>) &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">                 <span class=\"keyword\">if</span>(a[mid] &lt;= x) l = mid;</span><br><span class=\"line\">                 <span class=\"keyword\">else</span> r = mid - <span class=\"number\">1</span>;</span><br><span class=\"line\">             &#125;</span><br><span class=\"line\">             cout &lt;&lt; l &lt;&lt; endl;</span><br><span class=\"line\">        &#125;   </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>分别找出左边边界和右边边界就是答案，找不到就输出-1。</p>\n\n        <h2 id=\"浮点二分\"   >\n          <a href=\"#浮点二分\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#浮点二分\" class=\"headerlink\" title=\"浮点二分\"></a>浮点二分</h2>\n      <p>浮点二分就简单许多，因为没有边界问题。</p>\n\n        <h3 id=\"模板-1\"   >\n          <a href=\"#模板-1\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#模板-1\" class=\"headerlink\" title=\"模板\"></a>模板</h3>\n      <figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//浮点二分</span></span><br><span class=\"line\">bool <span class=\"function\"><span class=\"title\">check</span>(<span class=\"params\">double x</span>)</span> &#123;<span class=\"comment\">/* ... */</span>&#125; <span class=\"comment\">// 检查x是否满足某种性质</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">void</span> bsearch_3(double l, double r)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> double eps = <span class=\"number\">1e-6</span>;   <span class=\"comment\">// eps 表示精度，取决于题目对精度的要求</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (r - l &gt; eps)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        double mid = (l + r) / <span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (check(mid)) r = mid;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> l = mid;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n"},{"title":"高精度","date":"2021-10-17T13:44:43.000Z","_content":"主要的高精度问题：\n-   `A + B`：两个大整数相加\n-   `A - B`：两个大整数相减\n-   `A × b`：一个大整数乘一个小整数\n-   `A ÷ b`：一个大整数除以一个小整数\n并不常见高精度相除相乘的问题。\n大数的储存大致是相同的\n\n```js\nvector<int> A;\nstring a;\ncin >> a;\nfor (int i = a.size() - 1; i >= 0; i--) A.push_back(a[i] - '0');\n//为了方便计算，都倒着储存\n```\n## 高精度加法 \n\n\n```js\nvector<int> add_one(vector<int> &A,vector<int> &B){\n    vector<int> C;\n    int t = 0;//进位，初始是最后末尾所以没有进位\n    for(int i = 0; i < A.size() || i < B.size(); i++){\n        if(i < A.size()) t += A[i];\n        if(i < B.size()) t += B[i];//进行模拟加法，将两个大数每一位的与后一位的进位加上 \n        //进位\n        C.push_back(t % 10);\n        t /= 10;//t>=10进一位，计算进位\n        //cout << t;\n    }\n\n    if(t) C.push_back(1);\n    cout << t << endl;\n    return C;\n}\n```\n也可以这种写法：  \n需注意：\n-  假设大整数A的位数≥大整数B，不满足要交换参数次序\n- 大整数低位存放在数组低地址处，高位存放在数组高地址处  \n    - 数组地址由低到高（0 → n - 1）  \n    - 整数位数最左边是高位，最右边是低位（高位→低位）  \n- 注意处理最高位进位，取数组时反向(n - 1 →  0)遍历，运算时正向(0→n-1)遍历\n\n```js\n// C = A + B, A >= 0, B >= 0\nvector<int> add_two(vector<int> &A,vector<int> &B){\n    if (A.size() < B.size()) return add_two(B,A);\n\n    vector<int> C;\n    int t = 0;\n    for (int i = 0; i < A.size(); i ++ )\n    {\n        t += A[i];\n        if (i < B.size()) t += B[i];\n        C.push_back(t % 10);\n        t /= 10;\n    }\n\n    if (t) C.push_back(t);\n    return C;\n}\n\n//很简单\n```\n## 高精度减法\n和加法很类似\n\n```js\n// C = A - B, 满足A >= B, A >= 0, B >= 0\nvector<int> sub(vector<int> &A, vector<int> &B){\n    vector<int> C;\n    for (int i = 0, t = 0; i < A.size(); i ++ ){\n    //t代表借位，为1时表示从高位借了一个单位来，为0时则没有\n        t = A[i] - t;\n        if (i < B.size()) t -= B[i];//当这个位置上B存在才能减\n        C.push_back((t + 10) % 10);//将需要与不需要结尾的情况都包含了\n        /*\n        t >= 0输出t % 10\n        t < 0输出t + 10\n        */\n        if (t < 0) t = 1;\n        else t = 0;\n    }\n\n    while (C.size() > 1 && C.back() == 0) C.pop_back();//去除多余的前导0\n    //去掉前导0时，注意不能把结果0也去掉，即需要判断C.size() > 1\n    return C;\n}\n```\n假设A和B都是非负大整数，且A≥≥B，可用`cmp()`模板判断是否满足A≥≥B，不满足交换参数次序即可\n\n```js\n// A >= B返回true，否则返回false\nbool cmp(vector<int>& A, vector<int>& B) {\n    if (A.size() != B.size()) return A.size() > B.size();\n    for (int i = A.size() - 1; i >= 0; i--) \n        if (A[i] != B[i])\n            return A[i] > B[i];\n    return true;\n}\n```\n## 高精度乘法  \n 同样的模拟过程，考虑进位是最重要的，以及，在大数乘以0时，记得去除前导零。  \n模板：\n```js\n//高精度乘法\nvector<int> mul(vector<int> &A, int b){\n    vector<int> C;\n\n    int t = 0;//进位\n    for (int i = 0; i < A.size() || t != 0; i ++ ){//乘法模拟\n        if (i < A.size()) t += A[i] * b;\n        C.push_back(t % 10);//原位放入\n        t /= 10;//进位\n    }\n\n    while (C.size() > 1 && C.back() == 0) C.pop_back();//去除前导零，比如一个大数乘以0\n\n    return C;\n}\n```\n## 高精度除法\n 除法的难度在他是需要从高位开始模拟，商用vector<int>保存，余数用参数r保存，而为了四则运算整体一致，计算后要将结果改为逆序。\n```js\nvector<int> div(vector<int> &A, int b, int &r)\n{\n    vector<int> C;\n    r = 0;\n    for (int i = A.size() - 1; i >= 0; i -- )\n    {\n        r = r * 10 + A[i];\n        C.push_back(r / b);\n        r %= b;\n    }\n    reverse(C.begin(), C.end());\n    while (C.size() > 1 && C.back() == 0) C.pop_back();\n    return C;\n}\n\n```","source":"_posts/高精度.md","raw":"---\ntitle: 高精度\ndate: 2021-10-17 21:44:43\ntags: \n    - Study\n    - 高精度\ncategories: \n    - 算法\n    - 高精度\n---\n主要的高精度问题：\n-   `A + B`：两个大整数相加\n-   `A - B`：两个大整数相减\n-   `A × b`：一个大整数乘一个小整数\n-   `A ÷ b`：一个大整数除以一个小整数\n并不常见高精度相除相乘的问题。\n大数的储存大致是相同的\n\n```js\nvector<int> A;\nstring a;\ncin >> a;\nfor (int i = a.size() - 1; i >= 0; i--) A.push_back(a[i] - '0');\n//为了方便计算，都倒着储存\n```\n## 高精度加法 \n\n\n```js\nvector<int> add_one(vector<int> &A,vector<int> &B){\n    vector<int> C;\n    int t = 0;//进位，初始是最后末尾所以没有进位\n    for(int i = 0; i < A.size() || i < B.size(); i++){\n        if(i < A.size()) t += A[i];\n        if(i < B.size()) t += B[i];//进行模拟加法，将两个大数每一位的与后一位的进位加上 \n        //进位\n        C.push_back(t % 10);\n        t /= 10;//t>=10进一位，计算进位\n        //cout << t;\n    }\n\n    if(t) C.push_back(1);\n    cout << t << endl;\n    return C;\n}\n```\n也可以这种写法：  \n需注意：\n-  假设大整数A的位数≥大整数B，不满足要交换参数次序\n- 大整数低位存放在数组低地址处，高位存放在数组高地址处  \n    - 数组地址由低到高（0 → n - 1）  \n    - 整数位数最左边是高位，最右边是低位（高位→低位）  \n- 注意处理最高位进位，取数组时反向(n - 1 →  0)遍历，运算时正向(0→n-1)遍历\n\n```js\n// C = A + B, A >= 0, B >= 0\nvector<int> add_two(vector<int> &A,vector<int> &B){\n    if (A.size() < B.size()) return add_two(B,A);\n\n    vector<int> C;\n    int t = 0;\n    for (int i = 0; i < A.size(); i ++ )\n    {\n        t += A[i];\n        if (i < B.size()) t += B[i];\n        C.push_back(t % 10);\n        t /= 10;\n    }\n\n    if (t) C.push_back(t);\n    return C;\n}\n\n//很简单\n```\n## 高精度减法\n和加法很类似\n\n```js\n// C = A - B, 满足A >= B, A >= 0, B >= 0\nvector<int> sub(vector<int> &A, vector<int> &B){\n    vector<int> C;\n    for (int i = 0, t = 0; i < A.size(); i ++ ){\n    //t代表借位，为1时表示从高位借了一个单位来，为0时则没有\n        t = A[i] - t;\n        if (i < B.size()) t -= B[i];//当这个位置上B存在才能减\n        C.push_back((t + 10) % 10);//将需要与不需要结尾的情况都包含了\n        /*\n        t >= 0输出t % 10\n        t < 0输出t + 10\n        */\n        if (t < 0) t = 1;\n        else t = 0;\n    }\n\n    while (C.size() > 1 && C.back() == 0) C.pop_back();//去除多余的前导0\n    //去掉前导0时，注意不能把结果0也去掉，即需要判断C.size() > 1\n    return C;\n}\n```\n假设A和B都是非负大整数，且A≥≥B，可用`cmp()`模板判断是否满足A≥≥B，不满足交换参数次序即可\n\n```js\n// A >= B返回true，否则返回false\nbool cmp(vector<int>& A, vector<int>& B) {\n    if (A.size() != B.size()) return A.size() > B.size();\n    for (int i = A.size() - 1; i >= 0; i--) \n        if (A[i] != B[i])\n            return A[i] > B[i];\n    return true;\n}\n```\n## 高精度乘法  \n 同样的模拟过程，考虑进位是最重要的，以及，在大数乘以0时，记得去除前导零。  \n模板：\n```js\n//高精度乘法\nvector<int> mul(vector<int> &A, int b){\n    vector<int> C;\n\n    int t = 0;//进位\n    for (int i = 0; i < A.size() || t != 0; i ++ ){//乘法模拟\n        if (i < A.size()) t += A[i] * b;\n        C.push_back(t % 10);//原位放入\n        t /= 10;//进位\n    }\n\n    while (C.size() > 1 && C.back() == 0) C.pop_back();//去除前导零，比如一个大数乘以0\n\n    return C;\n}\n```\n## 高精度除法\n 除法的难度在他是需要从高位开始模拟，商用vector<int>保存，余数用参数r保存，而为了四则运算整体一致，计算后要将结果改为逆序。\n```js\nvector<int> div(vector<int> &A, int b, int &r)\n{\n    vector<int> C;\n    r = 0;\n    for (int i = A.size() - 1; i >= 0; i -- )\n    {\n        r = r * 10 + A[i];\n        C.push_back(r / b);\n        r %= b;\n    }\n    reverse(C.begin(), C.end());\n    while (C.size() > 1 && C.back() == 0) C.pop_back();\n    return C;\n}\n\n```","slug":"高精度","published":1,"updated":"2021-10-17T13:45:20.192Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckuva9uuf0002tows0amrdyxa","content":"<p>主要的高精度问题：</p>\n<ul>\n<li>  <code>A + B</code>：两个大整数相加</li>\n<li>  <code>A - B</code>：两个大整数相减</li>\n<li>  <code>A × b</code>：一个大整数乘一个小整数</li>\n<li>  <code>A ÷ b</code>：一个大整数除以一个小整数<br>并不常见高精度相除相乘的问题。<br>大数的储存大致是相同的</li>\n</ul>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vector&lt;int&gt; A;</span><br><span class=\"line\">string a;</span><br><span class=\"line\">cin &gt;&gt; a;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (int i = a.size() - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--) A.push_back(a[i] - <span class=\"string\">&#x27;0&#x27;</span>);</span><br><span class=\"line\"><span class=\"comment\">//为了方便计算，都倒着储存</span></span><br></pre></td></tr></table></div></figure>\n\n        <h2 id=\"高精度加法\"   >\n          <a href=\"#高精度加法\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#高精度加法\" class=\"headerlink\" title=\"高精度加法\"></a>高精度加法</h2>\n      <figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vector&lt;int&gt; <span class=\"function\"><span class=\"title\">add_one</span>(<span class=\"params\">vector&lt;int&gt; &amp;A,vector&lt;int&gt; &amp;B</span>)</span>&#123;</span><br><span class=\"line\">    vector&lt;int&gt; C;</span><br><span class=\"line\">    int t = <span class=\"number\">0</span>;<span class=\"comment\">//进位，初始是最后末尾所以没有进位</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(int i = <span class=\"number\">0</span>; i &lt; A.size() || i &lt; B.size(); i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i &lt; A.size()) t += A[i];</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i &lt; B.size()) t += B[i];<span class=\"comment\">//进行模拟加法，将两个大数每一位的与后一位的进位加上 </span></span><br><span class=\"line\">        <span class=\"comment\">//进位</span></span><br><span class=\"line\">        C.push_back(t % <span class=\"number\">10</span>);</span><br><span class=\"line\">        t /= <span class=\"number\">10</span>;<span class=\"comment\">//t&gt;=10进一位，计算进位</span></span><br><span class=\"line\">        <span class=\"comment\">//cout &lt;&lt; t;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(t) C.push_back(<span class=\"number\">1</span>);</span><br><span class=\"line\">    cout &lt;&lt; t &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> C;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>也可以这种写法：<br>需注意：</p>\n<ul>\n<li> 假设大整数A的位数≥大整数B，不满足要交换参数次序</li>\n<li>大整数低位存放在数组低地址处，高位存放在数组高地址处  <ul>\n<li>数组地址由低到高（0 → n - 1）  </li>\n<li>整数位数最左边是高位，最右边是低位（高位→低位）  </li>\n</ul>\n</li>\n<li>注意处理最高位进位，取数组时反向(n - 1 →  0)遍历，运算时正向(0→n-1)遍历</li>\n</ul>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// C = A + B, A &gt;= 0, B &gt;= 0</span></span><br><span class=\"line\">vector&lt;int&gt; <span class=\"function\"><span class=\"title\">add_two</span>(<span class=\"params\">vector&lt;int&gt; &amp;A,vector&lt;int&gt; &amp;B</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (A.size() &lt; B.size()) <span class=\"keyword\">return</span> add_two(B,A);</span><br><span class=\"line\"></span><br><span class=\"line\">    vector&lt;int&gt; C;</span><br><span class=\"line\">    int t = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (int i = <span class=\"number\">0</span>; i &lt; A.size(); i ++ )</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        t += A[i];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i &lt; B.size()) t += B[i];</span><br><span class=\"line\">        C.push_back(t % <span class=\"number\">10</span>);</span><br><span class=\"line\">        t /= <span class=\"number\">10</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (t) C.push_back(t);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> C;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//很简单</span></span><br></pre></td></tr></table></div></figure>\n\n        <h2 id=\"高精度减法\"   >\n          <a href=\"#高精度减法\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#高精度减法\" class=\"headerlink\" title=\"高精度减法\"></a>高精度减法</h2>\n      <p>和加法很类似</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// C = A - B, 满足A &gt;= B, A &gt;= 0, B &gt;= 0</span></span><br><span class=\"line\">vector&lt;int&gt; <span class=\"function\"><span class=\"title\">sub</span>(<span class=\"params\">vector&lt;int&gt; &amp;A, vector&lt;int&gt; &amp;B</span>)</span>&#123;</span><br><span class=\"line\">    vector&lt;int&gt; C;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (int i = <span class=\"number\">0</span>, t = <span class=\"number\">0</span>; i &lt; A.size(); i ++ )&#123;</span><br><span class=\"line\">    <span class=\"comment\">//t代表借位，为1时表示从高位借了一个单位来，为0时则没有</span></span><br><span class=\"line\">        t = A[i] - t;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i &lt; B.size()) t -= B[i];<span class=\"comment\">//当这个位置上B存在才能减</span></span><br><span class=\"line\">        C.push_back((t + <span class=\"number\">10</span>) % <span class=\"number\">10</span>);<span class=\"comment\">//将需要与不需要结尾的情况都包含了</span></span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">        t &gt;= 0输出t % 10</span></span><br><span class=\"line\"><span class=\"comment\">        t &lt; 0输出t + 10</span></span><br><span class=\"line\"><span class=\"comment\">        */</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (t &lt; <span class=\"number\">0</span>) t = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> t = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (C.size() &gt; <span class=\"number\">1</span> &amp;&amp; C.back() == <span class=\"number\">0</span>) C.pop_back();<span class=\"comment\">//去除多余的前导0</span></span><br><span class=\"line\">    <span class=\"comment\">//去掉前导0时，注意不能把结果0也去掉，即需要判断C.size() &gt; 1</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> C;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>假设A和B都是非负大整数，且A≥≥B，可用<code>cmp()</code>模板判断是否满足A≥≥B，不满足交换参数次序即可</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// A &gt;= B返回true，否则返回false</span></span><br><span class=\"line\">bool <span class=\"function\"><span class=\"title\">cmp</span>(<span class=\"params\">vector&lt;int&gt;&amp; A, vector&lt;int&gt;&amp; B</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (A.size() != B.size()) <span class=\"keyword\">return</span> A.size() &gt; B.size();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (int i = A.size() - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--) </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (A[i] != B[i])</span><br><span class=\"line\">            <span class=\"keyword\">return</span> A[i] &gt; B[i];</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n        <h2 id=\"高精度乘法\"   >\n          <a href=\"#高精度乘法\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#高精度乘法\" class=\"headerlink\" title=\"高精度乘法\"></a>高精度乘法</h2>\n      <p> 同样的模拟过程，考虑进位是最重要的，以及，在大数乘以0时，记得去除前导零。<br>模板：</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//高精度乘法</span></span><br><span class=\"line\">vector&lt;int&gt; <span class=\"function\"><span class=\"title\">mul</span>(<span class=\"params\">vector&lt;int&gt; &amp;A, int b</span>)</span>&#123;</span><br><span class=\"line\">    vector&lt;int&gt; C;</span><br><span class=\"line\"></span><br><span class=\"line\">    int t = <span class=\"number\">0</span>;<span class=\"comment\">//进位</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (int i = <span class=\"number\">0</span>; i &lt; A.size() || t != <span class=\"number\">0</span>; i ++ )&#123;<span class=\"comment\">//乘法模拟</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i &lt; A.size()) t += A[i] * b;</span><br><span class=\"line\">        C.push_back(t % <span class=\"number\">10</span>);<span class=\"comment\">//原位放入</span></span><br><span class=\"line\">        t /= <span class=\"number\">10</span>;<span class=\"comment\">//进位</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (C.size() &gt; <span class=\"number\">1</span> &amp;&amp; C.back() == <span class=\"number\">0</span>) C.pop_back();<span class=\"comment\">//去除前导零，比如一个大数乘以0</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> C;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n        <h2 id=\"高精度除法\"   >\n          <a href=\"#高精度除法\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#高精度除法\" class=\"headerlink\" title=\"高精度除法\"></a>高精度除法</h2>\n      <p> 除法的难度在他是需要从高位开始模拟，商用vector<int>保存，余数用参数r保存，而为了四则运算整体一致，计算后要将结果改为逆序。</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vector&lt;int&gt; div(vector&lt;int&gt; &amp;A, int b, int &amp;r)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    vector&lt;int&gt; C;</span><br><span class=\"line\">    r = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (int i = A.size() - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i -- )</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        r = r * <span class=\"number\">10</span> + A[i];</span><br><span class=\"line\">        C.push_back(r / b);</span><br><span class=\"line\">        r %= b;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    reverse(C.begin(), C.end());</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (C.size() &gt; <span class=\"number\">1</span> &amp;&amp; C.back() == <span class=\"number\">0</span>) C.pop_back();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> C;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></div></figure>","site":{"data":{}},"excerpt":"","more":"<p>主要的高精度问题：</p>\n<ul>\n<li>  <code>A + B</code>：两个大整数相加</li>\n<li>  <code>A - B</code>：两个大整数相减</li>\n<li>  <code>A × b</code>：一个大整数乘一个小整数</li>\n<li>  <code>A ÷ b</code>：一个大整数除以一个小整数<br>并不常见高精度相除相乘的问题。<br>大数的储存大致是相同的</li>\n</ul>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vector&lt;int&gt; A;</span><br><span class=\"line\">string a;</span><br><span class=\"line\">cin &gt;&gt; a;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (int i = a.size() - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--) A.push_back(a[i] - <span class=\"string\">&#x27;0&#x27;</span>);</span><br><span class=\"line\"><span class=\"comment\">//为了方便计算，都倒着储存</span></span><br></pre></td></tr></table></div></figure>\n\n        <h2 id=\"高精度加法\"   >\n          <a href=\"#高精度加法\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#高精度加法\" class=\"headerlink\" title=\"高精度加法\"></a>高精度加法</h2>\n      <figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vector&lt;int&gt; <span class=\"function\"><span class=\"title\">add_one</span>(<span class=\"params\">vector&lt;int&gt; &amp;A,vector&lt;int&gt; &amp;B</span>)</span>&#123;</span><br><span class=\"line\">    vector&lt;int&gt; C;</span><br><span class=\"line\">    int t = <span class=\"number\">0</span>;<span class=\"comment\">//进位，初始是最后末尾所以没有进位</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(int i = <span class=\"number\">0</span>; i &lt; A.size() || i &lt; B.size(); i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i &lt; A.size()) t += A[i];</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i &lt; B.size()) t += B[i];<span class=\"comment\">//进行模拟加法，将两个大数每一位的与后一位的进位加上 </span></span><br><span class=\"line\">        <span class=\"comment\">//进位</span></span><br><span class=\"line\">        C.push_back(t % <span class=\"number\">10</span>);</span><br><span class=\"line\">        t /= <span class=\"number\">10</span>;<span class=\"comment\">//t&gt;=10进一位，计算进位</span></span><br><span class=\"line\">        <span class=\"comment\">//cout &lt;&lt; t;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(t) C.push_back(<span class=\"number\">1</span>);</span><br><span class=\"line\">    cout &lt;&lt; t &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> C;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>也可以这种写法：<br>需注意：</p>\n<ul>\n<li> 假设大整数A的位数≥大整数B，不满足要交换参数次序</li>\n<li>大整数低位存放在数组低地址处，高位存放在数组高地址处  <ul>\n<li>数组地址由低到高（0 → n - 1）  </li>\n<li>整数位数最左边是高位，最右边是低位（高位→低位）  </li>\n</ul>\n</li>\n<li>注意处理最高位进位，取数组时反向(n - 1 →  0)遍历，运算时正向(0→n-1)遍历</li>\n</ul>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// C = A + B, A &gt;= 0, B &gt;= 0</span></span><br><span class=\"line\">vector&lt;int&gt; <span class=\"function\"><span class=\"title\">add_two</span>(<span class=\"params\">vector&lt;int&gt; &amp;A,vector&lt;int&gt; &amp;B</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (A.size() &lt; B.size()) <span class=\"keyword\">return</span> add_two(B,A);</span><br><span class=\"line\"></span><br><span class=\"line\">    vector&lt;int&gt; C;</span><br><span class=\"line\">    int t = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (int i = <span class=\"number\">0</span>; i &lt; A.size(); i ++ )</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        t += A[i];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i &lt; B.size()) t += B[i];</span><br><span class=\"line\">        C.push_back(t % <span class=\"number\">10</span>);</span><br><span class=\"line\">        t /= <span class=\"number\">10</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (t) C.push_back(t);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> C;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//很简单</span></span><br></pre></td></tr></table></div></figure>\n\n        <h2 id=\"高精度减法\"   >\n          <a href=\"#高精度减法\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#高精度减法\" class=\"headerlink\" title=\"高精度减法\"></a>高精度减法</h2>\n      <p>和加法很类似</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// C = A - B, 满足A &gt;= B, A &gt;= 0, B &gt;= 0</span></span><br><span class=\"line\">vector&lt;int&gt; <span class=\"function\"><span class=\"title\">sub</span>(<span class=\"params\">vector&lt;int&gt; &amp;A, vector&lt;int&gt; &amp;B</span>)</span>&#123;</span><br><span class=\"line\">    vector&lt;int&gt; C;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (int i = <span class=\"number\">0</span>, t = <span class=\"number\">0</span>; i &lt; A.size(); i ++ )&#123;</span><br><span class=\"line\">    <span class=\"comment\">//t代表借位，为1时表示从高位借了一个单位来，为0时则没有</span></span><br><span class=\"line\">        t = A[i] - t;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i &lt; B.size()) t -= B[i];<span class=\"comment\">//当这个位置上B存在才能减</span></span><br><span class=\"line\">        C.push_back((t + <span class=\"number\">10</span>) % <span class=\"number\">10</span>);<span class=\"comment\">//将需要与不需要结尾的情况都包含了</span></span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">        t &gt;= 0输出t % 10</span></span><br><span class=\"line\"><span class=\"comment\">        t &lt; 0输出t + 10</span></span><br><span class=\"line\"><span class=\"comment\">        */</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (t &lt; <span class=\"number\">0</span>) t = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> t = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (C.size() &gt; <span class=\"number\">1</span> &amp;&amp; C.back() == <span class=\"number\">0</span>) C.pop_back();<span class=\"comment\">//去除多余的前导0</span></span><br><span class=\"line\">    <span class=\"comment\">//去掉前导0时，注意不能把结果0也去掉，即需要判断C.size() &gt; 1</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> C;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>假设A和B都是非负大整数，且A≥≥B，可用<code>cmp()</code>模板判断是否满足A≥≥B，不满足交换参数次序即可</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// A &gt;= B返回true，否则返回false</span></span><br><span class=\"line\">bool <span class=\"function\"><span class=\"title\">cmp</span>(<span class=\"params\">vector&lt;int&gt;&amp; A, vector&lt;int&gt;&amp; B</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (A.size() != B.size()) <span class=\"keyword\">return</span> A.size() &gt; B.size();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (int i = A.size() - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--) </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (A[i] != B[i])</span><br><span class=\"line\">            <span class=\"keyword\">return</span> A[i] &gt; B[i];</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n        <h2 id=\"高精度乘法\"   >\n          <a href=\"#高精度乘法\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#高精度乘法\" class=\"headerlink\" title=\"高精度乘法\"></a>高精度乘法</h2>\n      <p> 同样的模拟过程，考虑进位是最重要的，以及，在大数乘以0时，记得去除前导零。<br>模板：</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//高精度乘法</span></span><br><span class=\"line\">vector&lt;int&gt; <span class=\"function\"><span class=\"title\">mul</span>(<span class=\"params\">vector&lt;int&gt; &amp;A, int b</span>)</span>&#123;</span><br><span class=\"line\">    vector&lt;int&gt; C;</span><br><span class=\"line\"></span><br><span class=\"line\">    int t = <span class=\"number\">0</span>;<span class=\"comment\">//进位</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (int i = <span class=\"number\">0</span>; i &lt; A.size() || t != <span class=\"number\">0</span>; i ++ )&#123;<span class=\"comment\">//乘法模拟</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i &lt; A.size()) t += A[i] * b;</span><br><span class=\"line\">        C.push_back(t % <span class=\"number\">10</span>);<span class=\"comment\">//原位放入</span></span><br><span class=\"line\">        t /= <span class=\"number\">10</span>;<span class=\"comment\">//进位</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (C.size() &gt; <span class=\"number\">1</span> &amp;&amp; C.back() == <span class=\"number\">0</span>) C.pop_back();<span class=\"comment\">//去除前导零，比如一个大数乘以0</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> C;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n        <h2 id=\"高精度除法\"   >\n          <a href=\"#高精度除法\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#高精度除法\" class=\"headerlink\" title=\"高精度除法\"></a>高精度除法</h2>\n      <p> 除法的难度在他是需要从高位开始模拟，商用vector<int>保存，余数用参数r保存，而为了四则运算整体一致，计算后要将结果改为逆序。</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vector&lt;int&gt; div(vector&lt;int&gt; &amp;A, int b, int &amp;r)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    vector&lt;int&gt; C;</span><br><span class=\"line\">    r = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (int i = A.size() - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i -- )</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        r = r * <span class=\"number\">10</span> + A[i];</span><br><span class=\"line\">        C.push_back(r / b);</span><br><span class=\"line\">        r %= b;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    reverse(C.begin(), C.end());</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (C.size() &gt; <span class=\"number\">1</span> &amp;&amp; C.back() == <span class=\"number\">0</span>) C.pop_back();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> C;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></div></figure>"},{"title":"前缀和和差分","date":"2021-10-22T04:04:58.000Z","_content":"## 前缀和\n### 一维前缀和\n定义：`S[i] = a[1] + a[2] + ... a[i]` `a[l] + ... + a[r] = S[r] - S[l - 1]`\n\n```js\nint a[N], S[N];\n\nfor (int i = 1; i <= n; i++) S[i] = S[i - 1] + a[i];      // 给定数组a，初始化前缀和数组S\nfor (int i = 1; i <= n; i++)  {\n    scanf(\"%d\", &a[i])        // 非必须\n    S[i] = S[i - 1] + a[i];   // 未给定数组a，可合并读入和初始化的过程\n}\n\ncout << S[r] - S[l - 1] << endl; //区间和的计算，查询                      \n// 计算a[l] + ... + a[r]\n//在一些不涉及a[i]的题目中，不必要存储a[i]的值，只需要存储S[i]就足够\n```\n一维前缀和的目的就是降低复杂度，计算区间和的复杂度由原本O(n)降低成为了O(1),相当于直接茶查找，不再需要遍历了。  \n数组a和S的第1个元素都不存储（下标为0），而从第2个元素开始存储（下标为1），因为下标为0的S0=a0我们默认为0，以方便计算。[当计算1至某个数时，计算Sn- S0即可]。\n### 二维前缀和\n由以为前缀和，想要快速求出子矩阵的和的时候，就要用上二维前缀和了。 \n\nS[i, j] = 第i行j列格子左上部分所有元素的和\n以(x1, y1)为左上角，(x2, y2)为右下角的子矩阵的和为：\nS[x2, y2] - S[x1 - 1, y2] - S[x2, y1 - 1] + S[x1 - 1, y1 - 1]  \n\n![image.png](https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/bf37a3aeee024960ae2641dfa6469a18~tplv-k3u1fbpfcp-watermark.image?)\nS[i,j]即为图1红框中所有数的的和为：\n`S[i,j]=S[i,j−1]+S[i−1,j]−S[i−1,j−1]+a[i,j]S[i,j]=S[i,j−1]+S[i−1,j]−S[i−1,j−1]+a[i,j]`\n(x1,y1),(x2,y2)这一子矩阵中的所有数之和为：`S[x2,y2]−S[x1−1,y2]−S[x2,y1−1]+S[x1−1,y1−1]`  \n\n```js\n//模板\nint a[N][N], S[N][N];\n\n// 给定数组a\nfor (int i = 1; i <= n; i++)\n    for (int j = 1; j <= m; j++) \n        S[i][j] = S[i - 1][j] + S[i][j - 1] - S[i - 1][j - 1] + a[i][j];//可以拆开写\n\n// 没有给定数组a，需要读入并初始化前缀和数组，则可以合并读入和初始化的过程\nfor (int i = 1; i <= n; i++)\n    for (int j = 1; j <= m; j++) {\n        scanf(\"%d\", &a[i][j]);\n        S[i][j] = S[i - 1][j] + S[i][j - 1] - S[i - 1][j - 1] + a[i][j];\n    }\n\ncout << S[x2][y2] - S[x2][y1 - 1] - S[x1 - 1][y2] + S[x1 - 1][y1 - 1] << endl;      // 使用\n\n```\n同样假设数组a中行下标或列下标为0的项都是0，以方便计算。最重要的是复杂度由O(m * n)降为O(1)。[读入数组a和初始化前缀和数组S的过程可以合并在一起].\n## 差分\n### 一维差分\n差分就是前缀和的逆运算。  \n\n首先给定一个原数组`a`：`a[1], a[2], a[3]....a[n];`  \n然后我们构造一个数组`b` ： `b[1] ,b[2] , b[3].... b[i];`  \n使得 `a[i] = b[1] + b[2 ]+ b[3] +,,,,,, + b[i]`  也就是说，`a`数组是`b`数组的前缀和数组，我们就把`b`数组叫做`a`数组的**差分数组**。换句话说，每一个`a[i]`都是`b`数组中从头开始的一段区间和。  我们只要有`b`数组，通过前缀和运算，就可以在`O(n)` 的时间内得到`a`数组 。\n\n如何构造差分数组呢，使用最为直接的方法`b[i] = a[i] - a[i - 1]`\n\n一维差分的作用，也是一个结论：给a数组中的[l,r]区间中的每一个数都加上c,只需对差分数组b做` b[l] + = c, b[r+1] - = c`，再求前缀和就行了。时间复杂度为O(1), 大大提高了效率。  \n代码：\n\n```js\nint a[N], B[N];\n\nvoid insert(int l, int r, int c) {\n    B[l] += c;\n    B[r + 1] -= c;\n}\n\n// 初始化差分数组\nfor (int i = 1; i <= n; i++) {\n    scanf(\"%d\", &a[i]);\n    insert(i, i, a[i]);\n}\n\n// 输出前缀和数组\nfor (int i = 1; i <= n; i++) {\n    B[i] += B[i - 1];\n    printf(\"%d \", B[i]);\n}\n```\n### 二维差分\n同样的分体，如果扩展到二维，我们需要让二维数组被选中的子矩阵中的每个元素的值加上`c`,是否也可以达到`O(1)`的时间复杂度？当然是可以的，用二维差分，与一维差分很相似，类比二维前缀和、原a数组中a[i][j]是差分数组b数组左上角(1,1)到右下角(i,j)所包围矩形元素的和。  \n\n画一个图来理解这个过程：\n![image.png](https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/03e14067b0f244aebbd5086992040b3a~tplv-k3u1fbpfcp-watermark.image?)  \n`b[x1][ y1 ] +=c `， 让整个a数组中蓝色矩形面积的元素都加上了c。\n`b[x1,][y2+1]-=c` ， 让整个a数组中绿色矩形面积的元素再减去c，使其内元素不发生改变。\n`b[x2+1][y1]- =c` ，让整个a数组中紫色矩形面积的元素再减去c，使其内元素不发生改变。\n`b[x2+1][y2+1]+=c`;，对应图4,让整个a数组中红色矩形面积的元素再加上c，红色内的相当于被减了两次，再加上一次c，使其恢复。  \n这样的操作后再求二维前缀和，就使  矩阵都加c\n\n```js\nint B[N][N];            // 二维差分数组\n\nvoid insert(int x1, int y1, int x2, int y2, int c) {\n    B[x1][y1] += c;\n    B[x2 + 1][y1] -= c;\n    B[x1][y2 + 1] -= c;\n    B[x2 + 1][y2 + 1] += c;\n}\n\n// 构造（无需额外的数组a）\nint tmp;\nfor (int i = 1; i <= n; i++) {\n    for (int j = 1; j <= m; j++) {\n        scanf(\"%d\", &tmp);\n        insert(i, j, i, j, tmp);\n    }\n}\n\n// 转换成二维前缀和数组\nfor (int i = 1; i <= n; i++)\n    for (int j = 1; j <= m; j++)\n        B[i][j] += B[i - 1][j] + B[i][j - 1] - B[i - 1][j - 1];\n```","source":"_posts/前缀和和差分.md","raw":"---\ntitle: 前缀和和差分\ndate: 2021-10-22 12:04:58\ntags: \n    - Study\ncategories: \n    - 算法\n---\n## 前缀和\n### 一维前缀和\n定义：`S[i] = a[1] + a[2] + ... a[i]` `a[l] + ... + a[r] = S[r] - S[l - 1]`\n\n```js\nint a[N], S[N];\n\nfor (int i = 1; i <= n; i++) S[i] = S[i - 1] + a[i];      // 给定数组a，初始化前缀和数组S\nfor (int i = 1; i <= n; i++)  {\n    scanf(\"%d\", &a[i])        // 非必须\n    S[i] = S[i - 1] + a[i];   // 未给定数组a，可合并读入和初始化的过程\n}\n\ncout << S[r] - S[l - 1] << endl; //区间和的计算，查询                      \n// 计算a[l] + ... + a[r]\n//在一些不涉及a[i]的题目中，不必要存储a[i]的值，只需要存储S[i]就足够\n```\n一维前缀和的目的就是降低复杂度，计算区间和的复杂度由原本O(n)降低成为了O(1),相当于直接茶查找，不再需要遍历了。  \n数组a和S的第1个元素都不存储（下标为0），而从第2个元素开始存储（下标为1），因为下标为0的S0=a0我们默认为0，以方便计算。[当计算1至某个数时，计算Sn- S0即可]。\n### 二维前缀和\n由以为前缀和，想要快速求出子矩阵的和的时候，就要用上二维前缀和了。 \n\nS[i, j] = 第i行j列格子左上部分所有元素的和\n以(x1, y1)为左上角，(x2, y2)为右下角的子矩阵的和为：\nS[x2, y2] - S[x1 - 1, y2] - S[x2, y1 - 1] + S[x1 - 1, y1 - 1]  \n\n![image.png](https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/bf37a3aeee024960ae2641dfa6469a18~tplv-k3u1fbpfcp-watermark.image?)\nS[i,j]即为图1红框中所有数的的和为：\n`S[i,j]=S[i,j−1]+S[i−1,j]−S[i−1,j−1]+a[i,j]S[i,j]=S[i,j−1]+S[i−1,j]−S[i−1,j−1]+a[i,j]`\n(x1,y1),(x2,y2)这一子矩阵中的所有数之和为：`S[x2,y2]−S[x1−1,y2]−S[x2,y1−1]+S[x1−1,y1−1]`  \n\n```js\n//模板\nint a[N][N], S[N][N];\n\n// 给定数组a\nfor (int i = 1; i <= n; i++)\n    for (int j = 1; j <= m; j++) \n        S[i][j] = S[i - 1][j] + S[i][j - 1] - S[i - 1][j - 1] + a[i][j];//可以拆开写\n\n// 没有给定数组a，需要读入并初始化前缀和数组，则可以合并读入和初始化的过程\nfor (int i = 1; i <= n; i++)\n    for (int j = 1; j <= m; j++) {\n        scanf(\"%d\", &a[i][j]);\n        S[i][j] = S[i - 1][j] + S[i][j - 1] - S[i - 1][j - 1] + a[i][j];\n    }\n\ncout << S[x2][y2] - S[x2][y1 - 1] - S[x1 - 1][y2] + S[x1 - 1][y1 - 1] << endl;      // 使用\n\n```\n同样假设数组a中行下标或列下标为0的项都是0，以方便计算。最重要的是复杂度由O(m * n)降为O(1)。[读入数组a和初始化前缀和数组S的过程可以合并在一起].\n## 差分\n### 一维差分\n差分就是前缀和的逆运算。  \n\n首先给定一个原数组`a`：`a[1], a[2], a[3]....a[n];`  \n然后我们构造一个数组`b` ： `b[1] ,b[2] , b[3].... b[i];`  \n使得 `a[i] = b[1] + b[2 ]+ b[3] +,,,,,, + b[i]`  也就是说，`a`数组是`b`数组的前缀和数组，我们就把`b`数组叫做`a`数组的**差分数组**。换句话说，每一个`a[i]`都是`b`数组中从头开始的一段区间和。  我们只要有`b`数组，通过前缀和运算，就可以在`O(n)` 的时间内得到`a`数组 。\n\n如何构造差分数组呢，使用最为直接的方法`b[i] = a[i] - a[i - 1]`\n\n一维差分的作用，也是一个结论：给a数组中的[l,r]区间中的每一个数都加上c,只需对差分数组b做` b[l] + = c, b[r+1] - = c`，再求前缀和就行了。时间复杂度为O(1), 大大提高了效率。  \n代码：\n\n```js\nint a[N], B[N];\n\nvoid insert(int l, int r, int c) {\n    B[l] += c;\n    B[r + 1] -= c;\n}\n\n// 初始化差分数组\nfor (int i = 1; i <= n; i++) {\n    scanf(\"%d\", &a[i]);\n    insert(i, i, a[i]);\n}\n\n// 输出前缀和数组\nfor (int i = 1; i <= n; i++) {\n    B[i] += B[i - 1];\n    printf(\"%d \", B[i]);\n}\n```\n### 二维差分\n同样的分体，如果扩展到二维，我们需要让二维数组被选中的子矩阵中的每个元素的值加上`c`,是否也可以达到`O(1)`的时间复杂度？当然是可以的，用二维差分，与一维差分很相似，类比二维前缀和、原a数组中a[i][j]是差分数组b数组左上角(1,1)到右下角(i,j)所包围矩形元素的和。  \n\n画一个图来理解这个过程：\n![image.png](https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/03e14067b0f244aebbd5086992040b3a~tplv-k3u1fbpfcp-watermark.image?)  \n`b[x1][ y1 ] +=c `， 让整个a数组中蓝色矩形面积的元素都加上了c。\n`b[x1,][y2+1]-=c` ， 让整个a数组中绿色矩形面积的元素再减去c，使其内元素不发生改变。\n`b[x2+1][y1]- =c` ，让整个a数组中紫色矩形面积的元素再减去c，使其内元素不发生改变。\n`b[x2+1][y2+1]+=c`;，对应图4,让整个a数组中红色矩形面积的元素再加上c，红色内的相当于被减了两次，再加上一次c，使其恢复。  \n这样的操作后再求二维前缀和，就使  矩阵都加c\n\n```js\nint B[N][N];            // 二维差分数组\n\nvoid insert(int x1, int y1, int x2, int y2, int c) {\n    B[x1][y1] += c;\n    B[x2 + 1][y1] -= c;\n    B[x1][y2 + 1] -= c;\n    B[x2 + 1][y2 + 1] += c;\n}\n\n// 构造（无需额外的数组a）\nint tmp;\nfor (int i = 1; i <= n; i++) {\n    for (int j = 1; j <= m; j++) {\n        scanf(\"%d\", &tmp);\n        insert(i, j, i, j, tmp);\n    }\n}\n\n// 转换成二维前缀和数组\nfor (int i = 1; i <= n; i++)\n    for (int j = 1; j <= m; j++)\n        B[i][j] += B[i - 1][j] + B[i][j - 1] - B[i - 1][j - 1];\n```","slug":"前缀和和差分","published":1,"updated":"2021-10-22T04:14:39.427Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckv1v0mfi00001wwsfkvs2cfu","content":"\n        <h2 id=\"前缀和\"   >\n          <a href=\"#前缀和\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#前缀和\" class=\"headerlink\" title=\"前缀和\"></a>前缀和</h2>\n      \n        <h3 id=\"一维前缀和\"   >\n          <a href=\"#一维前缀和\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#一维前缀和\" class=\"headerlink\" title=\"一维前缀和\"></a>一维前缀和</h3>\n      <p>定义：<code>S[i] = a[1] + a[2] + ... a[i]</code> <code>a[l] + ... + a[r] = S[r] - S[l - 1]</code></p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int a[N], S[N];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (int i = <span class=\"number\">1</span>; i &lt;= n; i++) S[i] = S[i - <span class=\"number\">1</span>] + a[i];      <span class=\"comment\">// 给定数组a，初始化前缀和数组S</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (int i = <span class=\"number\">1</span>; i &lt;= n; i++)  &#123;</span><br><span class=\"line\">    scanf(<span class=\"string\">&quot;%d&quot;</span>, &amp;a[i])        <span class=\"comment\">// 非必须</span></span><br><span class=\"line\">    S[i] = S[i - <span class=\"number\">1</span>] + a[i];   <span class=\"comment\">// 未给定数组a，可合并读入和初始化的过程</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">cout &lt;&lt; S[r] - S[l - <span class=\"number\">1</span>] &lt;&lt; endl; <span class=\"comment\">//区间和的计算，查询                      </span></span><br><span class=\"line\"><span class=\"comment\">// 计算a[l] + ... + a[r]</span></span><br><span class=\"line\"><span class=\"comment\">//在一些不涉及a[i]的题目中，不必要存储a[i]的值，只需要存储S[i]就足够</span></span><br></pre></td></tr></table></div></figure>\n<p>一维前缀和的目的就是降低复杂度，计算区间和的复杂度由原本O(n)降低成为了O(1),相当于直接茶查找，不再需要遍历了。<br>数组a和S的第1个元素都不存储（下标为0），而从第2个元素开始存储（下标为1），因为下标为0的S0=a0我们默认为0，以方便计算。[当计算1至某个数时，计算Sn- S0即可]。</p>\n\n        <h3 id=\"二维前缀和\"   >\n          <a href=\"#二维前缀和\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#二维前缀和\" class=\"headerlink\" title=\"二维前缀和\"></a>二维前缀和</h3>\n      <p>由以为前缀和，想要快速求出子矩阵的和的时候，就要用上二维前缀和了。 </p>\n<p>S[i, j] = 第i行j列格子左上部分所有元素的和<br>以(x1, y1)为左上角，(x2, y2)为右下角的子矩阵的和为：<br>S[x2, y2] - S[x1 - 1, y2] - S[x2, y1 - 1] + S[x1 - 1, y1 - 1]  </p>\n<p><img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/bf37a3aeee024960ae2641dfa6469a18~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\"><br>S[i,j]即为图1红框中所有数的的和为：<br><code>S[i,j]=S[i,j−1]+S[i−1,j]−S[i−1,j−1]+a[i,j]S[i,j]=S[i,j−1]+S[i−1,j]−S[i−1,j−1]+a[i,j]</code><br>(x1,y1),(x2,y2)这一子矩阵中的所有数之和为：<code>S[x2,y2]−S[x1−1,y2]−S[x2,y1−1]+S[x1−1,y1−1]</code>  </p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//模板</span></span><br><span class=\"line\">int a[N][N], S[N][N];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 给定数组a</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (int i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (int j = <span class=\"number\">1</span>; j &lt;= m; j++) </span><br><span class=\"line\">        S[i][j] = S[i - <span class=\"number\">1</span>][j] + S[i][j - <span class=\"number\">1</span>] - S[i - <span class=\"number\">1</span>][j - <span class=\"number\">1</span>] + a[i][j];<span class=\"comment\">//可以拆开写</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 没有给定数组a，需要读入并初始化前缀和数组，则可以合并读入和初始化的过程</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (int i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (int j = <span class=\"number\">1</span>; j &lt;= m; j++) &#123;</span><br><span class=\"line\">        scanf(<span class=\"string\">&quot;%d&quot;</span>, &amp;a[i][j]);</span><br><span class=\"line\">        S[i][j] = S[i - <span class=\"number\">1</span>][j] + S[i][j - <span class=\"number\">1</span>] - S[i - <span class=\"number\">1</span>][j - <span class=\"number\">1</span>] + a[i][j];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">cout &lt;&lt; S[x2][y2] - S[x2][y1 - <span class=\"number\">1</span>] - S[x1 - <span class=\"number\">1</span>][y2] + S[x1 - <span class=\"number\">1</span>][y1 - <span class=\"number\">1</span>] &lt;&lt; endl;      <span class=\"comment\">// 使用</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></div></figure>\n<p>同样假设数组a中行下标或列下标为0的项都是0，以方便计算。最重要的是复杂度由O(m * n)降为O(1)。[读入数组a和初始化前缀和数组S的过程可以合并在一起].</p>\n\n        <h2 id=\"差分\"   >\n          <a href=\"#差分\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#差分\" class=\"headerlink\" title=\"差分\"></a>差分</h2>\n      \n        <h3 id=\"一维差分\"   >\n          <a href=\"#一维差分\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#一维差分\" class=\"headerlink\" title=\"一维差分\"></a>一维差分</h3>\n      <p>差分就是前缀和的逆运算。  </p>\n<p>首先给定一个原数组<code>a</code>：<code>a[1], a[2], a[3]....a[n];</code><br>然后我们构造一个数组<code>b</code> ： <code>b[1] ,b[2] , b[3].... b[i];</code><br>使得 <code>a[i] = b[1] + b[2 ]+ b[3] +,,,,,, + b[i]</code>  也就是说，<code>a</code>数组是<code>b</code>数组的前缀和数组，我们就把<code>b</code>数组叫做<code>a</code>数组的<strong>差分数组</strong>。换句话说，每一个<code>a[i]</code>都是<code>b</code>数组中从头开始的一段区间和。  我们只要有<code>b</code>数组，通过前缀和运算，就可以在<code>O(n)</code> 的时间内得到<code>a</code>数组 。</p>\n<p>如何构造差分数组呢，使用最为直接的方法<code>b[i] = a[i] - a[i - 1]</code></p>\n<p>一维差分的作用，也是一个结论：给a数组中的[l,r]区间中的每一个数都加上c,只需对差分数组b做<code> b[l] + = c, b[r+1] - = c</code>，再求前缀和就行了。时间复杂度为O(1), 大大提高了效率。<br>代码：</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int a[N], B[N];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"function\"><span class=\"title\">insert</span>(<span class=\"params\">int l, int r, int c</span>)</span> &#123;</span><br><span class=\"line\">    B[l] += c;</span><br><span class=\"line\">    B[r + <span class=\"number\">1</span>] -= c;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 初始化差分数组</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (int i = <span class=\"number\">1</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">    scanf(<span class=\"string\">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class=\"line\">    insert(i, i, a[i]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 输出前缀和数组</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (int i = <span class=\"number\">1</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">    B[i] += B[i - <span class=\"number\">1</span>];</span><br><span class=\"line\">    printf(<span class=\"string\">&quot;%d &quot;</span>, B[i]);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n        <h3 id=\"二维差分\"   >\n          <a href=\"#二维差分\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#二维差分\" class=\"headerlink\" title=\"二维差分\"></a>二维差分</h3>\n      <p>同样的分体，如果扩展到二维，我们需要让二维数组被选中的子矩阵中的每个元素的值加上<code>c</code>,是否也可以达到<code>O(1)</code>的时间复杂度？当然是可以的，用二维差分，与一维差分很相似，类比二维前缀和、原a数组中a[i][j]是差分数组b数组左上角(1,1)到右下角(i,j)所包围矩形元素的和。  </p>\n<p>画一个图来理解这个过程：<br><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/03e14067b0f244aebbd5086992040b3a~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\"><br><code>b[x1][ y1 ] +=c </code>， 让整个a数组中蓝色矩形面积的元素都加上了c。<br><code>b[x1,][y2+1]-=c</code> ， 让整个a数组中绿色矩形面积的元素再减去c，使其内元素不发生改变。<br><code>b[x2+1][y1]- =c</code> ，让整个a数组中紫色矩形面积的元素再减去c，使其内元素不发生改变。<br><code>b[x2+1][y2+1]+=c</code>;，对应图4,让整个a数组中红色矩形面积的元素再加上c，红色内的相当于被减了两次，再加上一次c，使其恢复。<br>这样的操作后再求二维前缀和，就使  矩阵都加c</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int B[N][N];            <span class=\"comment\">// 二维差分数组</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"function\"><span class=\"title\">insert</span>(<span class=\"params\">int x1, int y1, int x2, int y2, int c</span>)</span> &#123;</span><br><span class=\"line\">    B[x1][y1] += c;</span><br><span class=\"line\">    B[x2 + <span class=\"number\">1</span>][y1] -= c;</span><br><span class=\"line\">    B[x1][y2 + <span class=\"number\">1</span>] -= c;</span><br><span class=\"line\">    B[x2 + <span class=\"number\">1</span>][y2 + <span class=\"number\">1</span>] += c;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 构造（无需额外的数组a）</span></span><br><span class=\"line\">int tmp;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (int i = <span class=\"number\">1</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (int j = <span class=\"number\">1</span>; j &lt;= m; j++) &#123;</span><br><span class=\"line\">        scanf(<span class=\"string\">&quot;%d&quot;</span>, &amp;tmp);</span><br><span class=\"line\">        insert(i, j, i, j, tmp);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 转换成二维前缀和数组</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (int i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (int j = <span class=\"number\">1</span>; j &lt;= m; j++)</span><br><span class=\"line\">        B[i][j] += B[i - <span class=\"number\">1</span>][j] + B[i][j - <span class=\"number\">1</span>] - B[i - <span class=\"number\">1</span>][j - <span class=\"number\">1</span>];</span><br></pre></td></tr></table></div></figure>","site":{"data":{}},"excerpt":"","more":"\n        <h2 id=\"前缀和\"   >\n          <a href=\"#前缀和\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#前缀和\" class=\"headerlink\" title=\"前缀和\"></a>前缀和</h2>\n      \n        <h3 id=\"一维前缀和\"   >\n          <a href=\"#一维前缀和\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#一维前缀和\" class=\"headerlink\" title=\"一维前缀和\"></a>一维前缀和</h3>\n      <p>定义：<code>S[i] = a[1] + a[2] + ... a[i]</code> <code>a[l] + ... + a[r] = S[r] - S[l - 1]</code></p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int a[N], S[N];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (int i = <span class=\"number\">1</span>; i &lt;= n; i++) S[i] = S[i - <span class=\"number\">1</span>] + a[i];      <span class=\"comment\">// 给定数组a，初始化前缀和数组S</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (int i = <span class=\"number\">1</span>; i &lt;= n; i++)  &#123;</span><br><span class=\"line\">    scanf(<span class=\"string\">&quot;%d&quot;</span>, &amp;a[i])        <span class=\"comment\">// 非必须</span></span><br><span class=\"line\">    S[i] = S[i - <span class=\"number\">1</span>] + a[i];   <span class=\"comment\">// 未给定数组a，可合并读入和初始化的过程</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">cout &lt;&lt; S[r] - S[l - <span class=\"number\">1</span>] &lt;&lt; endl; <span class=\"comment\">//区间和的计算，查询                      </span></span><br><span class=\"line\"><span class=\"comment\">// 计算a[l] + ... + a[r]</span></span><br><span class=\"line\"><span class=\"comment\">//在一些不涉及a[i]的题目中，不必要存储a[i]的值，只需要存储S[i]就足够</span></span><br></pre></td></tr></table></div></figure>\n<p>一维前缀和的目的就是降低复杂度，计算区间和的复杂度由原本O(n)降低成为了O(1),相当于直接茶查找，不再需要遍历了。<br>数组a和S的第1个元素都不存储（下标为0），而从第2个元素开始存储（下标为1），因为下标为0的S0=a0我们默认为0，以方便计算。[当计算1至某个数时，计算Sn- S0即可]。</p>\n\n        <h3 id=\"二维前缀和\"   >\n          <a href=\"#二维前缀和\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#二维前缀和\" class=\"headerlink\" title=\"二维前缀和\"></a>二维前缀和</h3>\n      <p>由以为前缀和，想要快速求出子矩阵的和的时候，就要用上二维前缀和了。 </p>\n<p>S[i, j] = 第i行j列格子左上部分所有元素的和<br>以(x1, y1)为左上角，(x2, y2)为右下角的子矩阵的和为：<br>S[x2, y2] - S[x1 - 1, y2] - S[x2, y1 - 1] + S[x1 - 1, y1 - 1]  </p>\n<p><img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/bf37a3aeee024960ae2641dfa6469a18~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\"><br>S[i,j]即为图1红框中所有数的的和为：<br><code>S[i,j]=S[i,j−1]+S[i−1,j]−S[i−1,j−1]+a[i,j]S[i,j]=S[i,j−1]+S[i−1,j]−S[i−1,j−1]+a[i,j]</code><br>(x1,y1),(x2,y2)这一子矩阵中的所有数之和为：<code>S[x2,y2]−S[x1−1,y2]−S[x2,y1−1]+S[x1−1,y1−1]</code>  </p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//模板</span></span><br><span class=\"line\">int a[N][N], S[N][N];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 给定数组a</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (int i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (int j = <span class=\"number\">1</span>; j &lt;= m; j++) </span><br><span class=\"line\">        S[i][j] = S[i - <span class=\"number\">1</span>][j] + S[i][j - <span class=\"number\">1</span>] - S[i - <span class=\"number\">1</span>][j - <span class=\"number\">1</span>] + a[i][j];<span class=\"comment\">//可以拆开写</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 没有给定数组a，需要读入并初始化前缀和数组，则可以合并读入和初始化的过程</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (int i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (int j = <span class=\"number\">1</span>; j &lt;= m; j++) &#123;</span><br><span class=\"line\">        scanf(<span class=\"string\">&quot;%d&quot;</span>, &amp;a[i][j]);</span><br><span class=\"line\">        S[i][j] = S[i - <span class=\"number\">1</span>][j] + S[i][j - <span class=\"number\">1</span>] - S[i - <span class=\"number\">1</span>][j - <span class=\"number\">1</span>] + a[i][j];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">cout &lt;&lt; S[x2][y2] - S[x2][y1 - <span class=\"number\">1</span>] - S[x1 - <span class=\"number\">1</span>][y2] + S[x1 - <span class=\"number\">1</span>][y1 - <span class=\"number\">1</span>] &lt;&lt; endl;      <span class=\"comment\">// 使用</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></div></figure>\n<p>同样假设数组a中行下标或列下标为0的项都是0，以方便计算。最重要的是复杂度由O(m * n)降为O(1)。[读入数组a和初始化前缀和数组S的过程可以合并在一起].</p>\n\n        <h2 id=\"差分\"   >\n          <a href=\"#差分\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#差分\" class=\"headerlink\" title=\"差分\"></a>差分</h2>\n      \n        <h3 id=\"一维差分\"   >\n          <a href=\"#一维差分\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#一维差分\" class=\"headerlink\" title=\"一维差分\"></a>一维差分</h3>\n      <p>差分就是前缀和的逆运算。  </p>\n<p>首先给定一个原数组<code>a</code>：<code>a[1], a[2], a[3]....a[n];</code><br>然后我们构造一个数组<code>b</code> ： <code>b[1] ,b[2] , b[3].... b[i];</code><br>使得 <code>a[i] = b[1] + b[2 ]+ b[3] +,,,,,, + b[i]</code>  也就是说，<code>a</code>数组是<code>b</code>数组的前缀和数组，我们就把<code>b</code>数组叫做<code>a</code>数组的<strong>差分数组</strong>。换句话说，每一个<code>a[i]</code>都是<code>b</code>数组中从头开始的一段区间和。  我们只要有<code>b</code>数组，通过前缀和运算，就可以在<code>O(n)</code> 的时间内得到<code>a</code>数组 。</p>\n<p>如何构造差分数组呢，使用最为直接的方法<code>b[i] = a[i] - a[i - 1]</code></p>\n<p>一维差分的作用，也是一个结论：给a数组中的[l,r]区间中的每一个数都加上c,只需对差分数组b做<code> b[l] + = c, b[r+1] - = c</code>，再求前缀和就行了。时间复杂度为O(1), 大大提高了效率。<br>代码：</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int a[N], B[N];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"function\"><span class=\"title\">insert</span>(<span class=\"params\">int l, int r, int c</span>)</span> &#123;</span><br><span class=\"line\">    B[l] += c;</span><br><span class=\"line\">    B[r + <span class=\"number\">1</span>] -= c;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 初始化差分数组</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (int i = <span class=\"number\">1</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">    scanf(<span class=\"string\">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class=\"line\">    insert(i, i, a[i]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 输出前缀和数组</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (int i = <span class=\"number\">1</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">    B[i] += B[i - <span class=\"number\">1</span>];</span><br><span class=\"line\">    printf(<span class=\"string\">&quot;%d &quot;</span>, B[i]);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n        <h3 id=\"二维差分\"   >\n          <a href=\"#二维差分\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#二维差分\" class=\"headerlink\" title=\"二维差分\"></a>二维差分</h3>\n      <p>同样的分体，如果扩展到二维，我们需要让二维数组被选中的子矩阵中的每个元素的值加上<code>c</code>,是否也可以达到<code>O(1)</code>的时间复杂度？当然是可以的，用二维差分，与一维差分很相似，类比二维前缀和、原a数组中a[i][j]是差分数组b数组左上角(1,1)到右下角(i,j)所包围矩形元素的和。  </p>\n<p>画一个图来理解这个过程：<br><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/03e14067b0f244aebbd5086992040b3a~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\"><br><code>b[x1][ y1 ] +=c </code>， 让整个a数组中蓝色矩形面积的元素都加上了c。<br><code>b[x1,][y2+1]-=c</code> ， 让整个a数组中绿色矩形面积的元素再减去c，使其内元素不发生改变。<br><code>b[x2+1][y1]- =c</code> ，让整个a数组中紫色矩形面积的元素再减去c，使其内元素不发生改变。<br><code>b[x2+1][y2+1]+=c</code>;，对应图4,让整个a数组中红色矩形面积的元素再加上c，红色内的相当于被减了两次，再加上一次c，使其恢复。<br>这样的操作后再求二维前缀和，就使  矩阵都加c</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int B[N][N];            <span class=\"comment\">// 二维差分数组</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"function\"><span class=\"title\">insert</span>(<span class=\"params\">int x1, int y1, int x2, int y2, int c</span>)</span> &#123;</span><br><span class=\"line\">    B[x1][y1] += c;</span><br><span class=\"line\">    B[x2 + <span class=\"number\">1</span>][y1] -= c;</span><br><span class=\"line\">    B[x1][y2 + <span class=\"number\">1</span>] -= c;</span><br><span class=\"line\">    B[x2 + <span class=\"number\">1</span>][y2 + <span class=\"number\">1</span>] += c;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 构造（无需额外的数组a）</span></span><br><span class=\"line\">int tmp;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (int i = <span class=\"number\">1</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (int j = <span class=\"number\">1</span>; j &lt;= m; j++) &#123;</span><br><span class=\"line\">        scanf(<span class=\"string\">&quot;%d&quot;</span>, &amp;tmp);</span><br><span class=\"line\">        insert(i, j, i, j, tmp);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 转换成二维前缀和数组</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (int i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (int j = <span class=\"number\">1</span>; j &lt;= m; j++)</span><br><span class=\"line\">        B[i][j] += B[i - <span class=\"number\">1</span>][j] + B[i][j - <span class=\"number\">1</span>] - B[i - <span class=\"number\">1</span>][j - <span class=\"number\">1</span>];</span><br></pre></td></tr></table></div></figure>"},{"title":"Acwing796","date":"2021-10-22T04:44:18.000Z","_content":"输入一个 n 行 m 列的整数矩阵，再输入 q 个操作，每个操作包含五个整数 x1,y1,x2,y2,c，其中 (x1,y1) 和 (x2,y2) 表示一个子矩阵的左上角坐标和右下角坐标。\n\n每个操作都要将选中的子矩阵中的每个元素的值加上 cc。\n\n请你将进行完所有操作后的矩阵输出。\n#### 输入格式\n\n第一行包含整数 n,m,q。\n\n接下来 n 行，每行包含 m 个整数，表示整数矩阵。\n\n接下来 q 行，每行包含 5 个整数 x1,y1,x2,y2,c，表示一个操作。\n#### 输出格式\n\n共 n 行，每行 m 个整数，表示所有操作进行完毕后的最终矩阵。\n#### 数据范围\n\n1≤n,m≤1000  \n1≤q≤100000  \n1≤x1≤x2≤n  \n1≤y1≤y2≤m  \n−1000≤c≤1000  \n−1000≤矩阵内元素的值≤1000  \n\n#### 输入样例：\n\n```\n3 4 3\n1 2 2 1\n3 2 2 1\n1 1 1 1\n1 1 2 2 1\n1 3 2 3 2\n3 1 3 4 1\n```\n\n#### 输出样例：\n\n```\n2 3 4 1\n4 3 4 1\n2 2 2 2\n```\n#### 思路\n使用二维差分的思路，同时创建两个数组a,b。a是原数组，b是差分数组。\n对差分数组b进行操作，那么a数组也对应变化，想要子矩阵区域全部加上c，需要这样的代码`：b[x1][y1] += c;\n    b[x2 + 1][y1] -= c;\n    b[x1][y2 + 1] -= c;\n    b[x2 + 1][y2 + 1] += c;`  \n 对差分数组进行插入c操作后，在对其求二维前缀和，就完成题目了。  \n \n需要注意的是差分数组的构造，你可以使用`b[i][j] = a[i][j] - a[i - 1][j] - a[i][j - 1] + a[i -1][j - 1];`这样的直接构造方法，也可以利用插入函数，将a,b数组同时视作空的，对a数组每一个小方格加上对应的a[i][j],那么同时用插入c的方法将a[i][j] 插入数组b的一个小方格内。都可以完成差分数组的构造。\n```js\n//foreverking\n#include <vector>\n#include <cstdio>\n#include <queue>\n#include <algorithm>\n#include <cstring>\n#include <iostream>\n#include <cmath>\nusing namespace std;\n\nconst int N = 1010;\n\nint n,m,q;\nint a[N][N],b[N][N];\n\nvoid insert(int x1,int y1,int x2,int y2,int c){\n    b[x1][y1] += c;\n    b[x1][y2 + 1] -= c;\n    b[x2 + 1][y1] -= c;\n    b[x2 + 1][y2 + 1] += c;\n}\n\nint main(){\n    cin >> n >> m >> q;\n    for(int i = 1; i <= n; i++)\n        for(int j = 1; j <= m; j++)\n            cin >> a[i][j];//输入原数组\n\n    for(int i = 1; i <= n; i++)\n        for(int j = 1; j <= m; j++)\n             insert(i,j,i,j,a[i][j]);//构建差分数组B\n            //b[i][j] = a[i][j] - a[i - 1][j] - a[i][j - 1] + a[i -1][j - 1];\n\n    while(q--){\n        int x1,x2,y1,y2,c;\n        cin >> x1 >> y1 >> x2 >> y2 >> c;\n        insert(x1,y1,x2,y2,c); \n    }\n    // for(int i = 1; i <= n; i++)\n    //     for(int j = 1; j <= m; j++)\n    //         b[i][j] += b[i - 1][j] + b[i][j - 1] - b[i - 1][j -1];//求二维前缀和\n    for(int i = 1; i <= n; i++){\n        for(int j = 1; j <= m; j++){\n            //b[i][j] += b[i - 1][j] + b[i][j - 1] - b[i - 1][j -1];//求二维前缀和\n            cout << b[i][j] << \" \";\n        }\n        cout << endl;\n    }\n           \n\n    return 0;\n}\n```","source":"_posts/Acwing796.md","raw":"---\ntitle: Acwing796\ndate: 2021-10-22 12:44:18\ntags: \n    - Study\ncategories: \n    - 题解\n    - Acwing\n---\n输入一个 n 行 m 列的整数矩阵，再输入 q 个操作，每个操作包含五个整数 x1,y1,x2,y2,c，其中 (x1,y1) 和 (x2,y2) 表示一个子矩阵的左上角坐标和右下角坐标。\n\n每个操作都要将选中的子矩阵中的每个元素的值加上 cc。\n\n请你将进行完所有操作后的矩阵输出。\n#### 输入格式\n\n第一行包含整数 n,m,q。\n\n接下来 n 行，每行包含 m 个整数，表示整数矩阵。\n\n接下来 q 行，每行包含 5 个整数 x1,y1,x2,y2,c，表示一个操作。\n#### 输出格式\n\n共 n 行，每行 m 个整数，表示所有操作进行完毕后的最终矩阵。\n#### 数据范围\n\n1≤n,m≤1000  \n1≤q≤100000  \n1≤x1≤x2≤n  \n1≤y1≤y2≤m  \n−1000≤c≤1000  \n−1000≤矩阵内元素的值≤1000  \n\n#### 输入样例：\n\n```\n3 4 3\n1 2 2 1\n3 2 2 1\n1 1 1 1\n1 1 2 2 1\n1 3 2 3 2\n3 1 3 4 1\n```\n\n#### 输出样例：\n\n```\n2 3 4 1\n4 3 4 1\n2 2 2 2\n```\n#### 思路\n使用二维差分的思路，同时创建两个数组a,b。a是原数组，b是差分数组。\n对差分数组b进行操作，那么a数组也对应变化，想要子矩阵区域全部加上c，需要这样的代码`：b[x1][y1] += c;\n    b[x2 + 1][y1] -= c;\n    b[x1][y2 + 1] -= c;\n    b[x2 + 1][y2 + 1] += c;`  \n 对差分数组进行插入c操作后，在对其求二维前缀和，就完成题目了。  \n \n需要注意的是差分数组的构造，你可以使用`b[i][j] = a[i][j] - a[i - 1][j] - a[i][j - 1] + a[i -1][j - 1];`这样的直接构造方法，也可以利用插入函数，将a,b数组同时视作空的，对a数组每一个小方格加上对应的a[i][j],那么同时用插入c的方法将a[i][j] 插入数组b的一个小方格内。都可以完成差分数组的构造。\n```js\n//foreverking\n#include <vector>\n#include <cstdio>\n#include <queue>\n#include <algorithm>\n#include <cstring>\n#include <iostream>\n#include <cmath>\nusing namespace std;\n\nconst int N = 1010;\n\nint n,m,q;\nint a[N][N],b[N][N];\n\nvoid insert(int x1,int y1,int x2,int y2,int c){\n    b[x1][y1] += c;\n    b[x1][y2 + 1] -= c;\n    b[x2 + 1][y1] -= c;\n    b[x2 + 1][y2 + 1] += c;\n}\n\nint main(){\n    cin >> n >> m >> q;\n    for(int i = 1; i <= n; i++)\n        for(int j = 1; j <= m; j++)\n            cin >> a[i][j];//输入原数组\n\n    for(int i = 1; i <= n; i++)\n        for(int j = 1; j <= m; j++)\n             insert(i,j,i,j,a[i][j]);//构建差分数组B\n            //b[i][j] = a[i][j] - a[i - 1][j] - a[i][j - 1] + a[i -1][j - 1];\n\n    while(q--){\n        int x1,x2,y1,y2,c;\n        cin >> x1 >> y1 >> x2 >> y2 >> c;\n        insert(x1,y1,x2,y2,c); \n    }\n    // for(int i = 1; i <= n; i++)\n    //     for(int j = 1; j <= m; j++)\n    //         b[i][j] += b[i - 1][j] + b[i][j - 1] - b[i - 1][j -1];//求二维前缀和\n    for(int i = 1; i <= n; i++){\n        for(int j = 1; j <= m; j++){\n            //b[i][j] += b[i - 1][j] + b[i][j - 1] - b[i - 1][j -1];//求二维前缀和\n            cout << b[i][j] << \" \";\n        }\n        cout << endl;\n    }\n           \n\n    return 0;\n}\n```","slug":"Acwing796","published":1,"updated":"2021-10-22T04:44:41.582Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckv1w3ent0000vkws8lydd7ue","content":"<p>输入一个 n 行 m 列的整数矩阵，再输入 q 个操作，每个操作包含五个整数 x1,y1,x2,y2,c，其中 (x1,y1) 和 (x2,y2) 表示一个子矩阵的左上角坐标和右下角坐标。</p>\n<p>每个操作都要将选中的子矩阵中的每个元素的值加上 cc。</p>\n<p>请你将进行完所有操作后的矩阵输出。</p>\n\n        <h4 id=\"输入格式\"   >\n          <a href=\"#输入格式\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#输入格式\" class=\"headerlink\" title=\"输入格式\"></a>输入格式</h4>\n      <p>第一行包含整数 n,m,q。</p>\n<p>接下来 n 行，每行包含 m 个整数，表示整数矩阵。</p>\n<p>接下来 q 行，每行包含 5 个整数 x1,y1,x2,y2,c，表示一个操作。</p>\n\n        <h4 id=\"输出格式\"   >\n          <a href=\"#输出格式\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#输出格式\" class=\"headerlink\" title=\"输出格式\"></a>输出格式</h4>\n      <p>共 n 行，每行 m 个整数，表示所有操作进行完毕后的最终矩阵。</p>\n\n        <h4 id=\"数据范围\"   >\n          <a href=\"#数据范围\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#数据范围\" class=\"headerlink\" title=\"数据范围\"></a>数据范围</h4>\n      <p>1≤n,m≤1000<br>1≤q≤100000<br>1≤x1≤x2≤n<br>1≤y1≤y2≤m<br>−1000≤c≤1000<br>−1000≤矩阵内元素的值≤1000  </p>\n\n        <h4 id=\"输入样例：\"   >\n          <a href=\"#输入样例：\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#输入样例：\" class=\"headerlink\" title=\"输入样例：\"></a>输入样例：</h4>\n      <figure class=\"highlight plain\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">3 4 3</span><br><span class=\"line\">1 2 2 1</span><br><span class=\"line\">3 2 2 1</span><br><span class=\"line\">1 1 1 1</span><br><span class=\"line\">1 1 2 2 1</span><br><span class=\"line\">1 3 2 3 2</span><br><span class=\"line\">3 1 3 4 1</span><br></pre></td></tr></table></div></figure>\n\n\n        <h4 id=\"输出样例：\"   >\n          <a href=\"#输出样例：\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#输出样例：\" class=\"headerlink\" title=\"输出样例：\"></a>输出样例：</h4>\n      <figure class=\"highlight plain\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2 3 4 1</span><br><span class=\"line\">4 3 4 1</span><br><span class=\"line\">2 2 2 2</span><br></pre></td></tr></table></div></figure>\n\n        <h4 id=\"思路\"   >\n          <a href=\"#思路\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h4>\n      <p>使用二维差分的思路，同时创建两个数组a,b。a是原数组，b是差分数组。<br>对差分数组b进行操作，那么a数组也对应变化，想要子矩阵区域全部加上c，需要这样的代码<code>：b[x1][y1] += c;     b[x2 + 1][y1] -= c;     b[x1][y2 + 1] -= c;     b[x2 + 1][y2 + 1] += c;</code><br> 对差分数组进行插入c操作后，在对其求二维前缀和，就完成题目了。  </p>\n<p>需要注意的是差分数组的构造，你可以使用<code>b[i][j] = a[i][j] - a[i - 1][j] - a[i][j - 1] + a[i -1][j - 1];</code>这样的直接构造方法，也可以利用插入函数，将a,b数组同时视作空的，对a数组每一个小方格加上对应的a[i][j],那么同时用插入c的方法将a[i][j] 插入数组b的一个小方格内。都可以完成差分数组的构造。</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//foreverking</span></span><br><span class=\"line\">#include &lt;vector&gt;</span><br><span class=\"line\">#include &lt;cstdio&gt;</span><br><span class=\"line\">#include &lt;queue&gt;</span><br><span class=\"line\">#include &lt;algorithm&gt;</span><br><span class=\"line\">#include &lt;cstring&gt;</span><br><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">#include &lt;cmath&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> int N = <span class=\"number\">1010</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">int n,m,q;</span><br><span class=\"line\">int a[N][N],b[N][N];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"function\"><span class=\"title\">insert</span>(<span class=\"params\">int x1,int y1,int x2,int y2,int c</span>)</span>&#123;</span><br><span class=\"line\">    b[x1][y1] += c;</span><br><span class=\"line\">    b[x1][y2 + <span class=\"number\">1</span>] -= c;</span><br><span class=\"line\">    b[x2 + <span class=\"number\">1</span>][y1] -= c;</span><br><span class=\"line\">    b[x2 + <span class=\"number\">1</span>][y2 + <span class=\"number\">1</span>] += c;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">int <span class=\"function\"><span class=\"title\">main</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    cin &gt;&gt; n &gt;&gt; m &gt;&gt; q;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(int i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(int j = <span class=\"number\">1</span>; j &lt;= m; j++)</span><br><span class=\"line\">            cin &gt;&gt; a[i][j];<span class=\"comment\">//输入原数组</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(int i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(int j = <span class=\"number\">1</span>; j &lt;= m; j++)</span><br><span class=\"line\">             insert(i,j,i,j,a[i][j]);<span class=\"comment\">//构建差分数组B</span></span><br><span class=\"line\">            <span class=\"comment\">//b[i][j] = a[i][j] - a[i - 1][j] - a[i][j - 1] + a[i -1][j - 1];</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(q--)&#123;</span><br><span class=\"line\">        int x1,x2,y1,y2,c;</span><br><span class=\"line\">        cin &gt;&gt; x1 &gt;&gt; y1 &gt;&gt; x2 &gt;&gt; y2 &gt;&gt; c;</span><br><span class=\"line\">        insert(x1,y1,x2,y2,c); </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// for(int i = 1; i &lt;= n; i++)</span></span><br><span class=\"line\">    <span class=\"comment\">//     for(int j = 1; j &lt;= m; j++)</span></span><br><span class=\"line\">    <span class=\"comment\">//         b[i][j] += b[i - 1][j] + b[i][j - 1] - b[i - 1][j -1];//求二维前缀和</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(int i = <span class=\"number\">1</span>; i &lt;= n; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(int j = <span class=\"number\">1</span>; j &lt;= m; j++)&#123;</span><br><span class=\"line\">            <span class=\"comment\">//b[i][j] += b[i - 1][j] + b[i][j - 1] - b[i - 1][j -1];//求二维前缀和</span></span><br><span class=\"line\">            cout &lt;&lt; b[i][j] &lt;&lt; <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        cout &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">           </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>","site":{"data":{}},"excerpt":"","more":"<p>输入一个 n 行 m 列的整数矩阵，再输入 q 个操作，每个操作包含五个整数 x1,y1,x2,y2,c，其中 (x1,y1) 和 (x2,y2) 表示一个子矩阵的左上角坐标和右下角坐标。</p>\n<p>每个操作都要将选中的子矩阵中的每个元素的值加上 cc。</p>\n<p>请你将进行完所有操作后的矩阵输出。</p>\n\n        <h4 id=\"输入格式\"   >\n          <a href=\"#输入格式\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#输入格式\" class=\"headerlink\" title=\"输入格式\"></a>输入格式</h4>\n      <p>第一行包含整数 n,m,q。</p>\n<p>接下来 n 行，每行包含 m 个整数，表示整数矩阵。</p>\n<p>接下来 q 行，每行包含 5 个整数 x1,y1,x2,y2,c，表示一个操作。</p>\n\n        <h4 id=\"输出格式\"   >\n          <a href=\"#输出格式\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#输出格式\" class=\"headerlink\" title=\"输出格式\"></a>输出格式</h4>\n      <p>共 n 行，每行 m 个整数，表示所有操作进行完毕后的最终矩阵。</p>\n\n        <h4 id=\"数据范围\"   >\n          <a href=\"#数据范围\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#数据范围\" class=\"headerlink\" title=\"数据范围\"></a>数据范围</h4>\n      <p>1≤n,m≤1000<br>1≤q≤100000<br>1≤x1≤x2≤n<br>1≤y1≤y2≤m<br>−1000≤c≤1000<br>−1000≤矩阵内元素的值≤1000  </p>\n\n        <h4 id=\"输入样例：\"   >\n          <a href=\"#输入样例：\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#输入样例：\" class=\"headerlink\" title=\"输入样例：\"></a>输入样例：</h4>\n      <figure class=\"highlight plain\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">3 4 3</span><br><span class=\"line\">1 2 2 1</span><br><span class=\"line\">3 2 2 1</span><br><span class=\"line\">1 1 1 1</span><br><span class=\"line\">1 1 2 2 1</span><br><span class=\"line\">1 3 2 3 2</span><br><span class=\"line\">3 1 3 4 1</span><br></pre></td></tr></table></div></figure>\n\n\n        <h4 id=\"输出样例：\"   >\n          <a href=\"#输出样例：\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#输出样例：\" class=\"headerlink\" title=\"输出样例：\"></a>输出样例：</h4>\n      <figure class=\"highlight plain\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2 3 4 1</span><br><span class=\"line\">4 3 4 1</span><br><span class=\"line\">2 2 2 2</span><br></pre></td></tr></table></div></figure>\n\n        <h4 id=\"思路\"   >\n          <a href=\"#思路\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h4>\n      <p>使用二维差分的思路，同时创建两个数组a,b。a是原数组，b是差分数组。<br>对差分数组b进行操作，那么a数组也对应变化，想要子矩阵区域全部加上c，需要这样的代码<code>：b[x1][y1] += c;     b[x2 + 1][y1] -= c;     b[x1][y2 + 1] -= c;     b[x2 + 1][y2 + 1] += c;</code><br> 对差分数组进行插入c操作后，在对其求二维前缀和，就完成题目了。  </p>\n<p>需要注意的是差分数组的构造，你可以使用<code>b[i][j] = a[i][j] - a[i - 1][j] - a[i][j - 1] + a[i -1][j - 1];</code>这样的直接构造方法，也可以利用插入函数，将a,b数组同时视作空的，对a数组每一个小方格加上对应的a[i][j],那么同时用插入c的方法将a[i][j] 插入数组b的一个小方格内。都可以完成差分数组的构造。</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//foreverking</span></span><br><span class=\"line\">#include &lt;vector&gt;</span><br><span class=\"line\">#include &lt;cstdio&gt;</span><br><span class=\"line\">#include &lt;queue&gt;</span><br><span class=\"line\">#include &lt;algorithm&gt;</span><br><span class=\"line\">#include &lt;cstring&gt;</span><br><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">#include &lt;cmath&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> int N = <span class=\"number\">1010</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">int n,m,q;</span><br><span class=\"line\">int a[N][N],b[N][N];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"function\"><span class=\"title\">insert</span>(<span class=\"params\">int x1,int y1,int x2,int y2,int c</span>)</span>&#123;</span><br><span class=\"line\">    b[x1][y1] += c;</span><br><span class=\"line\">    b[x1][y2 + <span class=\"number\">1</span>] -= c;</span><br><span class=\"line\">    b[x2 + <span class=\"number\">1</span>][y1] -= c;</span><br><span class=\"line\">    b[x2 + <span class=\"number\">1</span>][y2 + <span class=\"number\">1</span>] += c;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">int <span class=\"function\"><span class=\"title\">main</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    cin &gt;&gt; n &gt;&gt; m &gt;&gt; q;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(int i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(int j = <span class=\"number\">1</span>; j &lt;= m; j++)</span><br><span class=\"line\">            cin &gt;&gt; a[i][j];<span class=\"comment\">//输入原数组</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(int i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(int j = <span class=\"number\">1</span>; j &lt;= m; j++)</span><br><span class=\"line\">             insert(i,j,i,j,a[i][j]);<span class=\"comment\">//构建差分数组B</span></span><br><span class=\"line\">            <span class=\"comment\">//b[i][j] = a[i][j] - a[i - 1][j] - a[i][j - 1] + a[i -1][j - 1];</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(q--)&#123;</span><br><span class=\"line\">        int x1,x2,y1,y2,c;</span><br><span class=\"line\">        cin &gt;&gt; x1 &gt;&gt; y1 &gt;&gt; x2 &gt;&gt; y2 &gt;&gt; c;</span><br><span class=\"line\">        insert(x1,y1,x2,y2,c); </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// for(int i = 1; i &lt;= n; i++)</span></span><br><span class=\"line\">    <span class=\"comment\">//     for(int j = 1; j &lt;= m; j++)</span></span><br><span class=\"line\">    <span class=\"comment\">//         b[i][j] += b[i - 1][j] + b[i][j - 1] - b[i - 1][j -1];//求二维前缀和</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(int i = <span class=\"number\">1</span>; i &lt;= n; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(int j = <span class=\"number\">1</span>; j &lt;= m; j++)&#123;</span><br><span class=\"line\">            <span class=\"comment\">//b[i][j] += b[i - 1][j] + b[i][j - 1] - b[i - 1][j -1];//求二维前缀和</span></span><br><span class=\"line\">            cout &lt;&lt; b[i][j] &lt;&lt; <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        cout &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">           </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>"},{"title":"Acwing 799","date":"2021-10-27T12:37:34.000Z","_content":" 给定一个长度为 n 的整数序列，请找出最长的不包含重复的数的连续区间，输出它的长度。\n\n#### 输入格式\n\n第一行包含整数 n。\n\n第二行包含 n 个整数（均在 0∼1050∼105 范围内），表示整数序列。\n\n#### 输出格式\n\n共一行，包含一个整数，表示最长的不包含重复的数的连续区间的长度。\n\n#### 数据范围\n\n1≤n≤105\n\n#### 输入样例：\n\n```\n5\n1 2 2 3 5\n```\n\n#### 输出样例：\n\n```\n3\n```\n#### 思路\n##### 暴力\n首先想到的是纯暴力的做法，遍历数组并判断是否有重复数字，时间复杂度达到了O(n^2),显然有点慢。\n\n```js\n// foreverking\n#include <algorithm>\n#include <cmath>\n#include <cstdio>\n#include <cstring>\n#include <iostream>\n#include <queue>\n#include <vector>\nusing namespace std;\n\nconst int N = 10010;\n\nint n,res;\nint a[N];\n\nint check(int l, int r) {\n    for (int i = l + 1; i <= r; i++) {\n        for (int j = l; j < i; j++) {\n            if (a[j] == a[i]) return 0;\n        }\n    }\n\n    return 1;//满足条件，返回1\n}\n\nint main() {\n    cin >> n;\n    for (int i = 0; i < n; i++) cin >> a[i];\n\n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j <= i; j++) {\n            if (check(j, i)) res = max(res, i - j + 1);\n        }\n    }\n\n    cout << res << endl;\n    return 0;\n}\n```\n暴力方法用数组来存数据，我开始用string，只能过样例，因为string只能存一个字符。\n##### 双指针\n仔细观察暴力方法就会发现，在解题时有很多地方是重复计算的 ( i 指针在 j 指针的后面，i是遍历的整个数组的，j 是遍历 0 到 i 的)，也就是说j没必要每次都从0开始移动，j是递增的，永远不会向左移动。当举例，当你发现[2,5]满足条件，接下来你该直接判断[2,6]是否满足，如果不满足，就判断[3,6].以此类推，会节省很多重复的时间。\n\n```js\n// foreverking\n#include <algorithm>\n#include <cmath>\n#include <cstdio>\n#include <cstring>\n#include <iostream>\n#include <queue>\n#include <vector>\nusing namespace std;\n\nconst int N = 10010;\n\nint n, res;\nint a[N];\n// string a;不能用string因为一次一个字符\n\n//判断没有重复\nint check_one(int l, int r) {\n    for (int i = l + 1; i <= r; i++) {\n        for (int j = l; j < i; j++) {\n            if (a[j] == a[i]) return 0;\n        }\n    }\n\n    return 1;  //满足条件，返回1\n}\n\nint main() {\n    cin >> n;\n    for (int i = 0; i < n; i++) cin >> a[i];\n\n    // for (int i = 0; i < n; i++) {\n    //     for (int j = 0; j <= i; j++) {\n    //         if (check_one(j, i)) res = max(res, i - j + 1);\n    //     }\n    // }\n    //暴力方法超时了\n    for (int i = 0, j = 0; i < n; i++) {\n        while(j <= i){\n            if(check_one(j,i)) {\n                res = max(res, i - j + 1);\n                break;\n            }\n            else\n                j++;\n        }\n        //j:最长不重复数列的左端点 j只会往后走\n    }\n    cout << res << endl;\n    return 0;\n}\n```\n然后发现还是超时了，是因为check函数太慢了，就需要我们重新寻找判断方法。  \n就像桶排一样，我们开一个数组来存区间数字出现的次数。每次把i向后移动一位，并将新的数字对应的数组位置++。因为重复的数字只会是在新加入的a[i]，那么我们就移动j，直到重复的数字消失，然后更新res。\n\n```js\n// foreverking\n#include <algorithm>\n#include <cmath>\n#include <cstdio>\n#include <cstring>\n#include <iostream>\n#include <queue>\n#include <vector>\nusing namespace std;\n\nconst int N = 100010;\n\nint n, res;\nint a[N], cnt[N];\n// string a;不能用string因为一次一个字符\n\n//判断没有重复\nint check_one(int l, int r) {\n    for (int i = l + 1; i <= r; i++) {\n        for (int j = l; j < i; j++) {\n            if (a[j] == a[i]) return 0;\n        }\n    }\n\n    return 1;  //满足条件，返回1\n}\n\nint main() {\n    cin >> n;\n    for (int i = 0; i < n; i++) cin >> a[i];\n\n    // for (int i = 0; i < n; i++) {\n    //     for (int j = 0; j <= i; j++) {\n    //         if (check_one(j, i)) res = max(res, i - j + 1);\n    //     }\n    // }\n    //暴力方法超时了\n    // for (int i = 0, j = 0; i < n; i++) {\n    //     while(j <= i){\n    //         if(check_one(j,i)) {\n    //             res = max(res, i - j + 1);\n    //             break;\n    //         }\n    //         else\n    //             j++;\n    //     }\n\n    // j:最长不重复数列的左端点 j只会往后走\n    //}\n    //用双指针。还是超时，check函数太暴力了\n\n    for (int i = 0, j = 0; i < n; i++) {\n        //类似桶排\n        cnt[a[i]]++;\n        while (j <= i && cnt[a[i]] > 1) {\n            cnt[a[j]]--;\n            j++;\n        }  //将j移动到满足条件的位置\n        res = max(res, i - j + 1);\n    }\n    cout << res << endl;\n    return 0;\n}\n```","source":"_posts/Acwing-799.md","raw":"---\ntitle: Acwing 799\ndate: 2021-10-27 20:37:34\ntags: \n    - Study\n    - 双指针\ncategories: \n    - 题解\n    - Acwing\n---\n 给定一个长度为 n 的整数序列，请找出最长的不包含重复的数的连续区间，输出它的长度。\n\n#### 输入格式\n\n第一行包含整数 n。\n\n第二行包含 n 个整数（均在 0∼1050∼105 范围内），表示整数序列。\n\n#### 输出格式\n\n共一行，包含一个整数，表示最长的不包含重复的数的连续区间的长度。\n\n#### 数据范围\n\n1≤n≤105\n\n#### 输入样例：\n\n```\n5\n1 2 2 3 5\n```\n\n#### 输出样例：\n\n```\n3\n```\n#### 思路\n##### 暴力\n首先想到的是纯暴力的做法，遍历数组并判断是否有重复数字，时间复杂度达到了O(n^2),显然有点慢。\n\n```js\n// foreverking\n#include <algorithm>\n#include <cmath>\n#include <cstdio>\n#include <cstring>\n#include <iostream>\n#include <queue>\n#include <vector>\nusing namespace std;\n\nconst int N = 10010;\n\nint n,res;\nint a[N];\n\nint check(int l, int r) {\n    for (int i = l + 1; i <= r; i++) {\n        for (int j = l; j < i; j++) {\n            if (a[j] == a[i]) return 0;\n        }\n    }\n\n    return 1;//满足条件，返回1\n}\n\nint main() {\n    cin >> n;\n    for (int i = 0; i < n; i++) cin >> a[i];\n\n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j <= i; j++) {\n            if (check(j, i)) res = max(res, i - j + 1);\n        }\n    }\n\n    cout << res << endl;\n    return 0;\n}\n```\n暴力方法用数组来存数据，我开始用string，只能过样例，因为string只能存一个字符。\n##### 双指针\n仔细观察暴力方法就会发现，在解题时有很多地方是重复计算的 ( i 指针在 j 指针的后面，i是遍历的整个数组的，j 是遍历 0 到 i 的)，也就是说j没必要每次都从0开始移动，j是递增的，永远不会向左移动。当举例，当你发现[2,5]满足条件，接下来你该直接判断[2,6]是否满足，如果不满足，就判断[3,6].以此类推，会节省很多重复的时间。\n\n```js\n// foreverking\n#include <algorithm>\n#include <cmath>\n#include <cstdio>\n#include <cstring>\n#include <iostream>\n#include <queue>\n#include <vector>\nusing namespace std;\n\nconst int N = 10010;\n\nint n, res;\nint a[N];\n// string a;不能用string因为一次一个字符\n\n//判断没有重复\nint check_one(int l, int r) {\n    for (int i = l + 1; i <= r; i++) {\n        for (int j = l; j < i; j++) {\n            if (a[j] == a[i]) return 0;\n        }\n    }\n\n    return 1;  //满足条件，返回1\n}\n\nint main() {\n    cin >> n;\n    for (int i = 0; i < n; i++) cin >> a[i];\n\n    // for (int i = 0; i < n; i++) {\n    //     for (int j = 0; j <= i; j++) {\n    //         if (check_one(j, i)) res = max(res, i - j + 1);\n    //     }\n    // }\n    //暴力方法超时了\n    for (int i = 0, j = 0; i < n; i++) {\n        while(j <= i){\n            if(check_one(j,i)) {\n                res = max(res, i - j + 1);\n                break;\n            }\n            else\n                j++;\n        }\n        //j:最长不重复数列的左端点 j只会往后走\n    }\n    cout << res << endl;\n    return 0;\n}\n```\n然后发现还是超时了，是因为check函数太慢了，就需要我们重新寻找判断方法。  \n就像桶排一样，我们开一个数组来存区间数字出现的次数。每次把i向后移动一位，并将新的数字对应的数组位置++。因为重复的数字只会是在新加入的a[i]，那么我们就移动j，直到重复的数字消失，然后更新res。\n\n```js\n// foreverking\n#include <algorithm>\n#include <cmath>\n#include <cstdio>\n#include <cstring>\n#include <iostream>\n#include <queue>\n#include <vector>\nusing namespace std;\n\nconst int N = 100010;\n\nint n, res;\nint a[N], cnt[N];\n// string a;不能用string因为一次一个字符\n\n//判断没有重复\nint check_one(int l, int r) {\n    for (int i = l + 1; i <= r; i++) {\n        for (int j = l; j < i; j++) {\n            if (a[j] == a[i]) return 0;\n        }\n    }\n\n    return 1;  //满足条件，返回1\n}\n\nint main() {\n    cin >> n;\n    for (int i = 0; i < n; i++) cin >> a[i];\n\n    // for (int i = 0; i < n; i++) {\n    //     for (int j = 0; j <= i; j++) {\n    //         if (check_one(j, i)) res = max(res, i - j + 1);\n    //     }\n    // }\n    //暴力方法超时了\n    // for (int i = 0, j = 0; i < n; i++) {\n    //     while(j <= i){\n    //         if(check_one(j,i)) {\n    //             res = max(res, i - j + 1);\n    //             break;\n    //         }\n    //         else\n    //             j++;\n    //     }\n\n    // j:最长不重复数列的左端点 j只会往后走\n    //}\n    //用双指针。还是超时，check函数太暴力了\n\n    for (int i = 0, j = 0; i < n; i++) {\n        //类似桶排\n        cnt[a[i]]++;\n        while (j <= i && cnt[a[i]] > 1) {\n            cnt[a[j]]--;\n            j++;\n        }  //将j移动到满足条件的位置\n        res = max(res, i - j + 1);\n    }\n    cout << res << endl;\n    return 0;\n}\n```","slug":"Acwing-799","published":1,"updated":"2021-10-27T12:38:10.717Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckv9i7upc0000sowsfr3gc8vn","content":"<p> 给定一个长度为 n 的整数序列，请找出最长的不包含重复的数的连续区间，输出它的长度。</p>\n\n        <h4 id=\"输入格式\"   >\n          <a href=\"#输入格式\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#输入格式\" class=\"headerlink\" title=\"输入格式\"></a>输入格式</h4>\n      <p>第一行包含整数 n。</p>\n<p>第二行包含 n 个整数（均在 0∼1050∼105 范围内），表示整数序列。</p>\n\n        <h4 id=\"输出格式\"   >\n          <a href=\"#输出格式\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#输出格式\" class=\"headerlink\" title=\"输出格式\"></a>输出格式</h4>\n      <p>共一行，包含一个整数，表示最长的不包含重复的数的连续区间的长度。</p>\n\n        <h4 id=\"数据范围\"   >\n          <a href=\"#数据范围\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#数据范围\" class=\"headerlink\" title=\"数据范围\"></a>数据范围</h4>\n      <p>1≤n≤105</p>\n\n        <h4 id=\"输入样例：\"   >\n          <a href=\"#输入样例：\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#输入样例：\" class=\"headerlink\" title=\"输入样例：\"></a>输入样例：</h4>\n      <figure class=\"highlight plain\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">5</span><br><span class=\"line\">1 2 2 3 5</span><br></pre></td></tr></table></div></figure>\n\n\n        <h4 id=\"输出样例：\"   >\n          <a href=\"#输出样例：\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#输出样例：\" class=\"headerlink\" title=\"输出样例：\"></a>输出样例：</h4>\n      <figure class=\"highlight plain\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">3</span><br></pre></td></tr></table></div></figure>\n\n        <h4 id=\"思路\"   >\n          <a href=\"#思路\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h4>\n      \n        <h5 id=\"暴力\"   >\n          <a href=\"#暴力\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#暴力\" class=\"headerlink\" title=\"暴力\"></a>暴力</h5>\n      <p>首先想到的是纯暴力的做法，遍历数组并判断是否有重复数字，时间复杂度达到了O(n^2),显然有点慢。</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// foreverking</span></span><br><span class=\"line\">#include &lt;algorithm&gt;</span><br><span class=\"line\">#include &lt;cmath&gt;</span><br><span class=\"line\">#include &lt;cstdio&gt;</span><br><span class=\"line\">#include &lt;cstring&gt;</span><br><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">#include &lt;queue&gt;</span><br><span class=\"line\">#include &lt;vector&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> int N = <span class=\"number\">10010</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">int n,res;</span><br><span class=\"line\">int a[N];</span><br><span class=\"line\"></span><br><span class=\"line\">int <span class=\"function\"><span class=\"title\">check</span>(<span class=\"params\">int l, int r</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (int i = l + <span class=\"number\">1</span>; i &lt;= r; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (int j = l; j &lt; i; j++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (a[j] == a[i]) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;<span class=\"comment\">//满足条件，返回1</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">int <span class=\"function\"><span class=\"title\">main</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    cin &gt;&gt; n;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (int i = <span class=\"number\">0</span>; i &lt; n; i++) cin &gt;&gt; a[i];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (int i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (int j = <span class=\"number\">0</span>; j &lt;= i; j++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (check(j, i)) res = max(res, i - j + <span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    cout &lt;&lt; res &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>暴力方法用数组来存数据，我开始用string，只能过样例，因为string只能存一个字符。</p>\n\n        <h5 id=\"双指针\"   >\n          <a href=\"#双指针\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#双指针\" class=\"headerlink\" title=\"双指针\"></a>双指针</h5>\n      <p>仔细观察暴力方法就会发现，在解题时有很多地方是重复计算的 ( i 指针在 j 指针的后面，i是遍历的整个数组的，j 是遍历 0 到 i 的)，也就是说j没必要每次都从0开始移动，j是递增的，永远不会向左移动。当举例，当你发现[2,5]满足条件，接下来你该直接判断[2,6]是否满足，如果不满足，就判断[3,6].以此类推，会节省很多重复的时间。</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// foreverking</span></span><br><span class=\"line\">#include &lt;algorithm&gt;</span><br><span class=\"line\">#include &lt;cmath&gt;</span><br><span class=\"line\">#include &lt;cstdio&gt;</span><br><span class=\"line\">#include &lt;cstring&gt;</span><br><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">#include &lt;queue&gt;</span><br><span class=\"line\">#include &lt;vector&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> int N = <span class=\"number\">10010</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">int n, res;</span><br><span class=\"line\">int a[N];</span><br><span class=\"line\"><span class=\"comment\">// string a;不能用string因为一次一个字符</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//判断没有重复</span></span><br><span class=\"line\">int <span class=\"function\"><span class=\"title\">check_one</span>(<span class=\"params\">int l, int r</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (int i = l + <span class=\"number\">1</span>; i &lt;= r; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (int j = l; j &lt; i; j++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (a[j] == a[i]) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;  <span class=\"comment\">//满足条件，返回1</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">int <span class=\"function\"><span class=\"title\">main</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    cin &gt;&gt; n;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (int i = <span class=\"number\">0</span>; i &lt; n; i++) cin &gt;&gt; a[i];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// for (int i = 0; i &lt; n; i++) &#123;</span></span><br><span class=\"line\">    <span class=\"comment\">//     for (int j = 0; j &lt;= i; j++) &#123;</span></span><br><span class=\"line\">    <span class=\"comment\">//         if (check_one(j, i)) res = max(res, i - j + 1);</span></span><br><span class=\"line\">    <span class=\"comment\">//     &#125;</span></span><br><span class=\"line\">    <span class=\"comment\">// &#125;</span></span><br><span class=\"line\">    <span class=\"comment\">//暴力方法超时了</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (int i = <span class=\"number\">0</span>, j = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(j &lt;= i)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(check_one(j,i)) &#123;</span><br><span class=\"line\">                res = max(res, i - j + <span class=\"number\">1</span>);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">                j++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//j:最长不重复数列的左端点 j只会往后走</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; res &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>然后发现还是超时了，是因为check函数太慢了，就需要我们重新寻找判断方法。<br>就像桶排一样，我们开一个数组来存区间数字出现的次数。每次把i向后移动一位，并将新的数字对应的数组位置++。因为重复的数字只会是在新加入的a[i]，那么我们就移动j，直到重复的数字消失，然后更新res。</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// foreverking</span></span><br><span class=\"line\">#include &lt;algorithm&gt;</span><br><span class=\"line\">#include &lt;cmath&gt;</span><br><span class=\"line\">#include &lt;cstdio&gt;</span><br><span class=\"line\">#include &lt;cstring&gt;</span><br><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">#include &lt;queue&gt;</span><br><span class=\"line\">#include &lt;vector&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> int N = <span class=\"number\">100010</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">int n, res;</span><br><span class=\"line\">int a[N], cnt[N];</span><br><span class=\"line\"><span class=\"comment\">// string a;不能用string因为一次一个字符</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//判断没有重复</span></span><br><span class=\"line\">int <span class=\"function\"><span class=\"title\">check_one</span>(<span class=\"params\">int l, int r</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (int i = l + <span class=\"number\">1</span>; i &lt;= r; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (int j = l; j &lt; i; j++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (a[j] == a[i]) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;  <span class=\"comment\">//满足条件，返回1</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">int <span class=\"function\"><span class=\"title\">main</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    cin &gt;&gt; n;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (int i = <span class=\"number\">0</span>; i &lt; n; i++) cin &gt;&gt; a[i];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// for (int i = 0; i &lt; n; i++) &#123;</span></span><br><span class=\"line\">    <span class=\"comment\">//     for (int j = 0; j &lt;= i; j++) &#123;</span></span><br><span class=\"line\">    <span class=\"comment\">//         if (check_one(j, i)) res = max(res, i - j + 1);</span></span><br><span class=\"line\">    <span class=\"comment\">//     &#125;</span></span><br><span class=\"line\">    <span class=\"comment\">// &#125;</span></span><br><span class=\"line\">    <span class=\"comment\">//暴力方法超时了</span></span><br><span class=\"line\">    <span class=\"comment\">// for (int i = 0, j = 0; i &lt; n; i++) &#123;</span></span><br><span class=\"line\">    <span class=\"comment\">//     while(j &lt;= i)&#123;</span></span><br><span class=\"line\">    <span class=\"comment\">//         if(check_one(j,i)) &#123;</span></span><br><span class=\"line\">    <span class=\"comment\">//             res = max(res, i - j + 1);</span></span><br><span class=\"line\">    <span class=\"comment\">//             break;</span></span><br><span class=\"line\">    <span class=\"comment\">//         &#125;</span></span><br><span class=\"line\">    <span class=\"comment\">//         else</span></span><br><span class=\"line\">    <span class=\"comment\">//             j++;</span></span><br><span class=\"line\">    <span class=\"comment\">//     &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// j:最长不重复数列的左端点 j只会往后走</span></span><br><span class=\"line\">    <span class=\"comment\">//&#125;</span></span><br><span class=\"line\">    <span class=\"comment\">//用双指针。还是超时，check函数太暴力了</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (int i = <span class=\"number\">0</span>, j = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//类似桶排</span></span><br><span class=\"line\">        cnt[a[i]]++;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (j &lt;= i &amp;&amp; cnt[a[i]] &gt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            cnt[a[j]]--;</span><br><span class=\"line\">            j++;</span><br><span class=\"line\">        &#125;  <span class=\"comment\">//将j移动到满足条件的位置</span></span><br><span class=\"line\">        res = max(res, i - j + <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; res &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>","site":{"data":{}},"excerpt":"","more":"<p> 给定一个长度为 n 的整数序列，请找出最长的不包含重复的数的连续区间，输出它的长度。</p>\n\n        <h4 id=\"输入格式\"   >\n          <a href=\"#输入格式\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#输入格式\" class=\"headerlink\" title=\"输入格式\"></a>输入格式</h4>\n      <p>第一行包含整数 n。</p>\n<p>第二行包含 n 个整数（均在 0∼1050∼105 范围内），表示整数序列。</p>\n\n        <h4 id=\"输出格式\"   >\n          <a href=\"#输出格式\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#输出格式\" class=\"headerlink\" title=\"输出格式\"></a>输出格式</h4>\n      <p>共一行，包含一个整数，表示最长的不包含重复的数的连续区间的长度。</p>\n\n        <h4 id=\"数据范围\"   >\n          <a href=\"#数据范围\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#数据范围\" class=\"headerlink\" title=\"数据范围\"></a>数据范围</h4>\n      <p>1≤n≤105</p>\n\n        <h4 id=\"输入样例：\"   >\n          <a href=\"#输入样例：\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#输入样例：\" class=\"headerlink\" title=\"输入样例：\"></a>输入样例：</h4>\n      <figure class=\"highlight plain\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">5</span><br><span class=\"line\">1 2 2 3 5</span><br></pre></td></tr></table></div></figure>\n\n\n        <h4 id=\"输出样例：\"   >\n          <a href=\"#输出样例：\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#输出样例：\" class=\"headerlink\" title=\"输出样例：\"></a>输出样例：</h4>\n      <figure class=\"highlight plain\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">3</span><br></pre></td></tr></table></div></figure>\n\n        <h4 id=\"思路\"   >\n          <a href=\"#思路\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h4>\n      \n        <h5 id=\"暴力\"   >\n          <a href=\"#暴力\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#暴力\" class=\"headerlink\" title=\"暴力\"></a>暴力</h5>\n      <p>首先想到的是纯暴力的做法，遍历数组并判断是否有重复数字，时间复杂度达到了O(n^2),显然有点慢。</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// foreverking</span></span><br><span class=\"line\">#include &lt;algorithm&gt;</span><br><span class=\"line\">#include &lt;cmath&gt;</span><br><span class=\"line\">#include &lt;cstdio&gt;</span><br><span class=\"line\">#include &lt;cstring&gt;</span><br><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">#include &lt;queue&gt;</span><br><span class=\"line\">#include &lt;vector&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> int N = <span class=\"number\">10010</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">int n,res;</span><br><span class=\"line\">int a[N];</span><br><span class=\"line\"></span><br><span class=\"line\">int <span class=\"function\"><span class=\"title\">check</span>(<span class=\"params\">int l, int r</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (int i = l + <span class=\"number\">1</span>; i &lt;= r; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (int j = l; j &lt; i; j++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (a[j] == a[i]) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;<span class=\"comment\">//满足条件，返回1</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">int <span class=\"function\"><span class=\"title\">main</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    cin &gt;&gt; n;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (int i = <span class=\"number\">0</span>; i &lt; n; i++) cin &gt;&gt; a[i];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (int i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (int j = <span class=\"number\">0</span>; j &lt;= i; j++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (check(j, i)) res = max(res, i - j + <span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    cout &lt;&lt; res &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>暴力方法用数组来存数据，我开始用string，只能过样例，因为string只能存一个字符。</p>\n\n        <h5 id=\"双指针\"   >\n          <a href=\"#双指针\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#双指针\" class=\"headerlink\" title=\"双指针\"></a>双指针</h5>\n      <p>仔细观察暴力方法就会发现，在解题时有很多地方是重复计算的 ( i 指针在 j 指针的后面，i是遍历的整个数组的，j 是遍历 0 到 i 的)，也就是说j没必要每次都从0开始移动，j是递增的，永远不会向左移动。当举例，当你发现[2,5]满足条件，接下来你该直接判断[2,6]是否满足，如果不满足，就判断[3,6].以此类推，会节省很多重复的时间。</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// foreverking</span></span><br><span class=\"line\">#include &lt;algorithm&gt;</span><br><span class=\"line\">#include &lt;cmath&gt;</span><br><span class=\"line\">#include &lt;cstdio&gt;</span><br><span class=\"line\">#include &lt;cstring&gt;</span><br><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">#include &lt;queue&gt;</span><br><span class=\"line\">#include &lt;vector&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> int N = <span class=\"number\">10010</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">int n, res;</span><br><span class=\"line\">int a[N];</span><br><span class=\"line\"><span class=\"comment\">// string a;不能用string因为一次一个字符</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//判断没有重复</span></span><br><span class=\"line\">int <span class=\"function\"><span class=\"title\">check_one</span>(<span class=\"params\">int l, int r</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (int i = l + <span class=\"number\">1</span>; i &lt;= r; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (int j = l; j &lt; i; j++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (a[j] == a[i]) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;  <span class=\"comment\">//满足条件，返回1</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">int <span class=\"function\"><span class=\"title\">main</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    cin &gt;&gt; n;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (int i = <span class=\"number\">0</span>; i &lt; n; i++) cin &gt;&gt; a[i];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// for (int i = 0; i &lt; n; i++) &#123;</span></span><br><span class=\"line\">    <span class=\"comment\">//     for (int j = 0; j &lt;= i; j++) &#123;</span></span><br><span class=\"line\">    <span class=\"comment\">//         if (check_one(j, i)) res = max(res, i - j + 1);</span></span><br><span class=\"line\">    <span class=\"comment\">//     &#125;</span></span><br><span class=\"line\">    <span class=\"comment\">// &#125;</span></span><br><span class=\"line\">    <span class=\"comment\">//暴力方法超时了</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (int i = <span class=\"number\">0</span>, j = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(j &lt;= i)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(check_one(j,i)) &#123;</span><br><span class=\"line\">                res = max(res, i - j + <span class=\"number\">1</span>);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">                j++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//j:最长不重复数列的左端点 j只会往后走</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; res &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>然后发现还是超时了，是因为check函数太慢了，就需要我们重新寻找判断方法。<br>就像桶排一样，我们开一个数组来存区间数字出现的次数。每次把i向后移动一位，并将新的数字对应的数组位置++。因为重复的数字只会是在新加入的a[i]，那么我们就移动j，直到重复的数字消失，然后更新res。</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// foreverking</span></span><br><span class=\"line\">#include &lt;algorithm&gt;</span><br><span class=\"line\">#include &lt;cmath&gt;</span><br><span class=\"line\">#include &lt;cstdio&gt;</span><br><span class=\"line\">#include &lt;cstring&gt;</span><br><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">#include &lt;queue&gt;</span><br><span class=\"line\">#include &lt;vector&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> int N = <span class=\"number\">100010</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">int n, res;</span><br><span class=\"line\">int a[N], cnt[N];</span><br><span class=\"line\"><span class=\"comment\">// string a;不能用string因为一次一个字符</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//判断没有重复</span></span><br><span class=\"line\">int <span class=\"function\"><span class=\"title\">check_one</span>(<span class=\"params\">int l, int r</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (int i = l + <span class=\"number\">1</span>; i &lt;= r; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (int j = l; j &lt; i; j++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (a[j] == a[i]) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;  <span class=\"comment\">//满足条件，返回1</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">int <span class=\"function\"><span class=\"title\">main</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    cin &gt;&gt; n;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (int i = <span class=\"number\">0</span>; i &lt; n; i++) cin &gt;&gt; a[i];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// for (int i = 0; i &lt; n; i++) &#123;</span></span><br><span class=\"line\">    <span class=\"comment\">//     for (int j = 0; j &lt;= i; j++) &#123;</span></span><br><span class=\"line\">    <span class=\"comment\">//         if (check_one(j, i)) res = max(res, i - j + 1);</span></span><br><span class=\"line\">    <span class=\"comment\">//     &#125;</span></span><br><span class=\"line\">    <span class=\"comment\">// &#125;</span></span><br><span class=\"line\">    <span class=\"comment\">//暴力方法超时了</span></span><br><span class=\"line\">    <span class=\"comment\">// for (int i = 0, j = 0; i &lt; n; i++) &#123;</span></span><br><span class=\"line\">    <span class=\"comment\">//     while(j &lt;= i)&#123;</span></span><br><span class=\"line\">    <span class=\"comment\">//         if(check_one(j,i)) &#123;</span></span><br><span class=\"line\">    <span class=\"comment\">//             res = max(res, i - j + 1);</span></span><br><span class=\"line\">    <span class=\"comment\">//             break;</span></span><br><span class=\"line\">    <span class=\"comment\">//         &#125;</span></span><br><span class=\"line\">    <span class=\"comment\">//         else</span></span><br><span class=\"line\">    <span class=\"comment\">//             j++;</span></span><br><span class=\"line\">    <span class=\"comment\">//     &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// j:最长不重复数列的左端点 j只会往后走</span></span><br><span class=\"line\">    <span class=\"comment\">//&#125;</span></span><br><span class=\"line\">    <span class=\"comment\">//用双指针。还是超时，check函数太暴力了</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (int i = <span class=\"number\">0</span>, j = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//类似桶排</span></span><br><span class=\"line\">        cnt[a[i]]++;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (j &lt;= i &amp;&amp; cnt[a[i]] &gt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            cnt[a[j]]--;</span><br><span class=\"line\">            j++;</span><br><span class=\"line\">        &#125;  <span class=\"comment\">//将j移动到满足条件的位置</span></span><br><span class=\"line\">        res = max(res, i - j + <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; res &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>"},{"title":"Acwing 800","date":"2021-10-27T14:09:06.000Z","_content":"给定两个升序排序的有序数组 AA 和 BB，以及一个目标值 xx。\n\n数组下标从 00 开始。\n\n请你求出满足 A[i]+B[j]=xA[i]+B[j]=x 的数对 (i,j)(i,j)。\n\n数据保证有唯一解。\n\n#### 输入格式\n\n第一行包含三个整数 n,m,xn,m,x，分别表示 AA 的长度，BB 的长度以及目标值 xx。\n\n第二行包含 nn 个整数，表示数组 AA。\n\n第三行包含 mm 个整数，表示数组 BB。\n\n#### 输出格式\n\n共一行，包含两个整数 ii 和 jj。\n\n#### 数据范围\n\n数组长度不超过 105105。\\\n同一数组内元素各不相同。\\\n1≤数组元素≤1091≤数组元素≤109\n\n#### 输入样例：\n\n```\n4 5 6\n1 2 4 7\n3 4 6 8 9\n```\n\n#### 输出样例：\n\n```\n1 1\n```\n#### 思路\n##### 双指针\n首先寻找暴力方法，就是两个循环遍历，判断是否满足条件，当然是超时的。\n\n```js\n// foreverking\n#include <algorithm>\n#include <cmath>\n#include <cstdio>\n#include <cstring>\n#include <iostream>\n#include <queue>\n#include <vector>\nusing namespace std;\n\nconst int N = 100010;\nint n, m, x;\nint a[N], b[N];\nint ans_a, ans_b;\n\n void check(int x[], int y[]) {\n     for (int i = 0; i < n; i++) {\n         for (int j = 0; j < m; j++) {\n             if (x[i] == y[j]) {\n                 ans_a = i;\n                 ans_b = j;\n             }\n         }\n     }\n }\n\n\n\nint main() {\n    cin >> n >> m >> x;\n    for (int i = 0; i < n; i++) cin >> a[i];\n    for (int i = 0; i < m; i++) cin >> b[i];\n\n    check();\n\n    return 0;\n}\n\n```\n因为a,b是升序数组，可知a,b构成递增单调性，由于ab数组单调递增且答案唯一那么就可采用双指针算法，这也是典型的双指针算法。寻找满足`a[i] + b[j] >= x`条件的i,j，其中，当i增大时，j就只能减小或者不变，即b的下标只能向右移动。所以，i从0开始，j从m-1开始，寻找满足`a[i] + b[j] >= x`的j的值，找到满足条件的j的最小值，如果等于，就找到了，否则继续循环。\n\n```js\n// foreverking\n#include <algorithm>\n#include <cmath>\n#include <cstdio>\n#include <cstring>\n#include <iostream>\n#include <queue>\n#include <vector>\nusing namespace std;\n\nconst int N = 100010;\nint n, m, x;\nint a[N], b[N];\nint ans_a, ans_b;\n\n// void check(int x[], int y[]) {\n//     for (int i = 0; i < n; i++) {\n//         for (int j = 0; j < m; j++) {\n//             if (x[i] == y[j]) {\n//                 ans_a = i;\n//                 ans_b = j;\n//             }\n//         }\n//     }\n// }\n\nvoid check() {\n    for (int i = 0, j = m - 1; i < n; i++) {\n        while (j >= 0 && a[i] + b[j] > x) j--;\n        if (a[i] + b[j] == x) {\n            cout << i << \" \" << j;\n            break;\n        }\n    }\n}\n\nint main() {\n    cin >> n >> m >> x;\n    for (int i = 0; i < n; i++) cin >> a[i];\n    for (int i = 0; i < m; i++) cin >> b[i];\n\n    check();\n\n    return 0;\n}\n\n```\n##### 二分\n没错可以二分来做，循环a数组，在每次循环中，对b数组进行二分，找`x - a[i]`。\n```js\n// foreverking\n#include <algorithm>\n#include <cmath>\n#include <cstdio>\n#include <cstring>\n#include <iostream>\n#include <queue>\n#include <vector>\nusing namespace std;\n\nconst int N = 100010;\nint n, m, x;\nint a[N], b[N];\n\nint main() {\n    cin >> n >> m >> x;\n    for (int i = 0; i < n; i++) cin >> a[i];\n    for (int i = 0; i < m; i++) cin >> b[i];\n\n    for (int i = 0; i < n; i++) {\n        int temp = x - a[i];//条件，需要在b数组中找到等于temp的值\n        int l = 0, r = m - 1;//二分边界\n        while(l < r) {\n            int mid = (l + r + 1) >> 1;\n            if (b[mid] <= temp) l = mid;//更新左端点\n            else\n                r = mid - 1;//更新右端点\n        }\n        if(b[l] == temp){//找到了\n            cout << i << \" \" << l;\n            break;\n        }\n    }\n    return 0;\n}\n```","source":"_posts/Acwing-800.md","raw":"---\ntitle: Acwing 800\ndate: 2021-10-27 22:09:06\ntags: \n    - Study\n    - 双指针\ncategories: \n    - 题解\n    - Acwing\n---\n给定两个升序排序的有序数组 AA 和 BB，以及一个目标值 xx。\n\n数组下标从 00 开始。\n\n请你求出满足 A[i]+B[j]=xA[i]+B[j]=x 的数对 (i,j)(i,j)。\n\n数据保证有唯一解。\n\n#### 输入格式\n\n第一行包含三个整数 n,m,xn,m,x，分别表示 AA 的长度，BB 的长度以及目标值 xx。\n\n第二行包含 nn 个整数，表示数组 AA。\n\n第三行包含 mm 个整数，表示数组 BB。\n\n#### 输出格式\n\n共一行，包含两个整数 ii 和 jj。\n\n#### 数据范围\n\n数组长度不超过 105105。\\\n同一数组内元素各不相同。\\\n1≤数组元素≤1091≤数组元素≤109\n\n#### 输入样例：\n\n```\n4 5 6\n1 2 4 7\n3 4 6 8 9\n```\n\n#### 输出样例：\n\n```\n1 1\n```\n#### 思路\n##### 双指针\n首先寻找暴力方法，就是两个循环遍历，判断是否满足条件，当然是超时的。\n\n```js\n// foreverking\n#include <algorithm>\n#include <cmath>\n#include <cstdio>\n#include <cstring>\n#include <iostream>\n#include <queue>\n#include <vector>\nusing namespace std;\n\nconst int N = 100010;\nint n, m, x;\nint a[N], b[N];\nint ans_a, ans_b;\n\n void check(int x[], int y[]) {\n     for (int i = 0; i < n; i++) {\n         for (int j = 0; j < m; j++) {\n             if (x[i] == y[j]) {\n                 ans_a = i;\n                 ans_b = j;\n             }\n         }\n     }\n }\n\n\n\nint main() {\n    cin >> n >> m >> x;\n    for (int i = 0; i < n; i++) cin >> a[i];\n    for (int i = 0; i < m; i++) cin >> b[i];\n\n    check();\n\n    return 0;\n}\n\n```\n因为a,b是升序数组，可知a,b构成递增单调性，由于ab数组单调递增且答案唯一那么就可采用双指针算法，这也是典型的双指针算法。寻找满足`a[i] + b[j] >= x`条件的i,j，其中，当i增大时，j就只能减小或者不变，即b的下标只能向右移动。所以，i从0开始，j从m-1开始，寻找满足`a[i] + b[j] >= x`的j的值，找到满足条件的j的最小值，如果等于，就找到了，否则继续循环。\n\n```js\n// foreverking\n#include <algorithm>\n#include <cmath>\n#include <cstdio>\n#include <cstring>\n#include <iostream>\n#include <queue>\n#include <vector>\nusing namespace std;\n\nconst int N = 100010;\nint n, m, x;\nint a[N], b[N];\nint ans_a, ans_b;\n\n// void check(int x[], int y[]) {\n//     for (int i = 0; i < n; i++) {\n//         for (int j = 0; j < m; j++) {\n//             if (x[i] == y[j]) {\n//                 ans_a = i;\n//                 ans_b = j;\n//             }\n//         }\n//     }\n// }\n\nvoid check() {\n    for (int i = 0, j = m - 1; i < n; i++) {\n        while (j >= 0 && a[i] + b[j] > x) j--;\n        if (a[i] + b[j] == x) {\n            cout << i << \" \" << j;\n            break;\n        }\n    }\n}\n\nint main() {\n    cin >> n >> m >> x;\n    for (int i = 0; i < n; i++) cin >> a[i];\n    for (int i = 0; i < m; i++) cin >> b[i];\n\n    check();\n\n    return 0;\n}\n\n```\n##### 二分\n没错可以二分来做，循环a数组，在每次循环中，对b数组进行二分，找`x - a[i]`。\n```js\n// foreverking\n#include <algorithm>\n#include <cmath>\n#include <cstdio>\n#include <cstring>\n#include <iostream>\n#include <queue>\n#include <vector>\nusing namespace std;\n\nconst int N = 100010;\nint n, m, x;\nint a[N], b[N];\n\nint main() {\n    cin >> n >> m >> x;\n    for (int i = 0; i < n; i++) cin >> a[i];\n    for (int i = 0; i < m; i++) cin >> b[i];\n\n    for (int i = 0; i < n; i++) {\n        int temp = x - a[i];//条件，需要在b数组中找到等于temp的值\n        int l = 0, r = m - 1;//二分边界\n        while(l < r) {\n            int mid = (l + r + 1) >> 1;\n            if (b[mid] <= temp) l = mid;//更新左端点\n            else\n                r = mid - 1;//更新右端点\n        }\n        if(b[l] == temp){//找到了\n            cout << i << \" \" << l;\n            break;\n        }\n    }\n    return 0;\n}\n```","slug":"Acwing-800","published":1,"updated":"2021-10-27T14:09:30.548Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckv9lgpkx00006cws203i4mly","content":"<p>给定两个升序排序的有序数组 AA 和 BB，以及一个目标值 xx。</p>\n<p>数组下标从 00 开始。</p>\n<p>请你求出满足 A[i]+B[j]=xA[i]+B[j]=x 的数对 (i,j)(i,j)。</p>\n<p>数据保证有唯一解。</p>\n\n        <h4 id=\"输入格式\"   >\n          <a href=\"#输入格式\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#输入格式\" class=\"headerlink\" title=\"输入格式\"></a>输入格式</h4>\n      <p>第一行包含三个整数 n,m,xn,m,x，分别表示 AA 的长度，BB 的长度以及目标值 xx。</p>\n<p>第二行包含 nn 个整数，表示数组 AA。</p>\n<p>第三行包含 mm 个整数，表示数组 BB。</p>\n\n        <h4 id=\"输出格式\"   >\n          <a href=\"#输出格式\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#输出格式\" class=\"headerlink\" title=\"输出格式\"></a>输出格式</h4>\n      <p>共一行，包含两个整数 ii 和 jj。</p>\n\n        <h4 id=\"数据范围\"   >\n          <a href=\"#数据范围\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#数据范围\" class=\"headerlink\" title=\"数据范围\"></a>数据范围</h4>\n      <p>数组长度不超过 105105。<br>同一数组内元素各不相同。<br>1≤数组元素≤1091≤数组元素≤109</p>\n\n        <h4 id=\"输入样例：\"   >\n          <a href=\"#输入样例：\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#输入样例：\" class=\"headerlink\" title=\"输入样例：\"></a>输入样例：</h4>\n      <figure class=\"highlight plain\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4 5 6</span><br><span class=\"line\">1 2 4 7</span><br><span class=\"line\">3 4 6 8 9</span><br></pre></td></tr></table></div></figure>\n\n\n        <h4 id=\"输出样例：\"   >\n          <a href=\"#输出样例：\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#输出样例：\" class=\"headerlink\" title=\"输出样例：\"></a>输出样例：</h4>\n      <figure class=\"highlight plain\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 1</span><br></pre></td></tr></table></div></figure>\n\n        <h4 id=\"思路\"   >\n          <a href=\"#思路\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h4>\n      \n        <h5 id=\"双指针\"   >\n          <a href=\"#双指针\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#双指针\" class=\"headerlink\" title=\"双指针\"></a>双指针</h5>\n      <p>首先寻找暴力方法，就是两个循环遍历，判断是否满足条件，当然是超时的。</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// foreverking</span></span><br><span class=\"line\">#include &lt;algorithm&gt;</span><br><span class=\"line\">#include &lt;cmath&gt;</span><br><span class=\"line\">#include &lt;cstdio&gt;</span><br><span class=\"line\">#include &lt;cstring&gt;</span><br><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">#include &lt;queue&gt;</span><br><span class=\"line\">#include &lt;vector&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> int N = <span class=\"number\">100010</span>;</span><br><span class=\"line\">int n, m, x;</span><br><span class=\"line\">int a[N], b[N];</span><br><span class=\"line\">int ans_a, ans_b;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"keyword\">void</span> <span class=\"function\"><span class=\"title\">check</span>(<span class=\"params\">int x[], int y[]</span>)</span> &#123;</span><br><span class=\"line\">     <span class=\"keyword\">for</span> (int i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">         <span class=\"keyword\">for</span> (int j = <span class=\"number\">0</span>; j &lt; m; j++) &#123;</span><br><span class=\"line\">             <span class=\"keyword\">if</span> (x[i] == y[j]) &#123;</span><br><span class=\"line\">                 ans_a = i;</span><br><span class=\"line\">                 ans_b = j;</span><br><span class=\"line\">             &#125;</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">int <span class=\"function\"><span class=\"title\">main</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    cin &gt;&gt; n &gt;&gt; m &gt;&gt; x;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (int i = <span class=\"number\">0</span>; i &lt; n; i++) cin &gt;&gt; a[i];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (int i = <span class=\"number\">0</span>; i &lt; m; i++) cin &gt;&gt; b[i];</span><br><span class=\"line\"></span><br><span class=\"line\">    check();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></div></figure>\n<p>因为a,b是升序数组，可知a,b构成递增单调性，由于ab数组单调递增且答案唯一那么就可采用双指针算法，这也是典型的双指针算法。寻找满足<code>a[i] + b[j] &gt;= x</code>条件的i,j，其中，当i增大时，j就只能减小或者不变，即b的下标只能向右移动。所以，i从0开始，j从m-1开始，寻找满足<code>a[i] + b[j] &gt;= x</code>的j的值，找到满足条件的j的最小值，如果等于，就找到了，否则继续循环。</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// foreverking</span></span><br><span class=\"line\">#include &lt;algorithm&gt;</span><br><span class=\"line\">#include &lt;cmath&gt;</span><br><span class=\"line\">#include &lt;cstdio&gt;</span><br><span class=\"line\">#include &lt;cstring&gt;</span><br><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">#include &lt;queue&gt;</span><br><span class=\"line\">#include &lt;vector&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> int N = <span class=\"number\">100010</span>;</span><br><span class=\"line\">int n, m, x;</span><br><span class=\"line\">int a[N], b[N];</span><br><span class=\"line\">int ans_a, ans_b;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// void check(int x[], int y[]) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//     for (int i = 0; i &lt; n; i++) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//         for (int j = 0; j &lt; m; j++) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//             if (x[i] == y[j]) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//                 ans_a = i;</span></span><br><span class=\"line\"><span class=\"comment\">//                 ans_b = j;</span></span><br><span class=\"line\"><span class=\"comment\">//             &#125;</span></span><br><span class=\"line\"><span class=\"comment\">//         &#125;</span></span><br><span class=\"line\"><span class=\"comment\">//     &#125;</span></span><br><span class=\"line\"><span class=\"comment\">// &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"function\"><span class=\"title\">check</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (int i = <span class=\"number\">0</span>, j = m - <span class=\"number\">1</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (j &gt;= <span class=\"number\">0</span> &amp;&amp; a[i] + b[j] &gt; x) j--;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (a[i] + b[j] == x) &#123;</span><br><span class=\"line\">            cout &lt;&lt; i &lt;&lt; <span class=\"string\">&quot; &quot;</span> &lt;&lt; j;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">int <span class=\"function\"><span class=\"title\">main</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    cin &gt;&gt; n &gt;&gt; m &gt;&gt; x;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (int i = <span class=\"number\">0</span>; i &lt; n; i++) cin &gt;&gt; a[i];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (int i = <span class=\"number\">0</span>; i &lt; m; i++) cin &gt;&gt; b[i];</span><br><span class=\"line\"></span><br><span class=\"line\">    check();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></div></figure>\n\n        <h5 id=\"二分\"   >\n          <a href=\"#二分\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#二分\" class=\"headerlink\" title=\"二分\"></a>二分</h5>\n      <p>没错可以二分来做，循环a数组，在每次循环中，对b数组进行二分，找<code>x - a[i]</code>。</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// foreverking</span></span><br><span class=\"line\">#include &lt;algorithm&gt;</span><br><span class=\"line\">#include &lt;cmath&gt;</span><br><span class=\"line\">#include &lt;cstdio&gt;</span><br><span class=\"line\">#include &lt;cstring&gt;</span><br><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">#include &lt;queue&gt;</span><br><span class=\"line\">#include &lt;vector&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> int N = <span class=\"number\">100010</span>;</span><br><span class=\"line\">int n, m, x;</span><br><span class=\"line\">int a[N], b[N];</span><br><span class=\"line\"></span><br><span class=\"line\">int <span class=\"function\"><span class=\"title\">main</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    cin &gt;&gt; n &gt;&gt; m &gt;&gt; x;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (int i = <span class=\"number\">0</span>; i &lt; n; i++) cin &gt;&gt; a[i];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (int i = <span class=\"number\">0</span>; i &lt; m; i++) cin &gt;&gt; b[i];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (int i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">        int temp = x - a[i];<span class=\"comment\">//条件，需要在b数组中找到等于temp的值</span></span><br><span class=\"line\">        int l = <span class=\"number\">0</span>, r = m - <span class=\"number\">1</span>;<span class=\"comment\">//二分边界</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span>(l &lt; r) &#123;</span><br><span class=\"line\">            int mid = (l + r + <span class=\"number\">1</span>) &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (b[mid] &lt;= temp) l = mid;<span class=\"comment\">//更新左端点</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">                r = mid - <span class=\"number\">1</span>;<span class=\"comment\">//更新右端点</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(b[l] == temp)&#123;<span class=\"comment\">//找到了</span></span><br><span class=\"line\">            cout &lt;&lt; i &lt;&lt; <span class=\"string\">&quot; &quot;</span> &lt;&lt; l;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>","site":{"data":{}},"excerpt":"","more":"<p>给定两个升序排序的有序数组 AA 和 BB，以及一个目标值 xx。</p>\n<p>数组下标从 00 开始。</p>\n<p>请你求出满足 A[i]+B[j]=xA[i]+B[j]=x 的数对 (i,j)(i,j)。</p>\n<p>数据保证有唯一解。</p>\n\n        <h4 id=\"输入格式\"   >\n          <a href=\"#输入格式\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#输入格式\" class=\"headerlink\" title=\"输入格式\"></a>输入格式</h4>\n      <p>第一行包含三个整数 n,m,xn,m,x，分别表示 AA 的长度，BB 的长度以及目标值 xx。</p>\n<p>第二行包含 nn 个整数，表示数组 AA。</p>\n<p>第三行包含 mm 个整数，表示数组 BB。</p>\n\n        <h4 id=\"输出格式\"   >\n          <a href=\"#输出格式\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#输出格式\" class=\"headerlink\" title=\"输出格式\"></a>输出格式</h4>\n      <p>共一行，包含两个整数 ii 和 jj。</p>\n\n        <h4 id=\"数据范围\"   >\n          <a href=\"#数据范围\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#数据范围\" class=\"headerlink\" title=\"数据范围\"></a>数据范围</h4>\n      <p>数组长度不超过 105105。<br>同一数组内元素各不相同。<br>1≤数组元素≤1091≤数组元素≤109</p>\n\n        <h4 id=\"输入样例：\"   >\n          <a href=\"#输入样例：\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#输入样例：\" class=\"headerlink\" title=\"输入样例：\"></a>输入样例：</h4>\n      <figure class=\"highlight plain\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4 5 6</span><br><span class=\"line\">1 2 4 7</span><br><span class=\"line\">3 4 6 8 9</span><br></pre></td></tr></table></div></figure>\n\n\n        <h4 id=\"输出样例：\"   >\n          <a href=\"#输出样例：\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#输出样例：\" class=\"headerlink\" title=\"输出样例：\"></a>输出样例：</h4>\n      <figure class=\"highlight plain\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 1</span><br></pre></td></tr></table></div></figure>\n\n        <h4 id=\"思路\"   >\n          <a href=\"#思路\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h4>\n      \n        <h5 id=\"双指针\"   >\n          <a href=\"#双指针\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#双指针\" class=\"headerlink\" title=\"双指针\"></a>双指针</h5>\n      <p>首先寻找暴力方法，就是两个循环遍历，判断是否满足条件，当然是超时的。</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// foreverking</span></span><br><span class=\"line\">#include &lt;algorithm&gt;</span><br><span class=\"line\">#include &lt;cmath&gt;</span><br><span class=\"line\">#include &lt;cstdio&gt;</span><br><span class=\"line\">#include &lt;cstring&gt;</span><br><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">#include &lt;queue&gt;</span><br><span class=\"line\">#include &lt;vector&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> int N = <span class=\"number\">100010</span>;</span><br><span class=\"line\">int n, m, x;</span><br><span class=\"line\">int a[N], b[N];</span><br><span class=\"line\">int ans_a, ans_b;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"keyword\">void</span> <span class=\"function\"><span class=\"title\">check</span>(<span class=\"params\">int x[], int y[]</span>)</span> &#123;</span><br><span class=\"line\">     <span class=\"keyword\">for</span> (int i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">         <span class=\"keyword\">for</span> (int j = <span class=\"number\">0</span>; j &lt; m; j++) &#123;</span><br><span class=\"line\">             <span class=\"keyword\">if</span> (x[i] == y[j]) &#123;</span><br><span class=\"line\">                 ans_a = i;</span><br><span class=\"line\">                 ans_b = j;</span><br><span class=\"line\">             &#125;</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">int <span class=\"function\"><span class=\"title\">main</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    cin &gt;&gt; n &gt;&gt; m &gt;&gt; x;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (int i = <span class=\"number\">0</span>; i &lt; n; i++) cin &gt;&gt; a[i];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (int i = <span class=\"number\">0</span>; i &lt; m; i++) cin &gt;&gt; b[i];</span><br><span class=\"line\"></span><br><span class=\"line\">    check();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></div></figure>\n<p>因为a,b是升序数组，可知a,b构成递增单调性，由于ab数组单调递增且答案唯一那么就可采用双指针算法，这也是典型的双指针算法。寻找满足<code>a[i] + b[j] &gt;= x</code>条件的i,j，其中，当i增大时，j就只能减小或者不变，即b的下标只能向右移动。所以，i从0开始，j从m-1开始，寻找满足<code>a[i] + b[j] &gt;= x</code>的j的值，找到满足条件的j的最小值，如果等于，就找到了，否则继续循环。</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// foreverking</span></span><br><span class=\"line\">#include &lt;algorithm&gt;</span><br><span class=\"line\">#include &lt;cmath&gt;</span><br><span class=\"line\">#include &lt;cstdio&gt;</span><br><span class=\"line\">#include &lt;cstring&gt;</span><br><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">#include &lt;queue&gt;</span><br><span class=\"line\">#include &lt;vector&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> int N = <span class=\"number\">100010</span>;</span><br><span class=\"line\">int n, m, x;</span><br><span class=\"line\">int a[N], b[N];</span><br><span class=\"line\">int ans_a, ans_b;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// void check(int x[], int y[]) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//     for (int i = 0; i &lt; n; i++) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//         for (int j = 0; j &lt; m; j++) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//             if (x[i] == y[j]) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//                 ans_a = i;</span></span><br><span class=\"line\"><span class=\"comment\">//                 ans_b = j;</span></span><br><span class=\"line\"><span class=\"comment\">//             &#125;</span></span><br><span class=\"line\"><span class=\"comment\">//         &#125;</span></span><br><span class=\"line\"><span class=\"comment\">//     &#125;</span></span><br><span class=\"line\"><span class=\"comment\">// &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"function\"><span class=\"title\">check</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (int i = <span class=\"number\">0</span>, j = m - <span class=\"number\">1</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (j &gt;= <span class=\"number\">0</span> &amp;&amp; a[i] + b[j] &gt; x) j--;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (a[i] + b[j] == x) &#123;</span><br><span class=\"line\">            cout &lt;&lt; i &lt;&lt; <span class=\"string\">&quot; &quot;</span> &lt;&lt; j;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">int <span class=\"function\"><span class=\"title\">main</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    cin &gt;&gt; n &gt;&gt; m &gt;&gt; x;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (int i = <span class=\"number\">0</span>; i &lt; n; i++) cin &gt;&gt; a[i];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (int i = <span class=\"number\">0</span>; i &lt; m; i++) cin &gt;&gt; b[i];</span><br><span class=\"line\"></span><br><span class=\"line\">    check();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></div></figure>\n\n        <h5 id=\"二分\"   >\n          <a href=\"#二分\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#二分\" class=\"headerlink\" title=\"二分\"></a>二分</h5>\n      <p>没错可以二分来做，循环a数组，在每次循环中，对b数组进行二分，找<code>x - a[i]</code>。</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// foreverking</span></span><br><span class=\"line\">#include &lt;algorithm&gt;</span><br><span class=\"line\">#include &lt;cmath&gt;</span><br><span class=\"line\">#include &lt;cstdio&gt;</span><br><span class=\"line\">#include &lt;cstring&gt;</span><br><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">#include &lt;queue&gt;</span><br><span class=\"line\">#include &lt;vector&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> int N = <span class=\"number\">100010</span>;</span><br><span class=\"line\">int n, m, x;</span><br><span class=\"line\">int a[N], b[N];</span><br><span class=\"line\"></span><br><span class=\"line\">int <span class=\"function\"><span class=\"title\">main</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    cin &gt;&gt; n &gt;&gt; m &gt;&gt; x;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (int i = <span class=\"number\">0</span>; i &lt; n; i++) cin &gt;&gt; a[i];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (int i = <span class=\"number\">0</span>; i &lt; m; i++) cin &gt;&gt; b[i];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (int i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">        int temp = x - a[i];<span class=\"comment\">//条件，需要在b数组中找到等于temp的值</span></span><br><span class=\"line\">        int l = <span class=\"number\">0</span>, r = m - <span class=\"number\">1</span>;<span class=\"comment\">//二分边界</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span>(l &lt; r) &#123;</span><br><span class=\"line\">            int mid = (l + r + <span class=\"number\">1</span>) &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (b[mid] &lt;= temp) l = mid;<span class=\"comment\">//更新左端点</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">                r = mid - <span class=\"number\">1</span>;<span class=\"comment\">//更新右端点</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(b[l] == temp)&#123;<span class=\"comment\">//找到了</span></span><br><span class=\"line\">            cout &lt;&lt; i &lt;&lt; <span class=\"string\">&quot; &quot;</span> &lt;&lt; l;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>"},{"title":"Acwing 802","date":"2021-10-31T03:00:11.000Z","_content":"假定有一个无限长的数轴，数轴上每个坐标上的数都是 0。\n\n现在，我们首先进行 n 次操作，每次操作将某一位置 x 上的数加 c。\n\n接下来，进行 m 次询问，每个询问包含两个整数 l 和 r，你需要求出在区间 [l,r] 之间的所有数的和。\n#### 输入格式\n\n第一行包含两个整数 n 和 m。\n\n接下来 n 行，每行包含两个整数 x 和 c。\n\n再接下来 m 行，每行包含两个整数 l 和 r。\n\n#### 输出格式\n\n共 mm 行，每行输出一个询问中所求的区间内数字和。\n#### 数据范围\n\n−109≤x≤109,  \n1≤n,m≤105,  \n−109≤l≤r≤109,  \n−10000≤c≤10000  \n#### 输入样例：\n\n```\n3 3\n1 2\n3 6\n7 5\n1 3\n4 6\n7 8\n```\n\n#### 输出样例：\n\n```\n8\n0\n5\n```\n#### 思路\n这道题是一个区间离散化的过程，因为区间很长，但是某些元素的排布可能很稀疏，所以将原数列映射到一个连续数列中排列。  \n关于这道题的步骤就大概有了：\n1. 读输入。将每次读入的`x c` `push_back()`到`add`数列中，将每次读入的位置`x` `push_back()`到`all`中，将每次读入的`l r` `push_back()`到`query`中。\n2. 排序、去重。\n3. 通过遍历`add`，完成在离散化的数组映射到的a数组中进行加上c的操作（用到`find_one`函数）。\n4. 初始化s数组。\n5. 通过遍历`query`，完成求区间[l,r]的和。（前缀和）\n\n解释一下步骤。其中，`add`数列存放的是每次输入的数据，即位置与对应的值，`all`存放的只是位置，不论是将要查询的还是已经存放数据的位置。`query`存放的是待每组查询的区间边界。 元素存储在vector<int> all中，排序去重后，再把值映射到长度较小的数组`a`中 ，`a`也就是连续数列，对他求前缀和得到答案。\n`find_one`函数采用二分查找，输入一个离散数列的位置（映射前的位置）x返回连续数列的位置+1（映射后的位置+1）[+1是为了方便前缀和计算]  \n排序，去重就是为了`find_one`做准备，想要二分就先排序，而排序之前先去重，排序去重后的all与数组a的相对顺序是一致的\n`sort(alls.begin(), alls.end()); // 将所有值排序\nalls.erase(unique(alls.begin(), alls.end()), alls.end());   // 去掉重复元素、`\n当然去重函数也可以自己写。\n```js\n// foreverking\n#include <algorithm>\n#include <cmath>\n#include <cstdio>\n#include <cstring>\n#include <iostream>\n#include <queue>\n#include <vector>\nusing namespace std;\n\ntypedef pair<int, int> PII;\nconst int N = 300010;\nint n, m;\nint a[N], s[N];\n\nvector<int> all;  //待离散化的区间\nvector<PII> add, query;\n\nint find_one(int x) {\n    int l = 0, r = all.size() - 1;\n    while (l < r) {\n        int mid = (l + r) >> 1;\n        if (all[mid] >= x)\n            r = mid;\n        else\n            l = mid + 1;\n    }\n\n    return l + 1;\n}\n\nvector<int>::iterator unique_one(vector<int>& all) {\n    int j = 0;\n    for (int i = 0; i < all.size(); i++) {\n        if (!i || all[i] != all[i - 1]) all[j++] = all[i];\n    }\n\n    return all.begin() + j;\n}\n\nint main() {\n    cin >> n >> m;\n    for (int i = 0; i < n; i++) {\n        int x, c;\n        cin >> x >> c;\n        add.push_back({x, c});  //存储数据\n\n        all.push_back(x);  //放入待离散化的区间\n    }\n\n    for (int i = 0; i < m; i++) {\n        int l, r;\n        cin >> l >> r;\n        query.push_back({l, r});\n\n        all.push_back(l);\n        all.push_back(r);  //放入待离散化的区间\n    }\n\n    //离散化，去重\n    sort(all.begin(), all.end());\n    // all.erase(unique(all.begin(), all.end()), all.end());\n    all.erase(unique_one(all), all.end());\n\n    //往映射中插入数据\n    for (auto item : add) {\n        int x = find_one(item.first);\n        a[x] += item.second;\n    }\n\n    //前缀和处理\n    for (int i = 1; i <= all.size(); i++) s[i] = s[i - 1] + a[i];\n    \n    for (auto item : query) {\n        int l = find_one(item.first);\n        int r = find_one(item.second);\n        cout << s[r] - s[l - 1] << endl;\n    }\n    return 0;\n}\n```","source":"_posts/Acwing-802.md","raw":"---\ntitle: Acwing 802\ndate: 2021-10-31 11:00:11\ntags: \n    - Study\n    - 离散化\ncategories: \n    - 题解\n    - Acwing\n---\n假定有一个无限长的数轴，数轴上每个坐标上的数都是 0。\n\n现在，我们首先进行 n 次操作，每次操作将某一位置 x 上的数加 c。\n\n接下来，进行 m 次询问，每个询问包含两个整数 l 和 r，你需要求出在区间 [l,r] 之间的所有数的和。\n#### 输入格式\n\n第一行包含两个整数 n 和 m。\n\n接下来 n 行，每行包含两个整数 x 和 c。\n\n再接下来 m 行，每行包含两个整数 l 和 r。\n\n#### 输出格式\n\n共 mm 行，每行输出一个询问中所求的区间内数字和。\n#### 数据范围\n\n−109≤x≤109,  \n1≤n,m≤105,  \n−109≤l≤r≤109,  \n−10000≤c≤10000  \n#### 输入样例：\n\n```\n3 3\n1 2\n3 6\n7 5\n1 3\n4 6\n7 8\n```\n\n#### 输出样例：\n\n```\n8\n0\n5\n```\n#### 思路\n这道题是一个区间离散化的过程，因为区间很长，但是某些元素的排布可能很稀疏，所以将原数列映射到一个连续数列中排列。  \n关于这道题的步骤就大概有了：\n1. 读输入。将每次读入的`x c` `push_back()`到`add`数列中，将每次读入的位置`x` `push_back()`到`all`中，将每次读入的`l r` `push_back()`到`query`中。\n2. 排序、去重。\n3. 通过遍历`add`，完成在离散化的数组映射到的a数组中进行加上c的操作（用到`find_one`函数）。\n4. 初始化s数组。\n5. 通过遍历`query`，完成求区间[l,r]的和。（前缀和）\n\n解释一下步骤。其中，`add`数列存放的是每次输入的数据，即位置与对应的值，`all`存放的只是位置，不论是将要查询的还是已经存放数据的位置。`query`存放的是待每组查询的区间边界。 元素存储在vector<int> all中，排序去重后，再把值映射到长度较小的数组`a`中 ，`a`也就是连续数列，对他求前缀和得到答案。\n`find_one`函数采用二分查找，输入一个离散数列的位置（映射前的位置）x返回连续数列的位置+1（映射后的位置+1）[+1是为了方便前缀和计算]  \n排序，去重就是为了`find_one`做准备，想要二分就先排序，而排序之前先去重，排序去重后的all与数组a的相对顺序是一致的\n`sort(alls.begin(), alls.end()); // 将所有值排序\nalls.erase(unique(alls.begin(), alls.end()), alls.end());   // 去掉重复元素、`\n当然去重函数也可以自己写。\n```js\n// foreverking\n#include <algorithm>\n#include <cmath>\n#include <cstdio>\n#include <cstring>\n#include <iostream>\n#include <queue>\n#include <vector>\nusing namespace std;\n\ntypedef pair<int, int> PII;\nconst int N = 300010;\nint n, m;\nint a[N], s[N];\n\nvector<int> all;  //待离散化的区间\nvector<PII> add, query;\n\nint find_one(int x) {\n    int l = 0, r = all.size() - 1;\n    while (l < r) {\n        int mid = (l + r) >> 1;\n        if (all[mid] >= x)\n            r = mid;\n        else\n            l = mid + 1;\n    }\n\n    return l + 1;\n}\n\nvector<int>::iterator unique_one(vector<int>& all) {\n    int j = 0;\n    for (int i = 0; i < all.size(); i++) {\n        if (!i || all[i] != all[i - 1]) all[j++] = all[i];\n    }\n\n    return all.begin() + j;\n}\n\nint main() {\n    cin >> n >> m;\n    for (int i = 0; i < n; i++) {\n        int x, c;\n        cin >> x >> c;\n        add.push_back({x, c});  //存储数据\n\n        all.push_back(x);  //放入待离散化的区间\n    }\n\n    for (int i = 0; i < m; i++) {\n        int l, r;\n        cin >> l >> r;\n        query.push_back({l, r});\n\n        all.push_back(l);\n        all.push_back(r);  //放入待离散化的区间\n    }\n\n    //离散化，去重\n    sort(all.begin(), all.end());\n    // all.erase(unique(all.begin(), all.end()), all.end());\n    all.erase(unique_one(all), all.end());\n\n    //往映射中插入数据\n    for (auto item : add) {\n        int x = find_one(item.first);\n        a[x] += item.second;\n    }\n\n    //前缀和处理\n    for (int i = 1; i <= all.size(); i++) s[i] = s[i - 1] + a[i];\n    \n    for (auto item : query) {\n        int l = find_one(item.first);\n        int r = find_one(item.second);\n        cout << s[r] - s[l - 1] << endl;\n    }\n    return 0;\n}\n```","slug":"Acwing-802","published":1,"updated":"2021-10-31T03:03:20.706Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckvent1x90000o8ws7d27c72w","content":"<p>假定有一个无限长的数轴，数轴上每个坐标上的数都是 0。</p>\n<p>现在，我们首先进行 n 次操作，每次操作将某一位置 x 上的数加 c。</p>\n<p>接下来，进行 m 次询问，每个询问包含两个整数 l 和 r，你需要求出在区间 [l,r] 之间的所有数的和。</p>\n\n        <h4 id=\"输入格式\"   >\n          <a href=\"#输入格式\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#输入格式\" class=\"headerlink\" title=\"输入格式\"></a>输入格式</h4>\n      <p>第一行包含两个整数 n 和 m。</p>\n<p>接下来 n 行，每行包含两个整数 x 和 c。</p>\n<p>再接下来 m 行，每行包含两个整数 l 和 r。</p>\n\n        <h4 id=\"输出格式\"   >\n          <a href=\"#输出格式\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#输出格式\" class=\"headerlink\" title=\"输出格式\"></a>输出格式</h4>\n      <p>共 mm 行，每行输出一个询问中所求的区间内数字和。</p>\n\n        <h4 id=\"数据范围\"   >\n          <a href=\"#数据范围\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#数据范围\" class=\"headerlink\" title=\"数据范围\"></a>数据范围</h4>\n      <p>−109≤x≤109,<br>1≤n,m≤105,<br>−109≤l≤r≤109,<br>−10000≤c≤10000  </p>\n\n        <h4 id=\"输入样例：\"   >\n          <a href=\"#输入样例：\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#输入样例：\" class=\"headerlink\" title=\"输入样例：\"></a>输入样例：</h4>\n      <figure class=\"highlight plain\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">3 3</span><br><span class=\"line\">1 2</span><br><span class=\"line\">3 6</span><br><span class=\"line\">7 5</span><br><span class=\"line\">1 3</span><br><span class=\"line\">4 6</span><br><span class=\"line\">7 8</span><br></pre></td></tr></table></div></figure>\n\n\n        <h4 id=\"输出样例：\"   >\n          <a href=\"#输出样例：\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#输出样例：\" class=\"headerlink\" title=\"输出样例：\"></a>输出样例：</h4>\n      <figure class=\"highlight plain\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">8</span><br><span class=\"line\">0</span><br><span class=\"line\">5</span><br></pre></td></tr></table></div></figure>\n\n        <h4 id=\"思路\"   >\n          <a href=\"#思路\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h4>\n      <p>这道题是一个区间离散化的过程，因为区间很长，但是某些元素的排布可能很稀疏，所以将原数列映射到一个连续数列中排列。<br>关于这道题的步骤就大概有了：</p>\n<ol>\n<li>读输入。将每次读入的<code>x c</code> <code>push_back()</code>到<code>add</code>数列中，将每次读入的位置<code>x</code> <code>push_back()</code>到<code>all</code>中，将每次读入的<code>l r</code> <code>push_back()</code>到<code>query</code>中。</li>\n<li>排序、去重。</li>\n<li>通过遍历<code>add</code>，完成在离散化的数组映射到的a数组中进行加上c的操作（用到<code>find_one</code>函数）。</li>\n<li>初始化s数组。</li>\n<li>通过遍历<code>query</code>，完成求区间[l,r]的和。（前缀和）</li>\n</ol>\n<p>解释一下步骤。其中，<code>add</code>数列存放的是每次输入的数据，即位置与对应的值，<code>all</code>存放的只是位置，不论是将要查询的还是已经存放数据的位置。<code>query</code>存放的是待每组查询的区间边界。 元素存储在vector<int> all中，排序去重后，再把值映射到长度较小的数组<code>a</code>中 ，<code>a</code>也就是连续数列，对他求前缀和得到答案。<br><code>find_one</code>函数采用二分查找，输入一个离散数列的位置（映射前的位置）x返回连续数列的位置+1（映射后的位置+1）[+1是为了方便前缀和计算]<br>排序，去重就是为了<code>find_one</code>做准备，想要二分就先排序，而排序之前先去重，排序去重后的all与数组a的相对顺序是一致的<br><code>sort(alls.begin(), alls.end()); // 将所有值排序 alls.erase(unique(alls.begin(), alls.end()), alls.end());   // 去掉重复元素、</code><br>当然去重函数也可以自己写。</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// foreverking</span></span><br><span class=\"line\">#include &lt;algorithm&gt;</span><br><span class=\"line\">#include &lt;cmath&gt;</span><br><span class=\"line\">#include &lt;cstdio&gt;</span><br><span class=\"line\">#include &lt;cstring&gt;</span><br><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">#include &lt;queue&gt;</span><br><span class=\"line\">#include &lt;vector&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\"></span><br><span class=\"line\">typedef pair&lt;int, int&gt; PII;</span><br><span class=\"line\"><span class=\"keyword\">const</span> int N = <span class=\"number\">300010</span>;</span><br><span class=\"line\">int n, m;</span><br><span class=\"line\">int a[N], s[N];</span><br><span class=\"line\"></span><br><span class=\"line\">vector&lt;int&gt; all;  <span class=\"comment\">//待离散化的区间</span></span><br><span class=\"line\">vector&lt;PII&gt; add, query;</span><br><span class=\"line\"></span><br><span class=\"line\">int <span class=\"function\"><span class=\"title\">find_one</span>(<span class=\"params\">int x</span>)</span> &#123;</span><br><span class=\"line\">    int l = <span class=\"number\">0</span>, r = all.size() - <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (l &lt; r) &#123;</span><br><span class=\"line\">        int mid = (l + r) &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (all[mid] &gt;= x)</span><br><span class=\"line\">            r = mid;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            l = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> l + <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">vector&lt;int&gt;::iterator <span class=\"function\"><span class=\"title\">unique_one</span>(<span class=\"params\">vector&lt;int&gt;&amp; all</span>)</span> &#123;</span><br><span class=\"line\">    int j = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (int i = <span class=\"number\">0</span>; i &lt; all.size(); i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!i || all[i] != all[i - <span class=\"number\">1</span>]) all[j++] = all[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> all.begin() + j;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">int <span class=\"function\"><span class=\"title\">main</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (int i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">        int x, c;</span><br><span class=\"line\">        cin &gt;&gt; x &gt;&gt; c;</span><br><span class=\"line\">        add.push_back(&#123;x, c&#125;);  <span class=\"comment\">//存储数据</span></span><br><span class=\"line\"></span><br><span class=\"line\">        all.push_back(x);  <span class=\"comment\">//放入待离散化的区间</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (int i = <span class=\"number\">0</span>; i &lt; m; i++) &#123;</span><br><span class=\"line\">        int l, r;</span><br><span class=\"line\">        cin &gt;&gt; l &gt;&gt; r;</span><br><span class=\"line\">        query.push_back(&#123;l, r&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        all.push_back(l);</span><br><span class=\"line\">        all.push_back(r);  <span class=\"comment\">//放入待离散化的区间</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//离散化，去重</span></span><br><span class=\"line\">    sort(all.begin(), all.end());</span><br><span class=\"line\">    <span class=\"comment\">// all.erase(unique(all.begin(), all.end()), all.end());</span></span><br><span class=\"line\">    all.erase(unique_one(all), all.end());</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//往映射中插入数据</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (auto item : add) &#123;</span><br><span class=\"line\">        int x = find_one(item.first);</span><br><span class=\"line\">        a[x] += item.second;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//前缀和处理</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (int i = <span class=\"number\">1</span>; i &lt;= all.size(); i++) s[i] = s[i - <span class=\"number\">1</span>] + a[i];</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span> (auto item : query) &#123;</span><br><span class=\"line\">        int l = find_one(item.first);</span><br><span class=\"line\">        int r = find_one(item.second);</span><br><span class=\"line\">        cout &lt;&lt; s[r] - s[l - <span class=\"number\">1</span>] &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>","site":{"data":{}},"excerpt":"","more":"<p>假定有一个无限长的数轴，数轴上每个坐标上的数都是 0。</p>\n<p>现在，我们首先进行 n 次操作，每次操作将某一位置 x 上的数加 c。</p>\n<p>接下来，进行 m 次询问，每个询问包含两个整数 l 和 r，你需要求出在区间 [l,r] 之间的所有数的和。</p>\n\n        <h4 id=\"输入格式\"   >\n          <a href=\"#输入格式\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#输入格式\" class=\"headerlink\" title=\"输入格式\"></a>输入格式</h4>\n      <p>第一行包含两个整数 n 和 m。</p>\n<p>接下来 n 行，每行包含两个整数 x 和 c。</p>\n<p>再接下来 m 行，每行包含两个整数 l 和 r。</p>\n\n        <h4 id=\"输出格式\"   >\n          <a href=\"#输出格式\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#输出格式\" class=\"headerlink\" title=\"输出格式\"></a>输出格式</h4>\n      <p>共 mm 行，每行输出一个询问中所求的区间内数字和。</p>\n\n        <h4 id=\"数据范围\"   >\n          <a href=\"#数据范围\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#数据范围\" class=\"headerlink\" title=\"数据范围\"></a>数据范围</h4>\n      <p>−109≤x≤109,<br>1≤n,m≤105,<br>−109≤l≤r≤109,<br>−10000≤c≤10000  </p>\n\n        <h4 id=\"输入样例：\"   >\n          <a href=\"#输入样例：\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#输入样例：\" class=\"headerlink\" title=\"输入样例：\"></a>输入样例：</h4>\n      <figure class=\"highlight plain\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">3 3</span><br><span class=\"line\">1 2</span><br><span class=\"line\">3 6</span><br><span class=\"line\">7 5</span><br><span class=\"line\">1 3</span><br><span class=\"line\">4 6</span><br><span class=\"line\">7 8</span><br></pre></td></tr></table></div></figure>\n\n\n        <h4 id=\"输出样例：\"   >\n          <a href=\"#输出样例：\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#输出样例：\" class=\"headerlink\" title=\"输出样例：\"></a>输出样例：</h4>\n      <figure class=\"highlight plain\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">8</span><br><span class=\"line\">0</span><br><span class=\"line\">5</span><br></pre></td></tr></table></div></figure>\n\n        <h4 id=\"思路\"   >\n          <a href=\"#思路\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h4>\n      <p>这道题是一个区间离散化的过程，因为区间很长，但是某些元素的排布可能很稀疏，所以将原数列映射到一个连续数列中排列。<br>关于这道题的步骤就大概有了：</p>\n<ol>\n<li>读输入。将每次读入的<code>x c</code> <code>push_back()</code>到<code>add</code>数列中，将每次读入的位置<code>x</code> <code>push_back()</code>到<code>all</code>中，将每次读入的<code>l r</code> <code>push_back()</code>到<code>query</code>中。</li>\n<li>排序、去重。</li>\n<li>通过遍历<code>add</code>，完成在离散化的数组映射到的a数组中进行加上c的操作（用到<code>find_one</code>函数）。</li>\n<li>初始化s数组。</li>\n<li>通过遍历<code>query</code>，完成求区间[l,r]的和。（前缀和）</li>\n</ol>\n<p>解释一下步骤。其中，<code>add</code>数列存放的是每次输入的数据，即位置与对应的值，<code>all</code>存放的只是位置，不论是将要查询的还是已经存放数据的位置。<code>query</code>存放的是待每组查询的区间边界。 元素存储在vector<int> all中，排序去重后，再把值映射到长度较小的数组<code>a</code>中 ，<code>a</code>也就是连续数列，对他求前缀和得到答案。<br><code>find_one</code>函数采用二分查找，输入一个离散数列的位置（映射前的位置）x返回连续数列的位置+1（映射后的位置+1）[+1是为了方便前缀和计算]<br>排序，去重就是为了<code>find_one</code>做准备，想要二分就先排序，而排序之前先去重，排序去重后的all与数组a的相对顺序是一致的<br><code>sort(alls.begin(), alls.end()); // 将所有值排序 alls.erase(unique(alls.begin(), alls.end()), alls.end());   // 去掉重复元素、</code><br>当然去重函数也可以自己写。</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// foreverking</span></span><br><span class=\"line\">#include &lt;algorithm&gt;</span><br><span class=\"line\">#include &lt;cmath&gt;</span><br><span class=\"line\">#include &lt;cstdio&gt;</span><br><span class=\"line\">#include &lt;cstring&gt;</span><br><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">#include &lt;queue&gt;</span><br><span class=\"line\">#include &lt;vector&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\"></span><br><span class=\"line\">typedef pair&lt;int, int&gt; PII;</span><br><span class=\"line\"><span class=\"keyword\">const</span> int N = <span class=\"number\">300010</span>;</span><br><span class=\"line\">int n, m;</span><br><span class=\"line\">int a[N], s[N];</span><br><span class=\"line\"></span><br><span class=\"line\">vector&lt;int&gt; all;  <span class=\"comment\">//待离散化的区间</span></span><br><span class=\"line\">vector&lt;PII&gt; add, query;</span><br><span class=\"line\"></span><br><span class=\"line\">int <span class=\"function\"><span class=\"title\">find_one</span>(<span class=\"params\">int x</span>)</span> &#123;</span><br><span class=\"line\">    int l = <span class=\"number\">0</span>, r = all.size() - <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (l &lt; r) &#123;</span><br><span class=\"line\">        int mid = (l + r) &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (all[mid] &gt;= x)</span><br><span class=\"line\">            r = mid;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            l = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> l + <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">vector&lt;int&gt;::iterator <span class=\"function\"><span class=\"title\">unique_one</span>(<span class=\"params\">vector&lt;int&gt;&amp; all</span>)</span> &#123;</span><br><span class=\"line\">    int j = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (int i = <span class=\"number\">0</span>; i &lt; all.size(); i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!i || all[i] != all[i - <span class=\"number\">1</span>]) all[j++] = all[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> all.begin() + j;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">int <span class=\"function\"><span class=\"title\">main</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (int i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">        int x, c;</span><br><span class=\"line\">        cin &gt;&gt; x &gt;&gt; c;</span><br><span class=\"line\">        add.push_back(&#123;x, c&#125;);  <span class=\"comment\">//存储数据</span></span><br><span class=\"line\"></span><br><span class=\"line\">        all.push_back(x);  <span class=\"comment\">//放入待离散化的区间</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (int i = <span class=\"number\">0</span>; i &lt; m; i++) &#123;</span><br><span class=\"line\">        int l, r;</span><br><span class=\"line\">        cin &gt;&gt; l &gt;&gt; r;</span><br><span class=\"line\">        query.push_back(&#123;l, r&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        all.push_back(l);</span><br><span class=\"line\">        all.push_back(r);  <span class=\"comment\">//放入待离散化的区间</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//离散化，去重</span></span><br><span class=\"line\">    sort(all.begin(), all.end());</span><br><span class=\"line\">    <span class=\"comment\">// all.erase(unique(all.begin(), all.end()), all.end());</span></span><br><span class=\"line\">    all.erase(unique_one(all), all.end());</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//往映射中插入数据</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (auto item : add) &#123;</span><br><span class=\"line\">        int x = find_one(item.first);</span><br><span class=\"line\">        a[x] += item.second;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//前缀和处理</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (int i = <span class=\"number\">1</span>; i &lt;= all.size(); i++) s[i] = s[i - <span class=\"number\">1</span>] + a[i];</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span> (auto item : query) &#123;</span><br><span class=\"line\">        int l = find_one(item.first);</span><br><span class=\"line\">        int r = find_one(item.second);</span><br><span class=\"line\">        cout &lt;&lt; s[r] - s[l - <span class=\"number\">1</span>] &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>"},{"title":"数组模拟链表","date":"2021-11-02T12:32:35.000Z","_content":"在平常写算法题时，常常考虑用到链表，但是像我们一般的molloc或者new出空间来花销太大了，往往时间不够用，这时候我们就需要用到数组来模拟链表了。  \n### 单链表\n最简单的单链表  \n\n首先时初始化，将head置-1,idx置0即可\n```js\nvoid init() {\n    head = -1;   \n    idx = 1;        // 第1个结点的下标从1开始\n}\n```\n再就是头插法\n\n```js\n/** 向链表头部插入一个数 */\nvoid insert_head(int x) {\n    e[idx] = x;//赋值\n    ne[idx] = head;\n    head = idx++;\n}\n```\n插入到第K个数后\n\n```js\n/** 在第个k数的位置后插入一个数 */\nvoid insert(int k, int x) {\n    int temp = k - 1;  //因为从0开始，实际上k - 1才是第k个结点\n    e[idx] = x;\n    ne[idx] = ne[temp];  //将新指针指向第k+1个结点\n    ne[temp] = idx++;\n}\n```\n删除第k个数\n```js\n/** 删除链表中第k个数后面的数 */\nvoid remove(int k) {\n    if (!k)//删除头结点特判\n        head = ne[head];  //檢查是不是刪除头结点，是的话头结点指向下一个点\n    else {\n        int temp = k - 1;  //同上\n        ne[temp] = ne[ne[temp]];\n    }\n}\n遍历\n\n```js\nvoid print_one() {\n    for (int i = head; i != -1; i = ne[i]) cout << e[i] << \" \";\n    cout << endl;\n}\n```\n\n### 例题\n实现一个单链表，链表初始为空，支持三种操作：\n\n1.  向链表头插入一个数；\n1.  删除第 k 个插入的数后面的数；\n1.  在第 k 个插入的数后插入一个数。\n\n现在要对该链表进行 M 次操作，进行完所有操作后，从头到尾输出整个链表。\n\n**注意**:题目中第 k 个插入的数并不是指当前链表的第 k 个数。例如操作过程中一共插入了 n 个数，则按照插入的时间顺序，这 n 个数依次为：第 1 个插入的数，第 2 个插入的数，…第 n 个插入的数。\n\n#### 输入格式\n\n第一行包含整数 M，表示操作次数。\n\n接下来 M 行，每行包含一个操作命令，操作命令可能为以下几种：\n\n1.  `H x`，表示向链表头插入一个数 x。\n1.  `D k`，表示删除第 k 个插入的数后面的数（当 k 为 0 时，表示删除头结点）。\n1.  `I k x`，表示在第 k 个插入的数后面插入一个数 x（此操作中 k 均大于 0）。\n\n#### 输出格式\n\n共一行，将整个链表从头到尾输出。\n\n#### 数据范围\n\n1≤M≤100000  \n所有操作保证合法。\n\n#### 输入样例：\n\n```\n10\nH 9\nI 1 1\nD 1\nD 0\nH 6\nI 3 6\nI 4 5\nI 4 5\nI 3 4\nD 6\n```\n\n#### 输出样例：\n\n```\n6 4 6 5\n```\n\n简单的模板那题，将上述模拟代码带入即可。\n```js\n// foreverking\n#include <algorithm>\n#include <cmath>\n#include <cstdio>\n#include <cstring>\n#include <iostream>\n#include <queue>\n#include <vector>\nusing namespace std;\n\nconst int N = 100010;\nint value[N],\n    nex[N];  // value数组存放链表结点，next数组存放下一个结点的位置（下标）\nint m, ide, head;  // ide是目前可用位置,head是头指针也就是头结点的下标\n\n//初始化\nvoid init() {\n    head = -1;\n    ide = 0;  //从0开始存放\n}\n\n//头插\nvoid insert_head(int x) {\n    value[ide] = x;   //新结点赋值\n    nex[ide] = head;  //将新结点从头接入链表\n    head = ide;       //重设头指针\n    ide++;\n}\n\n//插入到第k数后\nvoid insert_ca(int k, int x) {\n    int temp = k - 1;  //因为从0开始，实际上k - 1才是第k个结点\n    value[ide] = x;\n    nex[ide] = nex[temp];  //将新指针指向第k+1个结点\n    nex[temp] = ide;\n    ide++;\n}\n//删除结点\nvoid remove(int k) {\n    int temp = k - 1;  //同上\n    nex[temp] = nex[nex[temp]];\n}\n\n//数组模拟链表\nint main() {\n    init();  //初始化\n    cin >> m;\n    while (m--) {\n        char ch;\n        int k, x;\n        cin >> ch;\n\n        if (ch == 'H') {\n            cin >> x;\n            insert_head(x);\n        } else if (ch == 'D') {\n            cin >> k;\n            if (!k) head = nex[head];//檢查是不是刪除头结点，是的话头结点指向下一个点\n            remove(k);\n        } else if (ch == 'I') {\n            cin >> k >> x;\n            insert_ca(k, x);\n        }\n    }\n\n    for (int i = head; i != -1; i = nex[i]) cout << value[i] << \" \";\n\n    cout << endl;\n    return 0;\n}\n```\n### 双链表\n与单链表相比，多了一个l[]数组，他储存当前结点前一个结点的下标位置。\n\n```js\n// e[]表示节点的值，l[]表示节点的左指针，r[]表示节点的右指针，idx表示当前用到了哪个节点\nint e[N], l[N], r[N], idx;\n\n// 初始化\nvoid init(){\n    //0是首端点，1是尾端点\n    r[0] = 1;\n    l[1] = 0;\n    idx = 2;\n}\n\n// 在节点k的右边插入一个数x\nvoid insert(int k, int x){\n    e[idx] = k;\n    l[idx] = k;\n    r[idx] = r[k];\n    l[r[k]] = idx;\n    r[k] = idx ++ ;\n}\n\n// 删除节点k\nvoid remove(int k)\n{\n    l[r[k]] = l[k];\n    r[l[k]] = r[k];\n}\n\nvoid traval() {\n    for (int i = r[0]; i != 1; i = r[i]) printf(\"%d \", e[i]);\n}\n```","source":"_posts/数组模拟链表.md","raw":"---\ntitle: 数组模拟链表\ndate: 2021-11-02 20:32:35\ntags: \n    - Study\n    - 链表\ncategories: \n    - 数据结构\n    - 链表\n---\n在平常写算法题时，常常考虑用到链表，但是像我们一般的molloc或者new出空间来花销太大了，往往时间不够用，这时候我们就需要用到数组来模拟链表了。  \n### 单链表\n最简单的单链表  \n\n首先时初始化，将head置-1,idx置0即可\n```js\nvoid init() {\n    head = -1;   \n    idx = 1;        // 第1个结点的下标从1开始\n}\n```\n再就是头插法\n\n```js\n/** 向链表头部插入一个数 */\nvoid insert_head(int x) {\n    e[idx] = x;//赋值\n    ne[idx] = head;\n    head = idx++;\n}\n```\n插入到第K个数后\n\n```js\n/** 在第个k数的位置后插入一个数 */\nvoid insert(int k, int x) {\n    int temp = k - 1;  //因为从0开始，实际上k - 1才是第k个结点\n    e[idx] = x;\n    ne[idx] = ne[temp];  //将新指针指向第k+1个结点\n    ne[temp] = idx++;\n}\n```\n删除第k个数\n```js\n/** 删除链表中第k个数后面的数 */\nvoid remove(int k) {\n    if (!k)//删除头结点特判\n        head = ne[head];  //檢查是不是刪除头结点，是的话头结点指向下一个点\n    else {\n        int temp = k - 1;  //同上\n        ne[temp] = ne[ne[temp]];\n    }\n}\n遍历\n\n```js\nvoid print_one() {\n    for (int i = head; i != -1; i = ne[i]) cout << e[i] << \" \";\n    cout << endl;\n}\n```\n\n### 例题\n实现一个单链表，链表初始为空，支持三种操作：\n\n1.  向链表头插入一个数；\n1.  删除第 k 个插入的数后面的数；\n1.  在第 k 个插入的数后插入一个数。\n\n现在要对该链表进行 M 次操作，进行完所有操作后，从头到尾输出整个链表。\n\n**注意**:题目中第 k 个插入的数并不是指当前链表的第 k 个数。例如操作过程中一共插入了 n 个数，则按照插入的时间顺序，这 n 个数依次为：第 1 个插入的数，第 2 个插入的数，…第 n 个插入的数。\n\n#### 输入格式\n\n第一行包含整数 M，表示操作次数。\n\n接下来 M 行，每行包含一个操作命令，操作命令可能为以下几种：\n\n1.  `H x`，表示向链表头插入一个数 x。\n1.  `D k`，表示删除第 k 个插入的数后面的数（当 k 为 0 时，表示删除头结点）。\n1.  `I k x`，表示在第 k 个插入的数后面插入一个数 x（此操作中 k 均大于 0）。\n\n#### 输出格式\n\n共一行，将整个链表从头到尾输出。\n\n#### 数据范围\n\n1≤M≤100000  \n所有操作保证合法。\n\n#### 输入样例：\n\n```\n10\nH 9\nI 1 1\nD 1\nD 0\nH 6\nI 3 6\nI 4 5\nI 4 5\nI 3 4\nD 6\n```\n\n#### 输出样例：\n\n```\n6 4 6 5\n```\n\n简单的模板那题，将上述模拟代码带入即可。\n```js\n// foreverking\n#include <algorithm>\n#include <cmath>\n#include <cstdio>\n#include <cstring>\n#include <iostream>\n#include <queue>\n#include <vector>\nusing namespace std;\n\nconst int N = 100010;\nint value[N],\n    nex[N];  // value数组存放链表结点，next数组存放下一个结点的位置（下标）\nint m, ide, head;  // ide是目前可用位置,head是头指针也就是头结点的下标\n\n//初始化\nvoid init() {\n    head = -1;\n    ide = 0;  //从0开始存放\n}\n\n//头插\nvoid insert_head(int x) {\n    value[ide] = x;   //新结点赋值\n    nex[ide] = head;  //将新结点从头接入链表\n    head = ide;       //重设头指针\n    ide++;\n}\n\n//插入到第k数后\nvoid insert_ca(int k, int x) {\n    int temp = k - 1;  //因为从0开始，实际上k - 1才是第k个结点\n    value[ide] = x;\n    nex[ide] = nex[temp];  //将新指针指向第k+1个结点\n    nex[temp] = ide;\n    ide++;\n}\n//删除结点\nvoid remove(int k) {\n    int temp = k - 1;  //同上\n    nex[temp] = nex[nex[temp]];\n}\n\n//数组模拟链表\nint main() {\n    init();  //初始化\n    cin >> m;\n    while (m--) {\n        char ch;\n        int k, x;\n        cin >> ch;\n\n        if (ch == 'H') {\n            cin >> x;\n            insert_head(x);\n        } else if (ch == 'D') {\n            cin >> k;\n            if (!k) head = nex[head];//檢查是不是刪除头结点，是的话头结点指向下一个点\n            remove(k);\n        } else if (ch == 'I') {\n            cin >> k >> x;\n            insert_ca(k, x);\n        }\n    }\n\n    for (int i = head; i != -1; i = nex[i]) cout << value[i] << \" \";\n\n    cout << endl;\n    return 0;\n}\n```\n### 双链表\n与单链表相比，多了一个l[]数组，他储存当前结点前一个结点的下标位置。\n\n```js\n// e[]表示节点的值，l[]表示节点的左指针，r[]表示节点的右指针，idx表示当前用到了哪个节点\nint e[N], l[N], r[N], idx;\n\n// 初始化\nvoid init(){\n    //0是首端点，1是尾端点\n    r[0] = 1;\n    l[1] = 0;\n    idx = 2;\n}\n\n// 在节点k的右边插入一个数x\nvoid insert(int k, int x){\n    e[idx] = k;\n    l[idx] = k;\n    r[idx] = r[k];\n    l[r[k]] = idx;\n    r[k] = idx ++ ;\n}\n\n// 删除节点k\nvoid remove(int k)\n{\n    l[r[k]] = l[k];\n    r[l[k]] = r[k];\n}\n\nvoid traval() {\n    for (int i = r[0]; i != 1; i = r[i]) printf(\"%d \", e[i]);\n}\n```","slug":"数组模拟链表","published":1,"updated":"2021-11-07T10:43:11.784Z","_id":"ckvi2pqsr0000x0ws08m7al7w","comments":1,"layout":"post","photos":[],"link":"","content":"<p>在平常写算法题时，常常考虑用到链表，但是像我们一般的molloc或者new出空间来花销太大了，往往时间不够用，这时候我们就需要用到数组来模拟链表了。  </p>\n\n        <h3 id=\"单链表\"   >\n          <a href=\"#单链表\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#单链表\" class=\"headerlink\" title=\"单链表\"></a>单链表</h3>\n      <p>最简单的单链表  </p>\n<p>首先时初始化，将head置-1,idx置0即可</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"function\"><span class=\"title\">init</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    head = -<span class=\"number\">1</span>;   </span><br><span class=\"line\">    idx = <span class=\"number\">1</span>;        <span class=\"comment\">// 第1个结点的下标从1开始</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>再就是头插法</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/** 向链表头部插入一个数 */</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"function\"><span class=\"title\">insert_head</span>(<span class=\"params\">int x</span>)</span> &#123;</span><br><span class=\"line\">    e[idx] = x;<span class=\"comment\">//赋值</span></span><br><span class=\"line\">    ne[idx] = head;</span><br><span class=\"line\">    head = idx++;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>插入到第K个数后</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/** 在第个k数的位置后插入一个数 */</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"function\"><span class=\"title\">insert</span>(<span class=\"params\">int k, int x</span>)</span> &#123;</span><br><span class=\"line\">    int temp = k - <span class=\"number\">1</span>;  <span class=\"comment\">//因为从0开始，实际上k - 1才是第k个结点</span></span><br><span class=\"line\">    e[idx] = x;</span><br><span class=\"line\">    ne[idx] = ne[temp];  <span class=\"comment\">//将新指针指向第k+1个结点</span></span><br><span class=\"line\">    ne[temp] = idx++;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>删除第k个数</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/** 删除链表中第k个数后面的数 */</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"function\"><span class=\"title\">remove</span>(<span class=\"params\">int k</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!k)<span class=\"comment\">//删除头结点特判</span></span><br><span class=\"line\">        head = ne[head];  <span class=\"comment\">//檢查是不是刪除头结点，是的话头结点指向下一个点</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        int temp = k - <span class=\"number\">1</span>;  <span class=\"comment\">//同上</span></span><br><span class=\"line\">        ne[temp] = ne[ne[temp]];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">遍历</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">``</span><span class=\"string\">`js</span></span><br><span class=\"line\"><span class=\"string\">void print_one() &#123;</span></span><br><span class=\"line\"><span class=\"string\">    for (int i = head; i != -1; i = ne[i]) cout &lt;&lt; e[i] &lt;&lt; &quot; &quot;;</span></span><br><span class=\"line\"><span class=\"string\">    cout &lt;&lt; endl;</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br></pre></td></tr></table></div></figure>\n\n\n        <h3 id=\"例题\"   >\n          <a href=\"#例题\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#例题\" class=\"headerlink\" title=\"例题\"></a>例题</h3>\n      <p>实现一个单链表，链表初始为空，支持三种操作：</p>\n<ol>\n<li> 向链表头插入一个数；</li>\n<li> 删除第 k 个插入的数后面的数；</li>\n<li> 在第 k 个插入的数后插入一个数。</li>\n</ol>\n<p>现在要对该链表进行 M 次操作，进行完所有操作后，从头到尾输出整个链表。</p>\n<p><strong>注意</strong>:题目中第 k 个插入的数并不是指当前链表的第 k 个数。例如操作过程中一共插入了 n 个数，则按照插入的时间顺序，这 n 个数依次为：第 1 个插入的数，第 2 个插入的数，…第 n 个插入的数。</p>\n\n        <h4 id=\"输入格式\"   >\n          <a href=\"#输入格式\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#输入格式\" class=\"headerlink\" title=\"输入格式\"></a>输入格式</h4>\n      <p>第一行包含整数 M，表示操作次数。</p>\n<p>接下来 M 行，每行包含一个操作命令，操作命令可能为以下几种：</p>\n<ol>\n<li> <code>H x</code>，表示向链表头插入一个数 x。</li>\n<li> <code>D k</code>，表示删除第 k 个插入的数后面的数（当 k 为 0 时，表示删除头结点）。</li>\n<li> <code>I k x</code>，表示在第 k 个插入的数后面插入一个数 x（此操作中 k 均大于 0）。</li>\n</ol>\n\n        <h4 id=\"输出格式\"   >\n          <a href=\"#输出格式\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#输出格式\" class=\"headerlink\" title=\"输出格式\"></a>输出格式</h4>\n      <p>共一行，将整个链表从头到尾输出。</p>\n\n        <h4 id=\"数据范围\"   >\n          <a href=\"#数据范围\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#数据范围\" class=\"headerlink\" title=\"数据范围\"></a>数据范围</h4>\n      <p>1≤M≤100000<br>所有操作保证合法。</p>\n\n        <h4 id=\"输入样例：\"   >\n          <a href=\"#输入样例：\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#输入样例：\" class=\"headerlink\" title=\"输入样例：\"></a>输入样例：</h4>\n      <figure class=\"highlight plain\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">10</span><br><span class=\"line\">H 9</span><br><span class=\"line\">I 1 1</span><br><span class=\"line\">D 1</span><br><span class=\"line\">D 0</span><br><span class=\"line\">H 6</span><br><span class=\"line\">I 3 6</span><br><span class=\"line\">I 4 5</span><br><span class=\"line\">I 4 5</span><br><span class=\"line\">I 3 4</span><br><span class=\"line\">D 6</span><br></pre></td></tr></table></div></figure>\n\n\n        <h4 id=\"输出样例：\"   >\n          <a href=\"#输出样例：\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#输出样例：\" class=\"headerlink\" title=\"输出样例：\"></a>输出样例：</h4>\n      <figure class=\"highlight plain\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">6 4 6 5</span><br></pre></td></tr></table></div></figure>\n\n<p>简单的模板那题，将上述模拟代码带入即可。</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// foreverking</span></span><br><span class=\"line\">#include &lt;algorithm&gt;</span><br><span class=\"line\">#include &lt;cmath&gt;</span><br><span class=\"line\">#include &lt;cstdio&gt;</span><br><span class=\"line\">#include &lt;cstring&gt;</span><br><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">#include &lt;queue&gt;</span><br><span class=\"line\">#include &lt;vector&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> int N = <span class=\"number\">100010</span>;</span><br><span class=\"line\">int value[N],</span><br><span class=\"line\">    nex[N];  <span class=\"comment\">// value数组存放链表结点，next数组存放下一个结点的位置（下标）</span></span><br><span class=\"line\">int m, ide, head;  <span class=\"comment\">// ide是目前可用位置,head是头指针也就是头结点的下标</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//初始化</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"function\"><span class=\"title\">init</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    head = -<span class=\"number\">1</span>;</span><br><span class=\"line\">    ide = <span class=\"number\">0</span>;  <span class=\"comment\">//从0开始存放</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//头插</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"function\"><span class=\"title\">insert_head</span>(<span class=\"params\">int x</span>)</span> &#123;</span><br><span class=\"line\">    value[ide] = x;   <span class=\"comment\">//新结点赋值</span></span><br><span class=\"line\">    nex[ide] = head;  <span class=\"comment\">//将新结点从头接入链表</span></span><br><span class=\"line\">    head = ide;       <span class=\"comment\">//重设头指针</span></span><br><span class=\"line\">    ide++;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//插入到第k数后</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"function\"><span class=\"title\">insert_ca</span>(<span class=\"params\">int k, int x</span>)</span> &#123;</span><br><span class=\"line\">    int temp = k - <span class=\"number\">1</span>;  <span class=\"comment\">//因为从0开始，实际上k - 1才是第k个结点</span></span><br><span class=\"line\">    value[ide] = x;</span><br><span class=\"line\">    nex[ide] = nex[temp];  <span class=\"comment\">//将新指针指向第k+1个结点</span></span><br><span class=\"line\">    nex[temp] = ide;</span><br><span class=\"line\">    ide++;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//删除结点</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"function\"><span class=\"title\">remove</span>(<span class=\"params\">int k</span>)</span> &#123;</span><br><span class=\"line\">    int temp = k - <span class=\"number\">1</span>;  <span class=\"comment\">//同上</span></span><br><span class=\"line\">    nex[temp] = nex[nex[temp]];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//数组模拟链表</span></span><br><span class=\"line\">int <span class=\"function\"><span class=\"title\">main</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    init();  <span class=\"comment\">//初始化</span></span><br><span class=\"line\">    cin &gt;&gt; m;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (m--) &#123;</span><br><span class=\"line\">        char ch;</span><br><span class=\"line\">        int k, x;</span><br><span class=\"line\">        cin &gt;&gt; ch;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ch == <span class=\"string\">&#x27;H&#x27;</span>) &#123;</span><br><span class=\"line\">            cin &gt;&gt; x;</span><br><span class=\"line\">            insert_head(x);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (ch == <span class=\"string\">&#x27;D&#x27;</span>) &#123;</span><br><span class=\"line\">            cin &gt;&gt; k;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!k) head = nex[head];<span class=\"comment\">//檢查是不是刪除头结点，是的话头结点指向下一个点</span></span><br><span class=\"line\">            remove(k);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (ch == <span class=\"string\">&#x27;I&#x27;</span>) &#123;</span><br><span class=\"line\">            cin &gt;&gt; k &gt;&gt; x;</span><br><span class=\"line\">            insert_ca(k, x);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (int i = head; i != -<span class=\"number\">1</span>; i = nex[i]) cout &lt;&lt; value[i] &lt;&lt; <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    cout &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n        <h3 id=\"双链表\"   >\n          <a href=\"#双链表\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#双链表\" class=\"headerlink\" title=\"双链表\"></a>双链表</h3>\n      <p>与单链表相比，多了一个l[]数组，他储存当前结点前一个结点的下标位置。</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// e[]表示节点的值，l[]表示节点的左指针，r[]表示节点的右指针，idx表示当前用到了哪个节点</span></span><br><span class=\"line\">int e[N], l[N], r[N], idx;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 初始化</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"function\"><span class=\"title\">init</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//0是首端点，1是尾端点</span></span><br><span class=\"line\">    r[<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    l[<span class=\"number\">1</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    idx = <span class=\"number\">2</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 在节点k的右边插入一个数x</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"function\"><span class=\"title\">insert</span>(<span class=\"params\">int k, int x</span>)</span>&#123;</span><br><span class=\"line\">    e[idx] = k;</span><br><span class=\"line\">    l[idx] = k;</span><br><span class=\"line\">    r[idx] = r[k];</span><br><span class=\"line\">    l[r[k]] = idx;</span><br><span class=\"line\">    r[k] = idx ++ ;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 删除节点k</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> remove(int k)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    l[r[k]] = l[k];</span><br><span class=\"line\">    r[l[k]] = r[k];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"function\"><span class=\"title\">traval</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (int i = r[<span class=\"number\">0</span>]; i != <span class=\"number\">1</span>; i = r[i]) printf(<span class=\"string\">&quot;%d &quot;</span>, e[i]);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>","site":{"data":{}},"excerpt":"","more":"<p>在平常写算法题时，常常考虑用到链表，但是像我们一般的molloc或者new出空间来花销太大了，往往时间不够用，这时候我们就需要用到数组来模拟链表了。  </p>\n\n        <h3 id=\"单链表\"   >\n          <a href=\"#单链表\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#单链表\" class=\"headerlink\" title=\"单链表\"></a>单链表</h3>\n      <p>最简单的单链表  </p>\n<p>首先时初始化，将head置-1,idx置0即可</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"function\"><span class=\"title\">init</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    head = -<span class=\"number\">1</span>;   </span><br><span class=\"line\">    idx = <span class=\"number\">1</span>;        <span class=\"comment\">// 第1个结点的下标从1开始</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>再就是头插法</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/** 向链表头部插入一个数 */</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"function\"><span class=\"title\">insert_head</span>(<span class=\"params\">int x</span>)</span> &#123;</span><br><span class=\"line\">    e[idx] = x;<span class=\"comment\">//赋值</span></span><br><span class=\"line\">    ne[idx] = head;</span><br><span class=\"line\">    head = idx++;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>插入到第K个数后</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/** 在第个k数的位置后插入一个数 */</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"function\"><span class=\"title\">insert</span>(<span class=\"params\">int k, int x</span>)</span> &#123;</span><br><span class=\"line\">    int temp = k - <span class=\"number\">1</span>;  <span class=\"comment\">//因为从0开始，实际上k - 1才是第k个结点</span></span><br><span class=\"line\">    e[idx] = x;</span><br><span class=\"line\">    ne[idx] = ne[temp];  <span class=\"comment\">//将新指针指向第k+1个结点</span></span><br><span class=\"line\">    ne[temp] = idx++;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>删除第k个数</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/** 删除链表中第k个数后面的数 */</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"function\"><span class=\"title\">remove</span>(<span class=\"params\">int k</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!k)<span class=\"comment\">//删除头结点特判</span></span><br><span class=\"line\">        head = ne[head];  <span class=\"comment\">//檢查是不是刪除头结点，是的话头结点指向下一个点</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        int temp = k - <span class=\"number\">1</span>;  <span class=\"comment\">//同上</span></span><br><span class=\"line\">        ne[temp] = ne[ne[temp]];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">遍历</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">``</span><span class=\"string\">`js</span></span><br><span class=\"line\"><span class=\"string\">void print_one() &#123;</span></span><br><span class=\"line\"><span class=\"string\">    for (int i = head; i != -1; i = ne[i]) cout &lt;&lt; e[i] &lt;&lt; &quot; &quot;;</span></span><br><span class=\"line\"><span class=\"string\">    cout &lt;&lt; endl;</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br></pre></td></tr></table></div></figure>\n\n\n        <h3 id=\"例题\"   >\n          <a href=\"#例题\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#例题\" class=\"headerlink\" title=\"例题\"></a>例题</h3>\n      <p>实现一个单链表，链表初始为空，支持三种操作：</p>\n<ol>\n<li> 向链表头插入一个数；</li>\n<li> 删除第 k 个插入的数后面的数；</li>\n<li> 在第 k 个插入的数后插入一个数。</li>\n</ol>\n<p>现在要对该链表进行 M 次操作，进行完所有操作后，从头到尾输出整个链表。</p>\n<p><strong>注意</strong>:题目中第 k 个插入的数并不是指当前链表的第 k 个数。例如操作过程中一共插入了 n 个数，则按照插入的时间顺序，这 n 个数依次为：第 1 个插入的数，第 2 个插入的数，…第 n 个插入的数。</p>\n\n        <h4 id=\"输入格式\"   >\n          <a href=\"#输入格式\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#输入格式\" class=\"headerlink\" title=\"输入格式\"></a>输入格式</h4>\n      <p>第一行包含整数 M，表示操作次数。</p>\n<p>接下来 M 行，每行包含一个操作命令，操作命令可能为以下几种：</p>\n<ol>\n<li> <code>H x</code>，表示向链表头插入一个数 x。</li>\n<li> <code>D k</code>，表示删除第 k 个插入的数后面的数（当 k 为 0 时，表示删除头结点）。</li>\n<li> <code>I k x</code>，表示在第 k 个插入的数后面插入一个数 x（此操作中 k 均大于 0）。</li>\n</ol>\n\n        <h4 id=\"输出格式\"   >\n          <a href=\"#输出格式\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#输出格式\" class=\"headerlink\" title=\"输出格式\"></a>输出格式</h4>\n      <p>共一行，将整个链表从头到尾输出。</p>\n\n        <h4 id=\"数据范围\"   >\n          <a href=\"#数据范围\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#数据范围\" class=\"headerlink\" title=\"数据范围\"></a>数据范围</h4>\n      <p>1≤M≤100000<br>所有操作保证合法。</p>\n\n        <h4 id=\"输入样例：\"   >\n          <a href=\"#输入样例：\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#输入样例：\" class=\"headerlink\" title=\"输入样例：\"></a>输入样例：</h4>\n      <figure class=\"highlight plain\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">10</span><br><span class=\"line\">H 9</span><br><span class=\"line\">I 1 1</span><br><span class=\"line\">D 1</span><br><span class=\"line\">D 0</span><br><span class=\"line\">H 6</span><br><span class=\"line\">I 3 6</span><br><span class=\"line\">I 4 5</span><br><span class=\"line\">I 4 5</span><br><span class=\"line\">I 3 4</span><br><span class=\"line\">D 6</span><br></pre></td></tr></table></div></figure>\n\n\n        <h4 id=\"输出样例：\"   >\n          <a href=\"#输出样例：\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#输出样例：\" class=\"headerlink\" title=\"输出样例：\"></a>输出样例：</h4>\n      <figure class=\"highlight plain\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">6 4 6 5</span><br></pre></td></tr></table></div></figure>\n\n<p>简单的模板那题，将上述模拟代码带入即可。</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// foreverking</span></span><br><span class=\"line\">#include &lt;algorithm&gt;</span><br><span class=\"line\">#include &lt;cmath&gt;</span><br><span class=\"line\">#include &lt;cstdio&gt;</span><br><span class=\"line\">#include &lt;cstring&gt;</span><br><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">#include &lt;queue&gt;</span><br><span class=\"line\">#include &lt;vector&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> int N = <span class=\"number\">100010</span>;</span><br><span class=\"line\">int value[N],</span><br><span class=\"line\">    nex[N];  <span class=\"comment\">// value数组存放链表结点，next数组存放下一个结点的位置（下标）</span></span><br><span class=\"line\">int m, ide, head;  <span class=\"comment\">// ide是目前可用位置,head是头指针也就是头结点的下标</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//初始化</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"function\"><span class=\"title\">init</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    head = -<span class=\"number\">1</span>;</span><br><span class=\"line\">    ide = <span class=\"number\">0</span>;  <span class=\"comment\">//从0开始存放</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//头插</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"function\"><span class=\"title\">insert_head</span>(<span class=\"params\">int x</span>)</span> &#123;</span><br><span class=\"line\">    value[ide] = x;   <span class=\"comment\">//新结点赋值</span></span><br><span class=\"line\">    nex[ide] = head;  <span class=\"comment\">//将新结点从头接入链表</span></span><br><span class=\"line\">    head = ide;       <span class=\"comment\">//重设头指针</span></span><br><span class=\"line\">    ide++;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//插入到第k数后</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"function\"><span class=\"title\">insert_ca</span>(<span class=\"params\">int k, int x</span>)</span> &#123;</span><br><span class=\"line\">    int temp = k - <span class=\"number\">1</span>;  <span class=\"comment\">//因为从0开始，实际上k - 1才是第k个结点</span></span><br><span class=\"line\">    value[ide] = x;</span><br><span class=\"line\">    nex[ide] = nex[temp];  <span class=\"comment\">//将新指针指向第k+1个结点</span></span><br><span class=\"line\">    nex[temp] = ide;</span><br><span class=\"line\">    ide++;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//删除结点</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"function\"><span class=\"title\">remove</span>(<span class=\"params\">int k</span>)</span> &#123;</span><br><span class=\"line\">    int temp = k - <span class=\"number\">1</span>;  <span class=\"comment\">//同上</span></span><br><span class=\"line\">    nex[temp] = nex[nex[temp]];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//数组模拟链表</span></span><br><span class=\"line\">int <span class=\"function\"><span class=\"title\">main</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    init();  <span class=\"comment\">//初始化</span></span><br><span class=\"line\">    cin &gt;&gt; m;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (m--) &#123;</span><br><span class=\"line\">        char ch;</span><br><span class=\"line\">        int k, x;</span><br><span class=\"line\">        cin &gt;&gt; ch;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ch == <span class=\"string\">&#x27;H&#x27;</span>) &#123;</span><br><span class=\"line\">            cin &gt;&gt; x;</span><br><span class=\"line\">            insert_head(x);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (ch == <span class=\"string\">&#x27;D&#x27;</span>) &#123;</span><br><span class=\"line\">            cin &gt;&gt; k;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!k) head = nex[head];<span class=\"comment\">//檢查是不是刪除头结点，是的话头结点指向下一个点</span></span><br><span class=\"line\">            remove(k);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (ch == <span class=\"string\">&#x27;I&#x27;</span>) &#123;</span><br><span class=\"line\">            cin &gt;&gt; k &gt;&gt; x;</span><br><span class=\"line\">            insert_ca(k, x);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (int i = head; i != -<span class=\"number\">1</span>; i = nex[i]) cout &lt;&lt; value[i] &lt;&lt; <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    cout &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n        <h3 id=\"双链表\"   >\n          <a href=\"#双链表\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#双链表\" class=\"headerlink\" title=\"双链表\"></a>双链表</h3>\n      <p>与单链表相比，多了一个l[]数组，他储存当前结点前一个结点的下标位置。</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// e[]表示节点的值，l[]表示节点的左指针，r[]表示节点的右指针，idx表示当前用到了哪个节点</span></span><br><span class=\"line\">int e[N], l[N], r[N], idx;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 初始化</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"function\"><span class=\"title\">init</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//0是首端点，1是尾端点</span></span><br><span class=\"line\">    r[<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    l[<span class=\"number\">1</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    idx = <span class=\"number\">2</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 在节点k的右边插入一个数x</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"function\"><span class=\"title\">insert</span>(<span class=\"params\">int k, int x</span>)</span>&#123;</span><br><span class=\"line\">    e[idx] = k;</span><br><span class=\"line\">    l[idx] = k;</span><br><span class=\"line\">    r[idx] = r[k];</span><br><span class=\"line\">    l[r[k]] = idx;</span><br><span class=\"line\">    r[k] = idx ++ ;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 删除节点k</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> remove(int k)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    l[r[k]] = l[k];</span><br><span class=\"line\">    r[l[k]] = r[k];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"function\"><span class=\"title\">traval</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (int i = r[<span class=\"number\">0</span>]; i != <span class=\"number\">1</span>; i = r[i]) printf(<span class=\"string\">&quot;%d &quot;</span>, e[i]);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>"},{"title":"数组模拟栈,队列","date":"2021-11-03T14:29:18.000Z","_content":"## 栈\n### 普通栈\n模拟栈是很简单的，用一个只在一端操作的数组便能表示，简单看一下：\n\n```js\n// tt表示栈顶\nint stk[N], tt = -1;//从-1开始\n\n// 向栈顶插入一个数\nstk[ ++ tt] = x;\n\n// 从栈顶弹出一个数\ntt -- ;\n\n// 栈顶的值\nstk[tt];\n\n// 判断栈是否为空\nif (tt > 0) not empty;\nelse empty;\n```\n### 单调栈\n单调栈就是栈中的元素是单调的，基本用途就是寻找某个数在栈中满足某种条件的元素，比如为每个数找出满足如下条件的数：在左边距离最近且最大（小）的数\n#### 例题\n给定一个长度为 NN 的整数数列，输出每个数左边第一个比它小的数，如果不存在则输出 −1。\n\n##### 输入格式\n\n第一行包含整数 N，表示数列长度。\n\n第二行包含 N 个整数，表示整数数列。\n\n##### 输出格式\n\n共一行，包含 N 个整数，其中第 i 个数表示第 i 个数的左边第一个比它小的数，如果不存在则输出 −1。\n\n##### 数据范围\n\n1≤N≤105    \n1≤数列中元素≤10^9\n\n##### 输入样例：\n\n```\n5\n3 4 2 7 5\n```\n\n#### 输出样例：\n\n```\n-1 3 -1 2 2\n```\n##### 思路\n就是单调栈\n\n```js\n// foreverking\n#include <algorithm>\n#include <cmath>\n#include <cstdio>\n#include <cstring>\n#include <iostream>\n#include <queue>\n#include <vector>\nusing namespace std;\n\nconst int N = 10010;\nint n;\nint skt[N], tt = -1;\n\nint main() {\n    cin >> n;\n    for (int i = 0; i < n; i++) {\n        int x;\n        cin >> x;\n        while (tt != -1 && skt[tt] >= x)\n            tt--;  //当栈非空且目前栈顶的元素大于x时，出栈\n        if (tt == -1)\n            cout << \"-1 \";\n        else\n            cout << skt[tt] << \" \";\n            \n        skt[++tt] = x;//满足单调栈的条件的元素入栈\n    }\n    cout << endl;\n    return 0;\n}\n```\n## 队列\n### 普通队列\n 队列是相同的一个数组，但是可以在两端操作，一端进，另一端出。\n \n```js\n// hh 表示队头，tt表示队尾 \nint q[N], hh = 0, tt = -1;\n\n// 向队尾插入一个数\nq[ ++ tt] = x;\n\n// 从队头弹出一个数\nhh ++ ;\n\n// 队头的值\nq[hh];\n\n// 判断队列是否为空\nif (hh <= tt) not empty;\nelse empty;\n```\n### 单调队列\n#### 例题\n说到到店队列就想到滑动窗口。\n给定一个大小为 n≤106 的数组。\n\n有一个大小为 k 的滑动窗口，它从数组的最左边移动到最右边。\n\n你只能在窗口中看到 k 个数字。\n\n每次滑动窗口向右移动一个位置。\n\n以下是一个例子：\n\n该数组为 `[1 3 -1 -3 5 3 6 7]`，k 为 3。\n\n|         窗口位置        | 最小值 | 最大值 |\n| :-----------------: | :-: | :-: |\n| [1 3 -1] -3 5 3 6 7 |  -1 |  3  |\n| 1 [3 -1 -3] 5 3 6 7 |  -3 |  3  |\n| 1 3 [-1 -3 5] 3 6 7 |  -3 |  5  |\n| 1 3 -1 [-3 5 3] 6 7 |  -3 |  5  |\n| 1 3 -1 -3 [5 3 6] 7 |  3  |  6  |\n| 1 3 -1 -3 5 [3 6 7] |  3  |  7  |\n\n你的任务是确定滑动窗口位于每个位置时，窗口中的最大值和最小值。\n\n##### 输入格式\n\n输入包含两行。\n\n第一行包含两个整数 n 和 k，分别代表数组长度和滑动窗口的长度。\n\n第二行有 n 个整数，代表数组的具体数值。\n\n同行数据之间用空格隔开。\n\n##### 输出格式\n\n输出包含两个。\n\n第一行输出，从左至右，每个位置滑动窗口中的最小值。\n\n第二行输出，从左至右，每个位置滑动窗口中的最大值。\n\n##### 输入样例：\n\n```\n8 3\n1 3 -1 -3 5 3 6 7\n```\n\n##### 输出样例：\n\n```\n-1 -3 -3 -3 3 3\n3 3 5 5 6 7\n```\n##### 思路\n我们从左到右扫描整个序列，用一个队列来维护最近 k 个元素。如果用暴力来做，就是每次都遍历一遍队列中的所有元素，找出最小值即可，但这样时间复杂度就变成 O(nk) 了，显然不行。但是，如果队列中存在两个元素，满足 a[i] >= a[j] 且 i < j，那么无论在什么时候我们都不会取 a[i] 作为最小值了，所以可以直接将 a[i] 直接出队。此时队列中剩下的元素严格单调递增，所以队头就是整个队列中的最小值，可以用 O(1) 的时间找到，而为了维护队列的这个性质，我们在往队尾插入元素之前，先将队尾大于当前数的元素全部弹出即可，这样所有数均只进队一次，出队一次，所以时间复杂度是 O(n) 的。当然求最大值就是维护一个递减的队列。\n\n```js\n// foreverking\n#include <algorithm>\n#include <cmath>\n#include <cstdio>\n#include <cstring>\n#include <iostream>\n#include <queue>\n#include <vector>\nusing namespace std;\n\nconst int N = 1e6 + 10;\n\nint a[N], q[N];\nint n, k;\n\nint main() {\n    cin >> n >> k;\n    for (int i = 0; i < n; i++) cin >> a[i];\n\n    int tt = -1, hh = 0;  // tt队尾 hh队头\n    for (int i = 0; i < n; i++) {\n        if (hh <= tt && i - k + 1 > q[hh]) hh++;  //队列非空且队头需要出队\n        while (hh <= tt && a[q[tt]] > a[i]) tt--;//将大于将要入队的数出队\n        q[++tt] = i;\n        if (i >= k - 1) cout << a[q[hh]] << \" \";//队列递增，所以在最小的元素在队头\n    }\n    cout << endl;\n\n    //相反\n    tt = -1, hh = 0;  // tt队尾 hh队头\n    for (int i = 0; i < n; i++) {\n        if (hh <= tt && i - k + 1 > q[hh]) hh++;  //队列非空且队头需要出队\n        while (hh <= tt && a[q[tt]] < a[i]) tt--;\n        q[++tt] = i;\n        if (i >= k - 1) cout << a[q[hh]] << \" \";\n    }\n    cout << endl;\n\n    return 0;\n}\n```","source":"_posts/数组模拟栈-队列.md","raw":"---\ntitle: '数组模拟栈,队列'\ndate: 2021-11-03 22:29:18\ntags: \n    - Study\n    - 栈\n    - 队列\ncategories: \n    - 数据结构\n---\n## 栈\n### 普通栈\n模拟栈是很简单的，用一个只在一端操作的数组便能表示，简单看一下：\n\n```js\n// tt表示栈顶\nint stk[N], tt = -1;//从-1开始\n\n// 向栈顶插入一个数\nstk[ ++ tt] = x;\n\n// 从栈顶弹出一个数\ntt -- ;\n\n// 栈顶的值\nstk[tt];\n\n// 判断栈是否为空\nif (tt > 0) not empty;\nelse empty;\n```\n### 单调栈\n单调栈就是栈中的元素是单调的，基本用途就是寻找某个数在栈中满足某种条件的元素，比如为每个数找出满足如下条件的数：在左边距离最近且最大（小）的数\n#### 例题\n给定一个长度为 NN 的整数数列，输出每个数左边第一个比它小的数，如果不存在则输出 −1。\n\n##### 输入格式\n\n第一行包含整数 N，表示数列长度。\n\n第二行包含 N 个整数，表示整数数列。\n\n##### 输出格式\n\n共一行，包含 N 个整数，其中第 i 个数表示第 i 个数的左边第一个比它小的数，如果不存在则输出 −1。\n\n##### 数据范围\n\n1≤N≤105    \n1≤数列中元素≤10^9\n\n##### 输入样例：\n\n```\n5\n3 4 2 7 5\n```\n\n#### 输出样例：\n\n```\n-1 3 -1 2 2\n```\n##### 思路\n就是单调栈\n\n```js\n// foreverking\n#include <algorithm>\n#include <cmath>\n#include <cstdio>\n#include <cstring>\n#include <iostream>\n#include <queue>\n#include <vector>\nusing namespace std;\n\nconst int N = 10010;\nint n;\nint skt[N], tt = -1;\n\nint main() {\n    cin >> n;\n    for (int i = 0; i < n; i++) {\n        int x;\n        cin >> x;\n        while (tt != -1 && skt[tt] >= x)\n            tt--;  //当栈非空且目前栈顶的元素大于x时，出栈\n        if (tt == -1)\n            cout << \"-1 \";\n        else\n            cout << skt[tt] << \" \";\n            \n        skt[++tt] = x;//满足单调栈的条件的元素入栈\n    }\n    cout << endl;\n    return 0;\n}\n```\n## 队列\n### 普通队列\n 队列是相同的一个数组，但是可以在两端操作，一端进，另一端出。\n \n```js\n// hh 表示队头，tt表示队尾 \nint q[N], hh = 0, tt = -1;\n\n// 向队尾插入一个数\nq[ ++ tt] = x;\n\n// 从队头弹出一个数\nhh ++ ;\n\n// 队头的值\nq[hh];\n\n// 判断队列是否为空\nif (hh <= tt) not empty;\nelse empty;\n```\n### 单调队列\n#### 例题\n说到到店队列就想到滑动窗口。\n给定一个大小为 n≤106 的数组。\n\n有一个大小为 k 的滑动窗口，它从数组的最左边移动到最右边。\n\n你只能在窗口中看到 k 个数字。\n\n每次滑动窗口向右移动一个位置。\n\n以下是一个例子：\n\n该数组为 `[1 3 -1 -3 5 3 6 7]`，k 为 3。\n\n|         窗口位置        | 最小值 | 最大值 |\n| :-----------------: | :-: | :-: |\n| [1 3 -1] -3 5 3 6 7 |  -1 |  3  |\n| 1 [3 -1 -3] 5 3 6 7 |  -3 |  3  |\n| 1 3 [-1 -3 5] 3 6 7 |  -3 |  5  |\n| 1 3 -1 [-3 5 3] 6 7 |  -3 |  5  |\n| 1 3 -1 -3 [5 3 6] 7 |  3  |  6  |\n| 1 3 -1 -3 5 [3 6 7] |  3  |  7  |\n\n你的任务是确定滑动窗口位于每个位置时，窗口中的最大值和最小值。\n\n##### 输入格式\n\n输入包含两行。\n\n第一行包含两个整数 n 和 k，分别代表数组长度和滑动窗口的长度。\n\n第二行有 n 个整数，代表数组的具体数值。\n\n同行数据之间用空格隔开。\n\n##### 输出格式\n\n输出包含两个。\n\n第一行输出，从左至右，每个位置滑动窗口中的最小值。\n\n第二行输出，从左至右，每个位置滑动窗口中的最大值。\n\n##### 输入样例：\n\n```\n8 3\n1 3 -1 -3 5 3 6 7\n```\n\n##### 输出样例：\n\n```\n-1 -3 -3 -3 3 3\n3 3 5 5 6 7\n```\n##### 思路\n我们从左到右扫描整个序列，用一个队列来维护最近 k 个元素。如果用暴力来做，就是每次都遍历一遍队列中的所有元素，找出最小值即可，但这样时间复杂度就变成 O(nk) 了，显然不行。但是，如果队列中存在两个元素，满足 a[i] >= a[j] 且 i < j，那么无论在什么时候我们都不会取 a[i] 作为最小值了，所以可以直接将 a[i] 直接出队。此时队列中剩下的元素严格单调递增，所以队头就是整个队列中的最小值，可以用 O(1) 的时间找到，而为了维护队列的这个性质，我们在往队尾插入元素之前，先将队尾大于当前数的元素全部弹出即可，这样所有数均只进队一次，出队一次，所以时间复杂度是 O(n) 的。当然求最大值就是维护一个递减的队列。\n\n```js\n// foreverking\n#include <algorithm>\n#include <cmath>\n#include <cstdio>\n#include <cstring>\n#include <iostream>\n#include <queue>\n#include <vector>\nusing namespace std;\n\nconst int N = 1e6 + 10;\n\nint a[N], q[N];\nint n, k;\n\nint main() {\n    cin >> n >> k;\n    for (int i = 0; i < n; i++) cin >> a[i];\n\n    int tt = -1, hh = 0;  // tt队尾 hh队头\n    for (int i = 0; i < n; i++) {\n        if (hh <= tt && i - k + 1 > q[hh]) hh++;  //队列非空且队头需要出队\n        while (hh <= tt && a[q[tt]] > a[i]) tt--;//将大于将要入队的数出队\n        q[++tt] = i;\n        if (i >= k - 1) cout << a[q[hh]] << \" \";//队列递增，所以在最小的元素在队头\n    }\n    cout << endl;\n\n    //相反\n    tt = -1, hh = 0;  // tt队尾 hh队头\n    for (int i = 0; i < n; i++) {\n        if (hh <= tt && i - k + 1 > q[hh]) hh++;  //队列非空且队头需要出队\n        while (hh <= tt && a[q[tt]] < a[i]) tt--;\n        q[++tt] = i;\n        if (i >= k - 1) cout << a[q[hh]] << \" \";\n    }\n    cout << endl;\n\n    return 0;\n}\n```","slug":"数组模拟栈-队列","published":1,"updated":"2021-11-07T10:42:59.451Z","_id":"ckvjmbi7t0000f8ws5mtz8t2p","comments":1,"layout":"post","photos":[],"link":"","content":"\n        <h2 id=\"栈\"   >\n          <a href=\"#栈\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#栈\" class=\"headerlink\" title=\"栈\"></a>栈</h2>\n      \n        <h3 id=\"普通栈\"   >\n          <a href=\"#普通栈\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#普通栈\" class=\"headerlink\" title=\"普通栈\"></a>普通栈</h3>\n      <p>模拟栈是很简单的，用一个只在一端操作的数组便能表示，简单看一下：</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// tt表示栈顶</span></span><br><span class=\"line\">int stk[N], tt = -<span class=\"number\">1</span>;<span class=\"comment\">//从-1开始</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 向栈顶插入一个数</span></span><br><span class=\"line\">stk[ ++ tt] = x;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 从栈顶弹出一个数</span></span><br><span class=\"line\">tt -- ;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 栈顶的值</span></span><br><span class=\"line\">stk[tt];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 判断栈是否为空</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (tt &gt; <span class=\"number\">0</span>) not empty;</span><br><span class=\"line\"><span class=\"keyword\">else</span> empty;</span><br></pre></td></tr></table></div></figure>\n\n        <h3 id=\"单调栈\"   >\n          <a href=\"#单调栈\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#单调栈\" class=\"headerlink\" title=\"单调栈\"></a>单调栈</h3>\n      <p>单调栈就是栈中的元素是单调的，基本用途就是寻找某个数在栈中满足某种条件的元素，比如为每个数找出满足如下条件的数：在左边距离最近且最大（小）的数</p>\n\n        <h4 id=\"例题\"   >\n          <a href=\"#例题\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#例题\" class=\"headerlink\" title=\"例题\"></a>例题</h4>\n      <p>给定一个长度为 NN 的整数数列，输出每个数左边第一个比它小的数，如果不存在则输出 −1。</p>\n\n        <h5 id=\"输入格式\"   >\n          <a href=\"#输入格式\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#输入格式\" class=\"headerlink\" title=\"输入格式\"></a>输入格式</h5>\n      <p>第一行包含整数 N，表示数列长度。</p>\n<p>第二行包含 N 个整数，表示整数数列。</p>\n\n        <h5 id=\"输出格式\"   >\n          <a href=\"#输出格式\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#输出格式\" class=\"headerlink\" title=\"输出格式\"></a>输出格式</h5>\n      <p>共一行，包含 N 个整数，其中第 i 个数表示第 i 个数的左边第一个比它小的数，如果不存在则输出 −1。</p>\n\n        <h5 id=\"数据范围\"   >\n          <a href=\"#数据范围\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#数据范围\" class=\"headerlink\" title=\"数据范围\"></a>数据范围</h5>\n      <p>1≤N≤105<br>1≤数列中元素≤10^9</p>\n\n        <h5 id=\"输入样例：\"   >\n          <a href=\"#输入样例：\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#输入样例：\" class=\"headerlink\" title=\"输入样例：\"></a>输入样例：</h5>\n      <figure class=\"highlight plain\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">5</span><br><span class=\"line\">3 4 2 7 5</span><br></pre></td></tr></table></div></figure>\n\n\n        <h4 id=\"输出样例：\"   >\n          <a href=\"#输出样例：\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#输出样例：\" class=\"headerlink\" title=\"输出样例：\"></a>输出样例：</h4>\n      <figure class=\"highlight plain\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-1 3 -1 2 2</span><br></pre></td></tr></table></div></figure>\n\n        <h5 id=\"思路\"   >\n          <a href=\"#思路\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h5>\n      <p>就是单调栈</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// foreverking</span></span><br><span class=\"line\">#include &lt;algorithm&gt;</span><br><span class=\"line\">#include &lt;cmath&gt;</span><br><span class=\"line\">#include &lt;cstdio&gt;</span><br><span class=\"line\">#include &lt;cstring&gt;</span><br><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">#include &lt;queue&gt;</span><br><span class=\"line\">#include &lt;vector&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> int N = <span class=\"number\">10010</span>;</span><br><span class=\"line\">int n;</span><br><span class=\"line\">int skt[N], tt = -<span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">int <span class=\"function\"><span class=\"title\">main</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    cin &gt;&gt; n;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (int i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">        int x;</span><br><span class=\"line\">        cin &gt;&gt; x;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (tt != -<span class=\"number\">1</span> &amp;&amp; skt[tt] &gt;= x)</span><br><span class=\"line\">            tt--;  <span class=\"comment\">//当栈非空且目前栈顶的元素大于x时，出栈</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (tt == -<span class=\"number\">1</span>)</span><br><span class=\"line\">            cout &lt;&lt; <span class=\"string\">&quot;-1 &quot;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            cout &lt;&lt; skt[tt] &lt;&lt; <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">            </span><br><span class=\"line\">        skt[++tt] = x;<span class=\"comment\">//满足单调栈的条件的元素入栈</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n        <h2 id=\"队列\"   >\n          <a href=\"#队列\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#队列\" class=\"headerlink\" title=\"队列\"></a>队列</h2>\n      \n        <h3 id=\"普通队列\"   >\n          <a href=\"#普通队列\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#普通队列\" class=\"headerlink\" title=\"普通队列\"></a>普通队列</h3>\n      <p> 队列是相同的一个数组，但是可以在两端操作，一端进，另一端出。</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// hh 表示队头，tt表示队尾 </span></span><br><span class=\"line\">int q[N], hh = <span class=\"number\">0</span>, tt = -<span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 向队尾插入一个数</span></span><br><span class=\"line\">q[ ++ tt] = x;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 从队头弹出一个数</span></span><br><span class=\"line\">hh ++ ;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 队头的值</span></span><br><span class=\"line\">q[hh];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 判断队列是否为空</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (hh &lt;= tt) not empty;</span><br><span class=\"line\"><span class=\"keyword\">else</span> empty;</span><br></pre></td></tr></table></div></figure>\n\n        <h3 id=\"单调队列\"   >\n          <a href=\"#单调队列\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#单调队列\" class=\"headerlink\" title=\"单调队列\"></a>单调队列</h3>\n      \n        <h4 id=\"例题-1\"   >\n          <a href=\"#例题-1\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#例题-1\" class=\"headerlink\" title=\"例题\"></a>例题</h4>\n      <p>说到到店队列就想到滑动窗口。<br>给定一个大小为 n≤106 的数组。</p>\n<p>有一个大小为 k 的滑动窗口，它从数组的最左边移动到最右边。</p>\n<p>你只能在窗口中看到 k 个数字。</p>\n<p>每次滑动窗口向右移动一个位置。</p>\n<p>以下是一个例子：</p>\n<p>该数组为 <code>[1 3 -1 -3 5 3 6 7]</code>，k 为 3。</p>\n<div class=\"table-container\"><table>\n<thead>\n<tr>\n<th align=\"center\">窗口位置</th>\n<th align=\"center\">最小值</th>\n<th align=\"center\">最大值</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">[1 3 -1] -3 5 3 6 7</td>\n<td align=\"center\">-1</td>\n<td align=\"center\">3</td>\n</tr>\n<tr>\n<td align=\"center\">1 [3 -1 -3] 5 3 6 7</td>\n<td align=\"center\">-3</td>\n<td align=\"center\">3</td>\n</tr>\n<tr>\n<td align=\"center\">1 3 [-1 -3 5] 3 6 7</td>\n<td align=\"center\">-3</td>\n<td align=\"center\">5</td>\n</tr>\n<tr>\n<td align=\"center\">1 3 -1 [-3 5 3] 6 7</td>\n<td align=\"center\">-3</td>\n<td align=\"center\">5</td>\n</tr>\n<tr>\n<td align=\"center\">1 3 -1 -3 [5 3 6] 7</td>\n<td align=\"center\">3</td>\n<td align=\"center\">6</td>\n</tr>\n<tr>\n<td align=\"center\">1 3 -1 -3 5 [3 6 7]</td>\n<td align=\"center\">3</td>\n<td align=\"center\">7</td>\n</tr>\n</tbody></table></div>\n<p>你的任务是确定滑动窗口位于每个位置时，窗口中的最大值和最小值。</p>\n\n        <h5 id=\"输入格式-1\"   >\n          <a href=\"#输入格式-1\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#输入格式-1\" class=\"headerlink\" title=\"输入格式\"></a>输入格式</h5>\n      <p>输入包含两行。</p>\n<p>第一行包含两个整数 n 和 k，分别代表数组长度和滑动窗口的长度。</p>\n<p>第二行有 n 个整数，代表数组的具体数值。</p>\n<p>同行数据之间用空格隔开。</p>\n\n        <h5 id=\"输出格式-1\"   >\n          <a href=\"#输出格式-1\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#输出格式-1\" class=\"headerlink\" title=\"输出格式\"></a>输出格式</h5>\n      <p>输出包含两个。</p>\n<p>第一行输出，从左至右，每个位置滑动窗口中的最小值。</p>\n<p>第二行输出，从左至右，每个位置滑动窗口中的最大值。</p>\n\n        <h5 id=\"输入样例：-1\"   >\n          <a href=\"#输入样例：-1\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#输入样例：-1\" class=\"headerlink\" title=\"输入样例：\"></a>输入样例：</h5>\n      <figure class=\"highlight plain\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">8 3</span><br><span class=\"line\">1 3 -1 -3 5 3 6 7</span><br></pre></td></tr></table></div></figure>\n\n\n        <h5 id=\"输出样例：-1\"   >\n          <a href=\"#输出样例：-1\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#输出样例：-1\" class=\"headerlink\" title=\"输出样例：\"></a>输出样例：</h5>\n      <figure class=\"highlight plain\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-1 -3 -3 -3 3 3</span><br><span class=\"line\">3 3 5 5 6 7</span><br></pre></td></tr></table></div></figure>\n\n        <h5 id=\"思路-1\"   >\n          <a href=\"#思路-1\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#思路-1\" class=\"headerlink\" title=\"思路\"></a>思路</h5>\n      <p>我们从左到右扫描整个序列，用一个队列来维护最近 k 个元素。如果用暴力来做，就是每次都遍历一遍队列中的所有元素，找出最小值即可，但这样时间复杂度就变成 O(nk) 了，显然不行。但是，如果队列中存在两个元素，满足 a[i] &gt;= a[j] 且 i &lt; j，那么无论在什么时候我们都不会取 a[i] 作为最小值了，所以可以直接将 a[i] 直接出队。此时队列中剩下的元素严格单调递增，所以队头就是整个队列中的最小值，可以用 O(1) 的时间找到，而为了维护队列的这个性质，我们在往队尾插入元素之前，先将队尾大于当前数的元素全部弹出即可，这样所有数均只进队一次，出队一次，所以时间复杂度是 O(n) 的。当然求最大值就是维护一个递减的队列。</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// foreverking</span></span><br><span class=\"line\">#include &lt;algorithm&gt;</span><br><span class=\"line\">#include &lt;cmath&gt;</span><br><span class=\"line\">#include &lt;cstdio&gt;</span><br><span class=\"line\">#include &lt;cstring&gt;</span><br><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">#include &lt;queue&gt;</span><br><span class=\"line\">#include &lt;vector&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> int N = <span class=\"number\">1e6</span> + <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">int a[N], q[N];</span><br><span class=\"line\">int n, k;</span><br><span class=\"line\"></span><br><span class=\"line\">int <span class=\"function\"><span class=\"title\">main</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    cin &gt;&gt; n &gt;&gt; k;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (int i = <span class=\"number\">0</span>; i &lt; n; i++) cin &gt;&gt; a[i];</span><br><span class=\"line\"></span><br><span class=\"line\">    int tt = -<span class=\"number\">1</span>, hh = <span class=\"number\">0</span>;  <span class=\"comment\">// tt队尾 hh队头</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (int i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (hh &lt;= tt &amp;&amp; i - k + <span class=\"number\">1</span> &gt; q[hh]) hh++;  <span class=\"comment\">//队列非空且队头需要出队</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (hh &lt;= tt &amp;&amp; a[q[tt]] &gt; a[i]) tt--;<span class=\"comment\">//将大于将要入队的数出队</span></span><br><span class=\"line\">        q[++tt] = i;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i &gt;= k - <span class=\"number\">1</span>) cout &lt;&lt; a[q[hh]] &lt;&lt; <span class=\"string\">&quot; &quot;</span>;<span class=\"comment\">//队列递增，所以在最小的元素在队头</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//相反</span></span><br><span class=\"line\">    tt = -<span class=\"number\">1</span>, hh = <span class=\"number\">0</span>;  <span class=\"comment\">// tt队尾 hh队头</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (int i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (hh &lt;= tt &amp;&amp; i - k + <span class=\"number\">1</span> &gt; q[hh]) hh++;  <span class=\"comment\">//队列非空且队头需要出队</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (hh &lt;= tt &amp;&amp; a[q[tt]] &lt; a[i]) tt--;</span><br><span class=\"line\">        q[++tt] = i;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i &gt;= k - <span class=\"number\">1</span>) cout &lt;&lt; a[q[hh]] &lt;&lt; <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>","site":{"data":{}},"excerpt":"","more":"\n        <h2 id=\"栈\"   >\n          <a href=\"#栈\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#栈\" class=\"headerlink\" title=\"栈\"></a>栈</h2>\n      \n        <h3 id=\"普通栈\"   >\n          <a href=\"#普通栈\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#普通栈\" class=\"headerlink\" title=\"普通栈\"></a>普通栈</h3>\n      <p>模拟栈是很简单的，用一个只在一端操作的数组便能表示，简单看一下：</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// tt表示栈顶</span></span><br><span class=\"line\">int stk[N], tt = -<span class=\"number\">1</span>;<span class=\"comment\">//从-1开始</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 向栈顶插入一个数</span></span><br><span class=\"line\">stk[ ++ tt] = x;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 从栈顶弹出一个数</span></span><br><span class=\"line\">tt -- ;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 栈顶的值</span></span><br><span class=\"line\">stk[tt];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 判断栈是否为空</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (tt &gt; <span class=\"number\">0</span>) not empty;</span><br><span class=\"line\"><span class=\"keyword\">else</span> empty;</span><br></pre></td></tr></table></div></figure>\n\n        <h3 id=\"单调栈\"   >\n          <a href=\"#单调栈\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#单调栈\" class=\"headerlink\" title=\"单调栈\"></a>单调栈</h3>\n      <p>单调栈就是栈中的元素是单调的，基本用途就是寻找某个数在栈中满足某种条件的元素，比如为每个数找出满足如下条件的数：在左边距离最近且最大（小）的数</p>\n\n        <h4 id=\"例题\"   >\n          <a href=\"#例题\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#例题\" class=\"headerlink\" title=\"例题\"></a>例题</h4>\n      <p>给定一个长度为 NN 的整数数列，输出每个数左边第一个比它小的数，如果不存在则输出 −1。</p>\n\n        <h5 id=\"输入格式\"   >\n          <a href=\"#输入格式\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#输入格式\" class=\"headerlink\" title=\"输入格式\"></a>输入格式</h5>\n      <p>第一行包含整数 N，表示数列长度。</p>\n<p>第二行包含 N 个整数，表示整数数列。</p>\n\n        <h5 id=\"输出格式\"   >\n          <a href=\"#输出格式\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#输出格式\" class=\"headerlink\" title=\"输出格式\"></a>输出格式</h5>\n      <p>共一行，包含 N 个整数，其中第 i 个数表示第 i 个数的左边第一个比它小的数，如果不存在则输出 −1。</p>\n\n        <h5 id=\"数据范围\"   >\n          <a href=\"#数据范围\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#数据范围\" class=\"headerlink\" title=\"数据范围\"></a>数据范围</h5>\n      <p>1≤N≤105<br>1≤数列中元素≤10^9</p>\n\n        <h5 id=\"输入样例：\"   >\n          <a href=\"#输入样例：\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#输入样例：\" class=\"headerlink\" title=\"输入样例：\"></a>输入样例：</h5>\n      <figure class=\"highlight plain\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">5</span><br><span class=\"line\">3 4 2 7 5</span><br></pre></td></tr></table></div></figure>\n\n\n        <h4 id=\"输出样例：\"   >\n          <a href=\"#输出样例：\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#输出样例：\" class=\"headerlink\" title=\"输出样例：\"></a>输出样例：</h4>\n      <figure class=\"highlight plain\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-1 3 -1 2 2</span><br></pre></td></tr></table></div></figure>\n\n        <h5 id=\"思路\"   >\n          <a href=\"#思路\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h5>\n      <p>就是单调栈</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// foreverking</span></span><br><span class=\"line\">#include &lt;algorithm&gt;</span><br><span class=\"line\">#include &lt;cmath&gt;</span><br><span class=\"line\">#include &lt;cstdio&gt;</span><br><span class=\"line\">#include &lt;cstring&gt;</span><br><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">#include &lt;queue&gt;</span><br><span class=\"line\">#include &lt;vector&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> int N = <span class=\"number\">10010</span>;</span><br><span class=\"line\">int n;</span><br><span class=\"line\">int skt[N], tt = -<span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">int <span class=\"function\"><span class=\"title\">main</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    cin &gt;&gt; n;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (int i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">        int x;</span><br><span class=\"line\">        cin &gt;&gt; x;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (tt != -<span class=\"number\">1</span> &amp;&amp; skt[tt] &gt;= x)</span><br><span class=\"line\">            tt--;  <span class=\"comment\">//当栈非空且目前栈顶的元素大于x时，出栈</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (tt == -<span class=\"number\">1</span>)</span><br><span class=\"line\">            cout &lt;&lt; <span class=\"string\">&quot;-1 &quot;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            cout &lt;&lt; skt[tt] &lt;&lt; <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">            </span><br><span class=\"line\">        skt[++tt] = x;<span class=\"comment\">//满足单调栈的条件的元素入栈</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n        <h2 id=\"队列\"   >\n          <a href=\"#队列\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#队列\" class=\"headerlink\" title=\"队列\"></a>队列</h2>\n      \n        <h3 id=\"普通队列\"   >\n          <a href=\"#普通队列\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#普通队列\" class=\"headerlink\" title=\"普通队列\"></a>普通队列</h3>\n      <p> 队列是相同的一个数组，但是可以在两端操作，一端进，另一端出。</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// hh 表示队头，tt表示队尾 </span></span><br><span class=\"line\">int q[N], hh = <span class=\"number\">0</span>, tt = -<span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 向队尾插入一个数</span></span><br><span class=\"line\">q[ ++ tt] = x;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 从队头弹出一个数</span></span><br><span class=\"line\">hh ++ ;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 队头的值</span></span><br><span class=\"line\">q[hh];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 判断队列是否为空</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (hh &lt;= tt) not empty;</span><br><span class=\"line\"><span class=\"keyword\">else</span> empty;</span><br></pre></td></tr></table></div></figure>\n\n        <h3 id=\"单调队列\"   >\n          <a href=\"#单调队列\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#单调队列\" class=\"headerlink\" title=\"单调队列\"></a>单调队列</h3>\n      \n        <h4 id=\"例题-1\"   >\n          <a href=\"#例题-1\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#例题-1\" class=\"headerlink\" title=\"例题\"></a>例题</h4>\n      <p>说到到店队列就想到滑动窗口。<br>给定一个大小为 n≤106 的数组。</p>\n<p>有一个大小为 k 的滑动窗口，它从数组的最左边移动到最右边。</p>\n<p>你只能在窗口中看到 k 个数字。</p>\n<p>每次滑动窗口向右移动一个位置。</p>\n<p>以下是一个例子：</p>\n<p>该数组为 <code>[1 3 -1 -3 5 3 6 7]</code>，k 为 3。</p>\n<div class=\"table-container\"><table>\n<thead>\n<tr>\n<th align=\"center\">窗口位置</th>\n<th align=\"center\">最小值</th>\n<th align=\"center\">最大值</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">[1 3 -1] -3 5 3 6 7</td>\n<td align=\"center\">-1</td>\n<td align=\"center\">3</td>\n</tr>\n<tr>\n<td align=\"center\">1 [3 -1 -3] 5 3 6 7</td>\n<td align=\"center\">-3</td>\n<td align=\"center\">3</td>\n</tr>\n<tr>\n<td align=\"center\">1 3 [-1 -3 5] 3 6 7</td>\n<td align=\"center\">-3</td>\n<td align=\"center\">5</td>\n</tr>\n<tr>\n<td align=\"center\">1 3 -1 [-3 5 3] 6 7</td>\n<td align=\"center\">-3</td>\n<td align=\"center\">5</td>\n</tr>\n<tr>\n<td align=\"center\">1 3 -1 -3 [5 3 6] 7</td>\n<td align=\"center\">3</td>\n<td align=\"center\">6</td>\n</tr>\n<tr>\n<td align=\"center\">1 3 -1 -3 5 [3 6 7]</td>\n<td align=\"center\">3</td>\n<td align=\"center\">7</td>\n</tr>\n</tbody></table></div>\n<p>你的任务是确定滑动窗口位于每个位置时，窗口中的最大值和最小值。</p>\n\n        <h5 id=\"输入格式-1\"   >\n          <a href=\"#输入格式-1\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#输入格式-1\" class=\"headerlink\" title=\"输入格式\"></a>输入格式</h5>\n      <p>输入包含两行。</p>\n<p>第一行包含两个整数 n 和 k，分别代表数组长度和滑动窗口的长度。</p>\n<p>第二行有 n 个整数，代表数组的具体数值。</p>\n<p>同行数据之间用空格隔开。</p>\n\n        <h5 id=\"输出格式-1\"   >\n          <a href=\"#输出格式-1\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#输出格式-1\" class=\"headerlink\" title=\"输出格式\"></a>输出格式</h5>\n      <p>输出包含两个。</p>\n<p>第一行输出，从左至右，每个位置滑动窗口中的最小值。</p>\n<p>第二行输出，从左至右，每个位置滑动窗口中的最大值。</p>\n\n        <h5 id=\"输入样例：-1\"   >\n          <a href=\"#输入样例：-1\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#输入样例：-1\" class=\"headerlink\" title=\"输入样例：\"></a>输入样例：</h5>\n      <figure class=\"highlight plain\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">8 3</span><br><span class=\"line\">1 3 -1 -3 5 3 6 7</span><br></pre></td></tr></table></div></figure>\n\n\n        <h5 id=\"输出样例：-1\"   >\n          <a href=\"#输出样例：-1\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#输出样例：-1\" class=\"headerlink\" title=\"输出样例：\"></a>输出样例：</h5>\n      <figure class=\"highlight plain\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-1 -3 -3 -3 3 3</span><br><span class=\"line\">3 3 5 5 6 7</span><br></pre></td></tr></table></div></figure>\n\n        <h5 id=\"思路-1\"   >\n          <a href=\"#思路-1\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#思路-1\" class=\"headerlink\" title=\"思路\"></a>思路</h5>\n      <p>我们从左到右扫描整个序列，用一个队列来维护最近 k 个元素。如果用暴力来做，就是每次都遍历一遍队列中的所有元素，找出最小值即可，但这样时间复杂度就变成 O(nk) 了，显然不行。但是，如果队列中存在两个元素，满足 a[i] &gt;= a[j] 且 i &lt; j，那么无论在什么时候我们都不会取 a[i] 作为最小值了，所以可以直接将 a[i] 直接出队。此时队列中剩下的元素严格单调递增，所以队头就是整个队列中的最小值，可以用 O(1) 的时间找到，而为了维护队列的这个性质，我们在往队尾插入元素之前，先将队尾大于当前数的元素全部弹出即可，这样所有数均只进队一次，出队一次，所以时间复杂度是 O(n) 的。当然求最大值就是维护一个递减的队列。</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// foreverking</span></span><br><span class=\"line\">#include &lt;algorithm&gt;</span><br><span class=\"line\">#include &lt;cmath&gt;</span><br><span class=\"line\">#include &lt;cstdio&gt;</span><br><span class=\"line\">#include &lt;cstring&gt;</span><br><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">#include &lt;queue&gt;</span><br><span class=\"line\">#include &lt;vector&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> int N = <span class=\"number\">1e6</span> + <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">int a[N], q[N];</span><br><span class=\"line\">int n, k;</span><br><span class=\"line\"></span><br><span class=\"line\">int <span class=\"function\"><span class=\"title\">main</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    cin &gt;&gt; n &gt;&gt; k;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (int i = <span class=\"number\">0</span>; i &lt; n; i++) cin &gt;&gt; a[i];</span><br><span class=\"line\"></span><br><span class=\"line\">    int tt = -<span class=\"number\">1</span>, hh = <span class=\"number\">0</span>;  <span class=\"comment\">// tt队尾 hh队头</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (int i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (hh &lt;= tt &amp;&amp; i - k + <span class=\"number\">1</span> &gt; q[hh]) hh++;  <span class=\"comment\">//队列非空且队头需要出队</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (hh &lt;= tt &amp;&amp; a[q[tt]] &gt; a[i]) tt--;<span class=\"comment\">//将大于将要入队的数出队</span></span><br><span class=\"line\">        q[++tt] = i;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i &gt;= k - <span class=\"number\">1</span>) cout &lt;&lt; a[q[hh]] &lt;&lt; <span class=\"string\">&quot; &quot;</span>;<span class=\"comment\">//队列递增，所以在最小的元素在队头</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//相反</span></span><br><span class=\"line\">    tt = -<span class=\"number\">1</span>, hh = <span class=\"number\">0</span>;  <span class=\"comment\">// tt队尾 hh队头</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (int i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (hh &lt;= tt &amp;&amp; i - k + <span class=\"number\">1</span> &gt; q[hh]) hh++;  <span class=\"comment\">//队列非空且队头需要出队</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (hh &lt;= tt &amp;&amp; a[q[tt]] &lt; a[i]) tt--;</span><br><span class=\"line\">        q[++tt] = i;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i &gt;= k - <span class=\"number\">1</span>) cout &lt;&lt; a[q[hh]] &lt;&lt; <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>"},{"title":"串的模式匹配算法","date":"2021-11-07T10:42:31.000Z","_content":"在主串中查找定位子串问题（模式匹配）是串中最重要的操作之一，一般而言有两种匹配方式\n## BF算法（朴素的模式匹配算法）\n\n模式串和主串进行逐位比较, 如果匹配成功指针同时+1, 如果匹配失败, 则需要将指针回溯。最后确定主串中所含子串第一次出现的位置，这里的子串也称为模式串，如果匹配失败返回-1.其实就是朴素的暴力做法，主串和模式串逐个字符进行比较。 \n\n当以0下标开始匹配时，代码如下：\n```js\nint Index_DF_one(string s, string t) {  // s是主串,t是模式串\n    int i = 0, j = 0;                   //都从1开始存字符\n    while (i < s.size() && j < t.size()) {\n        if (s[i] == t[j])\n            i++, j++;  //主串和子串依次匹配下一个字符\n        else {         //匹配失败，主串，子串指针回溯\n            i = i - j + 1;  //主串回到上一次开始匹配的子覅的下一字符，这里减1即可\n            j = 0;  //子串回到起点1\n        }\n    }\n    if (j >= t.size())\n        return i - t.size();  //匹配成功返回匹配的第一个字符的下标，如果要返回具体位置就+1.\n    else\n        return -1;  //匹配不成功 \n}\n```\n当然也可以以1为下标开始。  \n\n最坏的情况，时间复杂度是O(n*m),而平均时间复杂度是O(n*m)/2,实际上也就是O(n*m).BF算法需要多次回溯，效率低下，所以有了效率高的KMP算法。  \n## KMP算法\n利用已经部分匹配的结果而加快模式串的滑动速度，这样主串的指针i不必回溯，子串指针j回溯。  \n\n我们不用依次匹配，而是寻找到模式串中重复的部分。因为在串的匹配过程中，主串与模式串匹配到某个位置k时，模式串中有相同的字符片段，两个字符片段都在主串与模式串相互匹配了，当在k位时，匹配失败，这时候将模式串右移，移动到第二个相同的字符片段处，模式串的比较指针j回退到模式串[0, j-1]之间的最长公共前后缀的长度的那个位置(即指向最长前缀的下一位).\n\n![image.png](https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/38c327500818454d861e96d35a7fcfde~tplv-k3u1fbpfcp-watermark.image?)\n\n\n> 比如对于一个序列：**excited**\n> 它的前缀包括：e, ex, exc, exci, excit, excite\n> 它的后缀包括：d, ed, ted, ited, cited, xcited\n\n怎么知道指针j该移动到哪个位置，就引入next[]数组。next[]数组其实计算模式串每个位置的最长公共前后缀的长度.也就是说如果我们预先计算好模式串中每个点之前的子串的最大公共前后缀长度，并把它作为一个和模式串等长的数组存起来，那么之后可以更快的匹配。这个数组通常就是**next数组**，因为它表征着在该位置失配后下一个需要匹配的模式串的位置。\n\n> 用 `j 表示指向最长公共前缀的最后一位(前缀指针)`, `i表示指向最长公共后缀的最后一位(后缀指针)`. 如果i 和 j 相等则前后缀指针`同时+1`, 如果不相等则需要回退前缀指针j 到上一个最长的前后缀长度的位置, 即 next[j-1]. 此时再比较j 和 i. 如果匹配则此时的`j+1`就是最长公共前后缀的长度, 如果还是不匹配则 前缀指针j 继续回退, 直到 j 和 i 相等或者 回退到起点0. 最后前缀指针 j + 1的值就表示next[0, i] 之间的最长前后缀的长度, 它意义也表示指向最长前缀的下一位\n> \n\n求next数组的方法，下标都从0开始,注意ne[0] = 0啊\n```js\n  for (int i = 1, j = 0; i < n; i++) {\n        while (j > 0 && p[i] != p[j]) j = ne[j - 1];  //回退至前一位的next位置\n        if (p[i] == p[j]) j++;\n\n        ne[i] = j;\n    }\n```\nkmp代码\n\n```js\nfor (int i = 0, j = 0; i < m; i++) {\n        while (j > 0 && p[j] != s[i]) j = ne[j - 1];\n        if (s[i] == p[j]) j++;\n\n        if (j == n) {\n            printf(\"%d \", i - n + 1);\n        }\n    }\n```\n实在记不住可以背下来做模板。  \n\n还有从1为下标开始的：\n\n```js\n   //模板串p与自身进行匹配，发现相等的前缀和后缀，从而计算出ne数组\n    // ne[1]=0, 所以i从2开始\n    for (int i = 2, j = 0; i <= n; i++) {\n        while (j && p[i] != p[j + 1]) j = ne[j];\n        if (p[i] == p[j + 1]) j++;\n        ne[i] = j;\n    }\n\n    //模板串p 与长串s进行匹配\n    //输出数据是要求从0开始计数\n    for (int i = 1, j = 0; i <= m; i++) {\n        while (j && s[i] != p[j + 1]) j = ne[j];\n        if (s[i] == p[j + 1]) j++;\n        if (j == n) {\n            printf(\"%d \", i - n);\n        }\n    }\n```","source":"_posts/串的模式匹配算法.md","raw":"---\ntitle: 串的模式匹配算法\ndate: 2021-11-07 18:42:31\ntags:\n---\n在主串中查找定位子串问题（模式匹配）是串中最重要的操作之一，一般而言有两种匹配方式\n## BF算法（朴素的模式匹配算法）\n\n模式串和主串进行逐位比较, 如果匹配成功指针同时+1, 如果匹配失败, 则需要将指针回溯。最后确定主串中所含子串第一次出现的位置，这里的子串也称为模式串，如果匹配失败返回-1.其实就是朴素的暴力做法，主串和模式串逐个字符进行比较。 \n\n当以0下标开始匹配时，代码如下：\n```js\nint Index_DF_one(string s, string t) {  // s是主串,t是模式串\n    int i = 0, j = 0;                   //都从1开始存字符\n    while (i < s.size() && j < t.size()) {\n        if (s[i] == t[j])\n            i++, j++;  //主串和子串依次匹配下一个字符\n        else {         //匹配失败，主串，子串指针回溯\n            i = i - j + 1;  //主串回到上一次开始匹配的子覅的下一字符，这里减1即可\n            j = 0;  //子串回到起点1\n        }\n    }\n    if (j >= t.size())\n        return i - t.size();  //匹配成功返回匹配的第一个字符的下标，如果要返回具体位置就+1.\n    else\n        return -1;  //匹配不成功 \n}\n```\n当然也可以以1为下标开始。  \n\n最坏的情况，时间复杂度是O(n*m),而平均时间复杂度是O(n*m)/2,实际上也就是O(n*m).BF算法需要多次回溯，效率低下，所以有了效率高的KMP算法。  \n## KMP算法\n利用已经部分匹配的结果而加快模式串的滑动速度，这样主串的指针i不必回溯，子串指针j回溯。  \n\n我们不用依次匹配，而是寻找到模式串中重复的部分。因为在串的匹配过程中，主串与模式串匹配到某个位置k时，模式串中有相同的字符片段，两个字符片段都在主串与模式串相互匹配了，当在k位时，匹配失败，这时候将模式串右移，移动到第二个相同的字符片段处，模式串的比较指针j回退到模式串[0, j-1]之间的最长公共前后缀的长度的那个位置(即指向最长前缀的下一位).\n\n![image.png](https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/38c327500818454d861e96d35a7fcfde~tplv-k3u1fbpfcp-watermark.image?)\n\n\n> 比如对于一个序列：**excited**\n> 它的前缀包括：e, ex, exc, exci, excit, excite\n> 它的后缀包括：d, ed, ted, ited, cited, xcited\n\n怎么知道指针j该移动到哪个位置，就引入next[]数组。next[]数组其实计算模式串每个位置的最长公共前后缀的长度.也就是说如果我们预先计算好模式串中每个点之前的子串的最大公共前后缀长度，并把它作为一个和模式串等长的数组存起来，那么之后可以更快的匹配。这个数组通常就是**next数组**，因为它表征着在该位置失配后下一个需要匹配的模式串的位置。\n\n> 用 `j 表示指向最长公共前缀的最后一位(前缀指针)`, `i表示指向最长公共后缀的最后一位(后缀指针)`. 如果i 和 j 相等则前后缀指针`同时+1`, 如果不相等则需要回退前缀指针j 到上一个最长的前后缀长度的位置, 即 next[j-1]. 此时再比较j 和 i. 如果匹配则此时的`j+1`就是最长公共前后缀的长度, 如果还是不匹配则 前缀指针j 继续回退, 直到 j 和 i 相等或者 回退到起点0. 最后前缀指针 j + 1的值就表示next[0, i] 之间的最长前后缀的长度, 它意义也表示指向最长前缀的下一位\n> \n\n求next数组的方法，下标都从0开始,注意ne[0] = 0啊\n```js\n  for (int i = 1, j = 0; i < n; i++) {\n        while (j > 0 && p[i] != p[j]) j = ne[j - 1];  //回退至前一位的next位置\n        if (p[i] == p[j]) j++;\n\n        ne[i] = j;\n    }\n```\nkmp代码\n\n```js\nfor (int i = 0, j = 0; i < m; i++) {\n        while (j > 0 && p[j] != s[i]) j = ne[j - 1];\n        if (s[i] == p[j]) j++;\n\n        if (j == n) {\n            printf(\"%d \", i - n + 1);\n        }\n    }\n```\n实在记不住可以背下来做模板。  \n\n还有从1为下标开始的：\n\n```js\n   //模板串p与自身进行匹配，发现相等的前缀和后缀，从而计算出ne数组\n    // ne[1]=0, 所以i从2开始\n    for (int i = 2, j = 0; i <= n; i++) {\n        while (j && p[i] != p[j + 1]) j = ne[j];\n        if (p[i] == p[j + 1]) j++;\n        ne[i] = j;\n    }\n\n    //模板串p 与长串s进行匹配\n    //输出数据是要求从0开始计数\n    for (int i = 1, j = 0; i <= m; i++) {\n        while (j && s[i] != p[j + 1]) j = ne[j];\n        if (s[i] == p[j + 1]) j++;\n        if (j == n) {\n            printf(\"%d \", i - n);\n        }\n    }\n```","slug":"串的模式匹配算法","published":1,"updated":"2021-11-07T10:43:37.829Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckvp3yyrq0000pkws90zigw7d","content":"<p>在主串中查找定位子串问题（模式匹配）是串中最重要的操作之一，一般而言有两种匹配方式</p>\n\n        <h2 id=\"BF算法（朴素的模式匹配算法）\"   >\n          <a href=\"#BF算法（朴素的模式匹配算法）\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#BF算法（朴素的模式匹配算法）\" class=\"headerlink\" title=\"BF算法（朴素的模式匹配算法）\"></a>BF算法（朴素的模式匹配算法）</h2>\n      <p>模式串和主串进行逐位比较, 如果匹配成功指针同时+1, 如果匹配失败, 则需要将指针回溯。最后确定主串中所含子串第一次出现的位置，这里的子串也称为模式串，如果匹配失败返回-1.其实就是朴素的暴力做法，主串和模式串逐个字符进行比较。 </p>\n<p>当以0下标开始匹配时，代码如下：</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int <span class=\"function\"><span class=\"title\">Index_DF_one</span>(<span class=\"params\">string s, string t</span>)</span> &#123;  <span class=\"comment\">// s是主串,t是模式串</span></span><br><span class=\"line\">    int i = <span class=\"number\">0</span>, j = <span class=\"number\">0</span>;                   <span class=\"comment\">//都从1开始存字符</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (i &lt; s.size() &amp;&amp; j &lt; t.size()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (s[i] == t[j])</span><br><span class=\"line\">            i++, j++;  <span class=\"comment\">//主串和子串依次匹配下一个字符</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;         <span class=\"comment\">//匹配失败，主串，子串指针回溯</span></span><br><span class=\"line\">            i = i - j + <span class=\"number\">1</span>;  <span class=\"comment\">//主串回到上一次开始匹配的子覅的下一字符，这里减1即可</span></span><br><span class=\"line\">            j = <span class=\"number\">0</span>;  <span class=\"comment\">//子串回到起点1</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (j &gt;= t.size())</span><br><span class=\"line\">        <span class=\"keyword\">return</span> i - t.size();  <span class=\"comment\">//匹配成功返回匹配的第一个字符的下标，如果要返回具体位置就+1.</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;  <span class=\"comment\">//匹配不成功 </span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>当然也可以以1为下标开始。  </p>\n<p>最坏的情况，时间复杂度是O(n<em>m),而平均时间复杂度是O(n</em>m)/2,实际上也就是O(n*m).BF算法需要多次回溯，效率低下，所以有了效率高的KMP算法。  </p>\n\n        <h2 id=\"KMP算法\"   >\n          <a href=\"#KMP算法\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#KMP算法\" class=\"headerlink\" title=\"KMP算法\"></a>KMP算法</h2>\n      <p>利用已经部分匹配的结果而加快模式串的滑动速度，这样主串的指针i不必回溯，子串指针j回溯。  </p>\n<p>我们不用依次匹配，而是寻找到模式串中重复的部分。因为在串的匹配过程中，主串与模式串匹配到某个位置k时，模式串中有相同的字符片段，两个字符片段都在主串与模式串相互匹配了，当在k位时，匹配失败，这时候将模式串右移，移动到第二个相同的字符片段处，模式串的比较指针j回退到模式串[0, j-1]之间的最长公共前后缀的长度的那个位置(即指向最长前缀的下一位).</p>\n<p><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/38c327500818454d861e96d35a7fcfde~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\"></p>\n<blockquote>\n<p>比如对于一个序列：<strong>excited</strong><br>它的前缀包括：e, ex, exc, exci, excit, excite<br>它的后缀包括：d, ed, ted, ited, cited, xcited</p>\n</blockquote>\n<p>怎么知道指针j该移动到哪个位置，就引入next[]数组。next[]数组其实计算模式串每个位置的最长公共前后缀的长度.也就是说如果我们预先计算好模式串中每个点之前的子串的最大公共前后缀长度，并把它作为一个和模式串等长的数组存起来，那么之后可以更快的匹配。这个数组通常就是<strong>next数组</strong>，因为它表征着在该位置失配后下一个需要匹配的模式串的位置。</p>\n<blockquote>\n<p>用 <code>j 表示指向最长公共前缀的最后一位(前缀指针)</code>, <code>i表示指向最长公共后缀的最后一位(后缀指针)</code>. 如果i 和 j 相等则前后缀指针<code>同时+1</code>, 如果不相等则需要回退前缀指针j 到上一个最长的前后缀长度的位置, 即 next[j-1]. 此时再比较j 和 i. 如果匹配则此时的<code>j+1</code>就是最长公共前后缀的长度, 如果还是不匹配则 前缀指针j 继续回退, 直到 j 和 i 相等或者 回退到起点0. 最后前缀指针 j + 1的值就表示next[0, i] 之间的最长前后缀的长度, 它意义也表示指向最长前缀的下一位</p>\n</blockquote>\n<p>求next数组的方法，下标都从0开始,注意ne[0] = 0啊</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (int i = <span class=\"number\">1</span>, j = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">while</span> (j &gt; <span class=\"number\">0</span> &amp;&amp; p[i] != p[j]) j = ne[j - <span class=\"number\">1</span>];  <span class=\"comment\">//回退至前一位的next位置</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (p[i] == p[j]) j++;</span><br><span class=\"line\"></span><br><span class=\"line\">      ne[i] = j;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></div></figure>\n<p>kmp代码</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (int i = <span class=\"number\">0</span>, j = <span class=\"number\">0</span>; i &lt; m; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (j &gt; <span class=\"number\">0</span> &amp;&amp; p[j] != s[i]) j = ne[j - <span class=\"number\">1</span>];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (s[i] == p[j]) j++;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (j == n) &#123;</span><br><span class=\"line\">            printf(<span class=\"string\">&quot;%d &quot;</span>, i - n + <span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></div></figure>\n<p>实在记不住可以背下来做模板。  </p>\n<p>还有从1为下标开始的：</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//模板串p与自身进行匹配，发现相等的前缀和后缀，从而计算出ne数组</span></span><br><span class=\"line\"> <span class=\"comment\">// ne[1]=0, 所以i从2开始</span></span><br><span class=\"line\"> <span class=\"keyword\">for</span> (int i = <span class=\"number\">2</span>, j = <span class=\"number\">0</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">     <span class=\"keyword\">while</span> (j &amp;&amp; p[i] != p[j + <span class=\"number\">1</span>]) j = ne[j];</span><br><span class=\"line\">     <span class=\"keyword\">if</span> (p[i] == p[j + <span class=\"number\">1</span>]) j++;</span><br><span class=\"line\">     ne[i] = j;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">//模板串p 与长串s进行匹配</span></span><br><span class=\"line\"> <span class=\"comment\">//输出数据是要求从0开始计数</span></span><br><span class=\"line\"> <span class=\"keyword\">for</span> (int i = <span class=\"number\">1</span>, j = <span class=\"number\">0</span>; i &lt;= m; i++) &#123;</span><br><span class=\"line\">     <span class=\"keyword\">while</span> (j &amp;&amp; s[i] != p[j + <span class=\"number\">1</span>]) j = ne[j];</span><br><span class=\"line\">     <span class=\"keyword\">if</span> (s[i] == p[j + <span class=\"number\">1</span>]) j++;</span><br><span class=\"line\">     <span class=\"keyword\">if</span> (j == n) &#123;</span><br><span class=\"line\">         printf(<span class=\"string\">&quot;%d &quot;</span>, i - n);</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></div></figure>","site":{"data":{}},"excerpt":"","more":"<p>在主串中查找定位子串问题（模式匹配）是串中最重要的操作之一，一般而言有两种匹配方式</p>\n\n        <h2 id=\"BF算法（朴素的模式匹配算法）\"   >\n          <a href=\"#BF算法（朴素的模式匹配算法）\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#BF算法（朴素的模式匹配算法）\" class=\"headerlink\" title=\"BF算法（朴素的模式匹配算法）\"></a>BF算法（朴素的模式匹配算法）</h2>\n      <p>模式串和主串进行逐位比较, 如果匹配成功指针同时+1, 如果匹配失败, 则需要将指针回溯。最后确定主串中所含子串第一次出现的位置，这里的子串也称为模式串，如果匹配失败返回-1.其实就是朴素的暴力做法，主串和模式串逐个字符进行比较。 </p>\n<p>当以0下标开始匹配时，代码如下：</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int <span class=\"function\"><span class=\"title\">Index_DF_one</span>(<span class=\"params\">string s, string t</span>)</span> &#123;  <span class=\"comment\">// s是主串,t是模式串</span></span><br><span class=\"line\">    int i = <span class=\"number\">0</span>, j = <span class=\"number\">0</span>;                   <span class=\"comment\">//都从1开始存字符</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (i &lt; s.size() &amp;&amp; j &lt; t.size()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (s[i] == t[j])</span><br><span class=\"line\">            i++, j++;  <span class=\"comment\">//主串和子串依次匹配下一个字符</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;         <span class=\"comment\">//匹配失败，主串，子串指针回溯</span></span><br><span class=\"line\">            i = i - j + <span class=\"number\">1</span>;  <span class=\"comment\">//主串回到上一次开始匹配的子覅的下一字符，这里减1即可</span></span><br><span class=\"line\">            j = <span class=\"number\">0</span>;  <span class=\"comment\">//子串回到起点1</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (j &gt;= t.size())</span><br><span class=\"line\">        <span class=\"keyword\">return</span> i - t.size();  <span class=\"comment\">//匹配成功返回匹配的第一个字符的下标，如果要返回具体位置就+1.</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;  <span class=\"comment\">//匹配不成功 </span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>当然也可以以1为下标开始。  </p>\n<p>最坏的情况，时间复杂度是O(n<em>m),而平均时间复杂度是O(n</em>m)/2,实际上也就是O(n*m).BF算法需要多次回溯，效率低下，所以有了效率高的KMP算法。  </p>\n\n        <h2 id=\"KMP算法\"   >\n          <a href=\"#KMP算法\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#KMP算法\" class=\"headerlink\" title=\"KMP算法\"></a>KMP算法</h2>\n      <p>利用已经部分匹配的结果而加快模式串的滑动速度，这样主串的指针i不必回溯，子串指针j回溯。  </p>\n<p>我们不用依次匹配，而是寻找到模式串中重复的部分。因为在串的匹配过程中，主串与模式串匹配到某个位置k时，模式串中有相同的字符片段，两个字符片段都在主串与模式串相互匹配了，当在k位时，匹配失败，这时候将模式串右移，移动到第二个相同的字符片段处，模式串的比较指针j回退到模式串[0, j-1]之间的最长公共前后缀的长度的那个位置(即指向最长前缀的下一位).</p>\n<p><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/38c327500818454d861e96d35a7fcfde~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\"></p>\n<blockquote>\n<p>比如对于一个序列：<strong>excited</strong><br>它的前缀包括：e, ex, exc, exci, excit, excite<br>它的后缀包括：d, ed, ted, ited, cited, xcited</p>\n</blockquote>\n<p>怎么知道指针j该移动到哪个位置，就引入next[]数组。next[]数组其实计算模式串每个位置的最长公共前后缀的长度.也就是说如果我们预先计算好模式串中每个点之前的子串的最大公共前后缀长度，并把它作为一个和模式串等长的数组存起来，那么之后可以更快的匹配。这个数组通常就是<strong>next数组</strong>，因为它表征着在该位置失配后下一个需要匹配的模式串的位置。</p>\n<blockquote>\n<p>用 <code>j 表示指向最长公共前缀的最后一位(前缀指针)</code>, <code>i表示指向最长公共后缀的最后一位(后缀指针)</code>. 如果i 和 j 相等则前后缀指针<code>同时+1</code>, 如果不相等则需要回退前缀指针j 到上一个最长的前后缀长度的位置, 即 next[j-1]. 此时再比较j 和 i. 如果匹配则此时的<code>j+1</code>就是最长公共前后缀的长度, 如果还是不匹配则 前缀指针j 继续回退, 直到 j 和 i 相等或者 回退到起点0. 最后前缀指针 j + 1的值就表示next[0, i] 之间的最长前后缀的长度, 它意义也表示指向最长前缀的下一位</p>\n</blockquote>\n<p>求next数组的方法，下标都从0开始,注意ne[0] = 0啊</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (int i = <span class=\"number\">1</span>, j = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">while</span> (j &gt; <span class=\"number\">0</span> &amp;&amp; p[i] != p[j]) j = ne[j - <span class=\"number\">1</span>];  <span class=\"comment\">//回退至前一位的next位置</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (p[i] == p[j]) j++;</span><br><span class=\"line\"></span><br><span class=\"line\">      ne[i] = j;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></div></figure>\n<p>kmp代码</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (int i = <span class=\"number\">0</span>, j = <span class=\"number\">0</span>; i &lt; m; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (j &gt; <span class=\"number\">0</span> &amp;&amp; p[j] != s[i]) j = ne[j - <span class=\"number\">1</span>];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (s[i] == p[j]) j++;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (j == n) &#123;</span><br><span class=\"line\">            printf(<span class=\"string\">&quot;%d &quot;</span>, i - n + <span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></div></figure>\n<p>实在记不住可以背下来做模板。  </p>\n<p>还有从1为下标开始的：</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//模板串p与自身进行匹配，发现相等的前缀和后缀，从而计算出ne数组</span></span><br><span class=\"line\"> <span class=\"comment\">// ne[1]=0, 所以i从2开始</span></span><br><span class=\"line\"> <span class=\"keyword\">for</span> (int i = <span class=\"number\">2</span>, j = <span class=\"number\">0</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">     <span class=\"keyword\">while</span> (j &amp;&amp; p[i] != p[j + <span class=\"number\">1</span>]) j = ne[j];</span><br><span class=\"line\">     <span class=\"keyword\">if</span> (p[i] == p[j + <span class=\"number\">1</span>]) j++;</span><br><span class=\"line\">     ne[i] = j;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">//模板串p 与长串s进行匹配</span></span><br><span class=\"line\"> <span class=\"comment\">//输出数据是要求从0开始计数</span></span><br><span class=\"line\"> <span class=\"keyword\">for</span> (int i = <span class=\"number\">1</span>, j = <span class=\"number\">0</span>; i &lt;= m; i++) &#123;</span><br><span class=\"line\">     <span class=\"keyword\">while</span> (j &amp;&amp; s[i] != p[j + <span class=\"number\">1</span>]) j = ne[j];</span><br><span class=\"line\">     <span class=\"keyword\">if</span> (s[i] == p[j + <span class=\"number\">1</span>]) j++;</span><br><span class=\"line\">     <span class=\"keyword\">if</span> (j == n) &#123;</span><br><span class=\"line\">         printf(<span class=\"string\">&quot;%d &quot;</span>, i - n);</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></div></figure>"},{"title":"Acwing 3302","date":"2021-11-07T13:57:33.000Z","_content":"给定一个表达式，其中运算符仅包含 `+,-,*,/`（加 减 乘 整除），可能包含括号，请你求出表达式的最终值。\n\n**注意：**\n\n-   数据保证给定的表达式合法。\n-   题目保证符号 `-` 只作为减号出现，不会作为负号出现，例如，`-1+2`,`(2+2)*(-(1+1)+2)` 之类表达式均不会出现。\n-   题目保证表达式中所有数字均为正整数。\n-   题目保证表达式在中间计算过程以及结果中，均不超过 2^31−1。\n-   题目中的整除是指向 0 取整，也就是说对于大于 00 的结果向下取整，例如 5/3=1，对于小于 0 的结果向上取整，例如 5/(1−4)=−1。\n-   C++和Java中的整除默认是向零取整；Python中的整除`//`默认向下取整，因此Python的`eval()`函数中的整除也是向下取整，在本题中不能直接使用。\n\n#### 输入格式\n\n共一行，为给定表达式。\n\n#### 输出格式\n\n共一行，为表达式的结果。\n\n#### 数据范围\n\n表达式的长度不超过 10^5。\n\n#### 输入样例：\n\n```\n(2+2)*(1+1)\n```\n\n#### 输出样例：\n\n```\n8\n```\n#### 思路\n由题意，得出这是一个中缀表达式求值的问题。那么解决方法最核心两个问题就是：\n\n- 双栈，一个数字栈，一个运算符栈\n- 运算符优先级，栈顶运算符和即将入栈的运算符的优先级比较：如果栈顶的运算符优先级低，新运算符直接入栈；如果栈顶的运算符优先级高，先出栈计算，新运算符再入栈；优先级相同的话就先计算栈内的（按顺序）  \n> 运算符优先级，就是乘法除法的优先级大于加法减法的优先级\n\n在遍历一遍串后，括号内的计算式和乘除计算都被已计算，余下的按顺序出栈进行计算。\n\n```js\n// foreverking\n#include <algorithm>\n#include <cmath>\n#include <cstdio>\n#include <cstring>\n#include <iostream>\n#include <map>\n#include <queue>\n#include <stack>\n#include <vector>\nusing namespace std;\n//!中缀表达式求值\n//题目中的整除是指向 0 取整，也就是说对于大于 0 的结果向下取整,对于小于 0\n//的结果向上取整 用栈，一个数字栈，一个符号栈\n\nstack<int> num;\nstack<char> op;\n\n//优先级表\nunordered_map<char, int> h{{'+', 1}, {'-', 1}, {'*', 2}, {'/', 2}};\n\nvoid eval()  //求值\n{\n    int a = num.top();  //第二个操作数\n    num.pop();          //第二个操作数出栈\n\n    int b = num.top();  //第一个操作数\n    num.pop();          //第一个操作数\n\n    char p = op.top();  //运算符\n    op.pop();           //运算符出栈\n\n    int r = 0;  //结果\n\n    //计算结果\n    if (p == '+') r = b + a;\n    if (p == '-') r = b - a;\n    if (p == '*') r = b * a;\n    if (p == '/') r = b / a;\n\n    num.push(r);  //结果入栈\n}\n\nint main() {\n    string s;  //读入表达式\n    cin >> s;\n\n    for (int i = 0; i < s.size(); i++) {\n        if (isdigit(s[i])) {  //是数字就入栈\n\n            int x = 0, j = i;  //计算数字\n            while (j < s.size() && isdigit(s[j])) {\n                x = x * 10 + s[j] - '0';  //转化为10进制数，比如56,先有5 = 0 *\n                                          // 10 + 5 然后有5 * 10 + 6 = 56\n                j++;\n            }\n            num.push(x);  //数字入栈\n            i = j - 1;  //这里i要回溯至就j - 1，大循环结束后变为j\n        }\n        //遇到左括号直接入栈，遇到右括号计算括号里面的\n        //左括号优先级默认最低，直接入栈\n        else if (s[i] == '(') {  //左括号入栈\n            op.push(s[i]);\n        } else if (s[i] == ')') {  //右括号\n            while (\n                op.top() !=\n                '(')  //不是作括号就计算，一直到左括号为止，计算完一个括号内的表达式\n                eval();\n            op.pop();  //左括号出栈\n        } else {\n            while (op.size() &&\n                   h[op.top()] >=\n                       h[s[i]])  //待入栈运算符优先级低，则先计算栈内的\n                eval();\n            op.push(s[i]);  //操作符入栈\n        }\n    }\n    while (op.size()) eval();   //剩余的进行计算\n    cout << num.top() << endl;  //输出结果\n    return 0;\n}\n\n```\n需要注意的：\n- `x = x * 10 + s[j] - '0';`这一步是将字符数字转化为十进制数字\n- `i = j - 1;`这里的队i赋值是将i移动至数字的最后一位，配合上i++，恰好就可以跳过这个非个位数\n- 针对表达式我们肯定是先计算`()`内的数据是吧，那么`(`出现了就代表后面的的都在括号内，直到`)`出现，所以我们在栈顶是`(`时，不需要与`(`判断直接入栈","source":"_posts/Acwing-3302.md","raw":"---\ntitle: Acwing 3302\ndate: 2021-11-07 21:57:33\ntags: \n    - Study\n    - 栈\ncategories: \n    - 题解\n    - Acwing\n---\n给定一个表达式，其中运算符仅包含 `+,-,*,/`（加 减 乘 整除），可能包含括号，请你求出表达式的最终值。\n\n**注意：**\n\n-   数据保证给定的表达式合法。\n-   题目保证符号 `-` 只作为减号出现，不会作为负号出现，例如，`-1+2`,`(2+2)*(-(1+1)+2)` 之类表达式均不会出现。\n-   题目保证表达式中所有数字均为正整数。\n-   题目保证表达式在中间计算过程以及结果中，均不超过 2^31−1。\n-   题目中的整除是指向 0 取整，也就是说对于大于 00 的结果向下取整，例如 5/3=1，对于小于 0 的结果向上取整，例如 5/(1−4)=−1。\n-   C++和Java中的整除默认是向零取整；Python中的整除`//`默认向下取整，因此Python的`eval()`函数中的整除也是向下取整，在本题中不能直接使用。\n\n#### 输入格式\n\n共一行，为给定表达式。\n\n#### 输出格式\n\n共一行，为表达式的结果。\n\n#### 数据范围\n\n表达式的长度不超过 10^5。\n\n#### 输入样例：\n\n```\n(2+2)*(1+1)\n```\n\n#### 输出样例：\n\n```\n8\n```\n#### 思路\n由题意，得出这是一个中缀表达式求值的问题。那么解决方法最核心两个问题就是：\n\n- 双栈，一个数字栈，一个运算符栈\n- 运算符优先级，栈顶运算符和即将入栈的运算符的优先级比较：如果栈顶的运算符优先级低，新运算符直接入栈；如果栈顶的运算符优先级高，先出栈计算，新运算符再入栈；优先级相同的话就先计算栈内的（按顺序）  \n> 运算符优先级，就是乘法除法的优先级大于加法减法的优先级\n\n在遍历一遍串后，括号内的计算式和乘除计算都被已计算，余下的按顺序出栈进行计算。\n\n```js\n// foreverking\n#include <algorithm>\n#include <cmath>\n#include <cstdio>\n#include <cstring>\n#include <iostream>\n#include <map>\n#include <queue>\n#include <stack>\n#include <vector>\nusing namespace std;\n//!中缀表达式求值\n//题目中的整除是指向 0 取整，也就是说对于大于 0 的结果向下取整,对于小于 0\n//的结果向上取整 用栈，一个数字栈，一个符号栈\n\nstack<int> num;\nstack<char> op;\n\n//优先级表\nunordered_map<char, int> h{{'+', 1}, {'-', 1}, {'*', 2}, {'/', 2}};\n\nvoid eval()  //求值\n{\n    int a = num.top();  //第二个操作数\n    num.pop();          //第二个操作数出栈\n\n    int b = num.top();  //第一个操作数\n    num.pop();          //第一个操作数\n\n    char p = op.top();  //运算符\n    op.pop();           //运算符出栈\n\n    int r = 0;  //结果\n\n    //计算结果\n    if (p == '+') r = b + a;\n    if (p == '-') r = b - a;\n    if (p == '*') r = b * a;\n    if (p == '/') r = b / a;\n\n    num.push(r);  //结果入栈\n}\n\nint main() {\n    string s;  //读入表达式\n    cin >> s;\n\n    for (int i = 0; i < s.size(); i++) {\n        if (isdigit(s[i])) {  //是数字就入栈\n\n            int x = 0, j = i;  //计算数字\n            while (j < s.size() && isdigit(s[j])) {\n                x = x * 10 + s[j] - '0';  //转化为10进制数，比如56,先有5 = 0 *\n                                          // 10 + 5 然后有5 * 10 + 6 = 56\n                j++;\n            }\n            num.push(x);  //数字入栈\n            i = j - 1;  //这里i要回溯至就j - 1，大循环结束后变为j\n        }\n        //遇到左括号直接入栈，遇到右括号计算括号里面的\n        //左括号优先级默认最低，直接入栈\n        else if (s[i] == '(') {  //左括号入栈\n            op.push(s[i]);\n        } else if (s[i] == ')') {  //右括号\n            while (\n                op.top() !=\n                '(')  //不是作括号就计算，一直到左括号为止，计算完一个括号内的表达式\n                eval();\n            op.pop();  //左括号出栈\n        } else {\n            while (op.size() &&\n                   h[op.top()] >=\n                       h[s[i]])  //待入栈运算符优先级低，则先计算栈内的\n                eval();\n            op.push(s[i]);  //操作符入栈\n        }\n    }\n    while (op.size()) eval();   //剩余的进行计算\n    cout << num.top() << endl;  //输出结果\n    return 0;\n}\n\n```\n需要注意的：\n- `x = x * 10 + s[j] - '0';`这一步是将字符数字转化为十进制数字\n- `i = j - 1;`这里的队i赋值是将i移动至数字的最后一位，配合上i++，恰好就可以跳过这个非个位数\n- 针对表达式我们肯定是先计算`()`内的数据是吧，那么`(`出现了就代表后面的的都在括号内，直到`)`出现，所以我们在栈顶是`(`时，不需要与`(`判断直接入栈","slug":"Acwing-3302","published":1,"updated":"2021-11-07T13:58:15.820Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckvpawmyu0000hsws4ck06m3n","content":"<p>给定一个表达式，其中运算符仅包含 <code>+,-,*,/</code>（加 减 乘 整除），可能包含括号，请你求出表达式的最终值。</p>\n<p><strong>注意：</strong></p>\n<ul>\n<li>  数据保证给定的表达式合法。</li>\n<li>  题目保证符号 <code>-</code> 只作为减号出现，不会作为负号出现，例如，<code>-1+2</code>,<code>(2+2)*(-(1+1)+2)</code> 之类表达式均不会出现。</li>\n<li>  题目保证表达式中所有数字均为正整数。</li>\n<li>  题目保证表达式在中间计算过程以及结果中，均不超过 2^31−1。</li>\n<li>  题目中的整除是指向 0 取整，也就是说对于大于 00 的结果向下取整，例如 5/3=1，对于小于 0 的结果向上取整，例如 5/(1−4)=−1。</li>\n<li>  C++和Java中的整除默认是向零取整；Python中的整除<code>//</code>默认向下取整，因此Python的<code>eval()</code>函数中的整除也是向下取整，在本题中不能直接使用。</li>\n</ul>\n\n        <h4 id=\"输入格式\"   >\n          <a href=\"#输入格式\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#输入格式\" class=\"headerlink\" title=\"输入格式\"></a>输入格式</h4>\n      <p>共一行，为给定表达式。</p>\n\n        <h4 id=\"输出格式\"   >\n          <a href=\"#输出格式\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#输出格式\" class=\"headerlink\" title=\"输出格式\"></a>输出格式</h4>\n      <p>共一行，为表达式的结果。</p>\n\n        <h4 id=\"数据范围\"   >\n          <a href=\"#数据范围\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#数据范围\" class=\"headerlink\" title=\"数据范围\"></a>数据范围</h4>\n      <p>表达式的长度不超过 10^5。</p>\n\n        <h4 id=\"输入样例：\"   >\n          <a href=\"#输入样例：\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#输入样例：\" class=\"headerlink\" title=\"输入样例：\"></a>输入样例：</h4>\n      <figure class=\"highlight plain\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(2+2)*(1+1)</span><br></pre></td></tr></table></div></figure>\n\n\n        <h4 id=\"输出样例：\"   >\n          <a href=\"#输出样例：\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#输出样例：\" class=\"headerlink\" title=\"输出样例：\"></a>输出样例：</h4>\n      <figure class=\"highlight plain\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">8</span><br></pre></td></tr></table></div></figure>\n\n        <h4 id=\"思路\"   >\n          <a href=\"#思路\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h4>\n      <p>由题意，得出这是一个中缀表达式求值的问题。那么解决方法最核心两个问题就是：</p>\n<ul>\n<li>双栈，一个数字栈，一个运算符栈</li>\n<li>运算符优先级，栈顶运算符和即将入栈的运算符的优先级比较：如果栈顶的运算符优先级低，新运算符直接入栈；如果栈顶的运算符优先级高，先出栈计算，新运算符再入栈；优先级相同的话就先计算栈内的（按顺序）  <blockquote>\n<p>运算符优先级，就是乘法除法的优先级大于加法减法的优先级</p>\n</blockquote>\n</li>\n</ul>\n<p>在遍历一遍串后，括号内的计算式和乘除计算都被已计算，余下的按顺序出栈进行计算。</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// foreverking</span></span><br><span class=\"line\">#include &lt;algorithm&gt;</span><br><span class=\"line\">#include &lt;cmath&gt;</span><br><span class=\"line\">#include &lt;cstdio&gt;</span><br><span class=\"line\">#include &lt;cstring&gt;</span><br><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">#include &lt;map&gt;</span><br><span class=\"line\">#include &lt;queue&gt;</span><br><span class=\"line\">#include &lt;stack&gt;</span><br><span class=\"line\">#include &lt;vector&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\"><span class=\"comment\">//!中缀表达式求值</span></span><br><span class=\"line\"><span class=\"comment\">//题目中的整除是指向 0 取整，也就是说对于大于 0 的结果向下取整,对于小于 0</span></span><br><span class=\"line\"><span class=\"comment\">//的结果向上取整 用栈，一个数字栈，一个符号栈</span></span><br><span class=\"line\"></span><br><span class=\"line\">stack&lt;int&gt; num;</span><br><span class=\"line\">stack&lt;char&gt; op;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//优先级表</span></span><br><span class=\"line\">unordered_map&lt;char, int&gt; h&#123;&#123;<span class=\"string\">&#x27;+&#x27;</span>, <span class=\"number\">1</span>&#125;, &#123;<span class=\"string\">&#x27;-&#x27;</span>, <span class=\"number\">1</span>&#125;, &#123;<span class=\"string\">&#x27;*&#x27;</span>, <span class=\"number\">2</span>&#125;, &#123;<span class=\"string\">&#x27;/&#x27;</span>, <span class=\"number\">2</span>&#125;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"built_in\">eval</span>()  <span class=\"comment\">//求值</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    int a = num.top();  <span class=\"comment\">//第二个操作数</span></span><br><span class=\"line\">    num.pop();          <span class=\"comment\">//第二个操作数出栈</span></span><br><span class=\"line\"></span><br><span class=\"line\">    int b = num.top();  <span class=\"comment\">//第一个操作数</span></span><br><span class=\"line\">    num.pop();          <span class=\"comment\">//第一个操作数</span></span><br><span class=\"line\"></span><br><span class=\"line\">    char p = op.top();  <span class=\"comment\">//运算符</span></span><br><span class=\"line\">    op.pop();           <span class=\"comment\">//运算符出栈</span></span><br><span class=\"line\"></span><br><span class=\"line\">    int r = <span class=\"number\">0</span>;  <span class=\"comment\">//结果</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//计算结果</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (p == <span class=\"string\">&#x27;+&#x27;</span>) r = b + a;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (p == <span class=\"string\">&#x27;-&#x27;</span>) r = b - a;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (p == <span class=\"string\">&#x27;*&#x27;</span>) r = b * a;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (p == <span class=\"string\">&#x27;/&#x27;</span>) r = b / a;</span><br><span class=\"line\"></span><br><span class=\"line\">    num.push(r);  <span class=\"comment\">//结果入栈</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">int <span class=\"function\"><span class=\"title\">main</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    string s;  <span class=\"comment\">//读入表达式</span></span><br><span class=\"line\">    cin &gt;&gt; s;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (int i = <span class=\"number\">0</span>; i &lt; s.size(); i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isdigit(s[i])) &#123;  <span class=\"comment\">//是数字就入栈</span></span><br><span class=\"line\"></span><br><span class=\"line\">            int x = <span class=\"number\">0</span>, j = i;  <span class=\"comment\">//计算数字</span></span><br><span class=\"line\">            <span class=\"keyword\">while</span> (j &lt; s.size() &amp;&amp; isdigit(s[j])) &#123;</span><br><span class=\"line\">                x = x * <span class=\"number\">10</span> + s[j] - <span class=\"string\">&#x27;0&#x27;</span>;  <span class=\"comment\">//转化为10进制数，比如56,先有5 = 0 *</span></span><br><span class=\"line\">                                          <span class=\"comment\">// 10 + 5 然后有5 * 10 + 6 = 56</span></span><br><span class=\"line\">                j++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            num.push(x);  <span class=\"comment\">//数字入栈</span></span><br><span class=\"line\">            i = j - <span class=\"number\">1</span>;  <span class=\"comment\">//这里i要回溯至就j - 1，大循环结束后变为j</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//遇到左括号直接入栈，遇到右括号计算括号里面的</span></span><br><span class=\"line\">        <span class=\"comment\">//左括号优先级默认最低，直接入栈</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (s[i] == <span class=\"string\">&#x27;(&#x27;</span>) &#123;  <span class=\"comment\">//左括号入栈</span></span><br><span class=\"line\">            op.push(s[i]);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (s[i] == <span class=\"string\">&#x27;)&#x27;</span>) &#123;  <span class=\"comment\">//右括号</span></span><br><span class=\"line\">            <span class=\"keyword\">while</span> (</span><br><span class=\"line\">                op.top() !=</span><br><span class=\"line\">                <span class=\"string\">&#x27;(&#x27;</span>)  <span class=\"comment\">//不是作括号就计算，一直到左括号为止，计算完一个括号内的表达式</span></span><br><span class=\"line\">                <span class=\"built_in\">eval</span>();</span><br><span class=\"line\">            op.pop();  <span class=\"comment\">//左括号出栈</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (op.size() &amp;&amp;</span><br><span class=\"line\">                   h[op.top()] &gt;=</span><br><span class=\"line\">                       h[s[i]])  <span class=\"comment\">//待入栈运算符优先级低，则先计算栈内的</span></span><br><span class=\"line\">                <span class=\"built_in\">eval</span>();</span><br><span class=\"line\">            op.push(s[i]);  <span class=\"comment\">//操作符入栈</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (op.size()) <span class=\"built_in\">eval</span>();   <span class=\"comment\">//剩余的进行计算</span></span><br><span class=\"line\">    cout &lt;&lt; num.top() &lt;&lt; endl;  <span class=\"comment\">//输出结果</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></div></figure>\n<p>需要注意的：</p>\n<ul>\n<li><code>x = x * 10 + s[j] - &#39;0&#39;;</code>这一步是将字符数字转化为十进制数字</li>\n<li><code>i = j - 1;</code>这里的队i赋值是将i移动至数字的最后一位，配合上i++，恰好就可以跳过这个非个位数</li>\n<li>针对表达式我们肯定是先计算<code>()</code>内的数据是吧，那么<code>(</code>出现了就代表后面的的都在括号内，直到<code>)</code>出现，所以我们在栈顶是<code>(</code>时，不需要与<code>(</code>判断直接入栈</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>给定一个表达式，其中运算符仅包含 <code>+,-,*,/</code>（加 减 乘 整除），可能包含括号，请你求出表达式的最终值。</p>\n<p><strong>注意：</strong></p>\n<ul>\n<li>  数据保证给定的表达式合法。</li>\n<li>  题目保证符号 <code>-</code> 只作为减号出现，不会作为负号出现，例如，<code>-1+2</code>,<code>(2+2)*(-(1+1)+2)</code> 之类表达式均不会出现。</li>\n<li>  题目保证表达式中所有数字均为正整数。</li>\n<li>  题目保证表达式在中间计算过程以及结果中，均不超过 2^31−1。</li>\n<li>  题目中的整除是指向 0 取整，也就是说对于大于 00 的结果向下取整，例如 5/3=1，对于小于 0 的结果向上取整，例如 5/(1−4)=−1。</li>\n<li>  C++和Java中的整除默认是向零取整；Python中的整除<code>//</code>默认向下取整，因此Python的<code>eval()</code>函数中的整除也是向下取整，在本题中不能直接使用。</li>\n</ul>\n\n        <h4 id=\"输入格式\"   >\n          <a href=\"#输入格式\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#输入格式\" class=\"headerlink\" title=\"输入格式\"></a>输入格式</h4>\n      <p>共一行，为给定表达式。</p>\n\n        <h4 id=\"输出格式\"   >\n          <a href=\"#输出格式\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#输出格式\" class=\"headerlink\" title=\"输出格式\"></a>输出格式</h4>\n      <p>共一行，为表达式的结果。</p>\n\n        <h4 id=\"数据范围\"   >\n          <a href=\"#数据范围\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#数据范围\" class=\"headerlink\" title=\"数据范围\"></a>数据范围</h4>\n      <p>表达式的长度不超过 10^5。</p>\n\n        <h4 id=\"输入样例：\"   >\n          <a href=\"#输入样例：\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#输入样例：\" class=\"headerlink\" title=\"输入样例：\"></a>输入样例：</h4>\n      <figure class=\"highlight plain\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(2+2)*(1+1)</span><br></pre></td></tr></table></div></figure>\n\n\n        <h4 id=\"输出样例：\"   >\n          <a href=\"#输出样例：\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#输出样例：\" class=\"headerlink\" title=\"输出样例：\"></a>输出样例：</h4>\n      <figure class=\"highlight plain\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">8</span><br></pre></td></tr></table></div></figure>\n\n        <h4 id=\"思路\"   >\n          <a href=\"#思路\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h4>\n      <p>由题意，得出这是一个中缀表达式求值的问题。那么解决方法最核心两个问题就是：</p>\n<ul>\n<li>双栈，一个数字栈，一个运算符栈</li>\n<li>运算符优先级，栈顶运算符和即将入栈的运算符的优先级比较：如果栈顶的运算符优先级低，新运算符直接入栈；如果栈顶的运算符优先级高，先出栈计算，新运算符再入栈；优先级相同的话就先计算栈内的（按顺序）  <blockquote>\n<p>运算符优先级，就是乘法除法的优先级大于加法减法的优先级</p>\n</blockquote>\n</li>\n</ul>\n<p>在遍历一遍串后，括号内的计算式和乘除计算都被已计算，余下的按顺序出栈进行计算。</p>\n<figure class=\"highlight js\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// foreverking</span></span><br><span class=\"line\">#include &lt;algorithm&gt;</span><br><span class=\"line\">#include &lt;cmath&gt;</span><br><span class=\"line\">#include &lt;cstdio&gt;</span><br><span class=\"line\">#include &lt;cstring&gt;</span><br><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">#include &lt;map&gt;</span><br><span class=\"line\">#include &lt;queue&gt;</span><br><span class=\"line\">#include &lt;stack&gt;</span><br><span class=\"line\">#include &lt;vector&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\"><span class=\"comment\">//!中缀表达式求值</span></span><br><span class=\"line\"><span class=\"comment\">//题目中的整除是指向 0 取整，也就是说对于大于 0 的结果向下取整,对于小于 0</span></span><br><span class=\"line\"><span class=\"comment\">//的结果向上取整 用栈，一个数字栈，一个符号栈</span></span><br><span class=\"line\"></span><br><span class=\"line\">stack&lt;int&gt; num;</span><br><span class=\"line\">stack&lt;char&gt; op;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//优先级表</span></span><br><span class=\"line\">unordered_map&lt;char, int&gt; h&#123;&#123;<span class=\"string\">&#x27;+&#x27;</span>, <span class=\"number\">1</span>&#125;, &#123;<span class=\"string\">&#x27;-&#x27;</span>, <span class=\"number\">1</span>&#125;, &#123;<span class=\"string\">&#x27;*&#x27;</span>, <span class=\"number\">2</span>&#125;, &#123;<span class=\"string\">&#x27;/&#x27;</span>, <span class=\"number\">2</span>&#125;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"built_in\">eval</span>()  <span class=\"comment\">//求值</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    int a = num.top();  <span class=\"comment\">//第二个操作数</span></span><br><span class=\"line\">    num.pop();          <span class=\"comment\">//第二个操作数出栈</span></span><br><span class=\"line\"></span><br><span class=\"line\">    int b = num.top();  <span class=\"comment\">//第一个操作数</span></span><br><span class=\"line\">    num.pop();          <span class=\"comment\">//第一个操作数</span></span><br><span class=\"line\"></span><br><span class=\"line\">    char p = op.top();  <span class=\"comment\">//运算符</span></span><br><span class=\"line\">    op.pop();           <span class=\"comment\">//运算符出栈</span></span><br><span class=\"line\"></span><br><span class=\"line\">    int r = <span class=\"number\">0</span>;  <span class=\"comment\">//结果</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//计算结果</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (p == <span class=\"string\">&#x27;+&#x27;</span>) r = b + a;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (p == <span class=\"string\">&#x27;-&#x27;</span>) r = b - a;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (p == <span class=\"string\">&#x27;*&#x27;</span>) r = b * a;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (p == <span class=\"string\">&#x27;/&#x27;</span>) r = b / a;</span><br><span class=\"line\"></span><br><span class=\"line\">    num.push(r);  <span class=\"comment\">//结果入栈</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">int <span class=\"function\"><span class=\"title\">main</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    string s;  <span class=\"comment\">//读入表达式</span></span><br><span class=\"line\">    cin &gt;&gt; s;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (int i = <span class=\"number\">0</span>; i &lt; s.size(); i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isdigit(s[i])) &#123;  <span class=\"comment\">//是数字就入栈</span></span><br><span class=\"line\"></span><br><span class=\"line\">            int x = <span class=\"number\">0</span>, j = i;  <span class=\"comment\">//计算数字</span></span><br><span class=\"line\">            <span class=\"keyword\">while</span> (j &lt; s.size() &amp;&amp; isdigit(s[j])) &#123;</span><br><span class=\"line\">                x = x * <span class=\"number\">10</span> + s[j] - <span class=\"string\">&#x27;0&#x27;</span>;  <span class=\"comment\">//转化为10进制数，比如56,先有5 = 0 *</span></span><br><span class=\"line\">                                          <span class=\"comment\">// 10 + 5 然后有5 * 10 + 6 = 56</span></span><br><span class=\"line\">                j++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            num.push(x);  <span class=\"comment\">//数字入栈</span></span><br><span class=\"line\">            i = j - <span class=\"number\">1</span>;  <span class=\"comment\">//这里i要回溯至就j - 1，大循环结束后变为j</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//遇到左括号直接入栈，遇到右括号计算括号里面的</span></span><br><span class=\"line\">        <span class=\"comment\">//左括号优先级默认最低，直接入栈</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (s[i] == <span class=\"string\">&#x27;(&#x27;</span>) &#123;  <span class=\"comment\">//左括号入栈</span></span><br><span class=\"line\">            op.push(s[i]);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (s[i] == <span class=\"string\">&#x27;)&#x27;</span>) &#123;  <span class=\"comment\">//右括号</span></span><br><span class=\"line\">            <span class=\"keyword\">while</span> (</span><br><span class=\"line\">                op.top() !=</span><br><span class=\"line\">                <span class=\"string\">&#x27;(&#x27;</span>)  <span class=\"comment\">//不是作括号就计算，一直到左括号为止，计算完一个括号内的表达式</span></span><br><span class=\"line\">                <span class=\"built_in\">eval</span>();</span><br><span class=\"line\">            op.pop();  <span class=\"comment\">//左括号出栈</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (op.size() &amp;&amp;</span><br><span class=\"line\">                   h[op.top()] &gt;=</span><br><span class=\"line\">                       h[s[i]])  <span class=\"comment\">//待入栈运算符优先级低，则先计算栈内的</span></span><br><span class=\"line\">                <span class=\"built_in\">eval</span>();</span><br><span class=\"line\">            op.push(s[i]);  <span class=\"comment\">//操作符入栈</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (op.size()) <span class=\"built_in\">eval</span>();   <span class=\"comment\">//剩余的进行计算</span></span><br><span class=\"line\">    cout &lt;&lt; num.top() &lt;&lt; endl;  <span class=\"comment\">//输出结果</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></div></figure>\n<p>需要注意的：</p>\n<ul>\n<li><code>x = x * 10 + s[j] - &#39;0&#39;;</code>这一步是将字符数字转化为十进制数字</li>\n<li><code>i = j - 1;</code>这里的队i赋值是将i移动至数字的最后一位，配合上i++，恰好就可以跳过这个非个位数</li>\n<li>针对表达式我们肯定是先计算<code>()</code>内的数据是吧，那么<code>(</code>出现了就代表后面的的都在括号内，直到<code>)</code>出现，所以我们在栈顶是<code>(</code>时，不需要与<code>(</code>判断直接入栈</li>\n</ul>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cktvk78f700151cws09fs3le7","category_id":"cktvk78ev000b1cwsd6p516bz","_id":"cktvk78fa001e1cws64iz1aoj"},{"post_id":"cktvk78f700151cws09fs3le7","category_id":"cktvk78f600121cws4qc05nm9","_id":"cktvk78fb001i1cws9bij4hoa"},{"post_id":"cktvk78ew000e1cws0fz0els1","category_id":"cktvk78ev000b1cwsd6p516bz","_id":"cktvk78fb001l1cws79ryfgc8"},{"post_id":"cktvk78ew000e1cws0fz0els1","category_id":"cktvk78f600121cws4qc05nm9","_id":"cktvk78fc001p1cws6fet30xh"},{"post_id":"cktvk78f700181cws2usgf4h4","category_id":"cktvk78ev000b1cwsd6p516bz","_id":"cktvk78fd001s1cwsfad4h3lf"},{"post_id":"cktvk78f700181cws2usgf4h4","category_id":"cktvk78f600121cws4qc05nm9","_id":"cktvk78fe001w1cwsgot3gev3"},{"post_id":"cktvk78f8001b1cwsdl0sbdoq","category_id":"cktvk78ev000b1cwsd6p516bz","_id":"cktvk78ff001z1cws5pp072kt"},{"post_id":"cktvk78f8001b1cwsdl0sbdoq","category_id":"cktvk78f600121cws4qc05nm9","_id":"cktvk78fg00231cws76zo16z9"},{"post_id":"cktvk78eh00031cws4dg8b65i","category_id":"cktvk78ev000b1cwsd6p516bz","_id":"cktvk78fh00261cwsaphy90vs"},{"post_id":"cktvk78eh00031cws4dg8b65i","category_id":"cktvk78f600121cws4qc05nm9","_id":"cktvk78fi002a1cws6wqm2g0d"},{"post_id":"cktvk78f9001d1cws3t1fd05w","category_id":"cktvk78ev000b1cwsd6p516bz","_id":"cktvk78fj002d1cws6wk248la"},{"post_id":"cktvk78f9001d1cws3t1fd05w","category_id":"cktvk78f600121cws4qc05nm9","_id":"cktvk78fl002h1cws09nm02n8"},{"post_id":"cktvk78fa001h1cws0vwj5w4b","category_id":"cktvk78ev000b1cwsd6p516bz","_id":"cktvk78fm002k1cws0ucp61py"},{"post_id":"cktvk78fa001h1cws0vwj5w4b","category_id":"cktvk78f600121cws4qc05nm9","_id":"cktvk78fn002o1cws23xwc5xr"},{"post_id":"cktvk78ex000g1cwsbw3d4taf","category_id":"cktvk78ev000b1cwsd6p516bz","_id":"cktvk78fs002r1cws0lk4hn2a"},{"post_id":"cktvk78ex000g1cwsbw3d4taf","category_id":"cktvk78f600121cws4qc05nm9","_id":"cktvk78ft002w1cws8xzh2ar3"},{"post_id":"cktvk78fb001k1cws6odo6tvi","category_id":"cktvk78ev000b1cwsd6p516bz","_id":"cktvk78fu002z1cwsdu4h7oo9"},{"post_id":"cktvk78fb001k1cws6odo6tvi","category_id":"cktvk78f600121cws4qc05nm9","_id":"cktvk78fv00331cws62wj1kn2"},{"post_id":"cktvk78fc001o1cwshjuc13ji","category_id":"cktvk78ev000b1cwsd6p516bz","_id":"cktvk78fw00371cwsbsi3bfyf"},{"post_id":"cktvk78fc001o1cwshjuc13ji","category_id":"cktvk78f600121cws4qc05nm9","_id":"cktvk78fx003b1cwsaope3kad"},{"post_id":"cktvk78ez000k1cws5phr9pim","category_id":"cktvk78ev000b1cwsd6p516bz","_id":"cktvk78fy003f1cwscajh4xnd"},{"post_id":"cktvk78ez000k1cws5phr9pim","category_id":"cktvk78f600121cws4qc05nm9","_id":"cktvk78fz003j1cws57xz469p"},{"post_id":"cktvk78fd001r1cwsc3ex2u57","category_id":"cktvk78ev000b1cwsd6p516bz","_id":"cktvk78g0003m1cws2zru3723"},{"post_id":"cktvk78fd001r1cwsc3ex2u57","category_id":"cktvk78f600121cws4qc05nm9","_id":"cktvk78g0003p1cws4xf9fixy"},{"post_id":"cktvk78fe001v1cwshik529sz","category_id":"cktvk78ev000b1cwsd6p516bz","_id":"cktvk78g0003s1cwsa3e948o1"},{"post_id":"cktvk78fe001v1cwshik529sz","category_id":"cktvk78f600121cws4qc05nm9","_id":"cktvk78g1003v1cws5tk3a68u"},{"post_id":"cktvk78en00071cws8supaetp","category_id":"cktvk78ev000b1cwsd6p516bz","_id":"cktvk78g1003x1cwsctlm7dcc"},{"post_id":"cktvk78en00071cws8supaetp","category_id":"cktvk78f600121cws4qc05nm9","_id":"cktvk78g100401cws5jel9exd"},{"post_id":"cktvk78fe001y1cwsg0y71hgf","category_id":"cktvk78ev000b1cwsd6p516bz","_id":"cktvk78g100421cwsfqr1eo8f"},{"post_id":"cktvk78fe001y1cwsg0y71hgf","category_id":"cktvk78f600121cws4qc05nm9","_id":"cktvk78g200451cws9uy3d5vc"},{"post_id":"cktvk78ff00221cws98yj18yl","category_id":"cktvk78ev000b1cwsd6p516bz","_id":"cktvk78g200471cws05bg7ehr"},{"post_id":"cktvk78ff00221cws98yj18yl","category_id":"cktvk78f600121cws4qc05nm9","_id":"cktvk78g2004a1cws7h7gd3ou"},{"post_id":"cktvk78f0000m1cwsbnkubuef","category_id":"cktvk78ev000b1cwsd6p516bz","_id":"cktvk78g2004c1cwsb346cs7o"},{"post_id":"cktvk78f0000m1cwsbnkubuef","category_id":"cktvk78f600121cws4qc05nm9","_id":"cktvk78g3004f1cwscki5a4ft"},{"post_id":"cktvk78fg00251cwsbljhfagt","category_id":"cktvk78ev000b1cwsd6p516bz","_id":"cktvk78g3004g1cws5dub885v"},{"post_id":"cktvk78fg00251cwsbljhfagt","category_id":"cktvk78f600121cws4qc05nm9","_id":"cktvk78g3004i1cwsh27a50pr"},{"post_id":"cktvk78fh00291cws4ccz4x0p","category_id":"cktvk78ev000b1cwsd6p516bz","_id":"cktvk78g3004j1cwsf8y4fk3h"},{"post_id":"cktvk78fh00291cws4ccz4x0p","category_id":"cktvk78f600121cws4qc05nm9","_id":"cktvk78g3004k1cwsczcu98c2"},{"post_id":"cktvk78f1000p1cws8m0i0ii1","category_id":"cktvk78ev000b1cwsd6p516bz","_id":"cktvk78g3004m1cws14rs8s6e"},{"post_id":"cktvk78f1000p1cws8m0i0ii1","category_id":"cktvk78f600121cws4qc05nm9","_id":"cktvk78g4004n1cwsd63b2r9y"},{"post_id":"cktvk78fi002c1cws7pp4h3ao","category_id":"cktvk78ev000b1cwsd6p516bz","_id":"cktvk78g4004p1cws9syxemsy"},{"post_id":"cktvk78fi002c1cws7pp4h3ao","category_id":"cktvk78f600121cws4qc05nm9","_id":"cktvk78g4004q1cwsafbt1grr"},{"post_id":"cktvk78fj002g1cws8xn49jqi","category_id":"cktvk78ev000b1cwsd6p516bz","_id":"cktvk78g4004s1cws5nh80pxv"},{"post_id":"cktvk78fj002g1cws8xn49jqi","category_id":"cktvk78f600121cws4qc05nm9","_id":"cktvk78g4004t1cws2ssa2rvp"},{"post_id":"cktvk78et00091cws7jto0hg9","category_id":"cktvk78ev000b1cwsd6p516bz","_id":"cktvk78g5004v1cws4paa8m4r"},{"post_id":"cktvk78et00091cws7jto0hg9","category_id":"cktvk78f600121cws4qc05nm9","_id":"cktvk78g5004w1cws85j6exsl"},{"post_id":"cktvk78fl002j1cwsex646lzx","category_id":"cktvk78ev000b1cwsd6p516bz","_id":"cktvk78g5004x1cwsdhuu948c"},{"post_id":"cktvk78fl002j1cwsex646lzx","category_id":"cktvk78f600121cws4qc05nm9","_id":"cktvk78g5004y1cws9qvw69uj"},{"post_id":"cktvk78fm002n1cws34j2ch1o","category_id":"cktvk78ev000b1cwsd6p516bz","_id":"cktvk78g5004z1cws00aaaoxc"},{"post_id":"cktvk78fm002n1cws34j2ch1o","category_id":"cktvk78f600121cws4qc05nm9","_id":"cktvk78g500501cws3z8fd5f2"},{"post_id":"cktvk78f2000r1cws75o9gpku","category_id":"cktvk78ev000b1cwsd6p516bz","_id":"cktvk78g500511cws1bxn4zqx"},{"post_id":"cktvk78f2000r1cws75o9gpku","category_id":"cktvk78f600121cws4qc05nm9","_id":"cktvk78g500521cws3ejm8www"},{"post_id":"cktvk78fr002q1cws6aj2h5ry","category_id":"cktvk78ev000b1cwsd6p516bz","_id":"cktvk78g500531cwsboxo8y3w"},{"post_id":"cktvk78fr002q1cws6aj2h5ry","category_id":"cktvk78f600121cws4qc05nm9","_id":"cktvk78g500541cws62tafrym"},{"post_id":"cktvk78ft002v1cws5cbt09le","category_id":"cktvk78ev000b1cwsd6p516bz","_id":"cktvk78g500551cws27po3vpl"},{"post_id":"cktvk78ft002v1cws5cbt09le","category_id":"cktvk78f600121cws4qc05nm9","_id":"cktvk78g500561cws6m490vgt"},{"post_id":"cktvk78f3000u1cws81bs2hkg","category_id":"cktvk78ev000b1cwsd6p516bz","_id":"cktvk78g500571cwshwos3yxo"},{"post_id":"cktvk78f3000u1cws81bs2hkg","category_id":"cktvk78f600121cws4qc05nm9","_id":"cktvk78g500581cws6nyb9dpe"},{"post_id":"cktvk78f4000w1cwse91417hx","category_id":"cktvk78ev000b1cwsd6p516bz","_id":"cktvk78g500591cwsbk000e4c"},{"post_id":"cktvk78f4000w1cwse91417hx","category_id":"cktvk78f600121cws4qc05nm9","_id":"cktvk78g5005a1cws43wvb6a6"},{"post_id":"cktvk78fw00361cwsbmlo4t6x","category_id":"cktvk78ei00041cws1fskefhx","_id":"cktvk78g6005b1cws7ko7dt1u"},{"post_id":"cktvk78fw00361cwsbmlo4t6x","category_id":"cktvk78f2000s1cwsejeb5bkf","_id":"cktvk78g6005c1cwscnku3gm1"},{"post_id":"cktvk78f5000z1cws4tse85yv","category_id":"cktvk78ev000b1cwsd6p516bz","_id":"cktvk78g6005d1cws9s9o1kob"},{"post_id":"cktvk78f5000z1cws4tse85yv","category_id":"cktvk78f600121cws4qc05nm9","_id":"cktvk78g6005e1cwsa0647r7x"},{"post_id":"cktvk78eu000a1cwsa0ql04me","category_id":"cktvk78ev000b1cwsd6p516bz","_id":"cktvk78g6005f1cwsda7f2f2p"},{"post_id":"cktvk78eu000a1cwsa0ql04me","category_id":"cktvk78f600121cws4qc05nm9","_id":"cktvk78g6005g1cws3mu31e9z"},{"post_id":"cktvk78f500111cws38vud8e2","category_id":"cktvk78ev000b1cwsd6p516bz","_id":"cktvk78g6005h1cws75psf9pk"},{"post_id":"cktvk78f500111cws38vud8e2","category_id":"cktvk78f600121cws4qc05nm9","_id":"cktvk78g6005i1cwscon858wt"},{"post_id":"cktvk78fu002y1cws5et084xy","category_id":"cktvk78g1003u1cws35r7fqaq","_id":"cktvk78g6005j1cwsdjlx9zf5"},{"post_id":"cktvk78fv00321cwsd2e36f57","category_id":"cktvk78g1003u1cws35r7fqaq","_id":"cktvk78g6005l1cws58bwgr9j"},{"post_id":"cktvk78fx003a1cws3edwbz5d","category_id":"cktvk78g1003u1cws35r7fqaq","_id":"cktvk78g6005n1cwsd292fzrb"},{"post_id":"cktvk78fx003a1cws3edwbz5d","category_id":"cktvk78g4004o1cwsdrtz2lvd","_id":"cktvk78g6005o1cwsb2d5gfz6"},{"post_id":"cktvk78fx003d1cws0o0ncj5i","category_id":"cktvk78g1003u1cws35r7fqaq","_id":"cktvk78g6005p1cws25echfb4"},{"post_id":"cktvk78fx003d1cws0o0ncj5i","category_id":"cktvk78g4004r1cwshj883c5c","_id":"cktvk78g6005q1cws03zcg67k"},{"post_id":"cktvk78fz003i1cws4h8vfsc9","category_id":"cktvk78g1003u1cws35r7fqaq","_id":"cktvk78g6005r1cwshidohe4h"},{"post_id":"cktvk78ee00011cwsfrei37op","category_id":"cktvk78ev000b1cwsd6p516bz","_id":"cku6xacpk0006kcws51qz1ac9"},{"post_id":"cktvk78ee00011cwsfrei37op","category_id":"cku6xacpb0002kcws5dq5cjfi","_id":"cku6xacpk0007kcwseuxz5lg9"},{"post_id":"cku6xacp90000kcwscla9du0u","category_id":"cktvk78ev000b1cwsd6p516bz","_id":"cku6xacpk0008kcws2j580sec"},{"post_id":"cku6xacp90000kcwscla9du0u","category_id":"cku6xacpb0002kcws5dq5cjfi","_id":"cku6xacpk0009kcwsbxuo59tw"},{"post_id":"ckuva9uu30000tows8uola0yl","category_id":"cktvk78ei00041cws1fskefhx","_id":"ckuva9uuh0008tows68gfa2fn"},{"post_id":"ckuva9uu30000tows8uola0yl","category_id":"ckuva9uuf0003tows9l0sgoza","_id":"ckuva9uui000atowsfd9m3f94"},{"post_id":"ckuva9uuf0002tows0amrdyxa","category_id":"cktvk78ei00041cws1fskefhx","_id":"ckuva9uui000ctowsfwid8wiv"},{"post_id":"ckuva9uuf0002tows0amrdyxa","category_id":"ckuva9uuh0005tows9bflati4","_id":"ckuva9uui000dtowshmlm258x"},{"post_id":"ckv1v0mfi00001wwsfkvs2cfu","category_id":"cktvk78ei00041cws1fskefhx","_id":"ckv1v0mfo00021wws2zby9ag1"},{"post_id":"ckv1w3ent0000vkws8lydd7ue","category_id":"cktvk78ev000b1cwsd6p516bz","_id":"ckv1w3enx0002vkws1758bcer"},{"post_id":"ckv1w3ent0000vkws8lydd7ue","category_id":"cku6xacpb0002kcws5dq5cjfi","_id":"ckv1w3eny0003vkws1s9zdzuu"},{"post_id":"ckv9i7upc0000sowsfr3gc8vn","category_id":"cktvk78ev000b1cwsd6p516bz","_id":"ckv9i7upp0002sows8o6rcgbj"},{"post_id":"ckv9i7upc0000sowsfr3gc8vn","category_id":"cku6xacpb0002kcws5dq5cjfi","_id":"ckv9i7upp0003sows1wnc67os"},{"post_id":"ckv9lgpkx00006cws203i4mly","category_id":"cktvk78ev000b1cwsd6p516bz","_id":"ckv9lgpl100036cws09pt64cb"},{"post_id":"ckv9lgpkx00006cws203i4mly","category_id":"cku6xacpb0002kcws5dq5cjfi","_id":"ckv9lgpl100046cws9gws8jf0"},{"post_id":"ckvent1x90000o8ws7d27c72w","category_id":"cktvk78ev000b1cwsd6p516bz","_id":"ckvent1xm0002o8ws4j5yceux"},{"post_id":"ckvent1x90000o8ws7d27c72w","category_id":"cku6xacpb0002kcws5dq5cjfi","_id":"ckvent1xm0003o8wsdxyk2v28"},{"post_id":"ckvi2pqsr0000x0ws08m7al7w","category_id":"cktvk78g1003u1cws35r7fqaq","_id":"ckvi2pqt50004x0ws4tq55bcb"},{"post_id":"ckvi2pqsr0000x0ws08m7al7w","category_id":"ckvi2pqsv0002x0ws7s429le9","_id":"ckvi2pqt50005x0wshw766efo"},{"post_id":"cktvk78fu002y1cws5et084xy","category_id":"ckvi2pqsv0002x0ws7s429le9","_id":"ckvjmbi7v0001f8wsc8rxebvc"},{"post_id":"cktvk78fv00321cwsd2e36f57","category_id":"ckvi2pqsv0002x0ws7s429le9","_id":"ckvjmbi830004f8wsgav4972s"},{"post_id":"cktvk78fz003i1cws4h8vfsc9","category_id":"ckvi2pqsv0002x0ws7s429le9","_id":"ckvjmbi840005f8ws835e6k6w"},{"post_id":"ckvjmbi7t0000f8ws5mtz8t2p","category_id":"cktvk78g1003u1cws35r7fqaq","_id":"ckvjmbi840006f8wscb7d2mt4"},{"post_id":"ckvpawmyu0000hsws4ck06m3n","category_id":"cktvk78ev000b1cwsd6p516bz","_id":"ckvpawmz30003hswsb4a5hzod"},{"post_id":"ckvpawmyu0000hsws4ck06m3n","category_id":"cku6xacpb0002kcws5dq5cjfi","_id":"ckvpawmz30004hswsek4u6oeb"}],"PostTag":[{"post_id":"cktvk78et00091cws7jto0hg9","tag_id":"cktvk78ej00051cwsaq360n1h","_id":"cktvk78ew000d1cwsdf6d7hf8"},{"post_id":"cktvk78ee00011cwsfrei37op","tag_id":"cktvk78ej00051cwsaq360n1h","_id":"cktvk78ex000f1cwsfotvf44q"},{"post_id":"cktvk78eu000a1cwsa0ql04me","tag_id":"cktvk78ej00051cwsaq360n1h","_id":"cktvk78ez000j1cws1j2bb3oe"},{"post_id":"cktvk78ew000e1cws0fz0els1","tag_id":"cktvk78ej00051cwsaq360n1h","_id":"cktvk78f0000l1cws2u0wfhuj"},{"post_id":"cktvk78eh00031cws4dg8b65i","tag_id":"cktvk78ej00051cwsaq360n1h","_id":"cktvk78f1000o1cwscusubwdn"},{"post_id":"cktvk78ex000g1cwsbw3d4taf","tag_id":"cktvk78ej00051cwsaq360n1h","_id":"cktvk78f2000q1cwsgrdeehxc"},{"post_id":"cktvk78ez000k1cws5phr9pim","tag_id":"cktvk78ej00051cwsaq360n1h","_id":"cktvk78f3000t1cws0gnv8r1v"},{"post_id":"cktvk78en00071cws8supaetp","tag_id":"cktvk78ej00051cwsaq360n1h","_id":"cktvk78f4000v1cws1amz4s1f"},{"post_id":"cktvk78f0000m1cwsbnkubuef","tag_id":"cktvk78ej00051cwsaq360n1h","_id":"cktvk78f4000y1cws4rqh21b6"},{"post_id":"cktvk78f1000p1cws8m0i0ii1","tag_id":"cktvk78ej00051cwsaq360n1h","_id":"cktvk78f500101cws671s1iq1"},{"post_id":"cktvk78f2000r1cws75o9gpku","tag_id":"cktvk78ej00051cwsaq360n1h","_id":"cktvk78f600141cws9ixwh8x7"},{"post_id":"cktvk78f3000u1cws81bs2hkg","tag_id":"cktvk78ej00051cwsaq360n1h","_id":"cktvk78f700171cws5pinelta"},{"post_id":"cktvk78f4000w1cwse91417hx","tag_id":"cktvk78ej00051cwsaq360n1h","_id":"cktvk78f800191cwsamtfc8p5"},{"post_id":"cktvk78f5000z1cws4tse85yv","tag_id":"cktvk78ej00051cwsaq360n1h","_id":"cktvk78f9001c1cws10x85ehj"},{"post_id":"cktvk78f500111cws38vud8e2","tag_id":"cktvk78ej00051cwsaq360n1h","_id":"cktvk78fa001f1cwseczaf4qp"},{"post_id":"cktvk78f700151cws09fs3le7","tag_id":"cktvk78ej00051cwsaq360n1h","_id":"cktvk78fb001j1cws9p97fsiu"},{"post_id":"cktvk78f700181cws2usgf4h4","tag_id":"cktvk78ej00051cwsaq360n1h","_id":"cktvk78fc001m1cws73ukef1b"},{"post_id":"cktvk78f8001b1cwsdl0sbdoq","tag_id":"cktvk78ej00051cwsaq360n1h","_id":"cktvk78fd001q1cwsdzdegkiz"},{"post_id":"cktvk78f9001d1cws3t1fd05w","tag_id":"cktvk78ej00051cwsaq360n1h","_id":"cktvk78fd001t1cws9f857ld8"},{"post_id":"cktvk78fa001h1cws0vwj5w4b","tag_id":"cktvk78ej00051cwsaq360n1h","_id":"cktvk78fe001x1cws5eu3dkqj"},{"post_id":"cktvk78fb001k1cws6odo6tvi","tag_id":"cktvk78ej00051cwsaq360n1h","_id":"cktvk78ff00201cwsgvbsffzg"},{"post_id":"cktvk78fc001o1cwshjuc13ji","tag_id":"cktvk78ej00051cwsaq360n1h","_id":"cktvk78fg00241cws5tzh4js0"},{"post_id":"cktvk78fd001r1cwsc3ex2u57","tag_id":"cktvk78ej00051cwsaq360n1h","_id":"cktvk78fh00271cws6v2n12o3"},{"post_id":"cktvk78fe001v1cwshik529sz","tag_id":"cktvk78ej00051cwsaq360n1h","_id":"cktvk78fi002b1cws20gb04qe"},{"post_id":"cktvk78fe001y1cwsg0y71hgf","tag_id":"cktvk78ej00051cwsaq360n1h","_id":"cktvk78fj002e1cwsdrm23f4y"},{"post_id":"cktvk78ff00221cws98yj18yl","tag_id":"cktvk78ej00051cwsaq360n1h","_id":"cktvk78fl002i1cwsfouw6u7f"},{"post_id":"cktvk78fg00251cwsbljhfagt","tag_id":"cktvk78ej00051cwsaq360n1h","_id":"cktvk78fm002l1cws7l342b65"},{"post_id":"cktvk78fh00291cws4ccz4x0p","tag_id":"cktvk78ej00051cwsaq360n1h","_id":"cktvk78fn002p1cwsecpq9r7v"},{"post_id":"cktvk78fi002c1cws7pp4h3ao","tag_id":"cktvk78ej00051cwsaq360n1h","_id":"cktvk78fs002t1cws1ylx2sj7"},{"post_id":"cktvk78fj002g1cws8xn49jqi","tag_id":"cktvk78ej00051cwsaq360n1h","_id":"cktvk78fu002x1cws3ddu70uf"},{"post_id":"cktvk78fl002j1cwsex646lzx","tag_id":"cktvk78ej00051cwsaq360n1h","_id":"cktvk78fv00301cwsa8dr840v"},{"post_id":"cktvk78fr002q1cws6aj2h5ry","tag_id":"cktvk78ej00051cwsaq360n1h","_id":"cktvk78fw00351cws5551h7a7"},{"post_id":"cktvk78ft002v1cws5cbt09le","tag_id":"cktvk78ej00051cwsaq360n1h","_id":"cktvk78fw00381cws5h9mhimr"},{"post_id":"cktvk78fm002n1cws34j2ch1o","tag_id":"cktvk78ej00051cwsaq360n1h","_id":"cktvk78fx003c1cws13kh08im"},{"post_id":"cktvk78fm002n1cws34j2ch1o","tag_id":"cktvk78fs002s1cws1i3k7am0","_id":"cktvk78fy003g1cws8imjclet"},{"post_id":"cktvk78fx003a1cws3edwbz5d","tag_id":"cktvk78ej00051cwsaq360n1h","_id":"cktvk78fz003k1cwsfkvu6w8w"},{"post_id":"cktvk78fx003a1cws3edwbz5d","tag_id":"cktvk78fs002s1cws1i3k7am0","_id":"cktvk78g0003n1cws2cl72c2m"},{"post_id":"cktvk78fu002y1cws5et084xy","tag_id":"cktvk78ej00051cwsaq360n1h","_id":"cktvk78g0003q1cws1j8k4rn1"},{"post_id":"cktvk78fz003i1cws4h8vfsc9","tag_id":"cktvk78ej00051cwsaq360n1h","_id":"cktvk78g1003w1cwsawnx523a"},{"post_id":"cktvk78fv00321cwsd2e36f57","tag_id":"cktvk78ej00051cwsaq360n1h","_id":"cktvk78g100411cwsay0ne894"},{"post_id":"cktvk78fw00361cwsbmlo4t6x","tag_id":"cktvk78ej00051cwsaq360n1h","_id":"cktvk78g200461cwshvlzbrmj"},{"post_id":"cktvk78fw00361cwsbmlo4t6x","tag_id":"cktvk78fz003l1cws4e6cbtnf","_id":"cktvk78g200481cws3m83dfj1"},{"post_id":"cktvk78fx003d1cws0o0ncj5i","tag_id":"cktvk78ej00051cwsaq360n1h","_id":"cktvk78g2004b1cwsaqxa7ny5"},{"post_id":"cktvk78fx003d1cws0o0ncj5i","tag_id":"cktvk78g0003r1cwsgmip2fws","_id":"cktvk78g2004d1cws691lgrqf"},{"post_id":"cktvk78ee00011cwsfrei37op","tag_id":"cktvk78fz003l1cws4e6cbtnf","_id":"cku6xacpa0001kcwsf32acv2c"},{"post_id":"cku6xacp90000kcwscla9du0u","tag_id":"cktvk78ej00051cwsaq360n1h","_id":"cku6xacpi0003kcwseqr2dyle"},{"post_id":"cku6xacp90000kcwscla9du0u","tag_id":"cktvk78fz003l1cws4e6cbtnf","_id":"cku6xacpi0004kcwsadxgf9em"},{"post_id":"ckuva9uu30000tows8uola0yl","tag_id":"cktvk78ej00051cwsaq360n1h","_id":"ckuva9uuh0006tows0lnu9cqx"},{"post_id":"ckuva9uu30000tows8uola0yl","tag_id":"ckuva9uu80001tows8aqfhyq6","_id":"ckuva9uuh0007tows3hkjelau"},{"post_id":"ckuva9uuf0002tows0amrdyxa","tag_id":"cktvk78ej00051cwsaq360n1h","_id":"ckuva9uui0009tows78s84clo"},{"post_id":"ckuva9uuf0002tows0amrdyxa","tag_id":"ckuva9uuh0004towsavgaeja2","_id":"ckuva9uui000btows63pcctcq"},{"post_id":"ckv1v0mfi00001wwsfkvs2cfu","tag_id":"cktvk78ej00051cwsaq360n1h","_id":"ckv1v0mfn00011wws5x3meblh"},{"post_id":"ckv1w3ent0000vkws8lydd7ue","tag_id":"cktvk78ej00051cwsaq360n1h","_id":"ckv1w3enx0001vkwsf4fn1yoq"},{"post_id":"ckv9i7upc0000sowsfr3gc8vn","tag_id":"cktvk78ej00051cwsaq360n1h","_id":"ckv9i7upp0004sowsa4hu4qfd"},{"post_id":"ckv9i7upc0000sowsfr3gc8vn","tag_id":"ckv9i7upg0001sowsbxgofv1g","_id":"ckv9i7upp0005sowsb1e67hf7"},{"post_id":"ckv9lgpkx00006cws203i4mly","tag_id":"cktvk78ej00051cwsaq360n1h","_id":"ckv9lgpl100016cwshke8hnoq"},{"post_id":"ckv9lgpkx00006cws203i4mly","tag_id":"ckv9i7upg0001sowsbxgofv1g","_id":"ckv9lgpl100026cws8na65b4b"},{"post_id":"ckvent1x90000o8ws7d27c72w","tag_id":"cktvk78ej00051cwsaq360n1h","_id":"ckvent1xm0004o8ws0dmh3qda"},{"post_id":"ckvent1x90000o8ws7d27c72w","tag_id":"ckvent1xd0001o8ws9a9dem9w","_id":"ckvent1xn0005o8ws6dpkel9p"},{"post_id":"ckvi2pqsr0000x0ws08m7al7w","tag_id":"cktvk78ej00051cwsaq360n1h","_id":"ckvi2pqsv0001x0wsdk7o6yx9"},{"post_id":"ckvjmbi7t0000f8ws5mtz8t2p","tag_id":"cktvk78ej00051cwsaq360n1h","_id":"ckvjmbi7v0002f8ws4sql5c2m"},{"post_id":"ckvjmbi7t0000f8ws5mtz8t2p","tag_id":"cktvk78fs002s1cws1i3k7am0","_id":"ckvp3yys70002pkwsffloc24o"},{"post_id":"ckvjmbi7t0000f8ws5mtz8t2p","tag_id":"cktvk78g0003r1cwsgmip2fws","_id":"ckvp3yysa0004pkwsasrw0c7h"},{"post_id":"ckvi2pqsr0000x0ws08m7al7w","tag_id":"ckvp3yyrx0001pkws58m6fntr","_id":"ckvp3yysa0005pkwshjpwdm60"},{"post_id":"cktvk78fu002y1cws5et084xy","tag_id":"ckvp3yyrx0001pkws58m6fntr","_id":"ckvp3yysa0006pkws0aj6hk1r"},{"post_id":"cktvk78fz003i1cws4h8vfsc9","tag_id":"ckvp3yyrx0001pkws58m6fntr","_id":"ckvp3yysb0007pkws7ipbh1yk"},{"post_id":"cktvk78fv00321cwsd2e36f57","tag_id":"ckvp3yyrx0001pkws58m6fntr","_id":"ckvp3yysb0008pkws7ic3hzxa"},{"post_id":"ckvpawmyu0000hsws4ck06m3n","tag_id":"cktvk78ej00051cwsaq360n1h","_id":"ckvpawmz20001hswsd092114o"},{"post_id":"ckvpawmyu0000hsws4ck06m3n","tag_id":"cktvk78fs002s1cws1i3k7am0","_id":"ckvpawmz30002hsws464e4kjj"}],"Tag":[{"name":"Study","_id":"cktvk78ej00051cwsaq360n1h"},{"name":"栈","_id":"cktvk78fs002s1cws1i3k7am0"},{"name":"表","_id":"cktvk78fw00341cwscl5d8qno"},{"name":"排序","_id":"cktvk78fz003l1cws4e6cbtnf"},{"name":"队列","_id":"cktvk78g0003r1cwsgmip2fws"},{"name":"二分","_id":"ckuva9uu80001tows8aqfhyq6"},{"name":"高精度","_id":"ckuva9uuh0004towsavgaeja2"},{"name":"双指针","_id":"ckv9i7upg0001sowsbxgofv1g"},{"name":"离散化","_id":"ckvent1xd0001o8ws9a9dem9w"},{"name":"链表","_id":"ckvp3yyrx0001pkws58m6fntr"}]}}